
SCORPIONS1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007770  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08007880  08007880  00017880  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007910  08007910  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  08007910  08007910  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007910  08007910  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007910  08007910  00017910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007914  08007914  00017914  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08007918  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000984  20000088  080079a0  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a0c  080079a0  00020a0c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a5e2  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f11  00000000  00000000  0002a6d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bd0  00000000  00000000  0002c5e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000912  00000000  00000000  0002d1b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018393  00000000  00000000  0002daca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d8a2  00000000  00000000  00045e5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000889e6  00000000  00000000  000536ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003a1c  00000000  00000000  000dc0e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  000dfb04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000088 	.word	0x20000088
 800012c:	00000000 	.word	0x00000000
 8000130:	08007868 	.word	0x08007868

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000008c 	.word	0x2000008c
 800014c:	08007868 	.word	0x08007868

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2uiz>:
 8000a28:	004a      	lsls	r2, r1, #1
 8000a2a:	d211      	bcs.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d211      	bcs.n	8000a56 <__aeabi_d2uiz+0x2e>
 8000a32:	d50d      	bpl.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d40e      	bmi.n	8000a5c <__aeabi_d2uiz+0x34>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4e:	4770      	bx	lr
 8000a50:	f04f 0000 	mov.w	r0, #0
 8000a54:	4770      	bx	lr
 8000a56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_d2uiz+0x3a>
 8000a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0000 	mov.w	r0, #0
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2f>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a70:	bf24      	itt	cs
 8000a72:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a76:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a7a:	d90d      	bls.n	8000a98 <__aeabi_d2f+0x30>
 8000a7c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a80:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a84:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a88:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a8c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a90:	bf08      	it	eq
 8000a92:	f020 0001 	biceq.w	r0, r0, #1
 8000a96:	4770      	bx	lr
 8000a98:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a9c:	d121      	bne.n	8000ae2 <__aeabi_d2f+0x7a>
 8000a9e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aa2:	bfbc      	itt	lt
 8000aa4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aa8:	4770      	bxlt	lr
 8000aaa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab2:	f1c2 0218 	rsb	r2, r2, #24
 8000ab6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aba:	fa10 f30c 	lsls.w	r3, r0, ip
 8000abe:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac2:	bf18      	it	ne
 8000ac4:	f040 0001 	orrne.w	r0, r0, #1
 8000ac8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000acc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad4:	ea40 000c 	orr.w	r0, r0, ip
 8000ad8:	fa23 f302 	lsr.w	r3, r3, r2
 8000adc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae0:	e7cc      	b.n	8000a7c <__aeabi_d2f+0x14>
 8000ae2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ae6:	d107      	bne.n	8000af8 <__aeabi_d2f+0x90>
 8000ae8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aec:	bf1e      	ittt	ne
 8000aee:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000af2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000af6:	4770      	bxne	lr
 8000af8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000afc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_frsub>:
 8000b08:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b0c:	e002      	b.n	8000b14 <__addsf3>
 8000b0e:	bf00      	nop

08000b10 <__aeabi_fsub>:
 8000b10:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b14 <__addsf3>:
 8000b14:	0042      	lsls	r2, r0, #1
 8000b16:	bf1f      	itttt	ne
 8000b18:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b1c:	ea92 0f03 	teqne	r2, r3
 8000b20:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b24:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b28:	d06a      	beq.n	8000c00 <__addsf3+0xec>
 8000b2a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b2e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b32:	bfc1      	itttt	gt
 8000b34:	18d2      	addgt	r2, r2, r3
 8000b36:	4041      	eorgt	r1, r0
 8000b38:	4048      	eorgt	r0, r1
 8000b3a:	4041      	eorgt	r1, r0
 8000b3c:	bfb8      	it	lt
 8000b3e:	425b      	neglt	r3, r3
 8000b40:	2b19      	cmp	r3, #25
 8000b42:	bf88      	it	hi
 8000b44:	4770      	bxhi	lr
 8000b46:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b52:	bf18      	it	ne
 8000b54:	4240      	negne	r0, r0
 8000b56:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b5a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b5e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b62:	bf18      	it	ne
 8000b64:	4249      	negne	r1, r1
 8000b66:	ea92 0f03 	teq	r2, r3
 8000b6a:	d03f      	beq.n	8000bec <__addsf3+0xd8>
 8000b6c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b70:	fa41 fc03 	asr.w	ip, r1, r3
 8000b74:	eb10 000c 	adds.w	r0, r0, ip
 8000b78:	f1c3 0320 	rsb	r3, r3, #32
 8000b7c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b80:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b84:	d502      	bpl.n	8000b8c <__addsf3+0x78>
 8000b86:	4249      	negs	r1, r1
 8000b88:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b8c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b90:	d313      	bcc.n	8000bba <__addsf3+0xa6>
 8000b92:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b96:	d306      	bcc.n	8000ba6 <__addsf3+0x92>
 8000b98:	0840      	lsrs	r0, r0, #1
 8000b9a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b9e:	f102 0201 	add.w	r2, r2, #1
 8000ba2:	2afe      	cmp	r2, #254	; 0xfe
 8000ba4:	d251      	bcs.n	8000c4a <__addsf3+0x136>
 8000ba6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000baa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bae:	bf08      	it	eq
 8000bb0:	f020 0001 	biceq.w	r0, r0, #1
 8000bb4:	ea40 0003 	orr.w	r0, r0, r3
 8000bb8:	4770      	bx	lr
 8000bba:	0049      	lsls	r1, r1, #1
 8000bbc:	eb40 0000 	adc.w	r0, r0, r0
 8000bc0:	3a01      	subs	r2, #1
 8000bc2:	bf28      	it	cs
 8000bc4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bc8:	d2ed      	bcs.n	8000ba6 <__addsf3+0x92>
 8000bca:	fab0 fc80 	clz	ip, r0
 8000bce:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bd2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bd6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bda:	bfaa      	itet	ge
 8000bdc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000be0:	4252      	neglt	r2, r2
 8000be2:	4318      	orrge	r0, r3
 8000be4:	bfbc      	itt	lt
 8000be6:	40d0      	lsrlt	r0, r2
 8000be8:	4318      	orrlt	r0, r3
 8000bea:	4770      	bx	lr
 8000bec:	f092 0f00 	teq	r2, #0
 8000bf0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bf4:	bf06      	itte	eq
 8000bf6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bfa:	3201      	addeq	r2, #1
 8000bfc:	3b01      	subne	r3, #1
 8000bfe:	e7b5      	b.n	8000b6c <__addsf3+0x58>
 8000c00:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c04:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c08:	bf18      	it	ne
 8000c0a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c0e:	d021      	beq.n	8000c54 <__addsf3+0x140>
 8000c10:	ea92 0f03 	teq	r2, r3
 8000c14:	d004      	beq.n	8000c20 <__addsf3+0x10c>
 8000c16:	f092 0f00 	teq	r2, #0
 8000c1a:	bf08      	it	eq
 8000c1c:	4608      	moveq	r0, r1
 8000c1e:	4770      	bx	lr
 8000c20:	ea90 0f01 	teq	r0, r1
 8000c24:	bf1c      	itt	ne
 8000c26:	2000      	movne	r0, #0
 8000c28:	4770      	bxne	lr
 8000c2a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c2e:	d104      	bne.n	8000c3a <__addsf3+0x126>
 8000c30:	0040      	lsls	r0, r0, #1
 8000c32:	bf28      	it	cs
 8000c34:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c38:	4770      	bx	lr
 8000c3a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c3e:	bf3c      	itt	cc
 8000c40:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bxcc	lr
 8000c46:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c4a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c4e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c52:	4770      	bx	lr
 8000c54:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c58:	bf16      	itet	ne
 8000c5a:	4608      	movne	r0, r1
 8000c5c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c60:	4601      	movne	r1, r0
 8000c62:	0242      	lsls	r2, r0, #9
 8000c64:	bf06      	itte	eq
 8000c66:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c6a:	ea90 0f01 	teqeq	r0, r1
 8000c6e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c72:	4770      	bx	lr

08000c74 <__aeabi_ui2f>:
 8000c74:	f04f 0300 	mov.w	r3, #0
 8000c78:	e004      	b.n	8000c84 <__aeabi_i2f+0x8>
 8000c7a:	bf00      	nop

08000c7c <__aeabi_i2f>:
 8000c7c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c80:	bf48      	it	mi
 8000c82:	4240      	negmi	r0, r0
 8000c84:	ea5f 0c00 	movs.w	ip, r0
 8000c88:	bf08      	it	eq
 8000c8a:	4770      	bxeq	lr
 8000c8c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c90:	4601      	mov	r1, r0
 8000c92:	f04f 0000 	mov.w	r0, #0
 8000c96:	e01c      	b.n	8000cd2 <__aeabi_l2f+0x2a>

08000c98 <__aeabi_ul2f>:
 8000c98:	ea50 0201 	orrs.w	r2, r0, r1
 8000c9c:	bf08      	it	eq
 8000c9e:	4770      	bxeq	lr
 8000ca0:	f04f 0300 	mov.w	r3, #0
 8000ca4:	e00a      	b.n	8000cbc <__aeabi_l2f+0x14>
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_l2f>:
 8000ca8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cb4:	d502      	bpl.n	8000cbc <__aeabi_l2f+0x14>
 8000cb6:	4240      	negs	r0, r0
 8000cb8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cbc:	ea5f 0c01 	movs.w	ip, r1
 8000cc0:	bf02      	ittt	eq
 8000cc2:	4684      	moveq	ip, r0
 8000cc4:	4601      	moveq	r1, r0
 8000cc6:	2000      	moveq	r0, #0
 8000cc8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ccc:	bf08      	it	eq
 8000cce:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cd2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cd6:	fabc f28c 	clz	r2, ip
 8000cda:	3a08      	subs	r2, #8
 8000cdc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ce0:	db10      	blt.n	8000d04 <__aeabi_l2f+0x5c>
 8000ce2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ce6:	4463      	add	r3, ip
 8000ce8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cec:	f1c2 0220 	rsb	r2, r2, #32
 8000cf0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cf4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf8:	eb43 0002 	adc.w	r0, r3, r2
 8000cfc:	bf08      	it	eq
 8000cfe:	f020 0001 	biceq.w	r0, r0, #1
 8000d02:	4770      	bx	lr
 8000d04:	f102 0220 	add.w	r2, r2, #32
 8000d08:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d14:	fa21 f202 	lsr.w	r2, r1, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d22:	4770      	bx	lr

08000d24 <__aeabi_fmul>:
 8000d24:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d28:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d2c:	bf1e      	ittt	ne
 8000d2e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d32:	ea92 0f0c 	teqne	r2, ip
 8000d36:	ea93 0f0c 	teqne	r3, ip
 8000d3a:	d06f      	beq.n	8000e1c <__aeabi_fmul+0xf8>
 8000d3c:	441a      	add	r2, r3
 8000d3e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d42:	0240      	lsls	r0, r0, #9
 8000d44:	bf18      	it	ne
 8000d46:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d4a:	d01e      	beq.n	8000d8a <__aeabi_fmul+0x66>
 8000d4c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d50:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d54:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d58:	fba0 3101 	umull	r3, r1, r0, r1
 8000d5c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d60:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d64:	bf3e      	ittt	cc
 8000d66:	0049      	lslcc	r1, r1, #1
 8000d68:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d6c:	005b      	lslcc	r3, r3, #1
 8000d6e:	ea40 0001 	orr.w	r0, r0, r1
 8000d72:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d76:	2afd      	cmp	r2, #253	; 0xfd
 8000d78:	d81d      	bhi.n	8000db6 <__aeabi_fmul+0x92>
 8000d7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d7e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d82:	bf08      	it	eq
 8000d84:	f020 0001 	biceq.w	r0, r0, #1
 8000d88:	4770      	bx	lr
 8000d8a:	f090 0f00 	teq	r0, #0
 8000d8e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d92:	bf08      	it	eq
 8000d94:	0249      	lsleq	r1, r1, #9
 8000d96:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d9a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d9e:	3a7f      	subs	r2, #127	; 0x7f
 8000da0:	bfc2      	ittt	gt
 8000da2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000da6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000daa:	4770      	bxgt	lr
 8000dac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000db0:	f04f 0300 	mov.w	r3, #0
 8000db4:	3a01      	subs	r2, #1
 8000db6:	dc5d      	bgt.n	8000e74 <__aeabi_fmul+0x150>
 8000db8:	f112 0f19 	cmn.w	r2, #25
 8000dbc:	bfdc      	itt	le
 8000dbe:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dc2:	4770      	bxle	lr
 8000dc4:	f1c2 0200 	rsb	r2, r2, #0
 8000dc8:	0041      	lsls	r1, r0, #1
 8000dca:	fa21 f102 	lsr.w	r1, r1, r2
 8000dce:	f1c2 0220 	rsb	r2, r2, #32
 8000dd2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dd6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dda:	f140 0000 	adc.w	r0, r0, #0
 8000dde:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000de2:	bf08      	it	eq
 8000de4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000de8:	4770      	bx	lr
 8000dea:	f092 0f00 	teq	r2, #0
 8000dee:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000df2:	bf02      	ittt	eq
 8000df4:	0040      	lsleq	r0, r0, #1
 8000df6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dfa:	3a01      	subeq	r2, #1
 8000dfc:	d0f9      	beq.n	8000df2 <__aeabi_fmul+0xce>
 8000dfe:	ea40 000c 	orr.w	r0, r0, ip
 8000e02:	f093 0f00 	teq	r3, #0
 8000e06:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e0a:	bf02      	ittt	eq
 8000e0c:	0049      	lsleq	r1, r1, #1
 8000e0e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e12:	3b01      	subeq	r3, #1
 8000e14:	d0f9      	beq.n	8000e0a <__aeabi_fmul+0xe6>
 8000e16:	ea41 010c 	orr.w	r1, r1, ip
 8000e1a:	e78f      	b.n	8000d3c <__aeabi_fmul+0x18>
 8000e1c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e20:	ea92 0f0c 	teq	r2, ip
 8000e24:	bf18      	it	ne
 8000e26:	ea93 0f0c 	teqne	r3, ip
 8000e2a:	d00a      	beq.n	8000e42 <__aeabi_fmul+0x11e>
 8000e2c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e30:	bf18      	it	ne
 8000e32:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e36:	d1d8      	bne.n	8000dea <__aeabi_fmul+0xc6>
 8000e38:	ea80 0001 	eor.w	r0, r0, r1
 8000e3c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e40:	4770      	bx	lr
 8000e42:	f090 0f00 	teq	r0, #0
 8000e46:	bf17      	itett	ne
 8000e48:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e4c:	4608      	moveq	r0, r1
 8000e4e:	f091 0f00 	teqne	r1, #0
 8000e52:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e56:	d014      	beq.n	8000e82 <__aeabi_fmul+0x15e>
 8000e58:	ea92 0f0c 	teq	r2, ip
 8000e5c:	d101      	bne.n	8000e62 <__aeabi_fmul+0x13e>
 8000e5e:	0242      	lsls	r2, r0, #9
 8000e60:	d10f      	bne.n	8000e82 <__aeabi_fmul+0x15e>
 8000e62:	ea93 0f0c 	teq	r3, ip
 8000e66:	d103      	bne.n	8000e70 <__aeabi_fmul+0x14c>
 8000e68:	024b      	lsls	r3, r1, #9
 8000e6a:	bf18      	it	ne
 8000e6c:	4608      	movne	r0, r1
 8000e6e:	d108      	bne.n	8000e82 <__aeabi_fmul+0x15e>
 8000e70:	ea80 0001 	eor.w	r0, r0, r1
 8000e74:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e78:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e7c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e80:	4770      	bx	lr
 8000e82:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e86:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e8a:	4770      	bx	lr

08000e8c <__aeabi_fdiv>:
 8000e8c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e90:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e94:	bf1e      	ittt	ne
 8000e96:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e9a:	ea92 0f0c 	teqne	r2, ip
 8000e9e:	ea93 0f0c 	teqne	r3, ip
 8000ea2:	d069      	beq.n	8000f78 <__aeabi_fdiv+0xec>
 8000ea4:	eba2 0203 	sub.w	r2, r2, r3
 8000ea8:	ea80 0c01 	eor.w	ip, r0, r1
 8000eac:	0249      	lsls	r1, r1, #9
 8000eae:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000eb2:	d037      	beq.n	8000f24 <__aeabi_fdiv+0x98>
 8000eb4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000eb8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ebc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ec0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ec4:	428b      	cmp	r3, r1
 8000ec6:	bf38      	it	cc
 8000ec8:	005b      	lslcc	r3, r3, #1
 8000eca:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ece:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ed2:	428b      	cmp	r3, r1
 8000ed4:	bf24      	itt	cs
 8000ed6:	1a5b      	subcs	r3, r3, r1
 8000ed8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000edc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ee0:	bf24      	itt	cs
 8000ee2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ee6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eea:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eee:	bf24      	itt	cs
 8000ef0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ef4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ef8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000efc:	bf24      	itt	cs
 8000efe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f02:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f06:	011b      	lsls	r3, r3, #4
 8000f08:	bf18      	it	ne
 8000f0a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f0e:	d1e0      	bne.n	8000ed2 <__aeabi_fdiv+0x46>
 8000f10:	2afd      	cmp	r2, #253	; 0xfd
 8000f12:	f63f af50 	bhi.w	8000db6 <__aeabi_fmul+0x92>
 8000f16:	428b      	cmp	r3, r1
 8000f18:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f1c:	bf08      	it	eq
 8000f1e:	f020 0001 	biceq.w	r0, r0, #1
 8000f22:	4770      	bx	lr
 8000f24:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f28:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f2c:	327f      	adds	r2, #127	; 0x7f
 8000f2e:	bfc2      	ittt	gt
 8000f30:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f34:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f38:	4770      	bxgt	lr
 8000f3a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f3e:	f04f 0300 	mov.w	r3, #0
 8000f42:	3a01      	subs	r2, #1
 8000f44:	e737      	b.n	8000db6 <__aeabi_fmul+0x92>
 8000f46:	f092 0f00 	teq	r2, #0
 8000f4a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f4e:	bf02      	ittt	eq
 8000f50:	0040      	lsleq	r0, r0, #1
 8000f52:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f56:	3a01      	subeq	r2, #1
 8000f58:	d0f9      	beq.n	8000f4e <__aeabi_fdiv+0xc2>
 8000f5a:	ea40 000c 	orr.w	r0, r0, ip
 8000f5e:	f093 0f00 	teq	r3, #0
 8000f62:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f66:	bf02      	ittt	eq
 8000f68:	0049      	lsleq	r1, r1, #1
 8000f6a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f6e:	3b01      	subeq	r3, #1
 8000f70:	d0f9      	beq.n	8000f66 <__aeabi_fdiv+0xda>
 8000f72:	ea41 010c 	orr.w	r1, r1, ip
 8000f76:	e795      	b.n	8000ea4 <__aeabi_fdiv+0x18>
 8000f78:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f7c:	ea92 0f0c 	teq	r2, ip
 8000f80:	d108      	bne.n	8000f94 <__aeabi_fdiv+0x108>
 8000f82:	0242      	lsls	r2, r0, #9
 8000f84:	f47f af7d 	bne.w	8000e82 <__aeabi_fmul+0x15e>
 8000f88:	ea93 0f0c 	teq	r3, ip
 8000f8c:	f47f af70 	bne.w	8000e70 <__aeabi_fmul+0x14c>
 8000f90:	4608      	mov	r0, r1
 8000f92:	e776      	b.n	8000e82 <__aeabi_fmul+0x15e>
 8000f94:	ea93 0f0c 	teq	r3, ip
 8000f98:	d104      	bne.n	8000fa4 <__aeabi_fdiv+0x118>
 8000f9a:	024b      	lsls	r3, r1, #9
 8000f9c:	f43f af4c 	beq.w	8000e38 <__aeabi_fmul+0x114>
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	e76e      	b.n	8000e82 <__aeabi_fmul+0x15e>
 8000fa4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fa8:	bf18      	it	ne
 8000faa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fae:	d1ca      	bne.n	8000f46 <__aeabi_fdiv+0xba>
 8000fb0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fb4:	f47f af5c 	bne.w	8000e70 <__aeabi_fmul+0x14c>
 8000fb8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fbc:	f47f af3c 	bne.w	8000e38 <__aeabi_fmul+0x114>
 8000fc0:	e75f      	b.n	8000e82 <__aeabi_fmul+0x15e>
 8000fc2:	bf00      	nop

08000fc4 <__gesf2>:
 8000fc4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fc8:	e006      	b.n	8000fd8 <__cmpsf2+0x4>
 8000fca:	bf00      	nop

08000fcc <__lesf2>:
 8000fcc:	f04f 0c01 	mov.w	ip, #1
 8000fd0:	e002      	b.n	8000fd8 <__cmpsf2+0x4>
 8000fd2:	bf00      	nop

08000fd4 <__cmpsf2>:
 8000fd4:	f04f 0c01 	mov.w	ip, #1
 8000fd8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fdc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fe0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fe4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fe8:	bf18      	it	ne
 8000fea:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fee:	d011      	beq.n	8001014 <__cmpsf2+0x40>
 8000ff0:	b001      	add	sp, #4
 8000ff2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ff6:	bf18      	it	ne
 8000ff8:	ea90 0f01 	teqne	r0, r1
 8000ffc:	bf58      	it	pl
 8000ffe:	ebb2 0003 	subspl.w	r0, r2, r3
 8001002:	bf88      	it	hi
 8001004:	17c8      	asrhi	r0, r1, #31
 8001006:	bf38      	it	cc
 8001008:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800100c:	bf18      	it	ne
 800100e:	f040 0001 	orrne.w	r0, r0, #1
 8001012:	4770      	bx	lr
 8001014:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001018:	d102      	bne.n	8001020 <__cmpsf2+0x4c>
 800101a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800101e:	d105      	bne.n	800102c <__cmpsf2+0x58>
 8001020:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001024:	d1e4      	bne.n	8000ff0 <__cmpsf2+0x1c>
 8001026:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800102a:	d0e1      	beq.n	8000ff0 <__cmpsf2+0x1c>
 800102c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <__aeabi_cfrcmple>:
 8001034:	4684      	mov	ip, r0
 8001036:	4608      	mov	r0, r1
 8001038:	4661      	mov	r1, ip
 800103a:	e7ff      	b.n	800103c <__aeabi_cfcmpeq>

0800103c <__aeabi_cfcmpeq>:
 800103c:	b50f      	push	{r0, r1, r2, r3, lr}
 800103e:	f7ff ffc9 	bl	8000fd4 <__cmpsf2>
 8001042:	2800      	cmp	r0, #0
 8001044:	bf48      	it	mi
 8001046:	f110 0f00 	cmnmi.w	r0, #0
 800104a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800104c <__aeabi_fcmpeq>:
 800104c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001050:	f7ff fff4 	bl	800103c <__aeabi_cfcmpeq>
 8001054:	bf0c      	ite	eq
 8001056:	2001      	moveq	r0, #1
 8001058:	2000      	movne	r0, #0
 800105a:	f85d fb08 	ldr.w	pc, [sp], #8
 800105e:	bf00      	nop

08001060 <__aeabi_fcmplt>:
 8001060:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001064:	f7ff ffea 	bl	800103c <__aeabi_cfcmpeq>
 8001068:	bf34      	ite	cc
 800106a:	2001      	movcc	r0, #1
 800106c:	2000      	movcs	r0, #0
 800106e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001072:	bf00      	nop

08001074 <__aeabi_fcmple>:
 8001074:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001078:	f7ff ffe0 	bl	800103c <__aeabi_cfcmpeq>
 800107c:	bf94      	ite	ls
 800107e:	2001      	movls	r0, #1
 8001080:	2000      	movhi	r0, #0
 8001082:	f85d fb08 	ldr.w	pc, [sp], #8
 8001086:	bf00      	nop

08001088 <__aeabi_fcmpge>:
 8001088:	f84d ed08 	str.w	lr, [sp, #-8]!
 800108c:	f7ff ffd2 	bl	8001034 <__aeabi_cfrcmple>
 8001090:	bf94      	ite	ls
 8001092:	2001      	movls	r0, #1
 8001094:	2000      	movhi	r0, #0
 8001096:	f85d fb08 	ldr.w	pc, [sp], #8
 800109a:	bf00      	nop

0800109c <__aeabi_fcmpgt>:
 800109c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a0:	f7ff ffc8 	bl	8001034 <__aeabi_cfrcmple>
 80010a4:	bf34      	ite	cc
 80010a6:	2001      	movcc	r0, #1
 80010a8:	2000      	movcs	r0, #0
 80010aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ae:	bf00      	nop

080010b0 <__aeabi_fcmpun>:
 80010b0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010b4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010b8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010bc:	d102      	bne.n	80010c4 <__aeabi_fcmpun+0x14>
 80010be:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010c2:	d108      	bne.n	80010d6 <__aeabi_fcmpun+0x26>
 80010c4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010c8:	d102      	bne.n	80010d0 <__aeabi_fcmpun+0x20>
 80010ca:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010ce:	d102      	bne.n	80010d6 <__aeabi_fcmpun+0x26>
 80010d0:	f04f 0000 	mov.w	r0, #0
 80010d4:	4770      	bx	lr
 80010d6:	f04f 0001 	mov.w	r0, #1
 80010da:	4770      	bx	lr

080010dc <armInit>:

#include "arm.h"

arm arms[ARM_NUMBER];

void armInit(void) {
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < ARM_NUMBER; i ++) {
 80010e2:	2300      	movs	r3, #0
 80010e4:	71fb      	strb	r3, [r7, #7]
 80010e6:	e02e      	b.n	8001146 <armInit+0x6a>
		arms[i].gripperID = SERVO_UNDEFINED;
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	4a1b      	ldr	r2, [pc, #108]	; (8001158 <armInit+0x7c>)
 80010ec:	011b      	lsls	r3, r3, #4
 80010ee:	4413      	add	r3, r2
 80010f0:	220c      	movs	r2, #12
 80010f2:	701a      	strb	r2, [r3, #0]
		arms[i].wristID = SERVO_UNDEFINED;
 80010f4:	79fb      	ldrb	r3, [r7, #7]
 80010f6:	4a18      	ldr	r2, [pc, #96]	; (8001158 <armInit+0x7c>)
 80010f8:	011b      	lsls	r3, r3, #4
 80010fa:	4413      	add	r3, r2
 80010fc:	3301      	adds	r3, #1
 80010fe:	220c      	movs	r2, #12
 8001100:	701a      	strb	r2, [r3, #0]
		arms[i].elbowID = SERVO_UNDEFINED;
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	4a14      	ldr	r2, [pc, #80]	; (8001158 <armInit+0x7c>)
 8001106:	011b      	lsls	r3, r3, #4
 8001108:	4413      	add	r3, r2
 800110a:	3302      	adds	r3, #2
 800110c:	220c      	movs	r2, #12
 800110e:	701a      	strb	r2, [r3, #0]
		arms[i].distance = 0;
 8001110:	79fb      	ldrb	r3, [r7, #7]
 8001112:	4a11      	ldr	r2, [pc, #68]	; (8001158 <armInit+0x7c>)
 8001114:	011b      	lsls	r3, r3, #4
 8001116:	4413      	add	r3, r2
 8001118:	3304      	adds	r3, #4
 800111a:	f04f 0200 	mov.w	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
		arms[i].degree = 0;
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	4a0d      	ldr	r2, [pc, #52]	; (8001158 <armInit+0x7c>)
 8001124:	011b      	lsls	r3, r3, #4
 8001126:	4413      	add	r3, r2
 8001128:	3308      	adds	r3, #8
 800112a:	f04f 0200 	mov.w	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
		arms[i].location = 0;
 8001130:	79fb      	ldrb	r3, [r7, #7]
 8001132:	4a09      	ldr	r2, [pc, #36]	; (8001158 <armInit+0x7c>)
 8001134:	011b      	lsls	r3, r3, #4
 8001136:	4413      	add	r3, r2
 8001138:	330c      	adds	r3, #12
 800113a:	f04f 0200 	mov.w	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < ARM_NUMBER; i ++) {
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	3301      	adds	r3, #1
 8001144:	71fb      	strb	r3, [r7, #7]
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	2b03      	cmp	r3, #3
 800114a:	d9cd      	bls.n	80010e8 <armInit+0xc>
	}
}
 800114c:	bf00      	nop
 800114e:	bf00      	nop
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	bc80      	pop	{r7}
 8001156:	4770      	bx	lr
 8001158:	200000a4 	.word	0x200000a4

0800115c <armStart>:

uint8_t armStart(uint8_t gripperID, uint8_t wristID, uint8_t elbowID) {
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	71fb      	strb	r3, [r7, #7]
 8001166:	460b      	mov	r3, r1
 8001168:	71bb      	strb	r3, [r7, #6]
 800116a:	4613      	mov	r3, r2
 800116c:	717b      	strb	r3, [r7, #5]
	for (uint8_t i = 0; i < ARM_NUMBER; i ++) {
 800116e:	2300      	movs	r3, #0
 8001170:	73fb      	strb	r3, [r7, #15]
 8001172:	e046      	b.n	8001202 <armStart+0xa6>
		if (arms[i].gripperID != SERVO_UNDEFINED || arms[i].wristID != SERVO_UNDEFINED || arms[i].elbowID != SERVO_UNDEFINED) continue;
 8001174:	7bfb      	ldrb	r3, [r7, #15]
 8001176:	4a27      	ldr	r2, [pc, #156]	; (8001214 <armStart+0xb8>)
 8001178:	011b      	lsls	r3, r3, #4
 800117a:	4413      	add	r3, r2
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	2b0c      	cmp	r3, #12
 8001180:	d13b      	bne.n	80011fa <armStart+0x9e>
 8001182:	7bfb      	ldrb	r3, [r7, #15]
 8001184:	4a23      	ldr	r2, [pc, #140]	; (8001214 <armStart+0xb8>)
 8001186:	011b      	lsls	r3, r3, #4
 8001188:	4413      	add	r3, r2
 800118a:	3301      	adds	r3, #1
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	2b0c      	cmp	r3, #12
 8001190:	d133      	bne.n	80011fa <armStart+0x9e>
 8001192:	7bfb      	ldrb	r3, [r7, #15]
 8001194:	4a1f      	ldr	r2, [pc, #124]	; (8001214 <armStart+0xb8>)
 8001196:	011b      	lsls	r3, r3, #4
 8001198:	4413      	add	r3, r2
 800119a:	3302      	adds	r3, #2
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	2b0c      	cmp	r3, #12
 80011a0:	d12b      	bne.n	80011fa <armStart+0x9e>
		arms[i].gripperID = gripperID;
 80011a2:	7bfb      	ldrb	r3, [r7, #15]
 80011a4:	4a1b      	ldr	r2, [pc, #108]	; (8001214 <armStart+0xb8>)
 80011a6:	011b      	lsls	r3, r3, #4
 80011a8:	4413      	add	r3, r2
 80011aa:	79fa      	ldrb	r2, [r7, #7]
 80011ac:	701a      	strb	r2, [r3, #0]
		arms[i].wristID = wristID;
 80011ae:	7bfb      	ldrb	r3, [r7, #15]
 80011b0:	4a18      	ldr	r2, [pc, #96]	; (8001214 <armStart+0xb8>)
 80011b2:	011b      	lsls	r3, r3, #4
 80011b4:	4413      	add	r3, r2
 80011b6:	3301      	adds	r3, #1
 80011b8:	79ba      	ldrb	r2, [r7, #6]
 80011ba:	701a      	strb	r2, [r3, #0]
		arms[i].elbowID = elbowID;
 80011bc:	7bfb      	ldrb	r3, [r7, #15]
 80011be:	4a15      	ldr	r2, [pc, #84]	; (8001214 <armStart+0xb8>)
 80011c0:	011b      	lsls	r3, r3, #4
 80011c2:	4413      	add	r3, r2
 80011c4:	3302      	adds	r3, #2
 80011c6:	797a      	ldrb	r2, [r7, #5]
 80011c8:	701a      	strb	r2, [r3, #0]
		arms[i].distance = ARM_RELAX;
 80011ca:	7bfb      	ldrb	r3, [r7, #15]
 80011cc:	4a11      	ldr	r2, [pc, #68]	; (8001214 <armStart+0xb8>)
 80011ce:	011b      	lsls	r3, r3, #4
 80011d0:	4413      	add	r3, r2
 80011d2:	3304      	adds	r3, #4
 80011d4:	4a10      	ldr	r2, [pc, #64]	; (8001218 <armStart+0xbc>)
 80011d6:	601a      	str	r2, [r3, #0]
		arms[i].degree = ARM_NORTHWARD;
 80011d8:	7bfb      	ldrb	r3, [r7, #15]
 80011da:	4a0e      	ldr	r2, [pc, #56]	; (8001214 <armStart+0xb8>)
 80011dc:	011b      	lsls	r3, r3, #4
 80011de:	4413      	add	r3, r2
 80011e0:	3308      	adds	r3, #8
 80011e2:	4a0e      	ldr	r2, [pc, #56]	; (800121c <armStart+0xc0>)
 80011e4:	601a      	str	r2, [r3, #0]
		arms[i].location = ARM_BACKWARD;
 80011e6:	7bfb      	ldrb	r3, [r7, #15]
 80011e8:	4a0a      	ldr	r2, [pc, #40]	; (8001214 <armStart+0xb8>)
 80011ea:	011b      	lsls	r3, r3, #4
 80011ec:	4413      	add	r3, r2
 80011ee:	330c      	adds	r3, #12
 80011f0:	f04f 0200 	mov.w	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
		return i;
 80011f6:	7bfb      	ldrb	r3, [r7, #15]
 80011f8:	e007      	b.n	800120a <armStart+0xae>
		if (arms[i].gripperID != SERVO_UNDEFINED || arms[i].wristID != SERVO_UNDEFINED || arms[i].elbowID != SERVO_UNDEFINED) continue;
 80011fa:	bf00      	nop
	for (uint8_t i = 0; i < ARM_NUMBER; i ++) {
 80011fc:	7bfb      	ldrb	r3, [r7, #15]
 80011fe:	3301      	adds	r3, #1
 8001200:	73fb      	strb	r3, [r7, #15]
 8001202:	7bfb      	ldrb	r3, [r7, #15]
 8001204:	2b03      	cmp	r3, #3
 8001206:	d9b5      	bls.n	8001174 <armStart+0x18>
	}
	return ARM_UNDEFINED;
 8001208:	2304      	movs	r3, #4
}
 800120a:	4618      	mov	r0, r3
 800120c:	3714      	adds	r7, #20
 800120e:	46bd      	mov	sp, r7
 8001210:	bc80      	pop	{r7}
 8001212:	4770      	bx	lr
 8001214:	200000a4 	.word	0x200000a4
 8001218:	42aa0000 	.word	0x42aa0000
 800121c:	42b40000 	.word	0x42b40000

08001220 <armRun>:

void armRun(void *) {
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < ARM_NUMBER; i ++) {
 8001228:	2300      	movs	r3, #0
 800122a:	73fb      	strb	r3, [r7, #15]
 800122c:	e02e      	b.n	800128c <armRun+0x6c>
		if (arms[i].gripperID != SERVO_UNDEFINED) {
 800122e:	7bfb      	ldrb	r3, [r7, #15]
 8001230:	4a1a      	ldr	r2, [pc, #104]	; (800129c <armRun+0x7c>)
 8001232:	011b      	lsls	r3, r3, #4
 8001234:	4413      	add	r3, r2
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	2b0c      	cmp	r3, #12
 800123a:	d006      	beq.n	800124a <armRun+0x2a>
			armGrip(&arms[i]);
 800123c:	7bfb      	ldrb	r3, [r7, #15]
 800123e:	011b      	lsls	r3, r3, #4
 8001240:	4a16      	ldr	r2, [pc, #88]	; (800129c <armRun+0x7c>)
 8001242:	4413      	add	r3, r2
 8001244:	4618      	mov	r0, r3
 8001246:	f000 f82b 	bl	80012a0 <armGrip>
		}
		if (arms[i].wristID != SERVO_UNDEFINED) {
 800124a:	7bfb      	ldrb	r3, [r7, #15]
 800124c:	4a13      	ldr	r2, [pc, #76]	; (800129c <armRun+0x7c>)
 800124e:	011b      	lsls	r3, r3, #4
 8001250:	4413      	add	r3, r2
 8001252:	3301      	adds	r3, #1
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	2b0c      	cmp	r3, #12
 8001258:	d006      	beq.n	8001268 <armRun+0x48>
			armRotate(&arms[i]);
 800125a:	7bfb      	ldrb	r3, [r7, #15]
 800125c:	011b      	lsls	r3, r3, #4
 800125e:	4a0f      	ldr	r2, [pc, #60]	; (800129c <armRun+0x7c>)
 8001260:	4413      	add	r3, r2
 8001262:	4618      	mov	r0, r3
 8001264:	f000 f8c2 	bl	80013ec <armRotate>
		}
		if (arms[i].elbowID != SERVO_UNDEFINED) {
 8001268:	7bfb      	ldrb	r3, [r7, #15]
 800126a:	4a0c      	ldr	r2, [pc, #48]	; (800129c <armRun+0x7c>)
 800126c:	011b      	lsls	r3, r3, #4
 800126e:	4413      	add	r3, r2
 8001270:	3302      	adds	r3, #2
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	2b0c      	cmp	r3, #12
 8001276:	d006      	beq.n	8001286 <armRun+0x66>
			armMove(&arms[i]);
 8001278:	7bfb      	ldrb	r3, [r7, #15]
 800127a:	011b      	lsls	r3, r3, #4
 800127c:	4a07      	ldr	r2, [pc, #28]	; (800129c <armRun+0x7c>)
 800127e:	4413      	add	r3, r2
 8001280:	4618      	mov	r0, r3
 8001282:	f000 f8f1 	bl	8001468 <armMove>
	for (uint8_t i = 0; i < ARM_NUMBER; i ++) {
 8001286:	7bfb      	ldrb	r3, [r7, #15]
 8001288:	3301      	adds	r3, #1
 800128a:	73fb      	strb	r3, [r7, #15]
 800128c:	7bfb      	ldrb	r3, [r7, #15]
 800128e:	2b03      	cmp	r3, #3
 8001290:	d9cd      	bls.n	800122e <armRun+0xe>
		}
	}
}
 8001292:	bf00      	nop
 8001294:	bf00      	nop
 8001296:	3710      	adds	r7, #16
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	200000a4 	.word	0x200000a4

080012a0 <armGrip>:

void armGrip(void *armPointer) {
 80012a0:	b590      	push	{r4, r7, lr}
 80012a2:	b087      	sub	sp, #28
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
	arm *newArmPointer = (arm *)armPointer;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	613b      	str	r3, [r7, #16]
	if (newArmPointer->gripperID == SERVO_UNDEFINED) return;
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	2b0c      	cmp	r3, #12
 80012b2:	d07e      	beq.n	80013b2 <armGrip+0x112>
	float newDistance = newArmPointer->distance / 2.0 + GRIPPER_THICK;
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff f8ad 	bl	8000418 <__aeabi_f2d>
 80012be:	f04f 0200 	mov.w	r2, #0
 80012c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012c6:	f7ff fa29 	bl	800071c <__aeabi_ddiv>
 80012ca:	4602      	mov	r2, r0
 80012cc:	460b      	mov	r3, r1
 80012ce:	4610      	mov	r0, r2
 80012d0:	4619      	mov	r1, r3
 80012d2:	f04f 0200 	mov.w	r2, #0
 80012d6:	4b3c      	ldr	r3, [pc, #240]	; (80013c8 <armGrip+0x128>)
 80012d8:	f7fe ff40 	bl	800015c <__adddf3>
 80012dc:	4602      	mov	r2, r0
 80012de:	460b      	mov	r3, r1
 80012e0:	4610      	mov	r0, r2
 80012e2:	4619      	mov	r1, r3
 80012e4:	f7ff fbc0 	bl	8000a68 <__aeabi_d2f>
 80012e8:	4603      	mov	r3, r0
 80012ea:	617b      	str	r3, [r7, #20]
	if (newDistance < GRIPPER_MINIMUM) newDistance = GRIPPER_MINIMUM;
 80012ec:	4937      	ldr	r1, [pc, #220]	; (80013cc <armGrip+0x12c>)
 80012ee:	6978      	ldr	r0, [r7, #20]
 80012f0:	f7ff feb6 	bl	8001060 <__aeabi_fcmplt>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d002      	beq.n	8001300 <armGrip+0x60>
 80012fa:	4b34      	ldr	r3, [pc, #208]	; (80013cc <armGrip+0x12c>)
 80012fc:	617b      	str	r3, [r7, #20]
 80012fe:	e008      	b.n	8001312 <armGrip+0x72>
	else if (newDistance > GRIPPER_MAXIMUM) newDistance = GRIPPER_MAXIMUM;
 8001300:	4933      	ldr	r1, [pc, #204]	; (80013d0 <armGrip+0x130>)
 8001302:	6978      	ldr	r0, [r7, #20]
 8001304:	f7ff feca 	bl	800109c <__aeabi_fcmpgt>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <armGrip+0x72>
 800130e:	4b30      	ldr	r3, [pc, #192]	; (80013d0 <armGrip+0x130>)
 8001310:	617b      	str	r3, [r7, #20]
	float newTarget = 90 - acosf((powf(GRIPPER_CRANK, 2) + powf(newDistance, 2) - powf(GRIPPER_ROD, 2)) / (2 * GRIPPER_CRANK * newDistance)) / M_PI * 180.0;
 8001312:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001316:	6978      	ldr	r0, [r7, #20]
 8001318:	f004 fcde 	bl	8005cd8 <powf>
 800131c:	4603      	mov	r3, r0
 800131e:	492d      	ldr	r1, [pc, #180]	; (80013d4 <armGrip+0x134>)
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff fbf7 	bl	8000b14 <__addsf3>
 8001326:	4603      	mov	r3, r0
 8001328:	492b      	ldr	r1, [pc, #172]	; (80013d8 <armGrip+0x138>)
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff fbf0 	bl	8000b10 <__aeabi_fsub>
 8001330:	4603      	mov	r3, r0
 8001332:	461c      	mov	r4, r3
 8001334:	4929      	ldr	r1, [pc, #164]	; (80013dc <armGrip+0x13c>)
 8001336:	6978      	ldr	r0, [r7, #20]
 8001338:	f7ff fcf4 	bl	8000d24 <__aeabi_fmul>
 800133c:	4603      	mov	r3, r0
 800133e:	4619      	mov	r1, r3
 8001340:	4620      	mov	r0, r4
 8001342:	f7ff fda3 	bl	8000e8c <__aeabi_fdiv>
 8001346:	4603      	mov	r3, r0
 8001348:	4618      	mov	r0, r3
 800134a:	f004 fca5 	bl	8005c98 <acosf>
 800134e:	4603      	mov	r3, r0
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff f861 	bl	8000418 <__aeabi_f2d>
 8001356:	a31a      	add	r3, pc, #104	; (adr r3, 80013c0 <armGrip+0x120>)
 8001358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800135c:	f7ff f9de 	bl	800071c <__aeabi_ddiv>
 8001360:	4602      	mov	r2, r0
 8001362:	460b      	mov	r3, r1
 8001364:	4610      	mov	r0, r2
 8001366:	4619      	mov	r1, r3
 8001368:	f04f 0200 	mov.w	r2, #0
 800136c:	4b1c      	ldr	r3, [pc, #112]	; (80013e0 <armGrip+0x140>)
 800136e:	f7ff f8ab 	bl	80004c8 <__aeabi_dmul>
 8001372:	4602      	mov	r2, r0
 8001374:	460b      	mov	r3, r1
 8001376:	f04f 0000 	mov.w	r0, #0
 800137a:	491a      	ldr	r1, [pc, #104]	; (80013e4 <armGrip+0x144>)
 800137c:	f7fe feec 	bl	8000158 <__aeabi_dsub>
 8001380:	4602      	mov	r2, r0
 8001382:	460b      	mov	r3, r1
 8001384:	4610      	mov	r0, r2
 8001386:	4619      	mov	r1, r3
 8001388:	f7ff fb6e 	bl	8000a68 <__aeabi_d2f>
 800138c:	4603      	mov	r3, r0
 800138e:	60fb      	str	r3, [r7, #12]
	servos[newArmPointer->gripperID].target = newTarget;
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	4a14      	ldr	r2, [pc, #80]	; (80013e8 <armGrip+0x148>)
 8001396:	011b      	lsls	r3, r3, #4
 8001398:	4413      	add	r3, r2
 800139a:	330c      	adds	r3, #12
 800139c:	68fa      	ldr	r2, [r7, #12]
 800139e:	601a      	str	r2, [r3, #0]
	servoRotate(&servos[newArmPointer->gripperID]);
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	011b      	lsls	r3, r3, #4
 80013a6:	4a10      	ldr	r2, [pc, #64]	; (80013e8 <armGrip+0x148>)
 80013a8:	4413      	add	r3, r2
 80013aa:	4618      	mov	r0, r3
 80013ac:	f002 faf0 	bl	8003990 <servoRotate>
 80013b0:	e000      	b.n	80013b4 <armGrip+0x114>
	if (newArmPointer->gripperID == SERVO_UNDEFINED) return;
 80013b2:	bf00      	nop
}
 80013b4:	371c      	adds	r7, #28
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd90      	pop	{r4, r7, pc}
 80013ba:	bf00      	nop
 80013bc:	f3af 8000 	nop.w
 80013c0:	54442d18 	.word	0x54442d18
 80013c4:	400921fb 	.word	0x400921fb
 80013c8:	3ff80000 	.word	0x3ff80000
 80013cc:	41d00000 	.word	0x41d00000
 80013d0:	42300000 	.word	0x42300000
 80013d4:	43610000 	.word	0x43610000
 80013d8:	44610000 	.word	0x44610000
 80013dc:	41f00000 	.word	0x41f00000
 80013e0:	40668000 	.word	0x40668000
 80013e4:	40568000 	.word	0x40568000
 80013e8:	20000810 	.word	0x20000810

080013ec <armRotate>:

void armRotate(void *armPointer) {
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b086      	sub	sp, #24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
	arm *newArmPointer = (arm *)armPointer;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	613b      	str	r3, [r7, #16]
	if (newArmPointer->wristID == SERVO_UNDEFINED) return;
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	785b      	ldrb	r3, [r3, #1]
 80013fc:	2b0c      	cmp	r3, #12
 80013fe:	d02a      	beq.n	8001456 <armRotate+0x6a>
	float newDegree = newArmPointer->degree;
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	617b      	str	r3, [r7, #20]
	if (newDegree < WRIST_MINIMUM) newDegree = WRIST_MINIMUM;
 8001406:	f04f 0100 	mov.w	r1, #0
 800140a:	6978      	ldr	r0, [r7, #20]
 800140c:	f7ff fe28 	bl	8001060 <__aeabi_fcmplt>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d003      	beq.n	800141e <armRotate+0x32>
 8001416:	f04f 0300 	mov.w	r3, #0
 800141a:	617b      	str	r3, [r7, #20]
 800141c:	e008      	b.n	8001430 <armRotate+0x44>
	else if (newDegree > WRIST_MAXIMUM) newDegree = WRIST_MAXIMUM;
 800141e:	4910      	ldr	r1, [pc, #64]	; (8001460 <armRotate+0x74>)
 8001420:	6978      	ldr	r0, [r7, #20]
 8001422:	f7ff fe3b 	bl	800109c <__aeabi_fcmpgt>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <armRotate+0x44>
 800142c:	4b0c      	ldr	r3, [pc, #48]	; (8001460 <armRotate+0x74>)
 800142e:	617b      	str	r3, [r7, #20]
	float newTarget = newDegree;
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	60fb      	str	r3, [r7, #12]
	servos[newArmPointer->wristID].target = newTarget;
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	785b      	ldrb	r3, [r3, #1]
 8001438:	4a0a      	ldr	r2, [pc, #40]	; (8001464 <armRotate+0x78>)
 800143a:	011b      	lsls	r3, r3, #4
 800143c:	4413      	add	r3, r2
 800143e:	330c      	adds	r3, #12
 8001440:	68fa      	ldr	r2, [r7, #12]
 8001442:	601a      	str	r2, [r3, #0]
	servoRotate(&servos[newArmPointer->wristID]);
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	785b      	ldrb	r3, [r3, #1]
 8001448:	011b      	lsls	r3, r3, #4
 800144a:	4a06      	ldr	r2, [pc, #24]	; (8001464 <armRotate+0x78>)
 800144c:	4413      	add	r3, r2
 800144e:	4618      	mov	r0, r3
 8001450:	f002 fa9e 	bl	8003990 <servoRotate>
 8001454:	e000      	b.n	8001458 <armRotate+0x6c>
	if (newArmPointer->wristID == SERVO_UNDEFINED) return;
 8001456:	bf00      	nop
}
 8001458:	3718      	adds	r7, #24
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	43340000 	.word	0x43340000
 8001464:	20000810 	.word	0x20000810

08001468 <armMove>:

void armMove(void *armPointer) {
 8001468:	b5b0      	push	{r4, r5, r7, lr}
 800146a:	b086      	sub	sp, #24
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
	arm *newArmPointer = (arm *)armPointer;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	613b      	str	r3, [r7, #16]
	if (newArmPointer->elbowID == SERVO_UNDEFINED) return;
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	789b      	ldrb	r3, [r3, #2]
 8001478:	2b0c      	cmp	r3, #12
 800147a:	f000 809d 	beq.w	80015b8 <armMove+0x150>
	float newLocation = newArmPointer->location;
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	68db      	ldr	r3, [r3, #12]
 8001482:	617b      	str	r3, [r7, #20]
	if (newLocation < ELBOW_MINIMUM) newLocation = ELBOW_MINIMUM;
 8001484:	f04f 0100 	mov.w	r1, #0
 8001488:	6978      	ldr	r0, [r7, #20]
 800148a:	f7ff fde9 	bl	8001060 <__aeabi_fcmplt>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d003      	beq.n	800149c <armMove+0x34>
 8001494:	f04f 0300 	mov.w	r3, #0
 8001498:	617b      	str	r3, [r7, #20]
 800149a:	e008      	b.n	80014ae <armMove+0x46>
	else if (newLocation > ELBOW_MAXIMUM) newLocation = ELBOW_MAXIMUM;
 800149c:	494a      	ldr	r1, [pc, #296]	; (80015c8 <armMove+0x160>)
 800149e:	6978      	ldr	r0, [r7, #20]
 80014a0:	f7ff fdfc 	bl	800109c <__aeabi_fcmpgt>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <armMove+0x46>
 80014aa:	4b47      	ldr	r3, [pc, #284]	; (80015c8 <armMove+0x160>)
 80014ac:	617b      	str	r3, [r7, #20]
	float tempValue = (powf(ELBOW_CRANK, 2) - powf(ELBOW_ROD, 2) + powf(ELBOW_OFFSET, 2) + powf(newLocation, 2)) / (2 * ELBOW_CRANK);
 80014ae:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80014b2:	6978      	ldr	r0, [r7, #20]
 80014b4:	f004 fc10 	bl	8005cd8 <powf>
 80014b8:	4603      	mov	r3, r0
 80014ba:	4944      	ldr	r1, [pc, #272]	; (80015cc <armMove+0x164>)
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff fb29 	bl	8000b14 <__addsf3>
 80014c2:	4603      	mov	r3, r0
 80014c4:	4942      	ldr	r1, [pc, #264]	; (80015d0 <armMove+0x168>)
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff fce0 	bl	8000e8c <__aeabi_fdiv>
 80014cc:	4603      	mov	r3, r0
 80014ce:	60fb      	str	r3, [r7, #12]
	float newTarget = 180 - (2 * atanf((ELBOW_OFFSET + sqrtf(powf(ELBOW_OFFSET, 2) + powf(newLocation, 2) - pow(tempValue, 2))) / (newLocation + tempValue)) / M_PI * 180.0);
 80014d0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80014d4:	6978      	ldr	r0, [r7, #20]
 80014d6:	f004 fbff 	bl	8005cd8 <powf>
 80014da:	4603      	mov	r3, r0
 80014dc:	493d      	ldr	r1, [pc, #244]	; (80015d4 <armMove+0x16c>)
 80014de:	4618      	mov	r0, r3
 80014e0:	f7ff fb18 	bl	8000b14 <__addsf3>
 80014e4:	4603      	mov	r3, r0
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7fe ff96 	bl	8000418 <__aeabi_f2d>
 80014ec:	4604      	mov	r4, r0
 80014ee:	460d      	mov	r5, r1
 80014f0:	68f8      	ldr	r0, [r7, #12]
 80014f2:	f7fe ff91 	bl	8000418 <__aeabi_f2d>
 80014f6:	f04f 0200 	mov.w	r2, #0
 80014fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014fe:	f004 fb63 	bl	8005bc8 <pow>
 8001502:	4602      	mov	r2, r0
 8001504:	460b      	mov	r3, r1
 8001506:	4620      	mov	r0, r4
 8001508:	4629      	mov	r1, r5
 800150a:	f7fe fe25 	bl	8000158 <__aeabi_dsub>
 800150e:	4602      	mov	r2, r0
 8001510:	460b      	mov	r3, r1
 8001512:	4610      	mov	r0, r2
 8001514:	4619      	mov	r1, r3
 8001516:	f7ff faa7 	bl	8000a68 <__aeabi_d2f>
 800151a:	4603      	mov	r3, r0
 800151c:	4618      	mov	r0, r3
 800151e:	f004 fc28 	bl	8005d72 <sqrtf>
 8001522:	4603      	mov	r3, r0
 8001524:	492c      	ldr	r1, [pc, #176]	; (80015d8 <armMove+0x170>)
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff faf4 	bl	8000b14 <__addsf3>
 800152c:	4603      	mov	r3, r0
 800152e:	461c      	mov	r4, r3
 8001530:	68f9      	ldr	r1, [r7, #12]
 8001532:	6978      	ldr	r0, [r7, #20]
 8001534:	f7ff faee 	bl	8000b14 <__addsf3>
 8001538:	4603      	mov	r3, r0
 800153a:	4619      	mov	r1, r3
 800153c:	4620      	mov	r0, r4
 800153e:	f7ff fca5 	bl	8000e8c <__aeabi_fdiv>
 8001542:	4603      	mov	r3, r0
 8001544:	4618      	mov	r0, r3
 8001546:	f004 fc2f 	bl	8005da8 <atanf>
 800154a:	4603      	mov	r3, r0
 800154c:	4619      	mov	r1, r3
 800154e:	4618      	mov	r0, r3
 8001550:	f7ff fae0 	bl	8000b14 <__addsf3>
 8001554:	4603      	mov	r3, r0
 8001556:	4618      	mov	r0, r3
 8001558:	f7fe ff5e 	bl	8000418 <__aeabi_f2d>
 800155c:	a318      	add	r3, pc, #96	; (adr r3, 80015c0 <armMove+0x158>)
 800155e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001562:	f7ff f8db 	bl	800071c <__aeabi_ddiv>
 8001566:	4602      	mov	r2, r0
 8001568:	460b      	mov	r3, r1
 800156a:	4610      	mov	r0, r2
 800156c:	4619      	mov	r1, r3
 800156e:	f04f 0200 	mov.w	r2, #0
 8001572:	4b1a      	ldr	r3, [pc, #104]	; (80015dc <armMove+0x174>)
 8001574:	f7fe ffa8 	bl	80004c8 <__aeabi_dmul>
 8001578:	4602      	mov	r2, r0
 800157a:	460b      	mov	r3, r1
 800157c:	f04f 0000 	mov.w	r0, #0
 8001580:	4916      	ldr	r1, [pc, #88]	; (80015dc <armMove+0x174>)
 8001582:	f7fe fde9 	bl	8000158 <__aeabi_dsub>
 8001586:	4602      	mov	r2, r0
 8001588:	460b      	mov	r3, r1
 800158a:	4610      	mov	r0, r2
 800158c:	4619      	mov	r1, r3
 800158e:	f7ff fa6b 	bl	8000a68 <__aeabi_d2f>
 8001592:	4603      	mov	r3, r0
 8001594:	60bb      	str	r3, [r7, #8]
	servos[newArmPointer->elbowID].target = newTarget;
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	789b      	ldrb	r3, [r3, #2]
 800159a:	4a11      	ldr	r2, [pc, #68]	; (80015e0 <armMove+0x178>)
 800159c:	011b      	lsls	r3, r3, #4
 800159e:	4413      	add	r3, r2
 80015a0:	330c      	adds	r3, #12
 80015a2:	68ba      	ldr	r2, [r7, #8]
 80015a4:	601a      	str	r2, [r3, #0]
	servoRotate(&servos[newArmPointer->elbowID]);
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	789b      	ldrb	r3, [r3, #2]
 80015aa:	011b      	lsls	r3, r3, #4
 80015ac:	4a0c      	ldr	r2, [pc, #48]	; (80015e0 <armMove+0x178>)
 80015ae:	4413      	add	r3, r2
 80015b0:	4618      	mov	r0, r3
 80015b2:	f002 f9ed 	bl	8003990 <servoRotate>
 80015b6:	e000      	b.n	80015ba <armMove+0x152>
	if (newArmPointer->elbowID == SERVO_UNDEFINED) return;
 80015b8:	bf00      	nop
}
 80015ba:	3718      	adds	r7, #24
 80015bc:	46bd      	mov	sp, r7
 80015be:	bdb0      	pop	{r4, r5, r7, pc}
 80015c0:	54442d18 	.word	0x54442d18
 80015c4:	400921fb 	.word	0x400921fb
 80015c8:	41c80000 	.word	0x41c80000
 80015cc:	43610000 	.word	0x43610000
 80015d0:	41f00000 	.word	0x41f00000
 80015d4:	43c80000 	.word	0x43c80000
 80015d8:	41a00000 	.word	0x41a00000
 80015dc:	40668000 	.word	0x40668000
 80015e0:	20000810 	.word	0x20000810

080015e4 <armHold>:

void armHold(void *armPointer) {
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
	arm *newArmPointer = (arm *)armPointer;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	60fb      	str	r3, [r7, #12]
	newArmPointer->distance = ARM_HOLD;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	4a04      	ldr	r2, [pc, #16]	; (8001604 <armHold+0x20>)
 80015f4:	605a      	str	r2, [r3, #4]
	armGrip(newArmPointer);
 80015f6:	68f8      	ldr	r0, [r7, #12]
 80015f8:	f7ff fe52 	bl	80012a0 <armGrip>
}
 80015fc:	bf00      	nop
 80015fe:	3710      	adds	r7, #16
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	42600000 	.word	0x42600000

08001608 <armRelease>:

void armRelease(void *armPointer) {
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
	arm *newArmPointer = (arm *)armPointer;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	60fb      	str	r3, [r7, #12]
	newArmPointer->distance = ARM_RELEASE;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	4a04      	ldr	r2, [pc, #16]	; (8001628 <armRelease+0x20>)
 8001618:	605a      	str	r2, [r3, #4]
	armGrip(newArmPointer);
 800161a:	68f8      	ldr	r0, [r7, #12]
 800161c:	f7ff fe40 	bl	80012a0 <armGrip>
}
 8001620:	bf00      	nop
 8001622:	3710      	adds	r7, #16
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	42860000 	.word	0x42860000

0800162c <armWestward>:
	arm *newArmPointer = (arm *)armPointer;
	newArmPointer->distance = ARM_RELAX;
	armGrip(newArmPointer);
}

void armWestward(void *armPointer) {
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
	arm *newArmPointer = (arm *)armPointer;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	60fb      	str	r3, [r7, #12]
	newArmPointer->degree = ARM_WESTWARD;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	4a04      	ldr	r2, [pc, #16]	; (800164c <armWestward+0x20>)
 800163c:	609a      	str	r2, [r3, #8]
	armRotate(newArmPointer);
 800163e:	68f8      	ldr	r0, [r7, #12]
 8001640:	f7ff fed4 	bl	80013ec <armRotate>
}
 8001644:	bf00      	nop
 8001646:	3710      	adds	r7, #16
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	43340000 	.word	0x43340000

08001650 <armNorthward>:
	arm *newArmPointer = (arm *)armPointer;
	newArmPointer->degree = ARM_NORTHWEST;
	armRotate(newArmPointer);
}

void armNorthward(void *armPointer) {
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
	arm *newArmPointer = (arm *)armPointer;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	60fb      	str	r3, [r7, #12]
	newArmPointer->degree = ARM_NORTHWARD;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	4a04      	ldr	r2, [pc, #16]	; (8001670 <armNorthward+0x20>)
 8001660:	609a      	str	r2, [r3, #8]
	armRotate(newArmPointer);
 8001662:	68f8      	ldr	r0, [r7, #12]
 8001664:	f7ff fec2 	bl	80013ec <armRotate>
}
 8001668:	bf00      	nop
 800166a:	3710      	adds	r7, #16
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	42b40000 	.word	0x42b40000

08001674 <armEastward>:
	arm *newArmPointer = (arm *)armPointer;
	newArmPointer->degree = ARM_NORTHEAST;
	armRotate(newArmPointer);
}

void armEastward(void *armPointer) {
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
	arm *newArmPointer = (arm *)armPointer;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	60fb      	str	r3, [r7, #12]
	newArmPointer->degree = ARM_EASTWARD;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	f04f 0200 	mov.w	r2, #0
 8001686:	609a      	str	r2, [r3, #8]
	armRotate(newArmPointer);
 8001688:	68f8      	ldr	r0, [r7, #12]
 800168a:	f7ff feaf 	bl	80013ec <armRotate>
}
 800168e:	bf00      	nop
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <armForward>:

void armForward(void *armPointer) {
 8001696:	b580      	push	{r7, lr}
 8001698:	b084      	sub	sp, #16
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
	arm *newArmPointer = (arm *)armPointer;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	60fb      	str	r3, [r7, #12]
	newArmPointer->location = ARM_FORWARD;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 80016a8:	60da      	str	r2, [r3, #12]
	armMove(newArmPointer);
 80016aa:	68f8      	ldr	r0, [r7, #12]
 80016ac:	f7ff fedc 	bl	8001468 <armMove>
}
 80016b0:	bf00      	nop
 80016b2:	3710      	adds	r7, #16
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <armBackward>:

void armBackward(void *armPointer) {
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
	arm *newArmPointer = (arm *)armPointer;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	60fb      	str	r3, [r7, #12]
	newArmPointer->location = ARM_BACKWARD;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	f04f 0200 	mov.w	r2, #0
 80016ca:	60da      	str	r2, [r3, #12]
	armMove(newArmPointer);
 80016cc:	68f8      	ldr	r0, [r7, #12]
 80016ce:	f7ff fecb 	bl	8001468 <armMove>
}
 80016d2:	bf00      	nop
 80016d4:	3710      	adds	r7, #16
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <armFirstLayer>:

void armFirstLayer(void *armPointer) {
 80016da:	b580      	push	{r7, lr}
 80016dc:	b084      	sub	sp, #16
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
	arm *newArmPointer = (arm *)armPointer;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	60fb      	str	r3, [r7, #12]
	newArmPointer->location = ARM_FIRSTLAYER;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 80016ec:	60da      	str	r2, [r3, #12]
	armMove(newArmPointer);
 80016ee:	68f8      	ldr	r0, [r7, #12]
 80016f0:	f7ff feba 	bl	8001468 <armMove>
}
 80016f4:	bf00      	nop
 80016f6:	3710      	adds	r7, #16
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}

080016fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001700:	f002 fbc6 	bl	8003e90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001704:	f000 f85e 	bl	80017c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001708:	f000 fab2 	bl	8001c70 <MX_GPIO_Init>
  MX_TIM1_Init();
 800170c:	f000 f89a 	bl	8001844 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001710:	f000 f8e8 	bl	80018e4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001714:	f000 f97c 	bl	8001a10 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001718:	f000 fa12 	bl	8001b40 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 800171c:	4823      	ldr	r0, [pc, #140]	; (80017ac <main+0xb0>)
 800171e:	f003 fb0b 	bl	8004d38 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001722:	2100      	movs	r1, #0
 8001724:	4822      	ldr	r0, [pc, #136]	; (80017b0 <main+0xb4>)
 8001726:	f003 fbb1 	bl	8004e8c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800172a:	2104      	movs	r1, #4
 800172c:	4820      	ldr	r0, [pc, #128]	; (80017b0 <main+0xb4>)
 800172e:	f003 fbad 	bl	8004e8c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001732:	2108      	movs	r1, #8
 8001734:	481e      	ldr	r0, [pc, #120]	; (80017b0 <main+0xb4>)
 8001736:	f003 fba9 	bl	8004e8c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800173a:	210c      	movs	r1, #12
 800173c:	481c      	ldr	r0, [pc, #112]	; (80017b0 <main+0xb4>)
 800173e:	f003 fba5 	bl	8004e8c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001742:	2100      	movs	r1, #0
 8001744:	481b      	ldr	r0, [pc, #108]	; (80017b4 <main+0xb8>)
 8001746:	f003 fba1 	bl	8004e8c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800174a:	2104      	movs	r1, #4
 800174c:	4819      	ldr	r0, [pc, #100]	; (80017b4 <main+0xb8>)
 800174e:	f003 fb9d 	bl	8004e8c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001752:	2108      	movs	r1, #8
 8001754:	4817      	ldr	r0, [pc, #92]	; (80017b4 <main+0xb8>)
 8001756:	f003 fb99 	bl	8004e8c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800175a:	210c      	movs	r1, #12
 800175c:	4815      	ldr	r0, [pc, #84]	; (80017b4 <main+0xb8>)
 800175e:	f003 fb95 	bl	8004e8c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001762:	2100      	movs	r1, #0
 8001764:	4814      	ldr	r0, [pc, #80]	; (80017b8 <main+0xbc>)
 8001766:	f003 fb91 	bl	8004e8c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800176a:	2104      	movs	r1, #4
 800176c:	4812      	ldr	r0, [pc, #72]	; (80017b8 <main+0xbc>)
 800176e:	f003 fb8d 	bl	8004e8c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001772:	2108      	movs	r1, #8
 8001774:	4810      	ldr	r0, [pc, #64]	; (80017b8 <main+0xbc>)
 8001776:	f003 fb89 	bl	8004e8c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800177a:	210c      	movs	r1, #12
 800177c:	480e      	ldr	r0, [pc, #56]	; (80017b8 <main+0xbc>)
 800177e:	f003 fb85 	bl	8004e8c <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  schedulerInit();
 8001782:	f001 fa2b 	bl	8002bdc <schedulerInit>
  robotInit();
 8001786:	f000 faeb 	bl	8001d60 <robotInit>
  schedulerAddTask(robotBoot, NULL, 1000, 0);
 800178a:	2300      	movs	r3, #0
 800178c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001790:	2100      	movs	r1, #0
 8001792:	480a      	ldr	r0, [pc, #40]	; (80017bc <main+0xc0>)
 8001794:	f001 fac0 	bl	8002d18 <schedulerAddTask>
  schedulerAddTask(scorpionsScramble, NULL, 30000, 0);
 8001798:	2300      	movs	r3, #0
 800179a:	f247 5230 	movw	r2, #30000	; 0x7530
 800179e:	2100      	movs	r1, #0
 80017a0:	4807      	ldr	r0, [pc, #28]	; (80017c0 <main+0xc4>)
 80017a2:	f001 fab9 	bl	8002d18 <schedulerAddTask>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  schedulerDispatch();
 80017a6:	f001 fa99 	bl	8002cdc <schedulerDispatch>
 80017aa:	e7fc      	b.n	80017a6 <main+0xaa>
 80017ac:	200000e4 	.word	0x200000e4
 80017b0:	2000012c 	.word	0x2000012c
 80017b4:	20000174 	.word	0x20000174
 80017b8:	200001bc 	.word	0x200001bc
 80017bc:	08001ed9 	.word	0x08001ed9
 80017c0:	08003349 	.word	0x08003349

080017c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b090      	sub	sp, #64	; 0x40
 80017c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017ca:	f107 0318 	add.w	r3, r7, #24
 80017ce:	2228      	movs	r2, #40	; 0x28
 80017d0:	2100      	movs	r1, #0
 80017d2:	4618      	mov	r0, r3
 80017d4:	f004 f9c6 	bl	8005b64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017d8:	1d3b      	adds	r3, r7, #4
 80017da:	2200      	movs	r2, #0
 80017dc:	601a      	str	r2, [r3, #0]
 80017de:	605a      	str	r2, [r3, #4]
 80017e0:	609a      	str	r2, [r3, #8]
 80017e2:	60da      	str	r2, [r3, #12]
 80017e4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017e6:	2302      	movs	r3, #2
 80017e8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017ea:	2301      	movs	r3, #1
 80017ec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017ee:	2310      	movs	r3, #16
 80017f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017f2:	2302      	movs	r3, #2
 80017f4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80017f6:	2300      	movs	r3, #0
 80017f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80017fa:	2300      	movs	r3, #0
 80017fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017fe:	f107 0318 	add.w	r3, r7, #24
 8001802:	4618      	mov	r0, r3
 8001804:	f002 fe6a 	bl	80044dc <HAL_RCC_OscConfig>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 800180e:	f000 fa7f 	bl	8001d10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001812:	230f      	movs	r3, #15
 8001814:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001816:	2302      	movs	r3, #2
 8001818:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800181a:	2300      	movs	r3, #0
 800181c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800181e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001822:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001824:	2300      	movs	r3, #0
 8001826:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001828:	1d3b      	adds	r3, r7, #4
 800182a:	2100      	movs	r1, #0
 800182c:	4618      	mov	r0, r3
 800182e:	f003 f8d7 	bl	80049e0 <HAL_RCC_ClockConfig>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001838:	f000 fa6a 	bl	8001d10 <Error_Handler>
  }
}
 800183c:	bf00      	nop
 800183e:	3740      	adds	r7, #64	; 0x40
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}

08001844 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800184a:	f107 0308 	add.w	r3, r7, #8
 800184e:	2200      	movs	r2, #0
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	605a      	str	r2, [r3, #4]
 8001854:	609a      	str	r2, [r3, #8]
 8001856:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001858:	463b      	mov	r3, r7
 800185a:	2200      	movs	r2, #0
 800185c:	601a      	str	r2, [r3, #0]
 800185e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001860:	4b1e      	ldr	r3, [pc, #120]	; (80018dc <MX_TIM1_Init+0x98>)
 8001862:	4a1f      	ldr	r2, [pc, #124]	; (80018e0 <MX_TIM1_Init+0x9c>)
 8001864:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001866:	4b1d      	ldr	r3, [pc, #116]	; (80018dc <MX_TIM1_Init+0x98>)
 8001868:	2200      	movs	r2, #0
 800186a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800186c:	4b1b      	ldr	r3, [pc, #108]	; (80018dc <MX_TIM1_Init+0x98>)
 800186e:	2200      	movs	r2, #0
 8001870:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7999;
 8001872:	4b1a      	ldr	r3, [pc, #104]	; (80018dc <MX_TIM1_Init+0x98>)
 8001874:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001878:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800187a:	4b18      	ldr	r3, [pc, #96]	; (80018dc <MX_TIM1_Init+0x98>)
 800187c:	2200      	movs	r2, #0
 800187e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001880:	4b16      	ldr	r3, [pc, #88]	; (80018dc <MX_TIM1_Init+0x98>)
 8001882:	2200      	movs	r2, #0
 8001884:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001886:	4b15      	ldr	r3, [pc, #84]	; (80018dc <MX_TIM1_Init+0x98>)
 8001888:	2200      	movs	r2, #0
 800188a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800188c:	4813      	ldr	r0, [pc, #76]	; (80018dc <MX_TIM1_Init+0x98>)
 800188e:	f003 fa03 	bl	8004c98 <HAL_TIM_Base_Init>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001898:	f000 fa3a 	bl	8001d10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800189c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80018a2:	f107 0308 	add.w	r3, r7, #8
 80018a6:	4619      	mov	r1, r3
 80018a8:	480c      	ldr	r0, [pc, #48]	; (80018dc <MX_TIM1_Init+0x98>)
 80018aa:	f003 fd5b 	bl	8005364 <HAL_TIM_ConfigClockSource>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80018b4:	f000 fa2c 	bl	8001d10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018b8:	2300      	movs	r3, #0
 80018ba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018bc:	2300      	movs	r3, #0
 80018be:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018c0:	463b      	mov	r3, r7
 80018c2:	4619      	mov	r1, r3
 80018c4:	4805      	ldr	r0, [pc, #20]	; (80018dc <MX_TIM1_Init+0x98>)
 80018c6:	f004 f8dd 	bl	8005a84 <HAL_TIMEx_MasterConfigSynchronization>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80018d0:	f000 fa1e 	bl	8001d10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80018d4:	bf00      	nop
 80018d6:	3718      	adds	r7, #24
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	200000e4 	.word	0x200000e4
 80018e0:	40012c00 	.word	0x40012c00

080018e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b08e      	sub	sp, #56	; 0x38
 80018e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018ee:	2200      	movs	r2, #0
 80018f0:	601a      	str	r2, [r3, #0]
 80018f2:	605a      	str	r2, [r3, #4]
 80018f4:	609a      	str	r2, [r3, #8]
 80018f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018f8:	f107 0320 	add.w	r3, r7, #32
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001902:	1d3b      	adds	r3, r7, #4
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	609a      	str	r2, [r3, #8]
 800190c:	60da      	str	r2, [r3, #12]
 800190e:	611a      	str	r2, [r3, #16]
 8001910:	615a      	str	r2, [r3, #20]
 8001912:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001914:	4b3d      	ldr	r3, [pc, #244]	; (8001a0c <MX_TIM2_Init+0x128>)
 8001916:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800191a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3;
 800191c:	4b3b      	ldr	r3, [pc, #236]	; (8001a0c <MX_TIM2_Init+0x128>)
 800191e:	2203      	movs	r2, #3
 8001920:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001922:	4b3a      	ldr	r3, [pc, #232]	; (8001a0c <MX_TIM2_Init+0x128>)
 8001924:	2200      	movs	r2, #0
 8001926:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 39999;
 8001928:	4b38      	ldr	r3, [pc, #224]	; (8001a0c <MX_TIM2_Init+0x128>)
 800192a:	f649 423f 	movw	r2, #39999	; 0x9c3f
 800192e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001930:	4b36      	ldr	r3, [pc, #216]	; (8001a0c <MX_TIM2_Init+0x128>)
 8001932:	2200      	movs	r2, #0
 8001934:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001936:	4b35      	ldr	r3, [pc, #212]	; (8001a0c <MX_TIM2_Init+0x128>)
 8001938:	2200      	movs	r2, #0
 800193a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800193c:	4833      	ldr	r0, [pc, #204]	; (8001a0c <MX_TIM2_Init+0x128>)
 800193e:	f003 f9ab 	bl	8004c98 <HAL_TIM_Base_Init>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001948:	f000 f9e2 	bl	8001d10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800194c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001950:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001952:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001956:	4619      	mov	r1, r3
 8001958:	482c      	ldr	r0, [pc, #176]	; (8001a0c <MX_TIM2_Init+0x128>)
 800195a:	f003 fd03 	bl	8005364 <HAL_TIM_ConfigClockSource>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001964:	f000 f9d4 	bl	8001d10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001968:	4828      	ldr	r0, [pc, #160]	; (8001a0c <MX_TIM2_Init+0x128>)
 800196a:	f003 fa37 	bl	8004ddc <HAL_TIM_PWM_Init>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001974:	f000 f9cc 	bl	8001d10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001978:	2300      	movs	r3, #0
 800197a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800197c:	2300      	movs	r3, #0
 800197e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001980:	f107 0320 	add.w	r3, r7, #32
 8001984:	4619      	mov	r1, r3
 8001986:	4821      	ldr	r0, [pc, #132]	; (8001a0c <MX_TIM2_Init+0x128>)
 8001988:	f004 f87c 	bl	8005a84 <HAL_TIMEx_MasterConfigSynchronization>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001992:	f000 f9bd 	bl	8001d10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001996:	2360      	movs	r3, #96	; 0x60
 8001998:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800199a:	2300      	movs	r3, #0
 800199c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800199e:	2300      	movs	r3, #0
 80019a0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019a2:	2300      	movs	r3, #0
 80019a4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019a6:	1d3b      	adds	r3, r7, #4
 80019a8:	2200      	movs	r2, #0
 80019aa:	4619      	mov	r1, r3
 80019ac:	4817      	ldr	r0, [pc, #92]	; (8001a0c <MX_TIM2_Init+0x128>)
 80019ae:	f003 fc17 	bl	80051e0 <HAL_TIM_PWM_ConfigChannel>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80019b8:	f000 f9aa 	bl	8001d10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019bc:	1d3b      	adds	r3, r7, #4
 80019be:	2204      	movs	r2, #4
 80019c0:	4619      	mov	r1, r3
 80019c2:	4812      	ldr	r0, [pc, #72]	; (8001a0c <MX_TIM2_Init+0x128>)
 80019c4:	f003 fc0c 	bl	80051e0 <HAL_TIM_PWM_ConfigChannel>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80019ce:	f000 f99f 	bl	8001d10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80019d2:	1d3b      	adds	r3, r7, #4
 80019d4:	2208      	movs	r2, #8
 80019d6:	4619      	mov	r1, r3
 80019d8:	480c      	ldr	r0, [pc, #48]	; (8001a0c <MX_TIM2_Init+0x128>)
 80019da:	f003 fc01 	bl	80051e0 <HAL_TIM_PWM_ConfigChannel>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 80019e4:	f000 f994 	bl	8001d10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80019e8:	1d3b      	adds	r3, r7, #4
 80019ea:	220c      	movs	r2, #12
 80019ec:	4619      	mov	r1, r3
 80019ee:	4807      	ldr	r0, [pc, #28]	; (8001a0c <MX_TIM2_Init+0x128>)
 80019f0:	f003 fbf6 	bl	80051e0 <HAL_TIM_PWM_ConfigChannel>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 80019fa:	f000 f989 	bl	8001d10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80019fe:	4803      	ldr	r0, [pc, #12]	; (8001a0c <MX_TIM2_Init+0x128>)
 8001a00:	f002 f920 	bl	8003c44 <HAL_TIM_MspPostInit>

}
 8001a04:	bf00      	nop
 8001a06:	3738      	adds	r7, #56	; 0x38
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	2000012c 	.word	0x2000012c

08001a10 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b08e      	sub	sp, #56	; 0x38
 8001a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	601a      	str	r2, [r3, #0]
 8001a1e:	605a      	str	r2, [r3, #4]
 8001a20:	609a      	str	r2, [r3, #8]
 8001a22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a24:	f107 0320 	add.w	r3, r7, #32
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a2e:	1d3b      	adds	r3, r7, #4
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	605a      	str	r2, [r3, #4]
 8001a36:	609a      	str	r2, [r3, #8]
 8001a38:	60da      	str	r2, [r3, #12]
 8001a3a:	611a      	str	r2, [r3, #16]
 8001a3c:	615a      	str	r2, [r3, #20]
 8001a3e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a40:	4b3d      	ldr	r3, [pc, #244]	; (8001b38 <MX_TIM3_Init+0x128>)
 8001a42:	4a3e      	ldr	r2, [pc, #248]	; (8001b3c <MX_TIM3_Init+0x12c>)
 8001a44:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3;
 8001a46:	4b3c      	ldr	r3, [pc, #240]	; (8001b38 <MX_TIM3_Init+0x128>)
 8001a48:	2203      	movs	r2, #3
 8001a4a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a4c:	4b3a      	ldr	r3, [pc, #232]	; (8001b38 <MX_TIM3_Init+0x128>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 39999;
 8001a52:	4b39      	ldr	r3, [pc, #228]	; (8001b38 <MX_TIM3_Init+0x128>)
 8001a54:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8001a58:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a5a:	4b37      	ldr	r3, [pc, #220]	; (8001b38 <MX_TIM3_Init+0x128>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a60:	4b35      	ldr	r3, [pc, #212]	; (8001b38 <MX_TIM3_Init+0x128>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a66:	4834      	ldr	r0, [pc, #208]	; (8001b38 <MX_TIM3_Init+0x128>)
 8001a68:	f003 f916 	bl	8004c98 <HAL_TIM_Base_Init>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001a72:	f000 f94d 	bl	8001d10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a7a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a7c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a80:	4619      	mov	r1, r3
 8001a82:	482d      	ldr	r0, [pc, #180]	; (8001b38 <MX_TIM3_Init+0x128>)
 8001a84:	f003 fc6e 	bl	8005364 <HAL_TIM_ConfigClockSource>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001a8e:	f000 f93f 	bl	8001d10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001a92:	4829      	ldr	r0, [pc, #164]	; (8001b38 <MX_TIM3_Init+0x128>)
 8001a94:	f003 f9a2 	bl	8004ddc <HAL_TIM_PWM_Init>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001a9e:	f000 f937 	bl	8001d10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001aaa:	f107 0320 	add.w	r3, r7, #32
 8001aae:	4619      	mov	r1, r3
 8001ab0:	4821      	ldr	r0, [pc, #132]	; (8001b38 <MX_TIM3_Init+0x128>)
 8001ab2:	f003 ffe7 	bl	8005a84 <HAL_TIMEx_MasterConfigSynchronization>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001abc:	f000 f928 	bl	8001d10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ac0:	2360      	movs	r3, #96	; 0x60
 8001ac2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001acc:	2300      	movs	r3, #0
 8001ace:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ad0:	1d3b      	adds	r3, r7, #4
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4818      	ldr	r0, [pc, #96]	; (8001b38 <MX_TIM3_Init+0x128>)
 8001ad8:	f003 fb82 	bl	80051e0 <HAL_TIM_PWM_ConfigChannel>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001ae2:	f000 f915 	bl	8001d10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ae6:	1d3b      	adds	r3, r7, #4
 8001ae8:	2204      	movs	r2, #4
 8001aea:	4619      	mov	r1, r3
 8001aec:	4812      	ldr	r0, [pc, #72]	; (8001b38 <MX_TIM3_Init+0x128>)
 8001aee:	f003 fb77 	bl	80051e0 <HAL_TIM_PWM_ConfigChannel>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001af8:	f000 f90a 	bl	8001d10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001afc:	1d3b      	adds	r3, r7, #4
 8001afe:	2208      	movs	r2, #8
 8001b00:	4619      	mov	r1, r3
 8001b02:	480d      	ldr	r0, [pc, #52]	; (8001b38 <MX_TIM3_Init+0x128>)
 8001b04:	f003 fb6c 	bl	80051e0 <HAL_TIM_PWM_ConfigChannel>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8001b0e:	f000 f8ff 	bl	8001d10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001b12:	1d3b      	adds	r3, r7, #4
 8001b14:	220c      	movs	r2, #12
 8001b16:	4619      	mov	r1, r3
 8001b18:	4807      	ldr	r0, [pc, #28]	; (8001b38 <MX_TIM3_Init+0x128>)
 8001b1a:	f003 fb61 	bl	80051e0 <HAL_TIM_PWM_ConfigChannel>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8001b24:	f000 f8f4 	bl	8001d10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001b28:	4803      	ldr	r0, [pc, #12]	; (8001b38 <MX_TIM3_Init+0x128>)
 8001b2a:	f002 f88b 	bl	8003c44 <HAL_TIM_MspPostInit>

}
 8001b2e:	bf00      	nop
 8001b30:	3738      	adds	r7, #56	; 0x38
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	20000174 	.word	0x20000174
 8001b3c:	40000400 	.word	0x40000400

08001b40 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b08e      	sub	sp, #56	; 0x38
 8001b44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	601a      	str	r2, [r3, #0]
 8001b4e:	605a      	str	r2, [r3, #4]
 8001b50:	609a      	str	r2, [r3, #8]
 8001b52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b54:	f107 0320 	add.w	r3, r7, #32
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b5e:	1d3b      	adds	r3, r7, #4
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	605a      	str	r2, [r3, #4]
 8001b66:	609a      	str	r2, [r3, #8]
 8001b68:	60da      	str	r2, [r3, #12]
 8001b6a:	611a      	str	r2, [r3, #16]
 8001b6c:	615a      	str	r2, [r3, #20]
 8001b6e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001b70:	4b3d      	ldr	r3, [pc, #244]	; (8001c68 <MX_TIM4_Init+0x128>)
 8001b72:	4a3e      	ldr	r2, [pc, #248]	; (8001c6c <MX_TIM4_Init+0x12c>)
 8001b74:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 3;
 8001b76:	4b3c      	ldr	r3, [pc, #240]	; (8001c68 <MX_TIM4_Init+0x128>)
 8001b78:	2203      	movs	r2, #3
 8001b7a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b7c:	4b3a      	ldr	r3, [pc, #232]	; (8001c68 <MX_TIM4_Init+0x128>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 39999;
 8001b82:	4b39      	ldr	r3, [pc, #228]	; (8001c68 <MX_TIM4_Init+0x128>)
 8001b84:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8001b88:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b8a:	4b37      	ldr	r3, [pc, #220]	; (8001c68 <MX_TIM4_Init+0x128>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b90:	4b35      	ldr	r3, [pc, #212]	; (8001c68 <MX_TIM4_Init+0x128>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001b96:	4834      	ldr	r0, [pc, #208]	; (8001c68 <MX_TIM4_Init+0x128>)
 8001b98:	f003 f87e 	bl	8004c98 <HAL_TIM_Base_Init>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001ba2:	f000 f8b5 	bl	8001d10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ba6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001baa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001bac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	482d      	ldr	r0, [pc, #180]	; (8001c68 <MX_TIM4_Init+0x128>)
 8001bb4:	f003 fbd6 	bl	8005364 <HAL_TIM_ConfigClockSource>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001bbe:	f000 f8a7 	bl	8001d10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001bc2:	4829      	ldr	r0, [pc, #164]	; (8001c68 <MX_TIM4_Init+0x128>)
 8001bc4:	f003 f90a 	bl	8004ddc <HAL_TIM_PWM_Init>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001bce:	f000 f89f 	bl	8001d10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001bda:	f107 0320 	add.w	r3, r7, #32
 8001bde:	4619      	mov	r1, r3
 8001be0:	4821      	ldr	r0, [pc, #132]	; (8001c68 <MX_TIM4_Init+0x128>)
 8001be2:	f003 ff4f 	bl	8005a84 <HAL_TIMEx_MasterConfigSynchronization>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001bec:	f000 f890 	bl	8001d10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bf0:	2360      	movs	r3, #96	; 0x60
 8001bf2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c00:	1d3b      	adds	r3, r7, #4
 8001c02:	2200      	movs	r2, #0
 8001c04:	4619      	mov	r1, r3
 8001c06:	4818      	ldr	r0, [pc, #96]	; (8001c68 <MX_TIM4_Init+0x128>)
 8001c08:	f003 faea 	bl	80051e0 <HAL_TIM_PWM_ConfigChannel>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001c12:	f000 f87d 	bl	8001d10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c16:	1d3b      	adds	r3, r7, #4
 8001c18:	2204      	movs	r2, #4
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	4812      	ldr	r0, [pc, #72]	; (8001c68 <MX_TIM4_Init+0x128>)
 8001c1e:	f003 fadf 	bl	80051e0 <HAL_TIM_PWM_ConfigChannel>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8001c28:	f000 f872 	bl	8001d10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c2c:	1d3b      	adds	r3, r7, #4
 8001c2e:	2208      	movs	r2, #8
 8001c30:	4619      	mov	r1, r3
 8001c32:	480d      	ldr	r0, [pc, #52]	; (8001c68 <MX_TIM4_Init+0x128>)
 8001c34:	f003 fad4 	bl	80051e0 <HAL_TIM_PWM_ConfigChannel>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8001c3e:	f000 f867 	bl	8001d10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001c42:	1d3b      	adds	r3, r7, #4
 8001c44:	220c      	movs	r2, #12
 8001c46:	4619      	mov	r1, r3
 8001c48:	4807      	ldr	r0, [pc, #28]	; (8001c68 <MX_TIM4_Init+0x128>)
 8001c4a:	f003 fac9 	bl	80051e0 <HAL_TIM_PWM_ConfigChannel>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8001c54:	f000 f85c 	bl	8001d10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001c58:	4803      	ldr	r0, [pc, #12]	; (8001c68 <MX_TIM4_Init+0x128>)
 8001c5a:	f001 fff3 	bl	8003c44 <HAL_TIM_MspPostInit>

}
 8001c5e:	bf00      	nop
 8001c60:	3738      	adds	r7, #56	; 0x38
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	200001bc 	.word	0x200001bc
 8001c6c:	40000800 	.word	0x40000800

08001c70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b086      	sub	sp, #24
 8001c74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c76:	f107 0308 	add.w	r3, r7, #8
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	601a      	str	r2, [r3, #0]
 8001c7e:	605a      	str	r2, [r3, #4]
 8001c80:	609a      	str	r2, [r3, #8]
 8001c82:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c84:	4b17      	ldr	r3, [pc, #92]	; (8001ce4 <MX_GPIO_Init+0x74>)
 8001c86:	699b      	ldr	r3, [r3, #24]
 8001c88:	4a16      	ldr	r2, [pc, #88]	; (8001ce4 <MX_GPIO_Init+0x74>)
 8001c8a:	f043 0304 	orr.w	r3, r3, #4
 8001c8e:	6193      	str	r3, [r2, #24]
 8001c90:	4b14      	ldr	r3, [pc, #80]	; (8001ce4 <MX_GPIO_Init+0x74>)
 8001c92:	699b      	ldr	r3, [r3, #24]
 8001c94:	f003 0304 	and.w	r3, r3, #4
 8001c98:	607b      	str	r3, [r7, #4]
 8001c9a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c9c:	4b11      	ldr	r3, [pc, #68]	; (8001ce4 <MX_GPIO_Init+0x74>)
 8001c9e:	699b      	ldr	r3, [r3, #24]
 8001ca0:	4a10      	ldr	r2, [pc, #64]	; (8001ce4 <MX_GPIO_Init+0x74>)
 8001ca2:	f043 0308 	orr.w	r3, r3, #8
 8001ca6:	6193      	str	r3, [r2, #24]
 8001ca8:	4b0e      	ldr	r3, [pc, #56]	; (8001ce4 <MX_GPIO_Init+0x74>)
 8001caa:	699b      	ldr	r3, [r3, #24]
 8001cac:	f003 0308 	and.w	r3, r3, #8
 8001cb0:	603b      	str	r3, [r7, #0]
 8001cb2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SCHEDULER_LED_GPIO_Port, SCHEDULER_LED_Pin, GPIO_PIN_RESET);
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	2120      	movs	r1, #32
 8001cb8:	480b      	ldr	r0, [pc, #44]	; (8001ce8 <MX_GPIO_Init+0x78>)
 8001cba:	f002 fbdd 	bl	8004478 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SCHEDULER_LED_Pin */
  GPIO_InitStruct.Pin = SCHEDULER_LED_Pin;
 8001cbe:	2320      	movs	r3, #32
 8001cc0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cca:	2302      	movs	r3, #2
 8001ccc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SCHEDULER_LED_GPIO_Port, &GPIO_InitStruct);
 8001cce:	f107 0308 	add.w	r3, r7, #8
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	4804      	ldr	r0, [pc, #16]	; (8001ce8 <MX_GPIO_Init+0x78>)
 8001cd6:	f002 fa4b 	bl	8004170 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001cda:	bf00      	nop
 8001cdc:	3718      	adds	r7, #24
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	40021000 	.word	0x40021000
 8001ce8:	40010800 	.word	0x40010800

08001cec <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a04      	ldr	r2, [pc, #16]	; (8001d0c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d101      	bne.n	8001d02 <HAL_TIM_PeriodElapsedCallback+0x16>
		schedulerUpdate();
 8001cfe:	f000 ffc7 	bl	8002c90 <schedulerUpdate>
	}
}
 8001d02:	bf00      	nop
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	40012c00 	.word	0x40012c00

08001d10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d14:	b672      	cpsid	i
}
 8001d16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d18:	e7fe      	b.n	8001d18 <Error_Handler+0x8>
	...

08001d1c <robotFree>:

static robotState state;
static robotTurningArm turningArm;
static robotFlippingArm flippingArm;

void robotFree(void *) {
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
	state = FREE;
 8001d24:	4b0b      	ldr	r3, [pc, #44]	; (8001d54 <robotFree+0x38>)
 8001d26:	2201      	movs	r2, #1
 8001d28:	701a      	strb	r2, [r3, #0]
	turningArm.armID = ARM_UNDEFINED;
 8001d2a:	4b0b      	ldr	r3, [pc, #44]	; (8001d58 <robotFree+0x3c>)
 8001d2c:	2204      	movs	r2, #4
 8001d2e:	701a      	strb	r2, [r3, #0]
	flippingArm.firstArmID = ARM_UNDEFINED;
 8001d30:	4b0a      	ldr	r3, [pc, #40]	; (8001d5c <robotFree+0x40>)
 8001d32:	2204      	movs	r2, #4
 8001d34:	701a      	strb	r2, [r3, #0]
	flippingArm.secondArmID = ARM_UNDEFINED;
 8001d36:	4b09      	ldr	r3, [pc, #36]	; (8001d5c <robotFree+0x40>)
 8001d38:	2204      	movs	r2, #4
 8001d3a:	705a      	strb	r2, [r3, #1]
	flippingArm.thirdArmID = ARM_UNDEFINED;
 8001d3c:	4b07      	ldr	r3, [pc, #28]	; (8001d5c <robotFree+0x40>)
 8001d3e:	2204      	movs	r2, #4
 8001d40:	709a      	strb	r2, [r3, #2]
	flippingArm.fourthArmID = ARM_UNDEFINED;
 8001d42:	4b06      	ldr	r3, [pc, #24]	; (8001d5c <robotFree+0x40>)
 8001d44:	2204      	movs	r2, #4
 8001d46:	70da      	strb	r2, [r3, #3]
}
 8001d48:	bf00      	nop
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bc80      	pop	{r7}
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	20000204 	.word	0x20000204
 8001d58:	20000208 	.word	0x20000208
 8001d5c:	2000020c 	.word	0x2000020c

08001d60 <robotInit>:

void robotInit(void) {
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
	state = INIT;
 8001d66:	4b4f      	ldr	r3, [pc, #316]	; (8001ea4 <robotInit+0x144>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	701a      	strb	r2, [r3, #0]
	turningArm.armID = ARM_UNDEFINED;
 8001d6c:	4b4e      	ldr	r3, [pc, #312]	; (8001ea8 <robotInit+0x148>)
 8001d6e:	2204      	movs	r2, #4
 8001d70:	701a      	strb	r2, [r3, #0]
	flippingArm.firstArmID = ARM_UNDEFINED;
 8001d72:	4b4e      	ldr	r3, [pc, #312]	; (8001eac <robotInit+0x14c>)
 8001d74:	2204      	movs	r2, #4
 8001d76:	701a      	strb	r2, [r3, #0]
	flippingArm.secondArmID = ARM_UNDEFINED;
 8001d78:	4b4c      	ldr	r3, [pc, #304]	; (8001eac <robotInit+0x14c>)
 8001d7a:	2204      	movs	r2, #4
 8001d7c:	705a      	strb	r2, [r3, #1]
	flippingArm.thirdArmID = ARM_UNDEFINED;
 8001d7e:	4b4b      	ldr	r3, [pc, #300]	; (8001eac <robotInit+0x14c>)
 8001d80:	2204      	movs	r2, #4
 8001d82:	709a      	strb	r2, [r3, #2]
	flippingArm.fourthArmID = ARM_UNDEFINED;
 8001d84:	4b49      	ldr	r3, [pc, #292]	; (8001eac <robotInit+0x14c>)
 8001d86:	2204      	movs	r2, #4
 8001d88:	70da      	strb	r2, [r3, #3]

	servoInit();
 8001d8a:	f001 fd6f 	bl	800386c <servoInit>
	armInit();
 8001d8e:	f7ff f9a5 	bl	80010dc <armInit>

	uint8_t leftGripper = servoStart(&htim2, TIM_CHANNEL_1, 0);
 8001d92:	f04f 0200 	mov.w	r2, #0
 8001d96:	2100      	movs	r1, #0
 8001d98:	4845      	ldr	r0, [pc, #276]	; (8001eb0 <robotInit+0x150>)
 8001d9a:	f001 fd99 	bl	80038d0 <servoStart>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	73fb      	strb	r3, [r7, #15]
	uint8_t frontGripper = servoStart(&htim2, TIM_CHANNEL_2, 0);
 8001da2:	f04f 0200 	mov.w	r2, #0
 8001da6:	2104      	movs	r1, #4
 8001da8:	4841      	ldr	r0, [pc, #260]	; (8001eb0 <robotInit+0x150>)
 8001daa:	f001 fd91 	bl	80038d0 <servoStart>
 8001dae:	4603      	mov	r3, r0
 8001db0:	73bb      	strb	r3, [r7, #14]
	uint8_t rightGripper = servoStart(&htim2, TIM_CHANNEL_3, -5);
 8001db2:	4a40      	ldr	r2, [pc, #256]	; (8001eb4 <robotInit+0x154>)
 8001db4:	2108      	movs	r1, #8
 8001db6:	483e      	ldr	r0, [pc, #248]	; (8001eb0 <robotInit+0x150>)
 8001db8:	f001 fd8a 	bl	80038d0 <servoStart>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	737b      	strb	r3, [r7, #13]
	uint8_t backGripper = servoStart(&htim2, TIM_CHANNEL_4, 0);
 8001dc0:	f04f 0200 	mov.w	r2, #0
 8001dc4:	210c      	movs	r1, #12
 8001dc6:	483a      	ldr	r0, [pc, #232]	; (8001eb0 <robotInit+0x150>)
 8001dc8:	f001 fd82 	bl	80038d0 <servoStart>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	733b      	strb	r3, [r7, #12]

	uint8_t leftWrist = servoStart(&htim3, TIM_CHANNEL_1, -5);
 8001dd0:	4a38      	ldr	r2, [pc, #224]	; (8001eb4 <robotInit+0x154>)
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	4838      	ldr	r0, [pc, #224]	; (8001eb8 <robotInit+0x158>)
 8001dd6:	f001 fd7b 	bl	80038d0 <servoStart>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	72fb      	strb	r3, [r7, #11]
	uint8_t frontWrist = servoStart(&htim3, TIM_CHANNEL_2, 0);
 8001dde:	f04f 0200 	mov.w	r2, #0
 8001de2:	2104      	movs	r1, #4
 8001de4:	4834      	ldr	r0, [pc, #208]	; (8001eb8 <robotInit+0x158>)
 8001de6:	f001 fd73 	bl	80038d0 <servoStart>
 8001dea:	4603      	mov	r3, r0
 8001dec:	72bb      	strb	r3, [r7, #10]
	uint8_t rightWrist = servoStart(&htim3, TIM_CHANNEL_3, -4);
 8001dee:	4a33      	ldr	r2, [pc, #204]	; (8001ebc <robotInit+0x15c>)
 8001df0:	2108      	movs	r1, #8
 8001df2:	4831      	ldr	r0, [pc, #196]	; (8001eb8 <robotInit+0x158>)
 8001df4:	f001 fd6c 	bl	80038d0 <servoStart>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	727b      	strb	r3, [r7, #9]
	uint8_t backWrist = servoStart(&htim3, TIM_CHANNEL_4, 2);
 8001dfc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e00:	210c      	movs	r1, #12
 8001e02:	482d      	ldr	r0, [pc, #180]	; (8001eb8 <robotInit+0x158>)
 8001e04:	f001 fd64 	bl	80038d0 <servoStart>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	723b      	strb	r3, [r7, #8]

	uint8_t leftElbow = servoStart(&htim4, TIM_CHANNEL_1, 0);
 8001e0c:	f04f 0200 	mov.w	r2, #0
 8001e10:	2100      	movs	r1, #0
 8001e12:	482b      	ldr	r0, [pc, #172]	; (8001ec0 <robotInit+0x160>)
 8001e14:	f001 fd5c 	bl	80038d0 <servoStart>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	71fb      	strb	r3, [r7, #7]
	uint8_t frontElbow = servoStart(&htim4, TIM_CHANNEL_2, 0);
 8001e1c:	f04f 0200 	mov.w	r2, #0
 8001e20:	2104      	movs	r1, #4
 8001e22:	4827      	ldr	r0, [pc, #156]	; (8001ec0 <robotInit+0x160>)
 8001e24:	f001 fd54 	bl	80038d0 <servoStart>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	71bb      	strb	r3, [r7, #6]
	uint8_t rightElbow = servoStart(&htim4, TIM_CHANNEL_3, 0);
 8001e2c:	f04f 0200 	mov.w	r2, #0
 8001e30:	2108      	movs	r1, #8
 8001e32:	4823      	ldr	r0, [pc, #140]	; (8001ec0 <robotInit+0x160>)
 8001e34:	f001 fd4c 	bl	80038d0 <servoStart>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	717b      	strb	r3, [r7, #5]
	uint8_t backElbow = servoStart(&htim4, TIM_CHANNEL_4, 10);
 8001e3c:	4a21      	ldr	r2, [pc, #132]	; (8001ec4 <robotInit+0x164>)
 8001e3e:	210c      	movs	r1, #12
 8001e40:	481f      	ldr	r0, [pc, #124]	; (8001ec0 <robotInit+0x160>)
 8001e42:	f001 fd45 	bl	80038d0 <servoStart>
 8001e46:	4603      	mov	r3, r0
 8001e48:	713b      	strb	r3, [r7, #4]

	leftArm = armStart(leftGripper, leftWrist, leftElbow);
 8001e4a:	79fa      	ldrb	r2, [r7, #7]
 8001e4c:	7af9      	ldrb	r1, [r7, #11]
 8001e4e:	7bfb      	ldrb	r3, [r7, #15]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7ff f983 	bl	800115c <armStart>
 8001e56:	4603      	mov	r3, r0
 8001e58:	461a      	mov	r2, r3
 8001e5a:	4b1b      	ldr	r3, [pc, #108]	; (8001ec8 <robotInit+0x168>)
 8001e5c:	701a      	strb	r2, [r3, #0]
	frontArm = armStart(frontGripper, frontWrist, frontElbow);
 8001e5e:	79ba      	ldrb	r2, [r7, #6]
 8001e60:	7ab9      	ldrb	r1, [r7, #10]
 8001e62:	7bbb      	ldrb	r3, [r7, #14]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7ff f979 	bl	800115c <armStart>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	4b17      	ldr	r3, [pc, #92]	; (8001ecc <robotInit+0x16c>)
 8001e70:	701a      	strb	r2, [r3, #0]
	rightArm = armStart(rightGripper, rightWrist, rightElbow);
 8001e72:	797a      	ldrb	r2, [r7, #5]
 8001e74:	7a79      	ldrb	r1, [r7, #9]
 8001e76:	7b7b      	ldrb	r3, [r7, #13]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7ff f96f 	bl	800115c <armStart>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	461a      	mov	r2, r3
 8001e82:	4b13      	ldr	r3, [pc, #76]	; (8001ed0 <robotInit+0x170>)
 8001e84:	701a      	strb	r2, [r3, #0]
	backArm = armStart(backGripper, backWrist, backElbow);
 8001e86:	793a      	ldrb	r2, [r7, #4]
 8001e88:	7a39      	ldrb	r1, [r7, #8]
 8001e8a:	7b3b      	ldrb	r3, [r7, #12]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff f965 	bl	800115c <armStart>
 8001e92:	4603      	mov	r3, r0
 8001e94:	461a      	mov	r2, r3
 8001e96:	4b0f      	ldr	r3, [pc, #60]	; (8001ed4 <robotInit+0x174>)
 8001e98:	701a      	strb	r2, [r3, #0]
}
 8001e9a:	bf00      	nop
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	20000204 	.word	0x20000204
 8001ea8:	20000208 	.word	0x20000208
 8001eac:	2000020c 	.word	0x2000020c
 8001eb0:	2000012c 	.word	0x2000012c
 8001eb4:	c0a00000 	.word	0xc0a00000
 8001eb8:	20000174 	.word	0x20000174
 8001ebc:	c0800000 	.word	0xc0800000
 8001ec0:	200001bc 	.word	0x200001bc
 8001ec4:	41200000 	.word	0x41200000
 8001ec8:	20000000 	.word	0x20000000
 8001ecc:	20000001 	.word	0x20000001
 8001ed0:	20000002 	.word	0x20000002
 8001ed4:	20000003 	.word	0x20000003

08001ed8 <robotBoot>:

void robotBoot(void *) {
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
	schedulerAddTask(armRun, NULL, 1 * ROBOT_MANUALDURATION, 0);
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001ee6:	2100      	movs	r1, #0
 8001ee8:	4838      	ldr	r0, [pc, #224]	; (8001fcc <robotBoot+0xf4>)
 8001eea:	f000 ff15 	bl	8002d18 <schedulerAddTask>
	schedulerAddTask(armRelease, &arms[rightArm], 2 * ROBOT_MANUALDURATION, 0);
 8001eee:	4b38      	ldr	r3, [pc, #224]	; (8001fd0 <robotBoot+0xf8>)
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	011b      	lsls	r3, r3, #4
 8001ef4:	4a37      	ldr	r2, [pc, #220]	; (8001fd4 <robotBoot+0xfc>)
 8001ef6:	1899      	adds	r1, r3, r2
 8001ef8:	2300      	movs	r3, #0
 8001efa:	f241 726e 	movw	r2, #5998	; 0x176e
 8001efe:	4836      	ldr	r0, [pc, #216]	; (8001fd8 <robotBoot+0x100>)
 8001f00:	f000 ff0a 	bl	8002d18 <schedulerAddTask>
	schedulerAddTask(armHold, &arms[rightArm], 3 * ROBOT_MANUALDURATION, 0);
 8001f04:	4b32      	ldr	r3, [pc, #200]	; (8001fd0 <robotBoot+0xf8>)
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	011b      	lsls	r3, r3, #4
 8001f0a:	4a32      	ldr	r2, [pc, #200]	; (8001fd4 <robotBoot+0xfc>)
 8001f0c:	1899      	adds	r1, r3, r2
 8001f0e:	2300      	movs	r3, #0
 8001f10:	f242 3225 	movw	r2, #8997	; 0x2325
 8001f14:	4831      	ldr	r0, [pc, #196]	; (8001fdc <robotBoot+0x104>)
 8001f16:	f000 feff 	bl	8002d18 <schedulerAddTask>
	schedulerAddTask(armForward, &arms[rightArm], 4 * ROBOT_MANUALDURATION, 0);
 8001f1a:	4b2d      	ldr	r3, [pc, #180]	; (8001fd0 <robotBoot+0xf8>)
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	011b      	lsls	r3, r3, #4
 8001f20:	4a2c      	ldr	r2, [pc, #176]	; (8001fd4 <robotBoot+0xfc>)
 8001f22:	1899      	adds	r1, r3, r2
 8001f24:	2300      	movs	r3, #0
 8001f26:	f642 62dc 	movw	r2, #11996	; 0x2edc
 8001f2a:	482d      	ldr	r0, [pc, #180]	; (8001fe0 <robotBoot+0x108>)
 8001f2c:	f000 fef4 	bl	8002d18 <schedulerAddTask>
	schedulerAddTask(armForward, &arms[leftArm], 5 * ROBOT_MANUALDURATION, 0);
 8001f30:	4b2c      	ldr	r3, [pc, #176]	; (8001fe4 <robotBoot+0x10c>)
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	011b      	lsls	r3, r3, #4
 8001f36:	4a27      	ldr	r2, [pc, #156]	; (8001fd4 <robotBoot+0xfc>)
 8001f38:	1899      	adds	r1, r3, r2
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	f643 2293 	movw	r2, #14995	; 0x3a93
 8001f40:	4827      	ldr	r0, [pc, #156]	; (8001fe0 <robotBoot+0x108>)
 8001f42:	f000 fee9 	bl	8002d18 <schedulerAddTask>
	schedulerAddTask(armForward, &arms[frontArm], 6 * ROBOT_MANUALDURATION, 0);
 8001f46:	4b28      	ldr	r3, [pc, #160]	; (8001fe8 <robotBoot+0x110>)
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	011b      	lsls	r3, r3, #4
 8001f4c:	4a21      	ldr	r2, [pc, #132]	; (8001fd4 <robotBoot+0xfc>)
 8001f4e:	1899      	adds	r1, r3, r2
 8001f50:	2300      	movs	r3, #0
 8001f52:	f244 624a 	movw	r2, #17994	; 0x464a
 8001f56:	4822      	ldr	r0, [pc, #136]	; (8001fe0 <robotBoot+0x108>)
 8001f58:	f000 fede 	bl	8002d18 <schedulerAddTask>
	schedulerAddTask(armForward, &arms[backArm], 6 * ROBOT_MANUALDURATION, 0);
 8001f5c:	4b23      	ldr	r3, [pc, #140]	; (8001fec <robotBoot+0x114>)
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	011b      	lsls	r3, r3, #4
 8001f62:	4a1c      	ldr	r2, [pc, #112]	; (8001fd4 <robotBoot+0xfc>)
 8001f64:	1899      	adds	r1, r3, r2
 8001f66:	2300      	movs	r3, #0
 8001f68:	f244 624a 	movw	r2, #17994	; 0x464a
 8001f6c:	481c      	ldr	r0, [pc, #112]	; (8001fe0 <robotBoot+0x108>)
 8001f6e:	f000 fed3 	bl	8002d18 <schedulerAddTask>
	schedulerAddTask(armHold, &arms[leftArm], 7 * ROBOT_MANUALDURATION, 0);
 8001f72:	4b1c      	ldr	r3, [pc, #112]	; (8001fe4 <robotBoot+0x10c>)
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	011b      	lsls	r3, r3, #4
 8001f78:	4a16      	ldr	r2, [pc, #88]	; (8001fd4 <robotBoot+0xfc>)
 8001f7a:	1899      	adds	r1, r3, r2
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	f245 2201 	movw	r2, #20993	; 0x5201
 8001f82:	4816      	ldr	r0, [pc, #88]	; (8001fdc <robotBoot+0x104>)
 8001f84:	f000 fec8 	bl	8002d18 <schedulerAddTask>
	schedulerAddTask(armHold, &arms[frontArm], 7 * ROBOT_MANUALDURATION, 0);
 8001f88:	4b17      	ldr	r3, [pc, #92]	; (8001fe8 <robotBoot+0x110>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	011b      	lsls	r3, r3, #4
 8001f8e:	4a11      	ldr	r2, [pc, #68]	; (8001fd4 <robotBoot+0xfc>)
 8001f90:	1899      	adds	r1, r3, r2
 8001f92:	2300      	movs	r3, #0
 8001f94:	f245 2201 	movw	r2, #20993	; 0x5201
 8001f98:	4810      	ldr	r0, [pc, #64]	; (8001fdc <robotBoot+0x104>)
 8001f9a:	f000 febd 	bl	8002d18 <schedulerAddTask>
	schedulerAddTask(armHold, &arms[backArm], 7 * ROBOT_MANUALDURATION, 0);
 8001f9e:	4b13      	ldr	r3, [pc, #76]	; (8001fec <robotBoot+0x114>)
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	011b      	lsls	r3, r3, #4
 8001fa4:	4a0b      	ldr	r2, [pc, #44]	; (8001fd4 <robotBoot+0xfc>)
 8001fa6:	1899      	adds	r1, r3, r2
 8001fa8:	2300      	movs	r3, #0
 8001faa:	f245 2201 	movw	r2, #20993	; 0x5201
 8001fae:	480b      	ldr	r0, [pc, #44]	; (8001fdc <robotBoot+0x104>)
 8001fb0:	f000 feb2 	bl	8002d18 <schedulerAddTask>
	schedulerAddTask(robotFree, NULL, 8 * ROBOT_MANUALDURATION, 0);
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	f645 52b8 	movw	r2, #23992	; 0x5db8
 8001fba:	2100      	movs	r1, #0
 8001fbc:	480c      	ldr	r0, [pc, #48]	; (8001ff0 <robotBoot+0x118>)
 8001fbe:	f000 feab 	bl	8002d18 <schedulerAddTask>
}
 8001fc2:	bf00      	nop
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	08001221 	.word	0x08001221
 8001fd0:	20000002 	.word	0x20000002
 8001fd4:	200000a4 	.word	0x200000a4
 8001fd8:	08001609 	.word	0x08001609
 8001fdc:	080015e5 	.word	0x080015e5
 8001fe0:	08001697 	.word	0x08001697
 8001fe4:	20000000 	.word	0x20000000
 8001fe8:	20000001 	.word	0x20000001
 8001fec:	20000003 	.word	0x20000003
 8001ff0:	08001d1d 	.word	0x08001d1d

08001ff4 <robotTurnReturn>:
	schedulerAddTask(armRelax, &arms[rightArm], 3 * ROBOT_AUTODURATION, 0);
	schedulerAddTask(armRelax, &arms[backArm], 3 * ROBOT_AUTODURATION, 0);
	schedulerAddTask(robotFree, NULL, 4 * ROBOT_AUTODURATION, 0);
}

void robotTurnReturn(void *) {
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
	schedulerAddTask(armRelease, &arms[turningArm.armID], 0 * ROBOT_AUTODURATION, 0);
 8001ffc:	4b20      	ldr	r3, [pc, #128]	; (8002080 <robotTurnReturn+0x8c>)
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	011b      	lsls	r3, r3, #4
 8002002:	4a20      	ldr	r2, [pc, #128]	; (8002084 <robotTurnReturn+0x90>)
 8002004:	1899      	adds	r1, r3, r2
 8002006:	2300      	movs	r3, #0
 8002008:	2200      	movs	r2, #0
 800200a:	481f      	ldr	r0, [pc, #124]	; (8002088 <robotTurnReturn+0x94>)
 800200c:	f000 fe84 	bl	8002d18 <schedulerAddTask>
	schedulerAddTask(armBackward, &arms[turningArm.armID], 1 * ROBOT_AUTODURATION, 0);
 8002010:	4b1b      	ldr	r3, [pc, #108]	; (8002080 <robotTurnReturn+0x8c>)
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	011b      	lsls	r3, r3, #4
 8002016:	4a1b      	ldr	r2, [pc, #108]	; (8002084 <robotTurnReturn+0x90>)
 8002018:	1899      	adds	r1, r3, r2
 800201a:	2300      	movs	r3, #0
 800201c:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002020:	481a      	ldr	r0, [pc, #104]	; (800208c <robotTurnReturn+0x98>)
 8002022:	f000 fe79 	bl	8002d18 <schedulerAddTask>
	schedulerAddTask(armNorthward, &arms[turningArm.armID], 2 * ROBOT_AUTODURATION, 0);
 8002026:	4b16      	ldr	r3, [pc, #88]	; (8002080 <robotTurnReturn+0x8c>)
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	011b      	lsls	r3, r3, #4
 800202c:	4a15      	ldr	r2, [pc, #84]	; (8002084 <robotTurnReturn+0x90>)
 800202e:	1899      	adds	r1, r3, r2
 8002030:	2300      	movs	r3, #0
 8002032:	f240 32e6 	movw	r2, #998	; 0x3e6
 8002036:	4816      	ldr	r0, [pc, #88]	; (8002090 <robotTurnReturn+0x9c>)
 8002038:	f000 fe6e 	bl	8002d18 <schedulerAddTask>
	schedulerAddTask(armForward, &arms[turningArm.armID], 3 * ROBOT_AUTODURATION, 0);
 800203c:	4b10      	ldr	r3, [pc, #64]	; (8002080 <robotTurnReturn+0x8c>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	011b      	lsls	r3, r3, #4
 8002042:	4a10      	ldr	r2, [pc, #64]	; (8002084 <robotTurnReturn+0x90>)
 8002044:	1899      	adds	r1, r3, r2
 8002046:	2300      	movs	r3, #0
 8002048:	f240 52d9 	movw	r2, #1497	; 0x5d9
 800204c:	4811      	ldr	r0, [pc, #68]	; (8002094 <robotTurnReturn+0xa0>)
 800204e:	f000 fe63 	bl	8002d18 <schedulerAddTask>
	schedulerAddTask(armHold, &arms[turningArm.armID], 4 * ROBOT_AUTODURATION, 0);
 8002052:	4b0b      	ldr	r3, [pc, #44]	; (8002080 <robotTurnReturn+0x8c>)
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	011b      	lsls	r3, r3, #4
 8002058:	4a0a      	ldr	r2, [pc, #40]	; (8002084 <robotTurnReturn+0x90>)
 800205a:	1899      	adds	r1, r3, r2
 800205c:	2300      	movs	r3, #0
 800205e:	f240 72cc 	movw	r2, #1996	; 0x7cc
 8002062:	480d      	ldr	r0, [pc, #52]	; (8002098 <robotTurnReturn+0xa4>)
 8002064:	f000 fe58 	bl	8002d18 <schedulerAddTask>
	schedulerAddTask(robotFree, NULL, 5 * ROBOT_AUTODURATION, 0);
 8002068:	2300      	movs	r3, #0
 800206a:	f640 12bf 	movw	r2, #2495	; 0x9bf
 800206e:	2100      	movs	r1, #0
 8002070:	480a      	ldr	r0, [pc, #40]	; (800209c <robotTurnReturn+0xa8>)
 8002072:	f000 fe51 	bl	8002d18 <schedulerAddTask>
}
 8002076:	bf00      	nop
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	20000208 	.word	0x20000208
 8002084:	200000a4 	.word	0x200000a4
 8002088:	08001609 	.word	0x08001609
 800208c:	080016b9 	.word	0x080016b9
 8002090:	08001651 	.word	0x08001651
 8002094:	08001697 	.word	0x08001697
 8002098:	080015e5 	.word	0x080015e5
 800209c:	08001d1d 	.word	0x08001d1d

080020a0 <robotTurnNormal>:

void robotTurnNormal(void *) {
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
	schedulerAddTask(armRelease, &arms[turningArm.armID], 0 * ROBOT_AUTODURATION, 0);
 80020a8:	4b1a      	ldr	r3, [pc, #104]	; (8002114 <robotTurnNormal+0x74>)
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	011b      	lsls	r3, r3, #4
 80020ae:	4a1a      	ldr	r2, [pc, #104]	; (8002118 <robotTurnNormal+0x78>)
 80020b0:	1899      	adds	r1, r3, r2
 80020b2:	2300      	movs	r3, #0
 80020b4:	2200      	movs	r2, #0
 80020b6:	4819      	ldr	r0, [pc, #100]	; (800211c <robotTurnNormal+0x7c>)
 80020b8:	f000 fe2e 	bl	8002d18 <schedulerAddTask>
	schedulerAddTask(armFirstLayer, &arms[turningArm.armID], 1 * ROBOT_AUTODURATION, 0);
 80020bc:	4b15      	ldr	r3, [pc, #84]	; (8002114 <robotTurnNormal+0x74>)
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	011b      	lsls	r3, r3, #4
 80020c2:	4a15      	ldr	r2, [pc, #84]	; (8002118 <robotTurnNormal+0x78>)
 80020c4:	1899      	adds	r1, r3, r2
 80020c6:	2300      	movs	r3, #0
 80020c8:	f240 12f3 	movw	r2, #499	; 0x1f3
 80020cc:	4814      	ldr	r0, [pc, #80]	; (8002120 <robotTurnNormal+0x80>)
 80020ce:	f000 fe23 	bl	8002d18 <schedulerAddTask>
	schedulerAddTask(armHold, &arms[turningArm.armID], 2 * ROBOT_AUTODURATION, 0);
 80020d2:	4b10      	ldr	r3, [pc, #64]	; (8002114 <robotTurnNormal+0x74>)
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	011b      	lsls	r3, r3, #4
 80020d8:	4a0f      	ldr	r2, [pc, #60]	; (8002118 <robotTurnNormal+0x78>)
 80020da:	1899      	adds	r1, r3, r2
 80020dc:	2300      	movs	r3, #0
 80020de:	f240 32e6 	movw	r2, #998	; 0x3e6
 80020e2:	4810      	ldr	r0, [pc, #64]	; (8002124 <robotTurnNormal+0x84>)
 80020e4:	f000 fe18 	bl	8002d18 <schedulerAddTask>
	schedulerAddTask(armWestward, &arms[turningArm.armID], 3 * ROBOT_AUTODURATION, 0);
 80020e8:	4b0a      	ldr	r3, [pc, #40]	; (8002114 <robotTurnNormal+0x74>)
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	011b      	lsls	r3, r3, #4
 80020ee:	4a0a      	ldr	r2, [pc, #40]	; (8002118 <robotTurnNormal+0x78>)
 80020f0:	1899      	adds	r1, r3, r2
 80020f2:	2300      	movs	r3, #0
 80020f4:	f240 52d9 	movw	r2, #1497	; 0x5d9
 80020f8:	480b      	ldr	r0, [pc, #44]	; (8002128 <robotTurnNormal+0x88>)
 80020fa:	f000 fe0d 	bl	8002d18 <schedulerAddTask>
	schedulerAddTask(robotTurnReturn, NULL, 4 * ROBOT_AUTODURATION, 0);
 80020fe:	2300      	movs	r3, #0
 8002100:	f240 72cc 	movw	r2, #1996	; 0x7cc
 8002104:	2100      	movs	r1, #0
 8002106:	4809      	ldr	r0, [pc, #36]	; (800212c <robotTurnNormal+0x8c>)
 8002108:	f000 fe06 	bl	8002d18 <schedulerAddTask>
}
 800210c:	bf00      	nop
 800210e:	3708      	adds	r7, #8
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	20000208 	.word	0x20000208
 8002118:	200000a4 	.word	0x200000a4
 800211c:	08001609 	.word	0x08001609
 8002120:	080016db 	.word	0x080016db
 8002124:	080015e5 	.word	0x080015e5
 8002128:	0800162d 	.word	0x0800162d
 800212c:	08001ff5 	.word	0x08001ff5

08002130 <robotTurnInvert>:

void robotTurnInvert(void *) {
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
	schedulerAddTask(armRelease, &arms[turningArm.armID], 0 * ROBOT_AUTODURATION, 0);
 8002138:	4b1a      	ldr	r3, [pc, #104]	; (80021a4 <robotTurnInvert+0x74>)
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	011b      	lsls	r3, r3, #4
 800213e:	4a1a      	ldr	r2, [pc, #104]	; (80021a8 <robotTurnInvert+0x78>)
 8002140:	1899      	adds	r1, r3, r2
 8002142:	2300      	movs	r3, #0
 8002144:	2200      	movs	r2, #0
 8002146:	4819      	ldr	r0, [pc, #100]	; (80021ac <robotTurnInvert+0x7c>)
 8002148:	f000 fde6 	bl	8002d18 <schedulerAddTask>
	schedulerAddTask(armFirstLayer, &arms[turningArm.armID], 1 * ROBOT_AUTODURATION, 0);
 800214c:	4b15      	ldr	r3, [pc, #84]	; (80021a4 <robotTurnInvert+0x74>)
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	011b      	lsls	r3, r3, #4
 8002152:	4a15      	ldr	r2, [pc, #84]	; (80021a8 <robotTurnInvert+0x78>)
 8002154:	1899      	adds	r1, r3, r2
 8002156:	2300      	movs	r3, #0
 8002158:	f240 12f3 	movw	r2, #499	; 0x1f3
 800215c:	4814      	ldr	r0, [pc, #80]	; (80021b0 <robotTurnInvert+0x80>)
 800215e:	f000 fddb 	bl	8002d18 <schedulerAddTask>
	schedulerAddTask(armHold, &arms[turningArm.armID], 2 * ROBOT_AUTODURATION, 0);
 8002162:	4b10      	ldr	r3, [pc, #64]	; (80021a4 <robotTurnInvert+0x74>)
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	011b      	lsls	r3, r3, #4
 8002168:	4a0f      	ldr	r2, [pc, #60]	; (80021a8 <robotTurnInvert+0x78>)
 800216a:	1899      	adds	r1, r3, r2
 800216c:	2300      	movs	r3, #0
 800216e:	f240 32e6 	movw	r2, #998	; 0x3e6
 8002172:	4810      	ldr	r0, [pc, #64]	; (80021b4 <robotTurnInvert+0x84>)
 8002174:	f000 fdd0 	bl	8002d18 <schedulerAddTask>
	schedulerAddTask(armEastward, &arms[turningArm.armID], 3 * ROBOT_AUTODURATION, 0);
 8002178:	4b0a      	ldr	r3, [pc, #40]	; (80021a4 <robotTurnInvert+0x74>)
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	011b      	lsls	r3, r3, #4
 800217e:	4a0a      	ldr	r2, [pc, #40]	; (80021a8 <robotTurnInvert+0x78>)
 8002180:	1899      	adds	r1, r3, r2
 8002182:	2300      	movs	r3, #0
 8002184:	f240 52d9 	movw	r2, #1497	; 0x5d9
 8002188:	480b      	ldr	r0, [pc, #44]	; (80021b8 <robotTurnInvert+0x88>)
 800218a:	f000 fdc5 	bl	8002d18 <schedulerAddTask>
	schedulerAddTask(robotTurnReturn, NULL, 4 * ROBOT_AUTODURATION, 0);
 800218e:	2300      	movs	r3, #0
 8002190:	f240 72cc 	movw	r2, #1996	; 0x7cc
 8002194:	2100      	movs	r1, #0
 8002196:	4809      	ldr	r0, [pc, #36]	; (80021bc <robotTurnInvert+0x8c>)
 8002198:	f000 fdbe 	bl	8002d18 <schedulerAddTask>
}
 800219c:	bf00      	nop
 800219e:	3708      	adds	r7, #8
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	20000208 	.word	0x20000208
 80021a8:	200000a4 	.word	0x200000a4
 80021ac:	08001609 	.word	0x08001609
 80021b0:	080016db 	.word	0x080016db
 80021b4:	080015e5 	.word	0x080015e5
 80021b8:	08001675 	.word	0x08001675
 80021bc:	08001ff5 	.word	0x08001ff5

080021c0 <robotTurnDouble>:

void robotTurnDouble(void *) {
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
	schedulerAddTask(armRelease, &arms[turningArm.armID], 0 * ROBOT_AUTODURATION, 0);
 80021c8:	4b25      	ldr	r3, [pc, #148]	; (8002260 <robotTurnDouble+0xa0>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	011b      	lsls	r3, r3, #4
 80021ce:	4a25      	ldr	r2, [pc, #148]	; (8002264 <robotTurnDouble+0xa4>)
 80021d0:	1899      	adds	r1, r3, r2
 80021d2:	2300      	movs	r3, #0
 80021d4:	2200      	movs	r2, #0
 80021d6:	4824      	ldr	r0, [pc, #144]	; (8002268 <robotTurnDouble+0xa8>)
 80021d8:	f000 fd9e 	bl	8002d18 <schedulerAddTask>
	schedulerAddTask(armBackward, &arms[turningArm.armID], 1 * ROBOT_AUTODURATION, 0);
 80021dc:	4b20      	ldr	r3, [pc, #128]	; (8002260 <robotTurnDouble+0xa0>)
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	011b      	lsls	r3, r3, #4
 80021e2:	4a20      	ldr	r2, [pc, #128]	; (8002264 <robotTurnDouble+0xa4>)
 80021e4:	1899      	adds	r1, r3, r2
 80021e6:	2300      	movs	r3, #0
 80021e8:	f240 12f3 	movw	r2, #499	; 0x1f3
 80021ec:	481f      	ldr	r0, [pc, #124]	; (800226c <robotTurnDouble+0xac>)
 80021ee:	f000 fd93 	bl	8002d18 <schedulerAddTask>
	schedulerAddTask(armWestward, &arms[turningArm.armID], 2 * ROBOT_AUTODURATION, 0);
 80021f2:	4b1b      	ldr	r3, [pc, #108]	; (8002260 <robotTurnDouble+0xa0>)
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	011b      	lsls	r3, r3, #4
 80021f8:	4a1a      	ldr	r2, [pc, #104]	; (8002264 <robotTurnDouble+0xa4>)
 80021fa:	1899      	adds	r1, r3, r2
 80021fc:	2300      	movs	r3, #0
 80021fe:	f240 32e6 	movw	r2, #998	; 0x3e6
 8002202:	481b      	ldr	r0, [pc, #108]	; (8002270 <robotTurnDouble+0xb0>)
 8002204:	f000 fd88 	bl	8002d18 <schedulerAddTask>
	schedulerAddTask(armFirstLayer, &arms[turningArm.armID], 3 * ROBOT_AUTODURATION, 0);
 8002208:	4b15      	ldr	r3, [pc, #84]	; (8002260 <robotTurnDouble+0xa0>)
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	011b      	lsls	r3, r3, #4
 800220e:	4a15      	ldr	r2, [pc, #84]	; (8002264 <robotTurnDouble+0xa4>)
 8002210:	1899      	adds	r1, r3, r2
 8002212:	2300      	movs	r3, #0
 8002214:	f240 52d9 	movw	r2, #1497	; 0x5d9
 8002218:	4816      	ldr	r0, [pc, #88]	; (8002274 <robotTurnDouble+0xb4>)
 800221a:	f000 fd7d 	bl	8002d18 <schedulerAddTask>
	schedulerAddTask(armHold, &arms[turningArm.armID], 4 * ROBOT_AUTODURATION, 0);
 800221e:	4b10      	ldr	r3, [pc, #64]	; (8002260 <robotTurnDouble+0xa0>)
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	011b      	lsls	r3, r3, #4
 8002224:	4a0f      	ldr	r2, [pc, #60]	; (8002264 <robotTurnDouble+0xa4>)
 8002226:	1899      	adds	r1, r3, r2
 8002228:	2300      	movs	r3, #0
 800222a:	f240 72cc 	movw	r2, #1996	; 0x7cc
 800222e:	4812      	ldr	r0, [pc, #72]	; (8002278 <robotTurnDouble+0xb8>)
 8002230:	f000 fd72 	bl	8002d18 <schedulerAddTask>
	schedulerAddTask(armEastward, &arms[turningArm.armID], 5 * ROBOT_AUTODURATION, 0);
 8002234:	4b0a      	ldr	r3, [pc, #40]	; (8002260 <robotTurnDouble+0xa0>)
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	011b      	lsls	r3, r3, #4
 800223a:	4a0a      	ldr	r2, [pc, #40]	; (8002264 <robotTurnDouble+0xa4>)
 800223c:	1899      	adds	r1, r3, r2
 800223e:	2300      	movs	r3, #0
 8002240:	f640 12bf 	movw	r2, #2495	; 0x9bf
 8002244:	480d      	ldr	r0, [pc, #52]	; (800227c <robotTurnDouble+0xbc>)
 8002246:	f000 fd67 	bl	8002d18 <schedulerAddTask>
	schedulerAddTask(robotTurnReturn, NULL, 6 * ROBOT_AUTODURATION, 0);
 800224a:	2300      	movs	r3, #0
 800224c:	f640 32b2 	movw	r2, #2994	; 0xbb2
 8002250:	2100      	movs	r1, #0
 8002252:	480b      	ldr	r0, [pc, #44]	; (8002280 <robotTurnDouble+0xc0>)
 8002254:	f000 fd60 	bl	8002d18 <schedulerAddTask>
}
 8002258:	bf00      	nop
 800225a:	3708      	adds	r7, #8
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	20000208 	.word	0x20000208
 8002264:	200000a4 	.word	0x200000a4
 8002268:	08001609 	.word	0x08001609
 800226c:	080016b9 	.word	0x080016b9
 8002270:	0800162d 	.word	0x0800162d
 8002274:	080016db 	.word	0x080016db
 8002278:	080015e5 	.word	0x080015e5
 800227c:	08001675 	.word	0x08001675
 8002280:	08001ff5 	.word	0x08001ff5

08002284 <robotTurnLeftNormal>:

void robotTurnLeftNormal(void *) {
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
	if (state != FREE) return;
 800228c:	4b09      	ldr	r3, [pc, #36]	; (80022b4 <robotTurnLeftNormal+0x30>)
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	2b01      	cmp	r3, #1
 8002292:	d10a      	bne.n	80022aa <robotTurnLeftNormal+0x26>
	state = BUSY;
 8002294:	4b07      	ldr	r3, [pc, #28]	; (80022b4 <robotTurnLeftNormal+0x30>)
 8002296:	2202      	movs	r2, #2
 8002298:	701a      	strb	r2, [r3, #0]
	turningArm.armID = leftArm;
 800229a:	4b07      	ldr	r3, [pc, #28]	; (80022b8 <robotTurnLeftNormal+0x34>)
 800229c:	781a      	ldrb	r2, [r3, #0]
 800229e:	4b07      	ldr	r3, [pc, #28]	; (80022bc <robotTurnLeftNormal+0x38>)
 80022a0:	701a      	strb	r2, [r3, #0]
	robotTurnNormal(NULL);
 80022a2:	2000      	movs	r0, #0
 80022a4:	f7ff fefc 	bl	80020a0 <robotTurnNormal>
 80022a8:	e000      	b.n	80022ac <robotTurnLeftNormal+0x28>
	if (state != FREE) return;
 80022aa:	bf00      	nop
}
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	20000204 	.word	0x20000204
 80022b8:	20000000 	.word	0x20000000
 80022bc:	20000208 	.word	0x20000208

080022c0 <robotTurnLeftInvert>:

void robotTurnLeftInvert(void *) {
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
	if (state != FREE) return;
 80022c8:	4b09      	ldr	r3, [pc, #36]	; (80022f0 <robotTurnLeftInvert+0x30>)
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d10a      	bne.n	80022e6 <robotTurnLeftInvert+0x26>
	state = BUSY;
 80022d0:	4b07      	ldr	r3, [pc, #28]	; (80022f0 <robotTurnLeftInvert+0x30>)
 80022d2:	2202      	movs	r2, #2
 80022d4:	701a      	strb	r2, [r3, #0]
	turningArm.armID = leftArm;
 80022d6:	4b07      	ldr	r3, [pc, #28]	; (80022f4 <robotTurnLeftInvert+0x34>)
 80022d8:	781a      	ldrb	r2, [r3, #0]
 80022da:	4b07      	ldr	r3, [pc, #28]	; (80022f8 <robotTurnLeftInvert+0x38>)
 80022dc:	701a      	strb	r2, [r3, #0]
	robotTurnInvert(NULL);
 80022de:	2000      	movs	r0, #0
 80022e0:	f7ff ff26 	bl	8002130 <robotTurnInvert>
 80022e4:	e000      	b.n	80022e8 <robotTurnLeftInvert+0x28>
	if (state != FREE) return;
 80022e6:	bf00      	nop
}
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	20000204 	.word	0x20000204
 80022f4:	20000000 	.word	0x20000000
 80022f8:	20000208 	.word	0x20000208

080022fc <robotTurnLeftDouble>:

void robotTurnLeftDouble(void *) {
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
	if (state != FREE) return;
 8002304:	4b09      	ldr	r3, [pc, #36]	; (800232c <robotTurnLeftDouble+0x30>)
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	2b01      	cmp	r3, #1
 800230a:	d10a      	bne.n	8002322 <robotTurnLeftDouble+0x26>
	state = BUSY;
 800230c:	4b07      	ldr	r3, [pc, #28]	; (800232c <robotTurnLeftDouble+0x30>)
 800230e:	2202      	movs	r2, #2
 8002310:	701a      	strb	r2, [r3, #0]
	turningArm.armID = leftArm;
 8002312:	4b07      	ldr	r3, [pc, #28]	; (8002330 <robotTurnLeftDouble+0x34>)
 8002314:	781a      	ldrb	r2, [r3, #0]
 8002316:	4b07      	ldr	r3, [pc, #28]	; (8002334 <robotTurnLeftDouble+0x38>)
 8002318:	701a      	strb	r2, [r3, #0]
	robotTurnDouble(NULL);
 800231a:	2000      	movs	r0, #0
 800231c:	f7ff ff50 	bl	80021c0 <robotTurnDouble>
 8002320:	e000      	b.n	8002324 <robotTurnLeftDouble+0x28>
	if (state != FREE) return;
 8002322:	bf00      	nop
}
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	20000204 	.word	0x20000204
 8002330:	20000000 	.word	0x20000000
 8002334:	20000208 	.word	0x20000208

08002338 <robotTurnFrontNormal>:

void robotTurnFrontNormal(void *) {
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
	if (state != FREE) return;
 8002340:	4b09      	ldr	r3, [pc, #36]	; (8002368 <robotTurnFrontNormal+0x30>)
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	2b01      	cmp	r3, #1
 8002346:	d10a      	bne.n	800235e <robotTurnFrontNormal+0x26>
	state = BUSY;
 8002348:	4b07      	ldr	r3, [pc, #28]	; (8002368 <robotTurnFrontNormal+0x30>)
 800234a:	2202      	movs	r2, #2
 800234c:	701a      	strb	r2, [r3, #0]
	turningArm.armID = frontArm;
 800234e:	4b07      	ldr	r3, [pc, #28]	; (800236c <robotTurnFrontNormal+0x34>)
 8002350:	781a      	ldrb	r2, [r3, #0]
 8002352:	4b07      	ldr	r3, [pc, #28]	; (8002370 <robotTurnFrontNormal+0x38>)
 8002354:	701a      	strb	r2, [r3, #0]
	robotTurnNormal(NULL);
 8002356:	2000      	movs	r0, #0
 8002358:	f7ff fea2 	bl	80020a0 <robotTurnNormal>
 800235c:	e000      	b.n	8002360 <robotTurnFrontNormal+0x28>
	if (state != FREE) return;
 800235e:	bf00      	nop
}
 8002360:	3708      	adds	r7, #8
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	20000204 	.word	0x20000204
 800236c:	20000001 	.word	0x20000001
 8002370:	20000208 	.word	0x20000208

08002374 <robotTurnFrontInvert>:

void robotTurnFrontInvert(void *) {
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
	if (state != FREE) return;
 800237c:	4b09      	ldr	r3, [pc, #36]	; (80023a4 <robotTurnFrontInvert+0x30>)
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	2b01      	cmp	r3, #1
 8002382:	d10a      	bne.n	800239a <robotTurnFrontInvert+0x26>
	state = BUSY;
 8002384:	4b07      	ldr	r3, [pc, #28]	; (80023a4 <robotTurnFrontInvert+0x30>)
 8002386:	2202      	movs	r2, #2
 8002388:	701a      	strb	r2, [r3, #0]
	turningArm.armID = frontArm;
 800238a:	4b07      	ldr	r3, [pc, #28]	; (80023a8 <robotTurnFrontInvert+0x34>)
 800238c:	781a      	ldrb	r2, [r3, #0]
 800238e:	4b07      	ldr	r3, [pc, #28]	; (80023ac <robotTurnFrontInvert+0x38>)
 8002390:	701a      	strb	r2, [r3, #0]
	robotTurnInvert(NULL);
 8002392:	2000      	movs	r0, #0
 8002394:	f7ff fecc 	bl	8002130 <robotTurnInvert>
 8002398:	e000      	b.n	800239c <robotTurnFrontInvert+0x28>
	if (state != FREE) return;
 800239a:	bf00      	nop
}
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	20000204 	.word	0x20000204
 80023a8:	20000001 	.word	0x20000001
 80023ac:	20000208 	.word	0x20000208

080023b0 <robotTurnFrontDouble>:

void robotTurnFrontDouble(void *) {
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
	if (state != FREE) return;
 80023b8:	4b09      	ldr	r3, [pc, #36]	; (80023e0 <robotTurnFrontDouble+0x30>)
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d10a      	bne.n	80023d6 <robotTurnFrontDouble+0x26>
	state = BUSY;
 80023c0:	4b07      	ldr	r3, [pc, #28]	; (80023e0 <robotTurnFrontDouble+0x30>)
 80023c2:	2202      	movs	r2, #2
 80023c4:	701a      	strb	r2, [r3, #0]
	turningArm.armID = frontArm;
 80023c6:	4b07      	ldr	r3, [pc, #28]	; (80023e4 <robotTurnFrontDouble+0x34>)
 80023c8:	781a      	ldrb	r2, [r3, #0]
 80023ca:	4b07      	ldr	r3, [pc, #28]	; (80023e8 <robotTurnFrontDouble+0x38>)
 80023cc:	701a      	strb	r2, [r3, #0]
	robotTurnDouble(NULL);
 80023ce:	2000      	movs	r0, #0
 80023d0:	f7ff fef6 	bl	80021c0 <robotTurnDouble>
 80023d4:	e000      	b.n	80023d8 <robotTurnFrontDouble+0x28>
	if (state != FREE) return;
 80023d6:	bf00      	nop
}
 80023d8:	3708      	adds	r7, #8
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	20000204 	.word	0x20000204
 80023e4:	20000001 	.word	0x20000001
 80023e8:	20000208 	.word	0x20000208

080023ec <robotTurnRightNormal>:

void robotTurnRightNormal(void *) {
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
	if (state != FREE) return;
 80023f4:	4b09      	ldr	r3, [pc, #36]	; (800241c <robotTurnRightNormal+0x30>)
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d10a      	bne.n	8002412 <robotTurnRightNormal+0x26>
	state = BUSY;
 80023fc:	4b07      	ldr	r3, [pc, #28]	; (800241c <robotTurnRightNormal+0x30>)
 80023fe:	2202      	movs	r2, #2
 8002400:	701a      	strb	r2, [r3, #0]
	turningArm.armID = rightArm;
 8002402:	4b07      	ldr	r3, [pc, #28]	; (8002420 <robotTurnRightNormal+0x34>)
 8002404:	781a      	ldrb	r2, [r3, #0]
 8002406:	4b07      	ldr	r3, [pc, #28]	; (8002424 <robotTurnRightNormal+0x38>)
 8002408:	701a      	strb	r2, [r3, #0]
	robotTurnNormal(NULL);
 800240a:	2000      	movs	r0, #0
 800240c:	f7ff fe48 	bl	80020a0 <robotTurnNormal>
 8002410:	e000      	b.n	8002414 <robotTurnRightNormal+0x28>
	if (state != FREE) return;
 8002412:	bf00      	nop
}
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	20000204 	.word	0x20000204
 8002420:	20000002 	.word	0x20000002
 8002424:	20000208 	.word	0x20000208

08002428 <robotTurnRightInvert>:

void robotTurnRightInvert(void *) {
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
	if (state != FREE) return;
 8002430:	4b09      	ldr	r3, [pc, #36]	; (8002458 <robotTurnRightInvert+0x30>)
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	2b01      	cmp	r3, #1
 8002436:	d10a      	bne.n	800244e <robotTurnRightInvert+0x26>
	state = BUSY;
 8002438:	4b07      	ldr	r3, [pc, #28]	; (8002458 <robotTurnRightInvert+0x30>)
 800243a:	2202      	movs	r2, #2
 800243c:	701a      	strb	r2, [r3, #0]
	turningArm.armID = rightArm;
 800243e:	4b07      	ldr	r3, [pc, #28]	; (800245c <robotTurnRightInvert+0x34>)
 8002440:	781a      	ldrb	r2, [r3, #0]
 8002442:	4b07      	ldr	r3, [pc, #28]	; (8002460 <robotTurnRightInvert+0x38>)
 8002444:	701a      	strb	r2, [r3, #0]
	robotTurnInvert(NULL);
 8002446:	2000      	movs	r0, #0
 8002448:	f7ff fe72 	bl	8002130 <robotTurnInvert>
 800244c:	e000      	b.n	8002450 <robotTurnRightInvert+0x28>
	if (state != FREE) return;
 800244e:	bf00      	nop
}
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	20000204 	.word	0x20000204
 800245c:	20000002 	.word	0x20000002
 8002460:	20000208 	.word	0x20000208

08002464 <robotTurnRightDouble>:

void robotTurnRightDouble(void *) {
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
	if (state != FREE) return;
 800246c:	4b09      	ldr	r3, [pc, #36]	; (8002494 <robotTurnRightDouble+0x30>)
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	2b01      	cmp	r3, #1
 8002472:	d10a      	bne.n	800248a <robotTurnRightDouble+0x26>
	state = BUSY;
 8002474:	4b07      	ldr	r3, [pc, #28]	; (8002494 <robotTurnRightDouble+0x30>)
 8002476:	2202      	movs	r2, #2
 8002478:	701a      	strb	r2, [r3, #0]
	turningArm.armID = rightArm;
 800247a:	4b07      	ldr	r3, [pc, #28]	; (8002498 <robotTurnRightDouble+0x34>)
 800247c:	781a      	ldrb	r2, [r3, #0]
 800247e:	4b07      	ldr	r3, [pc, #28]	; (800249c <robotTurnRightDouble+0x38>)
 8002480:	701a      	strb	r2, [r3, #0]
	robotTurnDouble(NULL);
 8002482:	2000      	movs	r0, #0
 8002484:	f7ff fe9c 	bl	80021c0 <robotTurnDouble>
 8002488:	e000      	b.n	800248c <robotTurnRightDouble+0x28>
	if (state != FREE) return;
 800248a:	bf00      	nop
}
 800248c:	3708      	adds	r7, #8
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	20000204 	.word	0x20000204
 8002498:	20000002 	.word	0x20000002
 800249c:	20000208 	.word	0x20000208

080024a0 <robotTurnBackNormal>:

void robotTurnBackNormal(void *) {
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
	if (state != FREE) return;
 80024a8:	4b09      	ldr	r3, [pc, #36]	; (80024d0 <robotTurnBackNormal+0x30>)
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d10a      	bne.n	80024c6 <robotTurnBackNormal+0x26>
	state = BUSY;
 80024b0:	4b07      	ldr	r3, [pc, #28]	; (80024d0 <robotTurnBackNormal+0x30>)
 80024b2:	2202      	movs	r2, #2
 80024b4:	701a      	strb	r2, [r3, #0]
	turningArm.armID = backArm;
 80024b6:	4b07      	ldr	r3, [pc, #28]	; (80024d4 <robotTurnBackNormal+0x34>)
 80024b8:	781a      	ldrb	r2, [r3, #0]
 80024ba:	4b07      	ldr	r3, [pc, #28]	; (80024d8 <robotTurnBackNormal+0x38>)
 80024bc:	701a      	strb	r2, [r3, #0]
	robotTurnNormal(NULL);
 80024be:	2000      	movs	r0, #0
 80024c0:	f7ff fdee 	bl	80020a0 <robotTurnNormal>
 80024c4:	e000      	b.n	80024c8 <robotTurnBackNormal+0x28>
	if (state != FREE) return;
 80024c6:	bf00      	nop
}
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	20000204 	.word	0x20000204
 80024d4:	20000003 	.word	0x20000003
 80024d8:	20000208 	.word	0x20000208

080024dc <robotTurnBackInvert>:

void robotTurnBackInvert(void *) {
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
	if (state != FREE) return;
 80024e4:	4b09      	ldr	r3, [pc, #36]	; (800250c <robotTurnBackInvert+0x30>)
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d10a      	bne.n	8002502 <robotTurnBackInvert+0x26>
	state = BUSY;
 80024ec:	4b07      	ldr	r3, [pc, #28]	; (800250c <robotTurnBackInvert+0x30>)
 80024ee:	2202      	movs	r2, #2
 80024f0:	701a      	strb	r2, [r3, #0]
	turningArm.armID = backArm;
 80024f2:	4b07      	ldr	r3, [pc, #28]	; (8002510 <robotTurnBackInvert+0x34>)
 80024f4:	781a      	ldrb	r2, [r3, #0]
 80024f6:	4b07      	ldr	r3, [pc, #28]	; (8002514 <robotTurnBackInvert+0x38>)
 80024f8:	701a      	strb	r2, [r3, #0]
	robotTurnInvert(NULL);
 80024fa:	2000      	movs	r0, #0
 80024fc:	f7ff fe18 	bl	8002130 <robotTurnInvert>
 8002500:	e000      	b.n	8002504 <robotTurnBackInvert+0x28>
	if (state != FREE) return;
 8002502:	bf00      	nop
}
 8002504:	3708      	adds	r7, #8
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	20000204 	.word	0x20000204
 8002510:	20000003 	.word	0x20000003
 8002514:	20000208 	.word	0x20000208

08002518 <robotTurnBackDouble>:

void robotTurnBackDouble(void *) {
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
	if (state != FREE) return;
 8002520:	4b09      	ldr	r3, [pc, #36]	; (8002548 <robotTurnBackDouble+0x30>)
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	2b01      	cmp	r3, #1
 8002526:	d10a      	bne.n	800253e <robotTurnBackDouble+0x26>
	state = BUSY;
 8002528:	4b07      	ldr	r3, [pc, #28]	; (8002548 <robotTurnBackDouble+0x30>)
 800252a:	2202      	movs	r2, #2
 800252c:	701a      	strb	r2, [r3, #0]
	turningArm.armID = backArm;
 800252e:	4b07      	ldr	r3, [pc, #28]	; (800254c <robotTurnBackDouble+0x34>)
 8002530:	781a      	ldrb	r2, [r3, #0]
 8002532:	4b07      	ldr	r3, [pc, #28]	; (8002550 <robotTurnBackDouble+0x38>)
 8002534:	701a      	strb	r2, [r3, #0]
	robotTurnDouble(NULL);
 8002536:	2000      	movs	r0, #0
 8002538:	f7ff fe42 	bl	80021c0 <robotTurnDouble>
 800253c:	e000      	b.n	8002540 <robotTurnBackDouble+0x28>
	if (state != FREE) return;
 800253e:	bf00      	nop
}
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	20000204 	.word	0x20000204
 800254c:	20000003 	.word	0x20000003
 8002550:	20000208 	.word	0x20000208

08002554 <robotFlipReturn>:

void robotFlipReturn(void *) {
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
	schedulerAddTask(armRelease, &arms[flippingArm.firstArmID], 0 * ROBOT_AUTODURATION, 0);
 800255c:	4b3b      	ldr	r3, [pc, #236]	; (800264c <robotFlipReturn+0xf8>)
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	011b      	lsls	r3, r3, #4
 8002562:	4a3b      	ldr	r2, [pc, #236]	; (8002650 <robotFlipReturn+0xfc>)
 8002564:	1899      	adds	r1, r3, r2
 8002566:	2300      	movs	r3, #0
 8002568:	2200      	movs	r2, #0
 800256a:	483a      	ldr	r0, [pc, #232]	; (8002654 <robotFlipReturn+0x100>)
 800256c:	f000 fbd4 	bl	8002d18 <schedulerAddTask>
	schedulerAddTask(armRelease, &arms[flippingArm.secondArmID], 0 * ROBOT_AUTODURATION, 0);
 8002570:	4b36      	ldr	r3, [pc, #216]	; (800264c <robotFlipReturn+0xf8>)
 8002572:	785b      	ldrb	r3, [r3, #1]
 8002574:	011b      	lsls	r3, r3, #4
 8002576:	4a36      	ldr	r2, [pc, #216]	; (8002650 <robotFlipReturn+0xfc>)
 8002578:	1899      	adds	r1, r3, r2
 800257a:	2300      	movs	r3, #0
 800257c:	2200      	movs	r2, #0
 800257e:	4835      	ldr	r0, [pc, #212]	; (8002654 <robotFlipReturn+0x100>)
 8002580:	f000 fbca 	bl	8002d18 <schedulerAddTask>
	schedulerAddTask(armBackward, &arms[flippingArm.firstArmID], 1 * ROBOT_AUTODURATION, 0);
 8002584:	4b31      	ldr	r3, [pc, #196]	; (800264c <robotFlipReturn+0xf8>)
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	011b      	lsls	r3, r3, #4
 800258a:	4a31      	ldr	r2, [pc, #196]	; (8002650 <robotFlipReturn+0xfc>)
 800258c:	1899      	adds	r1, r3, r2
 800258e:	2300      	movs	r3, #0
 8002590:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002594:	4830      	ldr	r0, [pc, #192]	; (8002658 <robotFlipReturn+0x104>)
 8002596:	f000 fbbf 	bl	8002d18 <schedulerAddTask>
	schedulerAddTask(armBackward, &arms[flippingArm.secondArmID], 1 * ROBOT_AUTODURATION, 0);
 800259a:	4b2c      	ldr	r3, [pc, #176]	; (800264c <robotFlipReturn+0xf8>)
 800259c:	785b      	ldrb	r3, [r3, #1]
 800259e:	011b      	lsls	r3, r3, #4
 80025a0:	4a2b      	ldr	r2, [pc, #172]	; (8002650 <robotFlipReturn+0xfc>)
 80025a2:	1899      	adds	r1, r3, r2
 80025a4:	2300      	movs	r3, #0
 80025a6:	f240 12f3 	movw	r2, #499	; 0x1f3
 80025aa:	482b      	ldr	r0, [pc, #172]	; (8002658 <robotFlipReturn+0x104>)
 80025ac:	f000 fbb4 	bl	8002d18 <schedulerAddTask>
	schedulerAddTask(armNorthward, &arms[flippingArm.firstArmID], 2 * ROBOT_AUTODURATION, 0);
 80025b0:	4b26      	ldr	r3, [pc, #152]	; (800264c <robotFlipReturn+0xf8>)
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	011b      	lsls	r3, r3, #4
 80025b6:	4a26      	ldr	r2, [pc, #152]	; (8002650 <robotFlipReturn+0xfc>)
 80025b8:	1899      	adds	r1, r3, r2
 80025ba:	2300      	movs	r3, #0
 80025bc:	f240 32e6 	movw	r2, #998	; 0x3e6
 80025c0:	4826      	ldr	r0, [pc, #152]	; (800265c <robotFlipReturn+0x108>)
 80025c2:	f000 fba9 	bl	8002d18 <schedulerAddTask>
	schedulerAddTask(armNorthward, &arms[flippingArm.secondArmID], 2 * ROBOT_AUTODURATION, 0);
 80025c6:	4b21      	ldr	r3, [pc, #132]	; (800264c <robotFlipReturn+0xf8>)
 80025c8:	785b      	ldrb	r3, [r3, #1]
 80025ca:	011b      	lsls	r3, r3, #4
 80025cc:	4a20      	ldr	r2, [pc, #128]	; (8002650 <robotFlipReturn+0xfc>)
 80025ce:	1899      	adds	r1, r3, r2
 80025d0:	2300      	movs	r3, #0
 80025d2:	f240 32e6 	movw	r2, #998	; 0x3e6
 80025d6:	4821      	ldr	r0, [pc, #132]	; (800265c <robotFlipReturn+0x108>)
 80025d8:	f000 fb9e 	bl	8002d18 <schedulerAddTask>
	schedulerAddTask(armForward, &arms[flippingArm.firstArmID], 3 * ROBOT_AUTODURATION, 0);
 80025dc:	4b1b      	ldr	r3, [pc, #108]	; (800264c <robotFlipReturn+0xf8>)
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	011b      	lsls	r3, r3, #4
 80025e2:	4a1b      	ldr	r2, [pc, #108]	; (8002650 <robotFlipReturn+0xfc>)
 80025e4:	1899      	adds	r1, r3, r2
 80025e6:	2300      	movs	r3, #0
 80025e8:	f240 52d9 	movw	r2, #1497	; 0x5d9
 80025ec:	481c      	ldr	r0, [pc, #112]	; (8002660 <robotFlipReturn+0x10c>)
 80025ee:	f000 fb93 	bl	8002d18 <schedulerAddTask>
	schedulerAddTask(armForward, &arms[flippingArm.secondArmID], 3 * ROBOT_AUTODURATION, 0);
 80025f2:	4b16      	ldr	r3, [pc, #88]	; (800264c <robotFlipReturn+0xf8>)
 80025f4:	785b      	ldrb	r3, [r3, #1]
 80025f6:	011b      	lsls	r3, r3, #4
 80025f8:	4a15      	ldr	r2, [pc, #84]	; (8002650 <robotFlipReturn+0xfc>)
 80025fa:	1899      	adds	r1, r3, r2
 80025fc:	2300      	movs	r3, #0
 80025fe:	f240 52d9 	movw	r2, #1497	; 0x5d9
 8002602:	4817      	ldr	r0, [pc, #92]	; (8002660 <robotFlipReturn+0x10c>)
 8002604:	f000 fb88 	bl	8002d18 <schedulerAddTask>
	schedulerAddTask(armHold, &arms[flippingArm.firstArmID], 4 * ROBOT_AUTODURATION, 0);
 8002608:	4b10      	ldr	r3, [pc, #64]	; (800264c <robotFlipReturn+0xf8>)
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	011b      	lsls	r3, r3, #4
 800260e:	4a10      	ldr	r2, [pc, #64]	; (8002650 <robotFlipReturn+0xfc>)
 8002610:	1899      	adds	r1, r3, r2
 8002612:	2300      	movs	r3, #0
 8002614:	f240 72cc 	movw	r2, #1996	; 0x7cc
 8002618:	4812      	ldr	r0, [pc, #72]	; (8002664 <robotFlipReturn+0x110>)
 800261a:	f000 fb7d 	bl	8002d18 <schedulerAddTask>
	schedulerAddTask(armHold, &arms[flippingArm.secondArmID], 4 * ROBOT_AUTODURATION, 0);
 800261e:	4b0b      	ldr	r3, [pc, #44]	; (800264c <robotFlipReturn+0xf8>)
 8002620:	785b      	ldrb	r3, [r3, #1]
 8002622:	011b      	lsls	r3, r3, #4
 8002624:	4a0a      	ldr	r2, [pc, #40]	; (8002650 <robotFlipReturn+0xfc>)
 8002626:	1899      	adds	r1, r3, r2
 8002628:	2300      	movs	r3, #0
 800262a:	f240 72cc 	movw	r2, #1996	; 0x7cc
 800262e:	480d      	ldr	r0, [pc, #52]	; (8002664 <robotFlipReturn+0x110>)
 8002630:	f000 fb72 	bl	8002d18 <schedulerAddTask>
	schedulerAddTask(robotFree, NULL, 5 * ROBOT_AUTODURATION, 0);
 8002634:	2300      	movs	r3, #0
 8002636:	f640 12bf 	movw	r2, #2495	; 0x9bf
 800263a:	2100      	movs	r1, #0
 800263c:	480a      	ldr	r0, [pc, #40]	; (8002668 <robotFlipReturn+0x114>)
 800263e:	f000 fb6b 	bl	8002d18 <schedulerAddTask>
}
 8002642:	bf00      	nop
 8002644:	3708      	adds	r7, #8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	2000020c 	.word	0x2000020c
 8002650:	200000a4 	.word	0x200000a4
 8002654:	08001609 	.word	0x08001609
 8002658:	080016b9 	.word	0x080016b9
 800265c:	08001651 	.word	0x08001651
 8002660:	08001697 	.word	0x08001697
 8002664:	080015e5 	.word	0x080015e5
 8002668:	08001d1d 	.word	0x08001d1d

0800266c <robotFlipSingle>:

void robotFlipSingle(void *) {
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
	schedulerAddTask(armRelease, &arms[flippingArm.thirdArmID], 0 * ROBOT_AUTODURATION, 0);
 8002674:	4b3b      	ldr	r3, [pc, #236]	; (8002764 <robotFlipSingle+0xf8>)
 8002676:	789b      	ldrb	r3, [r3, #2]
 8002678:	011b      	lsls	r3, r3, #4
 800267a:	4a3b      	ldr	r2, [pc, #236]	; (8002768 <robotFlipSingle+0xfc>)
 800267c:	1899      	adds	r1, r3, r2
 800267e:	2300      	movs	r3, #0
 8002680:	2200      	movs	r2, #0
 8002682:	483a      	ldr	r0, [pc, #232]	; (800276c <robotFlipSingle+0x100>)
 8002684:	f000 fb48 	bl	8002d18 <schedulerAddTask>
	schedulerAddTask(armRelease, &arms[flippingArm.fourthArmID], 0 * ROBOT_AUTODURATION, 0);
 8002688:	4b36      	ldr	r3, [pc, #216]	; (8002764 <robotFlipSingle+0xf8>)
 800268a:	78db      	ldrb	r3, [r3, #3]
 800268c:	011b      	lsls	r3, r3, #4
 800268e:	4a36      	ldr	r2, [pc, #216]	; (8002768 <robotFlipSingle+0xfc>)
 8002690:	1899      	adds	r1, r3, r2
 8002692:	2300      	movs	r3, #0
 8002694:	2200      	movs	r2, #0
 8002696:	4835      	ldr	r0, [pc, #212]	; (800276c <robotFlipSingle+0x100>)
 8002698:	f000 fb3e 	bl	8002d18 <schedulerAddTask>
	schedulerAddTask(armBackward, &arms[flippingArm.thirdArmID], 1 * ROBOT_AUTODURATION, 0);
 800269c:	4b31      	ldr	r3, [pc, #196]	; (8002764 <robotFlipSingle+0xf8>)
 800269e:	789b      	ldrb	r3, [r3, #2]
 80026a0:	011b      	lsls	r3, r3, #4
 80026a2:	4a31      	ldr	r2, [pc, #196]	; (8002768 <robotFlipSingle+0xfc>)
 80026a4:	1899      	adds	r1, r3, r2
 80026a6:	2300      	movs	r3, #0
 80026a8:	f240 12f3 	movw	r2, #499	; 0x1f3
 80026ac:	4830      	ldr	r0, [pc, #192]	; (8002770 <robotFlipSingle+0x104>)
 80026ae:	f000 fb33 	bl	8002d18 <schedulerAddTask>
	schedulerAddTask(armBackward, &arms[flippingArm.fourthArmID], 1 * ROBOT_AUTODURATION, 0);
 80026b2:	4b2c      	ldr	r3, [pc, #176]	; (8002764 <robotFlipSingle+0xf8>)
 80026b4:	78db      	ldrb	r3, [r3, #3]
 80026b6:	011b      	lsls	r3, r3, #4
 80026b8:	4a2b      	ldr	r2, [pc, #172]	; (8002768 <robotFlipSingle+0xfc>)
 80026ba:	1899      	adds	r1, r3, r2
 80026bc:	2300      	movs	r3, #0
 80026be:	f240 12f3 	movw	r2, #499	; 0x1f3
 80026c2:	482b      	ldr	r0, [pc, #172]	; (8002770 <robotFlipSingle+0x104>)
 80026c4:	f000 fb28 	bl	8002d18 <schedulerAddTask>
	schedulerAddTask(armEastward, &arms[flippingArm.firstArmID], 2 * ROBOT_AUTODURATION, 0);
 80026c8:	4b26      	ldr	r3, [pc, #152]	; (8002764 <robotFlipSingle+0xf8>)
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	011b      	lsls	r3, r3, #4
 80026ce:	4a26      	ldr	r2, [pc, #152]	; (8002768 <robotFlipSingle+0xfc>)
 80026d0:	1899      	adds	r1, r3, r2
 80026d2:	2300      	movs	r3, #0
 80026d4:	f240 32e6 	movw	r2, #998	; 0x3e6
 80026d8:	4826      	ldr	r0, [pc, #152]	; (8002774 <robotFlipSingle+0x108>)
 80026da:	f000 fb1d 	bl	8002d18 <schedulerAddTask>
	schedulerAddTask(armWestward, &arms[flippingArm.secondArmID], 2 * ROBOT_AUTODURATION, 0);
 80026de:	4b21      	ldr	r3, [pc, #132]	; (8002764 <robotFlipSingle+0xf8>)
 80026e0:	785b      	ldrb	r3, [r3, #1]
 80026e2:	011b      	lsls	r3, r3, #4
 80026e4:	4a20      	ldr	r2, [pc, #128]	; (8002768 <robotFlipSingle+0xfc>)
 80026e6:	1899      	adds	r1, r3, r2
 80026e8:	2300      	movs	r3, #0
 80026ea:	f240 32e6 	movw	r2, #998	; 0x3e6
 80026ee:	4822      	ldr	r0, [pc, #136]	; (8002778 <robotFlipSingle+0x10c>)
 80026f0:	f000 fb12 	bl	8002d18 <schedulerAddTask>
	schedulerAddTask(armForward, &arms[flippingArm.thirdArmID], 3 * ROBOT_AUTODURATION, 0);
 80026f4:	4b1b      	ldr	r3, [pc, #108]	; (8002764 <robotFlipSingle+0xf8>)
 80026f6:	789b      	ldrb	r3, [r3, #2]
 80026f8:	011b      	lsls	r3, r3, #4
 80026fa:	4a1b      	ldr	r2, [pc, #108]	; (8002768 <robotFlipSingle+0xfc>)
 80026fc:	1899      	adds	r1, r3, r2
 80026fe:	2300      	movs	r3, #0
 8002700:	f240 52d9 	movw	r2, #1497	; 0x5d9
 8002704:	481d      	ldr	r0, [pc, #116]	; (800277c <robotFlipSingle+0x110>)
 8002706:	f000 fb07 	bl	8002d18 <schedulerAddTask>
	schedulerAddTask(armForward, &arms[flippingArm.fourthArmID], 3 * ROBOT_AUTODURATION, 0);
 800270a:	4b16      	ldr	r3, [pc, #88]	; (8002764 <robotFlipSingle+0xf8>)
 800270c:	78db      	ldrb	r3, [r3, #3]
 800270e:	011b      	lsls	r3, r3, #4
 8002710:	4a15      	ldr	r2, [pc, #84]	; (8002768 <robotFlipSingle+0xfc>)
 8002712:	1899      	adds	r1, r3, r2
 8002714:	2300      	movs	r3, #0
 8002716:	f240 52d9 	movw	r2, #1497	; 0x5d9
 800271a:	4818      	ldr	r0, [pc, #96]	; (800277c <robotFlipSingle+0x110>)
 800271c:	f000 fafc 	bl	8002d18 <schedulerAddTask>
	schedulerAddTask(armHold, &arms[flippingArm.thirdArmID], 4 * ROBOT_AUTODURATION, 0);
 8002720:	4b10      	ldr	r3, [pc, #64]	; (8002764 <robotFlipSingle+0xf8>)
 8002722:	789b      	ldrb	r3, [r3, #2]
 8002724:	011b      	lsls	r3, r3, #4
 8002726:	4a10      	ldr	r2, [pc, #64]	; (8002768 <robotFlipSingle+0xfc>)
 8002728:	1899      	adds	r1, r3, r2
 800272a:	2300      	movs	r3, #0
 800272c:	f240 72cc 	movw	r2, #1996	; 0x7cc
 8002730:	4813      	ldr	r0, [pc, #76]	; (8002780 <robotFlipSingle+0x114>)
 8002732:	f000 faf1 	bl	8002d18 <schedulerAddTask>
	schedulerAddTask(armHold, &arms[flippingArm.fourthArmID], 4 * ROBOT_AUTODURATION, 0);
 8002736:	4b0b      	ldr	r3, [pc, #44]	; (8002764 <robotFlipSingle+0xf8>)
 8002738:	78db      	ldrb	r3, [r3, #3]
 800273a:	011b      	lsls	r3, r3, #4
 800273c:	4a0a      	ldr	r2, [pc, #40]	; (8002768 <robotFlipSingle+0xfc>)
 800273e:	1899      	adds	r1, r3, r2
 8002740:	2300      	movs	r3, #0
 8002742:	f240 72cc 	movw	r2, #1996	; 0x7cc
 8002746:	480e      	ldr	r0, [pc, #56]	; (8002780 <robotFlipSingle+0x114>)
 8002748:	f000 fae6 	bl	8002d18 <schedulerAddTask>
	schedulerAddTask(robotFlipReturn, NULL, 5 * ROBOT_AUTODURATION, 0);
 800274c:	2300      	movs	r3, #0
 800274e:	f640 12bf 	movw	r2, #2495	; 0x9bf
 8002752:	2100      	movs	r1, #0
 8002754:	480b      	ldr	r0, [pc, #44]	; (8002784 <robotFlipSingle+0x118>)
 8002756:	f000 fadf 	bl	8002d18 <schedulerAddTask>
}
 800275a:	bf00      	nop
 800275c:	3708      	adds	r7, #8
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	2000020c 	.word	0x2000020c
 8002768:	200000a4 	.word	0x200000a4
 800276c:	08001609 	.word	0x08001609
 8002770:	080016b9 	.word	0x080016b9
 8002774:	08001675 	.word	0x08001675
 8002778:	0800162d 	.word	0x0800162d
 800277c:	08001697 	.word	0x08001697
 8002780:	080015e5 	.word	0x080015e5
 8002784:	08002555 	.word	0x08002555

08002788 <robotFlipDouble>:

void robotFlipDouble(void *) {
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
	schedulerAddTask(armRelease, &arms[flippingArm.firstArmID], 0 * ROBOT_AUTODURATION, 0);
 8002790:	4b72      	ldr	r3, [pc, #456]	; (800295c <robotFlipDouble+0x1d4>)
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	011b      	lsls	r3, r3, #4
 8002796:	4a72      	ldr	r2, [pc, #456]	; (8002960 <robotFlipDouble+0x1d8>)
 8002798:	1899      	adds	r1, r3, r2
 800279a:	2300      	movs	r3, #0
 800279c:	2200      	movs	r2, #0
 800279e:	4871      	ldr	r0, [pc, #452]	; (8002964 <robotFlipDouble+0x1dc>)
 80027a0:	f000 faba 	bl	8002d18 <schedulerAddTask>
	schedulerAddTask(armRelease, &arms[flippingArm.secondArmID], 0 * ROBOT_AUTODURATION, 0);
 80027a4:	4b6d      	ldr	r3, [pc, #436]	; (800295c <robotFlipDouble+0x1d4>)
 80027a6:	785b      	ldrb	r3, [r3, #1]
 80027a8:	011b      	lsls	r3, r3, #4
 80027aa:	4a6d      	ldr	r2, [pc, #436]	; (8002960 <robotFlipDouble+0x1d8>)
 80027ac:	1899      	adds	r1, r3, r2
 80027ae:	2300      	movs	r3, #0
 80027b0:	2200      	movs	r2, #0
 80027b2:	486c      	ldr	r0, [pc, #432]	; (8002964 <robotFlipDouble+0x1dc>)
 80027b4:	f000 fab0 	bl	8002d18 <schedulerAddTask>
	schedulerAddTask(armBackward, &arms[flippingArm.firstArmID], 1 * ROBOT_AUTODURATION, 0);
 80027b8:	4b68      	ldr	r3, [pc, #416]	; (800295c <robotFlipDouble+0x1d4>)
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	011b      	lsls	r3, r3, #4
 80027be:	4a68      	ldr	r2, [pc, #416]	; (8002960 <robotFlipDouble+0x1d8>)
 80027c0:	1899      	adds	r1, r3, r2
 80027c2:	2300      	movs	r3, #0
 80027c4:	f240 12f3 	movw	r2, #499	; 0x1f3
 80027c8:	4867      	ldr	r0, [pc, #412]	; (8002968 <robotFlipDouble+0x1e0>)
 80027ca:	f000 faa5 	bl	8002d18 <schedulerAddTask>
	schedulerAddTask(armBackward, &arms[flippingArm.secondArmID], 1 * ROBOT_AUTODURATION, 0);
 80027ce:	4b63      	ldr	r3, [pc, #396]	; (800295c <robotFlipDouble+0x1d4>)
 80027d0:	785b      	ldrb	r3, [r3, #1]
 80027d2:	011b      	lsls	r3, r3, #4
 80027d4:	4a62      	ldr	r2, [pc, #392]	; (8002960 <robotFlipDouble+0x1d8>)
 80027d6:	1899      	adds	r1, r3, r2
 80027d8:	2300      	movs	r3, #0
 80027da:	f240 12f3 	movw	r2, #499	; 0x1f3
 80027de:	4862      	ldr	r0, [pc, #392]	; (8002968 <robotFlipDouble+0x1e0>)
 80027e0:	f000 fa9a 	bl	8002d18 <schedulerAddTask>
	schedulerAddTask(armWestward, &arms[flippingArm.firstArmID], 2 * ROBOT_AUTODURATION, 0);
 80027e4:	4b5d      	ldr	r3, [pc, #372]	; (800295c <robotFlipDouble+0x1d4>)
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	011b      	lsls	r3, r3, #4
 80027ea:	4a5d      	ldr	r2, [pc, #372]	; (8002960 <robotFlipDouble+0x1d8>)
 80027ec:	1899      	adds	r1, r3, r2
 80027ee:	2300      	movs	r3, #0
 80027f0:	f240 32e6 	movw	r2, #998	; 0x3e6
 80027f4:	485d      	ldr	r0, [pc, #372]	; (800296c <robotFlipDouble+0x1e4>)
 80027f6:	f000 fa8f 	bl	8002d18 <schedulerAddTask>
	schedulerAddTask(armEastward, &arms[flippingArm.secondArmID], 2 * ROBOT_AUTODURATION, 0);
 80027fa:	4b58      	ldr	r3, [pc, #352]	; (800295c <robotFlipDouble+0x1d4>)
 80027fc:	785b      	ldrb	r3, [r3, #1]
 80027fe:	011b      	lsls	r3, r3, #4
 8002800:	4a57      	ldr	r2, [pc, #348]	; (8002960 <robotFlipDouble+0x1d8>)
 8002802:	1899      	adds	r1, r3, r2
 8002804:	2300      	movs	r3, #0
 8002806:	f240 32e6 	movw	r2, #998	; 0x3e6
 800280a:	4859      	ldr	r0, [pc, #356]	; (8002970 <robotFlipDouble+0x1e8>)
 800280c:	f000 fa84 	bl	8002d18 <schedulerAddTask>
	schedulerAddTask(armForward, &arms[flippingArm.firstArmID], 3 * ROBOT_AUTODURATION, 0);
 8002810:	4b52      	ldr	r3, [pc, #328]	; (800295c <robotFlipDouble+0x1d4>)
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	011b      	lsls	r3, r3, #4
 8002816:	4a52      	ldr	r2, [pc, #328]	; (8002960 <robotFlipDouble+0x1d8>)
 8002818:	1899      	adds	r1, r3, r2
 800281a:	2300      	movs	r3, #0
 800281c:	f240 52d9 	movw	r2, #1497	; 0x5d9
 8002820:	4854      	ldr	r0, [pc, #336]	; (8002974 <robotFlipDouble+0x1ec>)
 8002822:	f000 fa79 	bl	8002d18 <schedulerAddTask>
	schedulerAddTask(armForward, &arms[flippingArm.secondArmID], 3 * ROBOT_AUTODURATION, 0);
 8002826:	4b4d      	ldr	r3, [pc, #308]	; (800295c <robotFlipDouble+0x1d4>)
 8002828:	785b      	ldrb	r3, [r3, #1]
 800282a:	011b      	lsls	r3, r3, #4
 800282c:	4a4c      	ldr	r2, [pc, #304]	; (8002960 <robotFlipDouble+0x1d8>)
 800282e:	1899      	adds	r1, r3, r2
 8002830:	2300      	movs	r3, #0
 8002832:	f240 52d9 	movw	r2, #1497	; 0x5d9
 8002836:	484f      	ldr	r0, [pc, #316]	; (8002974 <robotFlipDouble+0x1ec>)
 8002838:	f000 fa6e 	bl	8002d18 <schedulerAddTask>
	schedulerAddTask(armHold, &arms[flippingArm.firstArmID], 4 * ROBOT_AUTODURATION, 0);
 800283c:	4b47      	ldr	r3, [pc, #284]	; (800295c <robotFlipDouble+0x1d4>)
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	011b      	lsls	r3, r3, #4
 8002842:	4a47      	ldr	r2, [pc, #284]	; (8002960 <robotFlipDouble+0x1d8>)
 8002844:	1899      	adds	r1, r3, r2
 8002846:	2300      	movs	r3, #0
 8002848:	f240 72cc 	movw	r2, #1996	; 0x7cc
 800284c:	484a      	ldr	r0, [pc, #296]	; (8002978 <robotFlipDouble+0x1f0>)
 800284e:	f000 fa63 	bl	8002d18 <schedulerAddTask>
	schedulerAddTask(armHold, &arms[flippingArm.secondArmID], 4 * ROBOT_AUTODURATION, 0);
 8002852:	4b42      	ldr	r3, [pc, #264]	; (800295c <robotFlipDouble+0x1d4>)
 8002854:	785b      	ldrb	r3, [r3, #1]
 8002856:	011b      	lsls	r3, r3, #4
 8002858:	4a41      	ldr	r2, [pc, #260]	; (8002960 <robotFlipDouble+0x1d8>)
 800285a:	1899      	adds	r1, r3, r2
 800285c:	2300      	movs	r3, #0
 800285e:	f240 72cc 	movw	r2, #1996	; 0x7cc
 8002862:	4845      	ldr	r0, [pc, #276]	; (8002978 <robotFlipDouble+0x1f0>)
 8002864:	f000 fa58 	bl	8002d18 <schedulerAddTask>
	schedulerAddTask(armRelease, &arms[flippingArm.thirdArmID], 5 * ROBOT_AUTODURATION, 0);
 8002868:	4b3c      	ldr	r3, [pc, #240]	; (800295c <robotFlipDouble+0x1d4>)
 800286a:	789b      	ldrb	r3, [r3, #2]
 800286c:	011b      	lsls	r3, r3, #4
 800286e:	4a3c      	ldr	r2, [pc, #240]	; (8002960 <robotFlipDouble+0x1d8>)
 8002870:	1899      	adds	r1, r3, r2
 8002872:	2300      	movs	r3, #0
 8002874:	f640 12bf 	movw	r2, #2495	; 0x9bf
 8002878:	483a      	ldr	r0, [pc, #232]	; (8002964 <robotFlipDouble+0x1dc>)
 800287a:	f000 fa4d 	bl	8002d18 <schedulerAddTask>
	schedulerAddTask(armRelease, &arms[flippingArm.fourthArmID], 5 * ROBOT_AUTODURATION, 0);
 800287e:	4b37      	ldr	r3, [pc, #220]	; (800295c <robotFlipDouble+0x1d4>)
 8002880:	78db      	ldrb	r3, [r3, #3]
 8002882:	011b      	lsls	r3, r3, #4
 8002884:	4a36      	ldr	r2, [pc, #216]	; (8002960 <robotFlipDouble+0x1d8>)
 8002886:	1899      	adds	r1, r3, r2
 8002888:	2300      	movs	r3, #0
 800288a:	f640 12bf 	movw	r2, #2495	; 0x9bf
 800288e:	4835      	ldr	r0, [pc, #212]	; (8002964 <robotFlipDouble+0x1dc>)
 8002890:	f000 fa42 	bl	8002d18 <schedulerAddTask>
	schedulerAddTask(armBackward, &arms[flippingArm.thirdArmID], 6 * ROBOT_AUTODURATION, 0);
 8002894:	4b31      	ldr	r3, [pc, #196]	; (800295c <robotFlipDouble+0x1d4>)
 8002896:	789b      	ldrb	r3, [r3, #2]
 8002898:	011b      	lsls	r3, r3, #4
 800289a:	4a31      	ldr	r2, [pc, #196]	; (8002960 <robotFlipDouble+0x1d8>)
 800289c:	1899      	adds	r1, r3, r2
 800289e:	2300      	movs	r3, #0
 80028a0:	f640 32b2 	movw	r2, #2994	; 0xbb2
 80028a4:	4830      	ldr	r0, [pc, #192]	; (8002968 <robotFlipDouble+0x1e0>)
 80028a6:	f000 fa37 	bl	8002d18 <schedulerAddTask>
	schedulerAddTask(armBackward, &arms[flippingArm.fourthArmID], 6 * ROBOT_AUTODURATION, 0);
 80028aa:	4b2c      	ldr	r3, [pc, #176]	; (800295c <robotFlipDouble+0x1d4>)
 80028ac:	78db      	ldrb	r3, [r3, #3]
 80028ae:	011b      	lsls	r3, r3, #4
 80028b0:	4a2b      	ldr	r2, [pc, #172]	; (8002960 <robotFlipDouble+0x1d8>)
 80028b2:	1899      	adds	r1, r3, r2
 80028b4:	2300      	movs	r3, #0
 80028b6:	f640 32b2 	movw	r2, #2994	; 0xbb2
 80028ba:	482b      	ldr	r0, [pc, #172]	; (8002968 <robotFlipDouble+0x1e0>)
 80028bc:	f000 fa2c 	bl	8002d18 <schedulerAddTask>
	schedulerAddTask(armEastward, &arms[flippingArm.firstArmID], 7 * ROBOT_AUTODURATION, 0);
 80028c0:	4b26      	ldr	r3, [pc, #152]	; (800295c <robotFlipDouble+0x1d4>)
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	011b      	lsls	r3, r3, #4
 80028c6:	4a26      	ldr	r2, [pc, #152]	; (8002960 <robotFlipDouble+0x1d8>)
 80028c8:	1899      	adds	r1, r3, r2
 80028ca:	2300      	movs	r3, #0
 80028cc:	f640 52a5 	movw	r2, #3493	; 0xda5
 80028d0:	4827      	ldr	r0, [pc, #156]	; (8002970 <robotFlipDouble+0x1e8>)
 80028d2:	f000 fa21 	bl	8002d18 <schedulerAddTask>
	schedulerAddTask(armWestward, &arms[flippingArm.secondArmID], 7 * ROBOT_AUTODURATION, 0);
 80028d6:	4b21      	ldr	r3, [pc, #132]	; (800295c <robotFlipDouble+0x1d4>)
 80028d8:	785b      	ldrb	r3, [r3, #1]
 80028da:	011b      	lsls	r3, r3, #4
 80028dc:	4a20      	ldr	r2, [pc, #128]	; (8002960 <robotFlipDouble+0x1d8>)
 80028de:	1899      	adds	r1, r3, r2
 80028e0:	2300      	movs	r3, #0
 80028e2:	f640 52a5 	movw	r2, #3493	; 0xda5
 80028e6:	4821      	ldr	r0, [pc, #132]	; (800296c <robotFlipDouble+0x1e4>)
 80028e8:	f000 fa16 	bl	8002d18 <schedulerAddTask>
	schedulerAddTask(armForward, &arms[flippingArm.thirdArmID], 8 * ROBOT_AUTODURATION, 0);
 80028ec:	4b1b      	ldr	r3, [pc, #108]	; (800295c <robotFlipDouble+0x1d4>)
 80028ee:	789b      	ldrb	r3, [r3, #2]
 80028f0:	011b      	lsls	r3, r3, #4
 80028f2:	4a1b      	ldr	r2, [pc, #108]	; (8002960 <robotFlipDouble+0x1d8>)
 80028f4:	1899      	adds	r1, r3, r2
 80028f6:	2300      	movs	r3, #0
 80028f8:	f640 7298 	movw	r2, #3992	; 0xf98
 80028fc:	481d      	ldr	r0, [pc, #116]	; (8002974 <robotFlipDouble+0x1ec>)
 80028fe:	f000 fa0b 	bl	8002d18 <schedulerAddTask>
	schedulerAddTask(armForward, &arms[flippingArm.fourthArmID], 8 * ROBOT_AUTODURATION, 0);
 8002902:	4b16      	ldr	r3, [pc, #88]	; (800295c <robotFlipDouble+0x1d4>)
 8002904:	78db      	ldrb	r3, [r3, #3]
 8002906:	011b      	lsls	r3, r3, #4
 8002908:	4a15      	ldr	r2, [pc, #84]	; (8002960 <robotFlipDouble+0x1d8>)
 800290a:	1899      	adds	r1, r3, r2
 800290c:	2300      	movs	r3, #0
 800290e:	f640 7298 	movw	r2, #3992	; 0xf98
 8002912:	4818      	ldr	r0, [pc, #96]	; (8002974 <robotFlipDouble+0x1ec>)
 8002914:	f000 fa00 	bl	8002d18 <schedulerAddTask>
	schedulerAddTask(armHold, &arms[flippingArm.thirdArmID], 9 * ROBOT_AUTODURATION, 0);
 8002918:	4b10      	ldr	r3, [pc, #64]	; (800295c <robotFlipDouble+0x1d4>)
 800291a:	789b      	ldrb	r3, [r3, #2]
 800291c:	011b      	lsls	r3, r3, #4
 800291e:	4a10      	ldr	r2, [pc, #64]	; (8002960 <robotFlipDouble+0x1d8>)
 8002920:	1899      	adds	r1, r3, r2
 8002922:	2300      	movs	r3, #0
 8002924:	f241 128b 	movw	r2, #4491	; 0x118b
 8002928:	4813      	ldr	r0, [pc, #76]	; (8002978 <robotFlipDouble+0x1f0>)
 800292a:	f000 f9f5 	bl	8002d18 <schedulerAddTask>
	schedulerAddTask(armHold, &arms[flippingArm.fourthArmID], 9 * ROBOT_AUTODURATION, 0);
 800292e:	4b0b      	ldr	r3, [pc, #44]	; (800295c <robotFlipDouble+0x1d4>)
 8002930:	78db      	ldrb	r3, [r3, #3]
 8002932:	011b      	lsls	r3, r3, #4
 8002934:	4a0a      	ldr	r2, [pc, #40]	; (8002960 <robotFlipDouble+0x1d8>)
 8002936:	1899      	adds	r1, r3, r2
 8002938:	2300      	movs	r3, #0
 800293a:	f241 128b 	movw	r2, #4491	; 0x118b
 800293e:	480e      	ldr	r0, [pc, #56]	; (8002978 <robotFlipDouble+0x1f0>)
 8002940:	f000 f9ea 	bl	8002d18 <schedulerAddTask>
	schedulerAddTask(robotFlipReturn, NULL, 10 * ROBOT_AUTODURATION, 0);
 8002944:	2300      	movs	r3, #0
 8002946:	f241 327e 	movw	r2, #4990	; 0x137e
 800294a:	2100      	movs	r1, #0
 800294c:	480b      	ldr	r0, [pc, #44]	; (800297c <robotFlipDouble+0x1f4>)
 800294e:	f000 f9e3 	bl	8002d18 <schedulerAddTask>
}
 8002952:	bf00      	nop
 8002954:	3708      	adds	r7, #8
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	2000020c 	.word	0x2000020c
 8002960:	200000a4 	.word	0x200000a4
 8002964:	08001609 	.word	0x08001609
 8002968:	080016b9 	.word	0x080016b9
 800296c:	0800162d 	.word	0x0800162d
 8002970:	08001675 	.word	0x08001675
 8002974:	08001697 	.word	0x08001697
 8002978:	080015e5 	.word	0x080015e5
 800297c:	08002555 	.word	0x08002555

08002980 <robotFlipXNormal>:

void robotFlipXNormal(void *) {
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
	if (state != FREE) return;
 8002988:	4b0f      	ldr	r3, [pc, #60]	; (80029c8 <robotFlipXNormal+0x48>)
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	2b01      	cmp	r3, #1
 800298e:	d116      	bne.n	80029be <robotFlipXNormal+0x3e>
	state = BUSY;
 8002990:	4b0d      	ldr	r3, [pc, #52]	; (80029c8 <robotFlipXNormal+0x48>)
 8002992:	2202      	movs	r2, #2
 8002994:	701a      	strb	r2, [r3, #0]
	flippingArm.firstArmID = rightArm;
 8002996:	4b0d      	ldr	r3, [pc, #52]	; (80029cc <robotFlipXNormal+0x4c>)
 8002998:	781a      	ldrb	r2, [r3, #0]
 800299a:	4b0d      	ldr	r3, [pc, #52]	; (80029d0 <robotFlipXNormal+0x50>)
 800299c:	701a      	strb	r2, [r3, #0]
	flippingArm.secondArmID = leftArm;
 800299e:	4b0d      	ldr	r3, [pc, #52]	; (80029d4 <robotFlipXNormal+0x54>)
 80029a0:	781a      	ldrb	r2, [r3, #0]
 80029a2:	4b0b      	ldr	r3, [pc, #44]	; (80029d0 <robotFlipXNormal+0x50>)
 80029a4:	705a      	strb	r2, [r3, #1]
	flippingArm.thirdArmID = frontArm;
 80029a6:	4b0c      	ldr	r3, [pc, #48]	; (80029d8 <robotFlipXNormal+0x58>)
 80029a8:	781a      	ldrb	r2, [r3, #0]
 80029aa:	4b09      	ldr	r3, [pc, #36]	; (80029d0 <robotFlipXNormal+0x50>)
 80029ac:	709a      	strb	r2, [r3, #2]
	flippingArm.fourthArmID = backArm;
 80029ae:	4b0b      	ldr	r3, [pc, #44]	; (80029dc <robotFlipXNormal+0x5c>)
 80029b0:	781a      	ldrb	r2, [r3, #0]
 80029b2:	4b07      	ldr	r3, [pc, #28]	; (80029d0 <robotFlipXNormal+0x50>)
 80029b4:	70da      	strb	r2, [r3, #3]
	robotFlipSingle(NULL);
 80029b6:	2000      	movs	r0, #0
 80029b8:	f7ff fe58 	bl	800266c <robotFlipSingle>
 80029bc:	e000      	b.n	80029c0 <robotFlipXNormal+0x40>
	if (state != FREE) return;
 80029be:	bf00      	nop
}
 80029c0:	3708      	adds	r7, #8
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	20000204 	.word	0x20000204
 80029cc:	20000002 	.word	0x20000002
 80029d0:	2000020c 	.word	0x2000020c
 80029d4:	20000000 	.word	0x20000000
 80029d8:	20000001 	.word	0x20000001
 80029dc:	20000003 	.word	0x20000003

080029e0 <robotFlipXInvert>:

void robotFlipXInvert(void *) {
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
	if (state != FREE) return;
 80029e8:	4b0f      	ldr	r3, [pc, #60]	; (8002a28 <robotFlipXInvert+0x48>)
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d116      	bne.n	8002a1e <robotFlipXInvert+0x3e>
	state = BUSY;
 80029f0:	4b0d      	ldr	r3, [pc, #52]	; (8002a28 <robotFlipXInvert+0x48>)
 80029f2:	2202      	movs	r2, #2
 80029f4:	701a      	strb	r2, [r3, #0]
	flippingArm.firstArmID = leftArm;
 80029f6:	4b0d      	ldr	r3, [pc, #52]	; (8002a2c <robotFlipXInvert+0x4c>)
 80029f8:	781a      	ldrb	r2, [r3, #0]
 80029fa:	4b0d      	ldr	r3, [pc, #52]	; (8002a30 <robotFlipXInvert+0x50>)
 80029fc:	701a      	strb	r2, [r3, #0]
	flippingArm.secondArmID = rightArm;
 80029fe:	4b0d      	ldr	r3, [pc, #52]	; (8002a34 <robotFlipXInvert+0x54>)
 8002a00:	781a      	ldrb	r2, [r3, #0]
 8002a02:	4b0b      	ldr	r3, [pc, #44]	; (8002a30 <robotFlipXInvert+0x50>)
 8002a04:	705a      	strb	r2, [r3, #1]
	flippingArm.thirdArmID = frontArm;
 8002a06:	4b0c      	ldr	r3, [pc, #48]	; (8002a38 <robotFlipXInvert+0x58>)
 8002a08:	781a      	ldrb	r2, [r3, #0]
 8002a0a:	4b09      	ldr	r3, [pc, #36]	; (8002a30 <robotFlipXInvert+0x50>)
 8002a0c:	709a      	strb	r2, [r3, #2]
	flippingArm.fourthArmID = backArm;
 8002a0e:	4b0b      	ldr	r3, [pc, #44]	; (8002a3c <robotFlipXInvert+0x5c>)
 8002a10:	781a      	ldrb	r2, [r3, #0]
 8002a12:	4b07      	ldr	r3, [pc, #28]	; (8002a30 <robotFlipXInvert+0x50>)
 8002a14:	70da      	strb	r2, [r3, #3]
	robotFlipSingle(NULL);
 8002a16:	2000      	movs	r0, #0
 8002a18:	f7ff fe28 	bl	800266c <robotFlipSingle>
 8002a1c:	e000      	b.n	8002a20 <robotFlipXInvert+0x40>
	if (state != FREE) return;
 8002a1e:	bf00      	nop
}
 8002a20:	3708      	adds	r7, #8
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	20000204 	.word	0x20000204
 8002a2c:	20000000 	.word	0x20000000
 8002a30:	2000020c 	.word	0x2000020c
 8002a34:	20000002 	.word	0x20000002
 8002a38:	20000001 	.word	0x20000001
 8002a3c:	20000003 	.word	0x20000003

08002a40 <robotFlipXDouble>:

void robotFlipXDouble(void *) {
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
	if (state != FREE) return;
 8002a48:	4b0f      	ldr	r3, [pc, #60]	; (8002a88 <robotFlipXDouble+0x48>)
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d116      	bne.n	8002a7e <robotFlipXDouble+0x3e>
	state = BUSY;
 8002a50:	4b0d      	ldr	r3, [pc, #52]	; (8002a88 <robotFlipXDouble+0x48>)
 8002a52:	2202      	movs	r2, #2
 8002a54:	701a      	strb	r2, [r3, #0]
	flippingArm.firstArmID = rightArm;
 8002a56:	4b0d      	ldr	r3, [pc, #52]	; (8002a8c <robotFlipXDouble+0x4c>)
 8002a58:	781a      	ldrb	r2, [r3, #0]
 8002a5a:	4b0d      	ldr	r3, [pc, #52]	; (8002a90 <robotFlipXDouble+0x50>)
 8002a5c:	701a      	strb	r2, [r3, #0]
	flippingArm.secondArmID = leftArm;
 8002a5e:	4b0d      	ldr	r3, [pc, #52]	; (8002a94 <robotFlipXDouble+0x54>)
 8002a60:	781a      	ldrb	r2, [r3, #0]
 8002a62:	4b0b      	ldr	r3, [pc, #44]	; (8002a90 <robotFlipXDouble+0x50>)
 8002a64:	705a      	strb	r2, [r3, #1]
	flippingArm.thirdArmID = frontArm;
 8002a66:	4b0c      	ldr	r3, [pc, #48]	; (8002a98 <robotFlipXDouble+0x58>)
 8002a68:	781a      	ldrb	r2, [r3, #0]
 8002a6a:	4b09      	ldr	r3, [pc, #36]	; (8002a90 <robotFlipXDouble+0x50>)
 8002a6c:	709a      	strb	r2, [r3, #2]
	flippingArm.fourthArmID = backArm;
 8002a6e:	4b0b      	ldr	r3, [pc, #44]	; (8002a9c <robotFlipXDouble+0x5c>)
 8002a70:	781a      	ldrb	r2, [r3, #0]
 8002a72:	4b07      	ldr	r3, [pc, #28]	; (8002a90 <robotFlipXDouble+0x50>)
 8002a74:	70da      	strb	r2, [r3, #3]
	robotFlipDouble(NULL);
 8002a76:	2000      	movs	r0, #0
 8002a78:	f7ff fe86 	bl	8002788 <robotFlipDouble>
 8002a7c:	e000      	b.n	8002a80 <robotFlipXDouble+0x40>
	if (state != FREE) return;
 8002a7e:	bf00      	nop
}
 8002a80:	3708      	adds	r7, #8
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	20000204 	.word	0x20000204
 8002a8c:	20000002 	.word	0x20000002
 8002a90:	2000020c 	.word	0x2000020c
 8002a94:	20000000 	.word	0x20000000
 8002a98:	20000001 	.word	0x20000001
 8002a9c:	20000003 	.word	0x20000003

08002aa0 <robotFlipZNormal>:

void robotFlipZNormal(void *) {
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
	if (state != FREE) return;
 8002aa8:	4b0f      	ldr	r3, [pc, #60]	; (8002ae8 <robotFlipZNormal+0x48>)
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d116      	bne.n	8002ade <robotFlipZNormal+0x3e>
	state = BUSY;
 8002ab0:	4b0d      	ldr	r3, [pc, #52]	; (8002ae8 <robotFlipZNormal+0x48>)
 8002ab2:	2202      	movs	r2, #2
 8002ab4:	701a      	strb	r2, [r3, #0]
	flippingArm.firstArmID = frontArm;
 8002ab6:	4b0d      	ldr	r3, [pc, #52]	; (8002aec <robotFlipZNormal+0x4c>)
 8002ab8:	781a      	ldrb	r2, [r3, #0]
 8002aba:	4b0d      	ldr	r3, [pc, #52]	; (8002af0 <robotFlipZNormal+0x50>)
 8002abc:	701a      	strb	r2, [r3, #0]
	flippingArm.secondArmID = backArm;
 8002abe:	4b0d      	ldr	r3, [pc, #52]	; (8002af4 <robotFlipZNormal+0x54>)
 8002ac0:	781a      	ldrb	r2, [r3, #0]
 8002ac2:	4b0b      	ldr	r3, [pc, #44]	; (8002af0 <robotFlipZNormal+0x50>)
 8002ac4:	705a      	strb	r2, [r3, #1]
	flippingArm.thirdArmID = leftArm;
 8002ac6:	4b0c      	ldr	r3, [pc, #48]	; (8002af8 <robotFlipZNormal+0x58>)
 8002ac8:	781a      	ldrb	r2, [r3, #0]
 8002aca:	4b09      	ldr	r3, [pc, #36]	; (8002af0 <robotFlipZNormal+0x50>)
 8002acc:	709a      	strb	r2, [r3, #2]
	flippingArm.fourthArmID = rightArm;
 8002ace:	4b0b      	ldr	r3, [pc, #44]	; (8002afc <robotFlipZNormal+0x5c>)
 8002ad0:	781a      	ldrb	r2, [r3, #0]
 8002ad2:	4b07      	ldr	r3, [pc, #28]	; (8002af0 <robotFlipZNormal+0x50>)
 8002ad4:	70da      	strb	r2, [r3, #3]
	robotFlipSingle(NULL);
 8002ad6:	2000      	movs	r0, #0
 8002ad8:	f7ff fdc8 	bl	800266c <robotFlipSingle>
 8002adc:	e000      	b.n	8002ae0 <robotFlipZNormal+0x40>
	if (state != FREE) return;
 8002ade:	bf00      	nop
}
 8002ae0:	3708      	adds	r7, #8
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	20000204 	.word	0x20000204
 8002aec:	20000001 	.word	0x20000001
 8002af0:	2000020c 	.word	0x2000020c
 8002af4:	20000003 	.word	0x20000003
 8002af8:	20000000 	.word	0x20000000
 8002afc:	20000002 	.word	0x20000002

08002b00 <robotFlipZInvert>:

void robotFlipZInvert(void *) {
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
	if (state != FREE) return;
 8002b08:	4b0f      	ldr	r3, [pc, #60]	; (8002b48 <robotFlipZInvert+0x48>)
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d116      	bne.n	8002b3e <robotFlipZInvert+0x3e>
	state = BUSY;
 8002b10:	4b0d      	ldr	r3, [pc, #52]	; (8002b48 <robotFlipZInvert+0x48>)
 8002b12:	2202      	movs	r2, #2
 8002b14:	701a      	strb	r2, [r3, #0]
	flippingArm.firstArmID = backArm;
 8002b16:	4b0d      	ldr	r3, [pc, #52]	; (8002b4c <robotFlipZInvert+0x4c>)
 8002b18:	781a      	ldrb	r2, [r3, #0]
 8002b1a:	4b0d      	ldr	r3, [pc, #52]	; (8002b50 <robotFlipZInvert+0x50>)
 8002b1c:	701a      	strb	r2, [r3, #0]
	flippingArm.secondArmID = frontArm;
 8002b1e:	4b0d      	ldr	r3, [pc, #52]	; (8002b54 <robotFlipZInvert+0x54>)
 8002b20:	781a      	ldrb	r2, [r3, #0]
 8002b22:	4b0b      	ldr	r3, [pc, #44]	; (8002b50 <robotFlipZInvert+0x50>)
 8002b24:	705a      	strb	r2, [r3, #1]
	flippingArm.thirdArmID = leftArm;
 8002b26:	4b0c      	ldr	r3, [pc, #48]	; (8002b58 <robotFlipZInvert+0x58>)
 8002b28:	781a      	ldrb	r2, [r3, #0]
 8002b2a:	4b09      	ldr	r3, [pc, #36]	; (8002b50 <robotFlipZInvert+0x50>)
 8002b2c:	709a      	strb	r2, [r3, #2]
	flippingArm.fourthArmID = rightArm;
 8002b2e:	4b0b      	ldr	r3, [pc, #44]	; (8002b5c <robotFlipZInvert+0x5c>)
 8002b30:	781a      	ldrb	r2, [r3, #0]
 8002b32:	4b07      	ldr	r3, [pc, #28]	; (8002b50 <robotFlipZInvert+0x50>)
 8002b34:	70da      	strb	r2, [r3, #3]
	robotFlipSingle(NULL);
 8002b36:	2000      	movs	r0, #0
 8002b38:	f7ff fd98 	bl	800266c <robotFlipSingle>
 8002b3c:	e000      	b.n	8002b40 <robotFlipZInvert+0x40>
	if (state != FREE) return;
 8002b3e:	bf00      	nop
}
 8002b40:	3708      	adds	r7, #8
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	20000204 	.word	0x20000204
 8002b4c:	20000003 	.word	0x20000003
 8002b50:	2000020c 	.word	0x2000020c
 8002b54:	20000001 	.word	0x20000001
 8002b58:	20000000 	.word	0x20000000
 8002b5c:	20000002 	.word	0x20000002

08002b60 <robotFlipZDouble>:

void robotFlipZDouble(void *) {
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
	if (state != FREE) return;
 8002b68:	4b0f      	ldr	r3, [pc, #60]	; (8002ba8 <robotFlipZDouble+0x48>)
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d116      	bne.n	8002b9e <robotFlipZDouble+0x3e>
	state = BUSY;
 8002b70:	4b0d      	ldr	r3, [pc, #52]	; (8002ba8 <robotFlipZDouble+0x48>)
 8002b72:	2202      	movs	r2, #2
 8002b74:	701a      	strb	r2, [r3, #0]
	flippingArm.firstArmID = frontArm;
 8002b76:	4b0d      	ldr	r3, [pc, #52]	; (8002bac <robotFlipZDouble+0x4c>)
 8002b78:	781a      	ldrb	r2, [r3, #0]
 8002b7a:	4b0d      	ldr	r3, [pc, #52]	; (8002bb0 <robotFlipZDouble+0x50>)
 8002b7c:	701a      	strb	r2, [r3, #0]
	flippingArm.secondArmID = backArm;
 8002b7e:	4b0d      	ldr	r3, [pc, #52]	; (8002bb4 <robotFlipZDouble+0x54>)
 8002b80:	781a      	ldrb	r2, [r3, #0]
 8002b82:	4b0b      	ldr	r3, [pc, #44]	; (8002bb0 <robotFlipZDouble+0x50>)
 8002b84:	705a      	strb	r2, [r3, #1]
	flippingArm.thirdArmID = leftArm;
 8002b86:	4b0c      	ldr	r3, [pc, #48]	; (8002bb8 <robotFlipZDouble+0x58>)
 8002b88:	781a      	ldrb	r2, [r3, #0]
 8002b8a:	4b09      	ldr	r3, [pc, #36]	; (8002bb0 <robotFlipZDouble+0x50>)
 8002b8c:	709a      	strb	r2, [r3, #2]
	flippingArm.fourthArmID = rightArm;
 8002b8e:	4b0b      	ldr	r3, [pc, #44]	; (8002bbc <robotFlipZDouble+0x5c>)
 8002b90:	781a      	ldrb	r2, [r3, #0]
 8002b92:	4b07      	ldr	r3, [pc, #28]	; (8002bb0 <robotFlipZDouble+0x50>)
 8002b94:	70da      	strb	r2, [r3, #3]
	robotFlipDouble(NULL);
 8002b96:	2000      	movs	r0, #0
 8002b98:	f7ff fdf6 	bl	8002788 <robotFlipDouble>
 8002b9c:	e000      	b.n	8002ba0 <robotFlipZDouble+0x40>
	if (state != FREE) return;
 8002b9e:	bf00      	nop
}
 8002ba0:	3708      	adds	r7, #8
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	20000204 	.word	0x20000204
 8002bac:	20000001 	.word	0x20000001
 8002bb0:	2000020c 	.word	0x2000020c
 8002bb4:	20000003 	.word	0x20000003
 8002bb8:	20000000 	.word	0x20000000
 8002bbc:	20000002 	.word	0x20000002

08002bc0 <schedulerCheck>:

#include "scheduler.h"

static schedulerTask tasks[SCHEDULER_NUMBER];

void schedulerCheck(void *arguments) {
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(SCHEDULER_LED_GPIO_Port, SCHEDULER_LED_Pin);
 8002bc8:	2120      	movs	r1, #32
 8002bca:	4803      	ldr	r0, [pc, #12]	; (8002bd8 <schedulerCheck+0x18>)
 8002bcc:	f001 fc6c 	bl	80044a8 <HAL_GPIO_TogglePin>
}
 8002bd0:	bf00      	nop
 8002bd2:	3708      	adds	r7, #8
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	40010800 	.word	0x40010800

08002bdc <schedulerInit>:

void schedulerInit(void) {
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < SCHEDULER_NUMBER; i ++) {
 8002be2:	2300      	movs	r3, #0
 8002be4:	71fb      	strb	r3, [r7, #7]
 8002be6:	e041      	b.n	8002c6c <schedulerInit+0x90>
        tasks[i].function = 0;
 8002be8:	79fa      	ldrb	r2, [r7, #7]
 8002bea:	4927      	ldr	r1, [pc, #156]	; (8002c88 <schedulerInit+0xac>)
 8002bec:	4613      	mov	r3, r2
 8002bee:	005b      	lsls	r3, r3, #1
 8002bf0:	4413      	add	r3, r2
 8002bf2:	00db      	lsls	r3, r3, #3
 8002bf4:	440b      	add	r3, r1
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	601a      	str	r2, [r3, #0]
        tasks[i].arguments = 0;
 8002bfa:	79fa      	ldrb	r2, [r7, #7]
 8002bfc:	4922      	ldr	r1, [pc, #136]	; (8002c88 <schedulerInit+0xac>)
 8002bfe:	4613      	mov	r3, r2
 8002c00:	005b      	lsls	r3, r3, #1
 8002c02:	4413      	add	r3, r2
 8002c04:	00db      	lsls	r3, r3, #3
 8002c06:	440b      	add	r3, r1
 8002c08:	3304      	adds	r3, #4
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	601a      	str	r2, [r3, #0]
        tasks[i].id = SCHEDULER_NUMBER - i;
 8002c0e:	79fa      	ldrb	r2, [r7, #7]
 8002c10:	79fb      	ldrb	r3, [r7, #7]
 8002c12:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8002c16:	b2d8      	uxtb	r0, r3
 8002c18:	491b      	ldr	r1, [pc, #108]	; (8002c88 <schedulerInit+0xac>)
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	005b      	lsls	r3, r3, #1
 8002c1e:	4413      	add	r3, r2
 8002c20:	00db      	lsls	r3, r3, #3
 8002c22:	440b      	add	r3, r1
 8002c24:	3308      	adds	r3, #8
 8002c26:	4602      	mov	r2, r0
 8002c28:	701a      	strb	r2, [r3, #0]
        tasks[i].delay = 0;
 8002c2a:	79fa      	ldrb	r2, [r7, #7]
 8002c2c:	4916      	ldr	r1, [pc, #88]	; (8002c88 <schedulerInit+0xac>)
 8002c2e:	4613      	mov	r3, r2
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	4413      	add	r3, r2
 8002c34:	00db      	lsls	r3, r3, #3
 8002c36:	440b      	add	r3, r1
 8002c38:	330c      	adds	r3, #12
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	601a      	str	r2, [r3, #0]
        tasks[i].period = 0;
 8002c3e:	79fa      	ldrb	r2, [r7, #7]
 8002c40:	4911      	ldr	r1, [pc, #68]	; (8002c88 <schedulerInit+0xac>)
 8002c42:	4613      	mov	r3, r2
 8002c44:	005b      	lsls	r3, r3, #1
 8002c46:	4413      	add	r3, r2
 8002c48:	00db      	lsls	r3, r3, #3
 8002c4a:	440b      	add	r3, r1
 8002c4c:	3310      	adds	r3, #16
 8002c4e:	2200      	movs	r2, #0
 8002c50:	601a      	str	r2, [r3, #0]
        tasks[i].flag = 0;
 8002c52:	79fa      	ldrb	r2, [r7, #7]
 8002c54:	490c      	ldr	r1, [pc, #48]	; (8002c88 <schedulerInit+0xac>)
 8002c56:	4613      	mov	r3, r2
 8002c58:	005b      	lsls	r3, r3, #1
 8002c5a:	4413      	add	r3, r2
 8002c5c:	00db      	lsls	r3, r3, #3
 8002c5e:	440b      	add	r3, r1
 8002c60:	3314      	adds	r3, #20
 8002c62:	2200      	movs	r2, #0
 8002c64:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < SCHEDULER_NUMBER; i ++) {
 8002c66:	79fb      	ldrb	r3, [r7, #7]
 8002c68:	3301      	adds	r3, #1
 8002c6a:	71fb      	strb	r3, [r7, #7]
 8002c6c:	79fb      	ldrb	r3, [r7, #7]
 8002c6e:	2b3f      	cmp	r3, #63	; 0x3f
 8002c70:	d9ba      	bls.n	8002be8 <schedulerInit+0xc>
    }
    schedulerAddTask(schedulerCheck, NULL, 0, 1000);
 8002c72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c76:	2200      	movs	r2, #0
 8002c78:	2100      	movs	r1, #0
 8002c7a:	4804      	ldr	r0, [pc, #16]	; (8002c8c <schedulerInit+0xb0>)
 8002c7c:	f000 f84c 	bl	8002d18 <schedulerAddTask>
}
 8002c80:	bf00      	nop
 8002c82:	3708      	adds	r7, #8
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	20000210 	.word	0x20000210
 8002c8c:	08002bc1 	.word	0x08002bc1

08002c90 <schedulerUpdate>:

void schedulerUpdate(void) {
 8002c90:	b480      	push	{r7}
 8002c92:	af00      	add	r7, sp, #0
    if (tasks[0].function == 0) return;
 8002c94:	4b10      	ldr	r3, [pc, #64]	; (8002cd8 <schedulerUpdate+0x48>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d018      	beq.n	8002cce <schedulerUpdate+0x3e>
	if (tasks[0].delay > 0) {
 8002c9c:	4b0e      	ldr	r3, [pc, #56]	; (8002cd8 <schedulerUpdate+0x48>)
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d00c      	beq.n	8002cbe <schedulerUpdate+0x2e>
		if (tasks[0].delay > SCHEDULER_TICK) {
 8002ca4:	4b0c      	ldr	r3, [pc, #48]	; (8002cd8 <schedulerUpdate+0x48>)
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d905      	bls.n	8002cb8 <schedulerUpdate+0x28>
			tasks[0].delay -= SCHEDULER_TICK;
 8002cac:	4b0a      	ldr	r3, [pc, #40]	; (8002cd8 <schedulerUpdate+0x48>)
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	3b01      	subs	r3, #1
 8002cb2:	4a09      	ldr	r2, [pc, #36]	; (8002cd8 <schedulerUpdate+0x48>)
 8002cb4:	60d3      	str	r3, [r2, #12]
 8002cb6:	e002      	b.n	8002cbe <schedulerUpdate+0x2e>
		}
		else {
			tasks[0].delay = 0;
 8002cb8:	4b07      	ldr	r3, [pc, #28]	; (8002cd8 <schedulerUpdate+0x48>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	60da      	str	r2, [r3, #12]
		}
	}
	if (tasks[0].delay == 0) {
 8002cbe:	4b06      	ldr	r3, [pc, #24]	; (8002cd8 <schedulerUpdate+0x48>)
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d104      	bne.n	8002cd0 <schedulerUpdate+0x40>
		tasks[0].flag = 1;
 8002cc6:	4b04      	ldr	r3, [pc, #16]	; (8002cd8 <schedulerUpdate+0x48>)
 8002cc8:	2201      	movs	r2, #1
 8002cca:	751a      	strb	r2, [r3, #20]
 8002ccc:	e000      	b.n	8002cd0 <schedulerUpdate+0x40>
    if (tasks[0].function == 0) return;
 8002cce:	bf00      	nop
	}
}
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bc80      	pop	{r7}
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	20000210 	.word	0x20000210

08002cdc <schedulerDispatch>:

void schedulerDispatch(void) {
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	af00      	add	r7, sp, #0
    if (tasks[0].flag == 0) return;
 8002ce0:	4b0c      	ldr	r3, [pc, #48]	; (8002d14 <schedulerDispatch+0x38>)
 8002ce2:	7d1b      	ldrb	r3, [r3, #20]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d012      	beq.n	8002d0e <schedulerDispatch+0x32>
    (*tasks[0].function)(tasks[0].arguments);
 8002ce8:	4b0a      	ldr	r3, [pc, #40]	; (8002d14 <schedulerDispatch+0x38>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a09      	ldr	r2, [pc, #36]	; (8002d14 <schedulerDispatch+0x38>)
 8002cee:	6852      	ldr	r2, [r2, #4]
 8002cf0:	4610      	mov	r0, r2
 8002cf2:	4798      	blx	r3
    if (tasks[0].period > 0) {
 8002cf4:	4b07      	ldr	r3, [pc, #28]	; (8002d14 <schedulerDispatch+0x38>)
 8002cf6:	691b      	ldr	r3, [r3, #16]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d002      	beq.n	8002d02 <schedulerDispatch+0x26>
    	schedulerRefreshTask();
 8002cfc:	f000 f9bc 	bl	8003078 <schedulerRefreshTask>
 8002d00:	e006      	b.n	8002d10 <schedulerDispatch+0x34>
    }
    else {
    	schedulerDeleteTask(tasks[0].id);
 8002d02:	4b04      	ldr	r3, [pc, #16]	; (8002d14 <schedulerDispatch+0x38>)
 8002d04:	7a1b      	ldrb	r3, [r3, #8]
 8002d06:	4618      	mov	r0, r3
 8002d08:	f000 f91a 	bl	8002f40 <schedulerDeleteTask>
 8002d0c:	e000      	b.n	8002d10 <schedulerDispatch+0x34>
    if (tasks[0].flag == 0) return;
 8002d0e:	bf00      	nop
    }
}
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	20000210 	.word	0x20000210

08002d18 <schedulerAddTask>:

uint8_t schedulerAddTask(void (*function)(void*), void *arguments, uint32_t delay, uint32_t period) {
 8002d18:	b4b0      	push	{r4, r5, r7}
 8002d1a:	b089      	sub	sp, #36	; 0x24
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	60b9      	str	r1, [r7, #8]
 8002d22:	607a      	str	r2, [r7, #4]
 8002d24:	603b      	str	r3, [r7, #0]
    if (tasks[SCHEDULER_NUMBER - 1].function != 0) return 0;
 8002d26:	4b85      	ldr	r3, [pc, #532]	; (8002f3c <schedulerAddTask+0x224>)
 8002d28:	f8d3 35e8 	ldr.w	r3, [r3, #1512]	; 0x5e8
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d001      	beq.n	8002d34 <schedulerAddTask+0x1c>
 8002d30:	2300      	movs	r3, #0
 8002d32:	e0fd      	b.n	8002f30 <schedulerAddTask+0x218>
    uint8_t currentID = tasks[SCHEDULER_NUMBER - 1].id;
 8002d34:	4b81      	ldr	r3, [pc, #516]	; (8002f3c <schedulerAddTask+0x224>)
 8002d36:	f893 35f0 	ldrb.w	r3, [r3, #1520]	; 0x5f0
 8002d3a:	767b      	strb	r3, [r7, #25]
    uint32_t currentDelay = 0;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	61fb      	str	r3, [r7, #28]
    for (uint8_t i = 0; i < SCHEDULER_NUMBER; i ++) {
 8002d40:	2300      	movs	r3, #0
 8002d42:	76fb      	strb	r3, [r7, #27]
 8002d44:	e0ef      	b.n	8002f26 <schedulerAddTask+0x20e>
        currentDelay += tasks[i].delay;
 8002d46:	7efa      	ldrb	r2, [r7, #27]
 8002d48:	497c      	ldr	r1, [pc, #496]	; (8002f3c <schedulerAddTask+0x224>)
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	005b      	lsls	r3, r3, #1
 8002d4e:	4413      	add	r3, r2
 8002d50:	00db      	lsls	r3, r3, #3
 8002d52:	440b      	add	r3, r1
 8002d54:	330c      	adds	r3, #12
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	69fa      	ldr	r2, [r7, #28]
 8002d5a:	4413      	add	r3, r2
 8002d5c:	61fb      	str	r3, [r7, #28]
        if (currentDelay > delay || tasks[i].function == 0) {
 8002d5e:	69fa      	ldr	r2, [r7, #28]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d80a      	bhi.n	8002d7c <schedulerAddTask+0x64>
 8002d66:	7efa      	ldrb	r2, [r7, #27]
 8002d68:	4974      	ldr	r1, [pc, #464]	; (8002f3c <schedulerAddTask+0x224>)
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	005b      	lsls	r3, r3, #1
 8002d6e:	4413      	add	r3, r2
 8002d70:	00db      	lsls	r3, r3, #3
 8002d72:	440b      	add	r3, r1
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	f040 80d2 	bne.w	8002f20 <schedulerAddTask+0x208>
            for (uint8_t j = SCHEDULER_NUMBER - 1; j > i; j --) {
 8002d7c:	233f      	movs	r3, #63	; 0x3f
 8002d7e:	76bb      	strb	r3, [r7, #26]
 8002d80:	e019      	b.n	8002db6 <schedulerAddTask+0x9e>
                tasks[j] = tasks[j - 1];
 8002d82:	7ebb      	ldrb	r3, [r7, #26]
 8002d84:	1e5a      	subs	r2, r3, #1
 8002d86:	7eb9      	ldrb	r1, [r7, #26]
 8002d88:	486c      	ldr	r0, [pc, #432]	; (8002f3c <schedulerAddTask+0x224>)
 8002d8a:	460b      	mov	r3, r1
 8002d8c:	005b      	lsls	r3, r3, #1
 8002d8e:	440b      	add	r3, r1
 8002d90:	00db      	lsls	r3, r3, #3
 8002d92:	4418      	add	r0, r3
 8002d94:	4969      	ldr	r1, [pc, #420]	; (8002f3c <schedulerAddTask+0x224>)
 8002d96:	4613      	mov	r3, r2
 8002d98:	005b      	lsls	r3, r3, #1
 8002d9a:	4413      	add	r3, r2
 8002d9c:	00db      	lsls	r3, r3, #3
 8002d9e:	440b      	add	r3, r1
 8002da0:	4604      	mov	r4, r0
 8002da2:	461d      	mov	r5, r3
 8002da4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002da6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002da8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002dac:	e884 0003 	stmia.w	r4, {r0, r1}
            for (uint8_t j = SCHEDULER_NUMBER - 1; j > i; j --) {
 8002db0:	7ebb      	ldrb	r3, [r7, #26]
 8002db2:	3b01      	subs	r3, #1
 8002db4:	76bb      	strb	r3, [r7, #26]
 8002db6:	7eba      	ldrb	r2, [r7, #26]
 8002db8:	7efb      	ldrb	r3, [r7, #27]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d8e1      	bhi.n	8002d82 <schedulerAddTask+0x6a>
            }
            tasks[i].function = function;
 8002dbe:	7efa      	ldrb	r2, [r7, #27]
 8002dc0:	495e      	ldr	r1, [pc, #376]	; (8002f3c <schedulerAddTask+0x224>)
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	005b      	lsls	r3, r3, #1
 8002dc6:	4413      	add	r3, r2
 8002dc8:	00db      	lsls	r3, r3, #3
 8002dca:	440b      	add	r3, r1
 8002dcc:	68fa      	ldr	r2, [r7, #12]
 8002dce:	601a      	str	r2, [r3, #0]
            tasks[i].arguments = arguments;
 8002dd0:	7efa      	ldrb	r2, [r7, #27]
 8002dd2:	495a      	ldr	r1, [pc, #360]	; (8002f3c <schedulerAddTask+0x224>)
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	005b      	lsls	r3, r3, #1
 8002dd8:	4413      	add	r3, r2
 8002dda:	00db      	lsls	r3, r3, #3
 8002ddc:	440b      	add	r3, r1
 8002dde:	3304      	adds	r3, #4
 8002de0:	68ba      	ldr	r2, [r7, #8]
 8002de2:	601a      	str	r2, [r3, #0]
            tasks[i].id = currentID;
 8002de4:	7efa      	ldrb	r2, [r7, #27]
 8002de6:	4955      	ldr	r1, [pc, #340]	; (8002f3c <schedulerAddTask+0x224>)
 8002de8:	4613      	mov	r3, r2
 8002dea:	005b      	lsls	r3, r3, #1
 8002dec:	4413      	add	r3, r2
 8002dee:	00db      	lsls	r3, r3, #3
 8002df0:	440b      	add	r3, r1
 8002df2:	3308      	adds	r3, #8
 8002df4:	7e7a      	ldrb	r2, [r7, #25]
 8002df6:	701a      	strb	r2, [r3, #0]
            tasks[i].period = period;
 8002df8:	7efa      	ldrb	r2, [r7, #27]
 8002dfa:	4950      	ldr	r1, [pc, #320]	; (8002f3c <schedulerAddTask+0x224>)
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	005b      	lsls	r3, r3, #1
 8002e00:	4413      	add	r3, r2
 8002e02:	00db      	lsls	r3, r3, #3
 8002e04:	440b      	add	r3, r1
 8002e06:	3310      	adds	r3, #16
 8002e08:	683a      	ldr	r2, [r7, #0]
 8002e0a:	601a      	str	r2, [r3, #0]
            tasks[i].flag = 0;
 8002e0c:	7efa      	ldrb	r2, [r7, #27]
 8002e0e:	494b      	ldr	r1, [pc, #300]	; (8002f3c <schedulerAddTask+0x224>)
 8002e10:	4613      	mov	r3, r2
 8002e12:	005b      	lsls	r3, r3, #1
 8002e14:	4413      	add	r3, r2
 8002e16:	00db      	lsls	r3, r3, #3
 8002e18:	440b      	add	r3, r1
 8002e1a:	3314      	adds	r3, #20
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	701a      	strb	r2, [r3, #0]
            if (currentDelay > delay) {
 8002e20:	69fa      	ldr	r2, [r7, #28]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d950      	bls.n	8002eca <schedulerAddTask+0x1b2>
                int newDelay = currentDelay - delay;
 8002e28:	69fa      	ldr	r2, [r7, #28]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	617b      	str	r3, [r7, #20]
                tasks[i].delay = tasks[i + 1].delay - newDelay;
 8002e30:	7efb      	ldrb	r3, [r7, #27]
 8002e32:	1c5a      	adds	r2, r3, #1
 8002e34:	4941      	ldr	r1, [pc, #260]	; (8002f3c <schedulerAddTask+0x224>)
 8002e36:	4613      	mov	r3, r2
 8002e38:	005b      	lsls	r3, r3, #1
 8002e3a:	4413      	add	r3, r2
 8002e3c:	00db      	lsls	r3, r3, #3
 8002e3e:	440b      	add	r3, r1
 8002e40:	330c      	adds	r3, #12
 8002e42:	6819      	ldr	r1, [r3, #0]
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	7efa      	ldrb	r2, [r7, #27]
 8002e48:	1ac9      	subs	r1, r1, r3
 8002e4a:	483c      	ldr	r0, [pc, #240]	; (8002f3c <schedulerAddTask+0x224>)
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	4413      	add	r3, r2
 8002e52:	00db      	lsls	r3, r3, #3
 8002e54:	4403      	add	r3, r0
 8002e56:	330c      	adds	r3, #12
 8002e58:	6019      	str	r1, [r3, #0]
                if (tasks[i].delay == 0) {
 8002e5a:	7efa      	ldrb	r2, [r7, #27]
 8002e5c:	4937      	ldr	r1, [pc, #220]	; (8002f3c <schedulerAddTask+0x224>)
 8002e5e:	4613      	mov	r3, r2
 8002e60:	005b      	lsls	r3, r3, #1
 8002e62:	4413      	add	r3, r2
 8002e64:	00db      	lsls	r3, r3, #3
 8002e66:	440b      	add	r3, r1
 8002e68:	330c      	adds	r3, #12
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d109      	bne.n	8002e84 <schedulerAddTask+0x16c>
                    tasks[i].flag = 1;
 8002e70:	7efa      	ldrb	r2, [r7, #27]
 8002e72:	4932      	ldr	r1, [pc, #200]	; (8002f3c <schedulerAddTask+0x224>)
 8002e74:	4613      	mov	r3, r2
 8002e76:	005b      	lsls	r3, r3, #1
 8002e78:	4413      	add	r3, r2
 8002e7a:	00db      	lsls	r3, r3, #3
 8002e7c:	440b      	add	r3, r1
 8002e7e:	3314      	adds	r3, #20
 8002e80:	2201      	movs	r2, #1
 8002e82:	701a      	strb	r2, [r3, #0]
                }
                tasks[i + 1].delay = newDelay;
 8002e84:	7efb      	ldrb	r3, [r7, #27]
 8002e86:	1c5a      	adds	r2, r3, #1
 8002e88:	6979      	ldr	r1, [r7, #20]
 8002e8a:	482c      	ldr	r0, [pc, #176]	; (8002f3c <schedulerAddTask+0x224>)
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	005b      	lsls	r3, r3, #1
 8002e90:	4413      	add	r3, r2
 8002e92:	00db      	lsls	r3, r3, #3
 8002e94:	4403      	add	r3, r0
 8002e96:	330c      	adds	r3, #12
 8002e98:	6019      	str	r1, [r3, #0]
                if (tasks[i + 1].delay == 0) {
 8002e9a:	7efb      	ldrb	r3, [r7, #27]
 8002e9c:	1c5a      	adds	r2, r3, #1
 8002e9e:	4927      	ldr	r1, [pc, #156]	; (8002f3c <schedulerAddTask+0x224>)
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	005b      	lsls	r3, r3, #1
 8002ea4:	4413      	add	r3, r2
 8002ea6:	00db      	lsls	r3, r3, #3
 8002ea8:	440b      	add	r3, r1
 8002eaa:	330c      	adds	r3, #12
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d12c      	bne.n	8002f0c <schedulerAddTask+0x1f4>
                    tasks[i + 1].flag = 1;
 8002eb2:	7efb      	ldrb	r3, [r7, #27]
 8002eb4:	1c5a      	adds	r2, r3, #1
 8002eb6:	4921      	ldr	r1, [pc, #132]	; (8002f3c <schedulerAddTask+0x224>)
 8002eb8:	4613      	mov	r3, r2
 8002eba:	005b      	lsls	r3, r3, #1
 8002ebc:	4413      	add	r3, r2
 8002ebe:	00db      	lsls	r3, r3, #3
 8002ec0:	440b      	add	r3, r1
 8002ec2:	3314      	adds	r3, #20
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	701a      	strb	r2, [r3, #0]
 8002ec8:	e020      	b.n	8002f0c <schedulerAddTask+0x1f4>
                }
            }
            else {
                tasks[i].delay = delay - currentDelay;
 8002eca:	7efa      	ldrb	r2, [r7, #27]
 8002ecc:	6879      	ldr	r1, [r7, #4]
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	1ac9      	subs	r1, r1, r3
 8002ed2:	481a      	ldr	r0, [pc, #104]	; (8002f3c <schedulerAddTask+0x224>)
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	005b      	lsls	r3, r3, #1
 8002ed8:	4413      	add	r3, r2
 8002eda:	00db      	lsls	r3, r3, #3
 8002edc:	4403      	add	r3, r0
 8002ede:	330c      	adds	r3, #12
 8002ee0:	6019      	str	r1, [r3, #0]
                if (tasks[i].delay == 0) {
 8002ee2:	7efa      	ldrb	r2, [r7, #27]
 8002ee4:	4915      	ldr	r1, [pc, #84]	; (8002f3c <schedulerAddTask+0x224>)
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	005b      	lsls	r3, r3, #1
 8002eea:	4413      	add	r3, r2
 8002eec:	00db      	lsls	r3, r3, #3
 8002eee:	440b      	add	r3, r1
 8002ef0:	330c      	adds	r3, #12
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d109      	bne.n	8002f0c <schedulerAddTask+0x1f4>
                    tasks[i].flag = 1;
 8002ef8:	7efa      	ldrb	r2, [r7, #27]
 8002efa:	4910      	ldr	r1, [pc, #64]	; (8002f3c <schedulerAddTask+0x224>)
 8002efc:	4613      	mov	r3, r2
 8002efe:	005b      	lsls	r3, r3, #1
 8002f00:	4413      	add	r3, r2
 8002f02:	00db      	lsls	r3, r3, #3
 8002f04:	440b      	add	r3, r1
 8002f06:	3314      	adds	r3, #20
 8002f08:	2201      	movs	r2, #1
 8002f0a:	701a      	strb	r2, [r3, #0]
                }
            }
            return tasks[i].id;
 8002f0c:	7efa      	ldrb	r2, [r7, #27]
 8002f0e:	490b      	ldr	r1, [pc, #44]	; (8002f3c <schedulerAddTask+0x224>)
 8002f10:	4613      	mov	r3, r2
 8002f12:	005b      	lsls	r3, r3, #1
 8002f14:	4413      	add	r3, r2
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	440b      	add	r3, r1
 8002f1a:	3308      	adds	r3, #8
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	e007      	b.n	8002f30 <schedulerAddTask+0x218>
    for (uint8_t i = 0; i < SCHEDULER_NUMBER; i ++) {
 8002f20:	7efb      	ldrb	r3, [r7, #27]
 8002f22:	3301      	adds	r3, #1
 8002f24:	76fb      	strb	r3, [r7, #27]
 8002f26:	7efb      	ldrb	r3, [r7, #27]
 8002f28:	2b3f      	cmp	r3, #63	; 0x3f
 8002f2a:	f67f af0c 	bls.w	8002d46 <schedulerAddTask+0x2e>
        }
    }
    return 0;
 8002f2e:	2300      	movs	r3, #0
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3724      	adds	r7, #36	; 0x24
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bcb0      	pop	{r4, r5, r7}
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	20000210 	.word	0x20000210

08002f40 <schedulerDeleteTask>:

unsigned char schedulerDeleteTask(uint8_t id) {
 8002f40:	b4b0      	push	{r4, r5, r7}
 8002f42:	b085      	sub	sp, #20
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	4603      	mov	r3, r0
 8002f48:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < SCHEDULER_NUMBER; i ++) {
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	73fb      	strb	r3, [r7, #15]
 8002f4e:	e087      	b.n	8003060 <schedulerDeleteTask+0x120>
    	if (tasks[i].function == 0) return 0;
 8002f50:	7bfa      	ldrb	r2, [r7, #15]
 8002f52:	4948      	ldr	r1, [pc, #288]	; (8003074 <schedulerDeleteTask+0x134>)
 8002f54:	4613      	mov	r3, r2
 8002f56:	005b      	lsls	r3, r3, #1
 8002f58:	4413      	add	r3, r2
 8002f5a:	00db      	lsls	r3, r3, #3
 8002f5c:	440b      	add	r3, r1
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d101      	bne.n	8002f68 <schedulerDeleteTask+0x28>
 8002f64:	2300      	movs	r3, #0
 8002f66:	e080      	b.n	800306a <schedulerDeleteTask+0x12a>
        if (tasks[i].id == id) {
 8002f68:	7bfa      	ldrb	r2, [r7, #15]
 8002f6a:	4942      	ldr	r1, [pc, #264]	; (8003074 <schedulerDeleteTask+0x134>)
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	005b      	lsls	r3, r3, #1
 8002f70:	4413      	add	r3, r2
 8002f72:	00db      	lsls	r3, r3, #3
 8002f74:	440b      	add	r3, r1
 8002f76:	3308      	adds	r3, #8
 8002f78:	781b      	ldrb	r3, [r3, #0]
 8002f7a:	79fa      	ldrb	r2, [r7, #7]
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d16c      	bne.n	800305a <schedulerDeleteTask+0x11a>
            uint8_t currentID = tasks[i].id;
 8002f80:	7bfa      	ldrb	r2, [r7, #15]
 8002f82:	493c      	ldr	r1, [pc, #240]	; (8003074 <schedulerDeleteTask+0x134>)
 8002f84:	4613      	mov	r3, r2
 8002f86:	005b      	lsls	r3, r3, #1
 8002f88:	4413      	add	r3, r2
 8002f8a:	00db      	lsls	r3, r3, #3
 8002f8c:	440b      	add	r3, r1
 8002f8e:	3308      	adds	r3, #8
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	737b      	strb	r3, [r7, #13]
            if (tasks[i + 1].function != 0) {
 8002f94:	7bfb      	ldrb	r3, [r7, #15]
 8002f96:	1c5a      	adds	r2, r3, #1
 8002f98:	4936      	ldr	r1, [pc, #216]	; (8003074 <schedulerDeleteTask+0x134>)
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	005b      	lsls	r3, r3, #1
 8002f9e:	4413      	add	r3, r2
 8002fa0:	00db      	lsls	r3, r3, #3
 8002fa2:	440b      	add	r3, r1
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d01d      	beq.n	8002fe6 <schedulerDeleteTask+0xa6>
                tasks[i + 1].delay += tasks[i].delay;
 8002faa:	7bfb      	ldrb	r3, [r7, #15]
 8002fac:	1c5a      	adds	r2, r3, #1
 8002fae:	4931      	ldr	r1, [pc, #196]	; (8003074 <schedulerDeleteTask+0x134>)
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	005b      	lsls	r3, r3, #1
 8002fb4:	4413      	add	r3, r2
 8002fb6:	00db      	lsls	r3, r3, #3
 8002fb8:	440b      	add	r3, r1
 8002fba:	330c      	adds	r3, #12
 8002fbc:	6819      	ldr	r1, [r3, #0]
 8002fbe:	7bfa      	ldrb	r2, [r7, #15]
 8002fc0:	482c      	ldr	r0, [pc, #176]	; (8003074 <schedulerDeleteTask+0x134>)
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	4413      	add	r3, r2
 8002fc8:	00db      	lsls	r3, r3, #3
 8002fca:	4403      	add	r3, r0
 8002fcc:	330c      	adds	r3, #12
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	7bfa      	ldrb	r2, [r7, #15]
 8002fd2:	3201      	adds	r2, #1
 8002fd4:	4419      	add	r1, r3
 8002fd6:	4827      	ldr	r0, [pc, #156]	; (8003074 <schedulerDeleteTask+0x134>)
 8002fd8:	4613      	mov	r3, r2
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	4413      	add	r3, r2
 8002fde:	00db      	lsls	r3, r3, #3
 8002fe0:	4403      	add	r3, r0
 8002fe2:	330c      	adds	r3, #12
 8002fe4:	6019      	str	r1, [r3, #0]
            }
            for (uint8_t j = i; j < SCHEDULER_NUMBER - 1; j ++) {
 8002fe6:	7bfb      	ldrb	r3, [r7, #15]
 8002fe8:	73bb      	strb	r3, [r7, #14]
 8002fea:	e019      	b.n	8003020 <schedulerDeleteTask+0xe0>
                tasks[j] = tasks[j + 1];
 8002fec:	7bbb      	ldrb	r3, [r7, #14]
 8002fee:	1c5a      	adds	r2, r3, #1
 8002ff0:	7bb9      	ldrb	r1, [r7, #14]
 8002ff2:	4820      	ldr	r0, [pc, #128]	; (8003074 <schedulerDeleteTask+0x134>)
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	005b      	lsls	r3, r3, #1
 8002ff8:	440b      	add	r3, r1
 8002ffa:	00db      	lsls	r3, r3, #3
 8002ffc:	4418      	add	r0, r3
 8002ffe:	491d      	ldr	r1, [pc, #116]	; (8003074 <schedulerDeleteTask+0x134>)
 8003000:	4613      	mov	r3, r2
 8003002:	005b      	lsls	r3, r3, #1
 8003004:	4413      	add	r3, r2
 8003006:	00db      	lsls	r3, r3, #3
 8003008:	440b      	add	r3, r1
 800300a:	4604      	mov	r4, r0
 800300c:	461d      	mov	r5, r3
 800300e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003010:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003012:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003016:	e884 0003 	stmia.w	r4, {r0, r1}
            for (uint8_t j = i; j < SCHEDULER_NUMBER - 1; j ++) {
 800301a:	7bbb      	ldrb	r3, [r7, #14]
 800301c:	3301      	adds	r3, #1
 800301e:	73bb      	strb	r3, [r7, #14]
 8003020:	7bbb      	ldrb	r3, [r7, #14]
 8003022:	2b3e      	cmp	r3, #62	; 0x3e
 8003024:	d9e2      	bls.n	8002fec <schedulerDeleteTask+0xac>
            }
            tasks[SCHEDULER_NUMBER - 1].function = 0;
 8003026:	4b13      	ldr	r3, [pc, #76]	; (8003074 <schedulerDeleteTask+0x134>)
 8003028:	2200      	movs	r2, #0
 800302a:	f8c3 25e8 	str.w	r2, [r3, #1512]	; 0x5e8
            tasks[SCHEDULER_NUMBER - 1].arguments = 0;
 800302e:	4b11      	ldr	r3, [pc, #68]	; (8003074 <schedulerDeleteTask+0x134>)
 8003030:	2200      	movs	r2, #0
 8003032:	f8c3 25ec 	str.w	r2, [r3, #1516]	; 0x5ec
            tasks[SCHEDULER_NUMBER - 1].id = currentID;
 8003036:	4a0f      	ldr	r2, [pc, #60]	; (8003074 <schedulerDeleteTask+0x134>)
 8003038:	7b7b      	ldrb	r3, [r7, #13]
 800303a:	f882 35f0 	strb.w	r3, [r2, #1520]	; 0x5f0
            tasks[SCHEDULER_NUMBER - 1].delay = 0;
 800303e:	4b0d      	ldr	r3, [pc, #52]	; (8003074 <schedulerDeleteTask+0x134>)
 8003040:	2200      	movs	r2, #0
 8003042:	f8c3 25f4 	str.w	r2, [r3, #1524]	; 0x5f4
            tasks[SCHEDULER_NUMBER - 1].period = 0;
 8003046:	4b0b      	ldr	r3, [pc, #44]	; (8003074 <schedulerDeleteTask+0x134>)
 8003048:	2200      	movs	r2, #0
 800304a:	f8c3 25f8 	str.w	r2, [r3, #1528]	; 0x5f8
            tasks[SCHEDULER_NUMBER - 1].flag = 0;
 800304e:	4b09      	ldr	r3, [pc, #36]	; (8003074 <schedulerDeleteTask+0x134>)
 8003050:	2200      	movs	r2, #0
 8003052:	f883 25fc 	strb.w	r2, [r3, #1532]	; 0x5fc
            return 1;
 8003056:	2301      	movs	r3, #1
 8003058:	e007      	b.n	800306a <schedulerDeleteTask+0x12a>
    for (uint8_t i = 0; i < SCHEDULER_NUMBER; i ++) {
 800305a:	7bfb      	ldrb	r3, [r7, #15]
 800305c:	3301      	adds	r3, #1
 800305e:	73fb      	strb	r3, [r7, #15]
 8003060:	7bfb      	ldrb	r3, [r7, #15]
 8003062:	2b3f      	cmp	r3, #63	; 0x3f
 8003064:	f67f af74 	bls.w	8002f50 <schedulerDeleteTask+0x10>
        }
    }
    return 0;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3714      	adds	r7, #20
 800306e:	46bd      	mov	sp, r7
 8003070:	bcb0      	pop	{r4, r5, r7}
 8003072:	4770      	bx	lr
 8003074:	20000210 	.word	0x20000210

08003078 <schedulerRefreshTask>:

unsigned char schedulerRefreshTask(void) {
 8003078:	b4b0      	push	{r4, r5, r7}
 800307a:	b08b      	sub	sp, #44	; 0x2c
 800307c:	af00      	add	r7, sp, #0
    if (tasks[0].function == 0) return 0;
 800307e:	4bb1      	ldr	r3, [pc, #708]	; (8003344 <schedulerRefreshTask+0x2cc>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d101      	bne.n	800308a <schedulerRefreshTask+0x12>
 8003086:	2300      	movs	r3, #0
 8003088:	e157      	b.n	800333a <schedulerRefreshTask+0x2c2>
    schedulerTask currentTask = tasks[0];
 800308a:	4bae      	ldr	r3, [pc, #696]	; (8003344 <schedulerRefreshTask+0x2cc>)
 800308c:	1d3c      	adds	r4, r7, #4
 800308e:	461d      	mov	r5, r3
 8003090:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003092:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003094:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003098:	e884 0003 	stmia.w	r4, {r0, r1}
    uint32_t currentDelay = 0;
 800309c:	2300      	movs	r3, #0
 800309e:	627b      	str	r3, [r7, #36]	; 0x24
    for (uint8_t i = 0; i < SCHEDULER_NUMBER; i ++) {
 80030a0:	2300      	movs	r3, #0
 80030a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030a6:	e142      	b.n	800332e <schedulerRefreshTask+0x2b6>
        if (i + 1 == SCHEDULER_NUMBER || tasks[i + 1].function == NULL) {
 80030a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030ac:	2b3f      	cmp	r3, #63	; 0x3f
 80030ae:	d00b      	beq.n	80030c8 <schedulerRefreshTask+0x50>
 80030b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030b4:	1c5a      	adds	r2, r3, #1
 80030b6:	49a3      	ldr	r1, [pc, #652]	; (8003344 <schedulerRefreshTask+0x2cc>)
 80030b8:	4613      	mov	r3, r2
 80030ba:	005b      	lsls	r3, r3, #1
 80030bc:	4413      	add	r3, r2
 80030be:	00db      	lsls	r3, r3, #3
 80030c0:	440b      	add	r3, r1
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d15c      	bne.n	8003182 <schedulerRefreshTask+0x10a>
            tasks[i].function = currentTask.function;
 80030c8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80030cc:	6879      	ldr	r1, [r7, #4]
 80030ce:	489d      	ldr	r0, [pc, #628]	; (8003344 <schedulerRefreshTask+0x2cc>)
 80030d0:	4613      	mov	r3, r2
 80030d2:	005b      	lsls	r3, r3, #1
 80030d4:	4413      	add	r3, r2
 80030d6:	00db      	lsls	r3, r3, #3
 80030d8:	4403      	add	r3, r0
 80030da:	6019      	str	r1, [r3, #0]
            tasks[i].arguments = currentTask.arguments;
 80030dc:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80030e0:	68b9      	ldr	r1, [r7, #8]
 80030e2:	4898      	ldr	r0, [pc, #608]	; (8003344 <schedulerRefreshTask+0x2cc>)
 80030e4:	4613      	mov	r3, r2
 80030e6:	005b      	lsls	r3, r3, #1
 80030e8:	4413      	add	r3, r2
 80030ea:	00db      	lsls	r3, r3, #3
 80030ec:	4403      	add	r3, r0
 80030ee:	3304      	adds	r3, #4
 80030f0:	6019      	str	r1, [r3, #0]
            tasks[i].id = currentTask.id;
 80030f2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80030f6:	7b38      	ldrb	r0, [r7, #12]
 80030f8:	4992      	ldr	r1, [pc, #584]	; (8003344 <schedulerRefreshTask+0x2cc>)
 80030fa:	4613      	mov	r3, r2
 80030fc:	005b      	lsls	r3, r3, #1
 80030fe:	4413      	add	r3, r2
 8003100:	00db      	lsls	r3, r3, #3
 8003102:	440b      	add	r3, r1
 8003104:	3308      	adds	r3, #8
 8003106:	4602      	mov	r2, r0
 8003108:	701a      	strb	r2, [r3, #0]
            tasks[i].period = currentTask.period;
 800310a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800310e:	6979      	ldr	r1, [r7, #20]
 8003110:	488c      	ldr	r0, [pc, #560]	; (8003344 <schedulerRefreshTask+0x2cc>)
 8003112:	4613      	mov	r3, r2
 8003114:	005b      	lsls	r3, r3, #1
 8003116:	4413      	add	r3, r2
 8003118:	00db      	lsls	r3, r3, #3
 800311a:	4403      	add	r3, r0
 800311c:	3310      	adds	r3, #16
 800311e:	6019      	str	r1, [r3, #0]
            tasks[i].flag = 0;
 8003120:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8003124:	4987      	ldr	r1, [pc, #540]	; (8003344 <schedulerRefreshTask+0x2cc>)
 8003126:	4613      	mov	r3, r2
 8003128:	005b      	lsls	r3, r3, #1
 800312a:	4413      	add	r3, r2
 800312c:	00db      	lsls	r3, r3, #3
 800312e:	440b      	add	r3, r1
 8003130:	3314      	adds	r3, #20
 8003132:	2200      	movs	r2, #0
 8003134:	701a      	strb	r2, [r3, #0]
            tasks[i].delay = currentTask.period - currentDelay;
 8003136:	6979      	ldr	r1, [r7, #20]
 8003138:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800313c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313e:	1ac9      	subs	r1, r1, r3
 8003140:	4880      	ldr	r0, [pc, #512]	; (8003344 <schedulerRefreshTask+0x2cc>)
 8003142:	4613      	mov	r3, r2
 8003144:	005b      	lsls	r3, r3, #1
 8003146:	4413      	add	r3, r2
 8003148:	00db      	lsls	r3, r3, #3
 800314a:	4403      	add	r3, r0
 800314c:	330c      	adds	r3, #12
 800314e:	6019      	str	r1, [r3, #0]
            if (tasks[i].delay == 0) {
 8003150:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8003154:	497b      	ldr	r1, [pc, #492]	; (8003344 <schedulerRefreshTask+0x2cc>)
 8003156:	4613      	mov	r3, r2
 8003158:	005b      	lsls	r3, r3, #1
 800315a:	4413      	add	r3, r2
 800315c:	00db      	lsls	r3, r3, #3
 800315e:	440b      	add	r3, r1
 8003160:	330c      	adds	r3, #12
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d10a      	bne.n	800317e <schedulerRefreshTask+0x106>
                tasks[i].flag = 1;
 8003168:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800316c:	4975      	ldr	r1, [pc, #468]	; (8003344 <schedulerRefreshTask+0x2cc>)
 800316e:	4613      	mov	r3, r2
 8003170:	005b      	lsls	r3, r3, #1
 8003172:	4413      	add	r3, r2
 8003174:	00db      	lsls	r3, r3, #3
 8003176:	440b      	add	r3, r1
 8003178:	3314      	adds	r3, #20
 800317a:	2201      	movs	r2, #1
 800317c:	701a      	strb	r2, [r3, #0]
            }
            return 1;
 800317e:	2301      	movs	r3, #1
 8003180:	e0db      	b.n	800333a <schedulerRefreshTask+0x2c2>
        }
        currentDelay += tasks[i + 1].delay;
 8003182:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003186:	1c5a      	adds	r2, r3, #1
 8003188:	496e      	ldr	r1, [pc, #440]	; (8003344 <schedulerRefreshTask+0x2cc>)
 800318a:	4613      	mov	r3, r2
 800318c:	005b      	lsls	r3, r3, #1
 800318e:	4413      	add	r3, r2
 8003190:	00db      	lsls	r3, r3, #3
 8003192:	440b      	add	r3, r1
 8003194:	330c      	adds	r3, #12
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800319a:	4413      	add	r3, r2
 800319c:	627b      	str	r3, [r7, #36]	; 0x24
        if (currentDelay > currentTask.period) {
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031a2:	429a      	cmp	r2, r3
 80031a4:	f240 80a5 	bls.w	80032f2 <schedulerRefreshTask+0x27a>
            tasks[i].function = currentTask.function;
 80031a8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80031ac:	6879      	ldr	r1, [r7, #4]
 80031ae:	4865      	ldr	r0, [pc, #404]	; (8003344 <schedulerRefreshTask+0x2cc>)
 80031b0:	4613      	mov	r3, r2
 80031b2:	005b      	lsls	r3, r3, #1
 80031b4:	4413      	add	r3, r2
 80031b6:	00db      	lsls	r3, r3, #3
 80031b8:	4403      	add	r3, r0
 80031ba:	6019      	str	r1, [r3, #0]
            tasks[i].arguments = currentTask.arguments;
 80031bc:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80031c0:	68b9      	ldr	r1, [r7, #8]
 80031c2:	4860      	ldr	r0, [pc, #384]	; (8003344 <schedulerRefreshTask+0x2cc>)
 80031c4:	4613      	mov	r3, r2
 80031c6:	005b      	lsls	r3, r3, #1
 80031c8:	4413      	add	r3, r2
 80031ca:	00db      	lsls	r3, r3, #3
 80031cc:	4403      	add	r3, r0
 80031ce:	3304      	adds	r3, #4
 80031d0:	6019      	str	r1, [r3, #0]
            tasks[i].id = currentTask.id;
 80031d2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80031d6:	7b38      	ldrb	r0, [r7, #12]
 80031d8:	495a      	ldr	r1, [pc, #360]	; (8003344 <schedulerRefreshTask+0x2cc>)
 80031da:	4613      	mov	r3, r2
 80031dc:	005b      	lsls	r3, r3, #1
 80031de:	4413      	add	r3, r2
 80031e0:	00db      	lsls	r3, r3, #3
 80031e2:	440b      	add	r3, r1
 80031e4:	3308      	adds	r3, #8
 80031e6:	4602      	mov	r2, r0
 80031e8:	701a      	strb	r2, [r3, #0]
            tasks[i].period = currentTask.period;
 80031ea:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80031ee:	6979      	ldr	r1, [r7, #20]
 80031f0:	4854      	ldr	r0, [pc, #336]	; (8003344 <schedulerRefreshTask+0x2cc>)
 80031f2:	4613      	mov	r3, r2
 80031f4:	005b      	lsls	r3, r3, #1
 80031f6:	4413      	add	r3, r2
 80031f8:	00db      	lsls	r3, r3, #3
 80031fa:	4403      	add	r3, r0
 80031fc:	3310      	adds	r3, #16
 80031fe:	6019      	str	r1, [r3, #0]
            tasks[i].flag = 0;
 8003200:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8003204:	494f      	ldr	r1, [pc, #316]	; (8003344 <schedulerRefreshTask+0x2cc>)
 8003206:	4613      	mov	r3, r2
 8003208:	005b      	lsls	r3, r3, #1
 800320a:	4413      	add	r3, r2
 800320c:	00db      	lsls	r3, r3, #3
 800320e:	440b      	add	r3, r1
 8003210:	3314      	adds	r3, #20
 8003212:	2200      	movs	r2, #0
 8003214:	701a      	strb	r2, [r3, #0]
            int newDelay = currentDelay - currentTask.period;
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	61fb      	str	r3, [r7, #28]
            tasks[i].delay = tasks[i + 1].delay - newDelay;
 800321e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003222:	1c5a      	adds	r2, r3, #1
 8003224:	4947      	ldr	r1, [pc, #284]	; (8003344 <schedulerRefreshTask+0x2cc>)
 8003226:	4613      	mov	r3, r2
 8003228:	005b      	lsls	r3, r3, #1
 800322a:	4413      	add	r3, r2
 800322c:	00db      	lsls	r3, r3, #3
 800322e:	440b      	add	r3, r1
 8003230:	330c      	adds	r3, #12
 8003232:	6819      	ldr	r1, [r3, #0]
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800323a:	1ac9      	subs	r1, r1, r3
 800323c:	4841      	ldr	r0, [pc, #260]	; (8003344 <schedulerRefreshTask+0x2cc>)
 800323e:	4613      	mov	r3, r2
 8003240:	005b      	lsls	r3, r3, #1
 8003242:	4413      	add	r3, r2
 8003244:	00db      	lsls	r3, r3, #3
 8003246:	4403      	add	r3, r0
 8003248:	330c      	adds	r3, #12
 800324a:	6019      	str	r1, [r3, #0]
            if (tasks[i].delay == 0) {
 800324c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8003250:	493c      	ldr	r1, [pc, #240]	; (8003344 <schedulerRefreshTask+0x2cc>)
 8003252:	4613      	mov	r3, r2
 8003254:	005b      	lsls	r3, r3, #1
 8003256:	4413      	add	r3, r2
 8003258:	00db      	lsls	r3, r3, #3
 800325a:	440b      	add	r3, r1
 800325c:	330c      	adds	r3, #12
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d10a      	bne.n	800327a <schedulerRefreshTask+0x202>
                tasks[i].flag = 1;
 8003264:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8003268:	4936      	ldr	r1, [pc, #216]	; (8003344 <schedulerRefreshTask+0x2cc>)
 800326a:	4613      	mov	r3, r2
 800326c:	005b      	lsls	r3, r3, #1
 800326e:	4413      	add	r3, r2
 8003270:	00db      	lsls	r3, r3, #3
 8003272:	440b      	add	r3, r1
 8003274:	3314      	adds	r3, #20
 8003276:	2201      	movs	r2, #1
 8003278:	701a      	strb	r2, [r3, #0]
            }
            tasks[i + 1].delay -= tasks[i].delay;
 800327a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800327e:	1c5a      	adds	r2, r3, #1
 8003280:	4930      	ldr	r1, [pc, #192]	; (8003344 <schedulerRefreshTask+0x2cc>)
 8003282:	4613      	mov	r3, r2
 8003284:	005b      	lsls	r3, r3, #1
 8003286:	4413      	add	r3, r2
 8003288:	00db      	lsls	r3, r3, #3
 800328a:	440b      	add	r3, r1
 800328c:	330c      	adds	r3, #12
 800328e:	6819      	ldr	r1, [r3, #0]
 8003290:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8003294:	482b      	ldr	r0, [pc, #172]	; (8003344 <schedulerRefreshTask+0x2cc>)
 8003296:	4613      	mov	r3, r2
 8003298:	005b      	lsls	r3, r3, #1
 800329a:	4413      	add	r3, r2
 800329c:	00db      	lsls	r3, r3, #3
 800329e:	4403      	add	r3, r0
 80032a0:	330c      	adds	r3, #12
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80032a8:	3201      	adds	r2, #1
 80032aa:	1ac9      	subs	r1, r1, r3
 80032ac:	4825      	ldr	r0, [pc, #148]	; (8003344 <schedulerRefreshTask+0x2cc>)
 80032ae:	4613      	mov	r3, r2
 80032b0:	005b      	lsls	r3, r3, #1
 80032b2:	4413      	add	r3, r2
 80032b4:	00db      	lsls	r3, r3, #3
 80032b6:	4403      	add	r3, r0
 80032b8:	330c      	adds	r3, #12
 80032ba:	6019      	str	r1, [r3, #0]
            if (tasks[i + 1].delay == 0) {
 80032bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80032c0:	1c5a      	adds	r2, r3, #1
 80032c2:	4920      	ldr	r1, [pc, #128]	; (8003344 <schedulerRefreshTask+0x2cc>)
 80032c4:	4613      	mov	r3, r2
 80032c6:	005b      	lsls	r3, r3, #1
 80032c8:	4413      	add	r3, r2
 80032ca:	00db      	lsls	r3, r3, #3
 80032cc:	440b      	add	r3, r1
 80032ce:	330c      	adds	r3, #12
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d10b      	bne.n	80032ee <schedulerRefreshTask+0x276>
                tasks[i + 1].flag = 1;
 80032d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80032da:	1c5a      	adds	r2, r3, #1
 80032dc:	4919      	ldr	r1, [pc, #100]	; (8003344 <schedulerRefreshTask+0x2cc>)
 80032de:	4613      	mov	r3, r2
 80032e0:	005b      	lsls	r3, r3, #1
 80032e2:	4413      	add	r3, r2
 80032e4:	00db      	lsls	r3, r3, #3
 80032e6:	440b      	add	r3, r1
 80032e8:	3314      	adds	r3, #20
 80032ea:	2201      	movs	r2, #1
 80032ec:	701a      	strb	r2, [r3, #0]
            }
            return 1;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e023      	b.n	800333a <schedulerRefreshTask+0x2c2>
        }
        else {
            tasks[i] = tasks[i + 1];
 80032f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80032f6:	1c5a      	adds	r2, r3, #1
 80032f8:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 80032fc:	4811      	ldr	r0, [pc, #68]	; (8003344 <schedulerRefreshTask+0x2cc>)
 80032fe:	460b      	mov	r3, r1
 8003300:	005b      	lsls	r3, r3, #1
 8003302:	440b      	add	r3, r1
 8003304:	00db      	lsls	r3, r3, #3
 8003306:	4418      	add	r0, r3
 8003308:	490e      	ldr	r1, [pc, #56]	; (8003344 <schedulerRefreshTask+0x2cc>)
 800330a:	4613      	mov	r3, r2
 800330c:	005b      	lsls	r3, r3, #1
 800330e:	4413      	add	r3, r2
 8003310:	00db      	lsls	r3, r3, #3
 8003312:	440b      	add	r3, r1
 8003314:	4604      	mov	r4, r0
 8003316:	461d      	mov	r5, r3
 8003318:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800331a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800331c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003320:	e884 0003 	stmia.w	r4, {r0, r1}
    for (uint8_t i = 0; i < SCHEDULER_NUMBER; i ++) {
 8003324:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003328:	3301      	adds	r3, #1
 800332a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800332e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003332:	2b3f      	cmp	r3, #63	; 0x3f
 8003334:	f67f aeb8 	bls.w	80030a8 <schedulerRefreshTask+0x30>
        }
    }
    return 0;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	372c      	adds	r7, #44	; 0x2c
 800333e:	46bd      	mov	sp, r7
 8003340:	bcb0      	pop	{r4, r5, r7}
 8003342:	4770      	bx	lr
 8003344:	20000210 	.word	0x20000210

08003348 <scorpionsScramble>:
static uint8_t scramble = 10;
//static scorpionsMove scrambles[2] = {LN, RN};
static scorpionsMove scrambles[10] = {L2, UN, F2, DN, B2, UN, B2, UN, F2, UI};
//static scorpionsMove scrambles[21] = {FN, BI, R2, LI, UN, BI, U2, FN, BN, D2, RI, U2, F2, D2, L2, F2, L2, DI, F2, R2, U2};

void scorpionsScramble(void *) {
 8003348:	b580      	push	{r7, lr}
 800334a:	b084      	sub	sp, #16
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
	uint32_t newDelay = 1000;
 8003350:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003354:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < scramble; i ++) {
 8003356:	2300      	movs	r3, #0
 8003358:	72fb      	strb	r3, [r7, #11]
 800335a:	e26b      	b.n	8003834 <scorpionsScramble+0x4ec>
		switch (scrambles[i]) {
 800335c:	7afb      	ldrb	r3, [r7, #11]
 800335e:	4abc      	ldr	r2, [pc, #752]	; (8003650 <scorpionsScramble+0x308>)
 8003360:	5cd3      	ldrb	r3, [r2, r3]
 8003362:	2b1a      	cmp	r3, #26
 8003364:	f200 8262 	bhi.w	800382c <scorpionsScramble+0x4e4>
 8003368:	a201      	add	r2, pc, #4	; (adr r2, 8003370 <scorpionsScramble+0x28>)
 800336a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800336e:	bf00      	nop
 8003370:	080033dd 	.word	0x080033dd
 8003374:	08003421 	.word	0x08003421
 8003378:	08003465 	.word	0x08003465
 800337c:	080034a9 	.word	0x080034a9
 8003380:	080034c1 	.word	0x080034c1
 8003384:	080034d9 	.word	0x080034d9
 8003388:	080034f1 	.word	0x080034f1
 800338c:	08003509 	.word	0x08003509
 8003390:	08003521 	.word	0x08003521
 8003394:	08003539 	.word	0x08003539
 8003398:	08003551 	.word	0x08003551
 800339c:	08003569 	.word	0x08003569
 80033a0:	08003581 	.word	0x08003581
 80033a4:	08003599 	.word	0x08003599
 80033a8:	080035b1 	.word	0x080035b1
 80033ac:	080035c9 	.word	0x080035c9
 80033b0:	0800360d 	.word	0x0800360d
 80033b4:	0800368d 	.word	0x0800368d
 80033b8:	080036d1 	.word	0x080036d1
 80033bc:	080036e9 	.word	0x080036e9
 80033c0:	08003701 	.word	0x08003701
 80033c4:	08003719 	.word	0x08003719
 80033c8:	0800375d 	.word	0x0800375d
 80033cc:	080037a1 	.word	0x080037a1
 80033d0:	080037e5 	.word	0x080037e5
 80033d4:	080037fd 	.word	0x080037fd
 80033d8:	08003815 	.word	0x08003815
		case UN:
			schedulerAddTask(robotFlipXNormal, NULL, newDelay, 0);
 80033dc:	2300      	movs	r3, #0
 80033de:	68fa      	ldr	r2, [r7, #12]
 80033e0:	2100      	movs	r1, #0
 80033e2:	489c      	ldr	r0, [pc, #624]	; (8003654 <scorpionsScramble+0x30c>)
 80033e4:	f7ff fc98 	bl	8002d18 <schedulerAddTask>
			newDelay += ROBOT_FLIPSINGLE;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f503 53ab 	add.w	r3, r3, #5472	; 0x1560
 80033ee:	3311      	adds	r3, #17
 80033f0:	60fb      	str	r3, [r7, #12]
			schedulerAddTask(robotTurnFrontNormal, NULL, newDelay, 0);
 80033f2:	2300      	movs	r3, #0
 80033f4:	68fa      	ldr	r2, [r7, #12]
 80033f6:	2100      	movs	r1, #0
 80033f8:	4897      	ldr	r0, [pc, #604]	; (8003658 <scorpionsScramble+0x310>)
 80033fa:	f7ff fc8d 	bl	8002d18 <schedulerAddTask>
			newDelay += ROBOT_TURNSINGLE;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 8003404:	331e      	adds	r3, #30
 8003406:	60fb      	str	r3, [r7, #12]
			schedulerAddTask(robotFlipXInvert, NULL, newDelay, 0);
 8003408:	2300      	movs	r3, #0
 800340a:	68fa      	ldr	r2, [r7, #12]
 800340c:	2100      	movs	r1, #0
 800340e:	4893      	ldr	r0, [pc, #588]	; (800365c <scorpionsScramble+0x314>)
 8003410:	f7ff fc82 	bl	8002d18 <schedulerAddTask>
			newDelay += ROBOT_FLIPSINGLE;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f503 53ab 	add.w	r3, r3, #5472	; 0x1560
 800341a:	3311      	adds	r3, #17
 800341c:	60fb      	str	r3, [r7, #12]
			break;
 800341e:	e206      	b.n	800382e <scorpionsScramble+0x4e6>
		case UI:
			schedulerAddTask(robotFlipXNormal, NULL, newDelay, 0);
 8003420:	2300      	movs	r3, #0
 8003422:	68fa      	ldr	r2, [r7, #12]
 8003424:	2100      	movs	r1, #0
 8003426:	488b      	ldr	r0, [pc, #556]	; (8003654 <scorpionsScramble+0x30c>)
 8003428:	f7ff fc76 	bl	8002d18 <schedulerAddTask>
			newDelay += ROBOT_FLIPSINGLE;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f503 53ab 	add.w	r3, r3, #5472	; 0x1560
 8003432:	3311      	adds	r3, #17
 8003434:	60fb      	str	r3, [r7, #12]
			schedulerAddTask(robotTurnFrontInvert, NULL, newDelay, 0);
 8003436:	2300      	movs	r3, #0
 8003438:	68fa      	ldr	r2, [r7, #12]
 800343a:	2100      	movs	r1, #0
 800343c:	4888      	ldr	r0, [pc, #544]	; (8003660 <scorpionsScramble+0x318>)
 800343e:	f7ff fc6b 	bl	8002d18 <schedulerAddTask>
			newDelay += ROBOT_TURNSINGLE;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 8003448:	331e      	adds	r3, #30
 800344a:	60fb      	str	r3, [r7, #12]
			schedulerAddTask(robotFlipXInvert, NULL, newDelay, 0);
 800344c:	2300      	movs	r3, #0
 800344e:	68fa      	ldr	r2, [r7, #12]
 8003450:	2100      	movs	r1, #0
 8003452:	4882      	ldr	r0, [pc, #520]	; (800365c <scorpionsScramble+0x314>)
 8003454:	f7ff fc60 	bl	8002d18 <schedulerAddTask>
			newDelay += ROBOT_FLIPSINGLE;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f503 53ab 	add.w	r3, r3, #5472	; 0x1560
 800345e:	3311      	adds	r3, #17
 8003460:	60fb      	str	r3, [r7, #12]
			break;
 8003462:	e1e4      	b.n	800382e <scorpionsScramble+0x4e6>
		case U2:
			schedulerAddTask(robotFlipXNormal, NULL, newDelay, 0);
 8003464:	2300      	movs	r3, #0
 8003466:	68fa      	ldr	r2, [r7, #12]
 8003468:	2100      	movs	r1, #0
 800346a:	487a      	ldr	r0, [pc, #488]	; (8003654 <scorpionsScramble+0x30c>)
 800346c:	f7ff fc54 	bl	8002d18 <schedulerAddTask>
			newDelay += ROBOT_FLIPSINGLE;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f503 53ab 	add.w	r3, r3, #5472	; 0x1560
 8003476:	3311      	adds	r3, #17
 8003478:	60fb      	str	r3, [r7, #12]
			schedulerAddTask(robotTurnFrontDouble, NULL, newDelay, 0);
 800347a:	2300      	movs	r3, #0
 800347c:	68fa      	ldr	r2, [r7, #12]
 800347e:	2100      	movs	r1, #0
 8003480:	4878      	ldr	r0, [pc, #480]	; (8003664 <scorpionsScramble+0x31c>)
 8003482:	f7ff fc49 	bl	8002d18 <schedulerAddTask>
			newDelay += ROBOT_TURNDOUBLE;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800348c:	3304      	adds	r3, #4
 800348e:	60fb      	str	r3, [r7, #12]
			schedulerAddTask(robotFlipXInvert, NULL, newDelay, 0);
 8003490:	2300      	movs	r3, #0
 8003492:	68fa      	ldr	r2, [r7, #12]
 8003494:	2100      	movs	r1, #0
 8003496:	4871      	ldr	r0, [pc, #452]	; (800365c <scorpionsScramble+0x314>)
 8003498:	f7ff fc3e 	bl	8002d18 <schedulerAddTask>
			newDelay += ROBOT_FLIPSINGLE;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f503 53ab 	add.w	r3, r3, #5472	; 0x1560
 80034a2:	3311      	adds	r3, #17
 80034a4:	60fb      	str	r3, [r7, #12]
			break;
 80034a6:	e1c2      	b.n	800382e <scorpionsScramble+0x4e6>
		case LN:
			schedulerAddTask(robotTurnLeftNormal, NULL, newDelay, 0);
 80034a8:	2300      	movs	r3, #0
 80034aa:	68fa      	ldr	r2, [r7, #12]
 80034ac:	2100      	movs	r1, #0
 80034ae:	486e      	ldr	r0, [pc, #440]	; (8003668 <scorpionsScramble+0x320>)
 80034b0:	f7ff fc32 	bl	8002d18 <schedulerAddTask>
			newDelay += ROBOT_TURNSINGLE;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 80034ba:	331e      	adds	r3, #30
 80034bc:	60fb      	str	r3, [r7, #12]
			break;
 80034be:	e1b6      	b.n	800382e <scorpionsScramble+0x4e6>
		case LI:
			schedulerAddTask(robotTurnLeftInvert, NULL, newDelay, 0);
 80034c0:	2300      	movs	r3, #0
 80034c2:	68fa      	ldr	r2, [r7, #12]
 80034c4:	2100      	movs	r1, #0
 80034c6:	4869      	ldr	r0, [pc, #420]	; (800366c <scorpionsScramble+0x324>)
 80034c8:	f7ff fc26 	bl	8002d18 <schedulerAddTask>
			newDelay += ROBOT_TURNSINGLE;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 80034d2:	331e      	adds	r3, #30
 80034d4:	60fb      	str	r3, [r7, #12]
			break;
 80034d6:	e1aa      	b.n	800382e <scorpionsScramble+0x4e6>
		case L2:
			schedulerAddTask(robotTurnLeftDouble, NULL, newDelay, 0);
 80034d8:	2300      	movs	r3, #0
 80034da:	68fa      	ldr	r2, [r7, #12]
 80034dc:	2100      	movs	r1, #0
 80034de:	4864      	ldr	r0, [pc, #400]	; (8003670 <scorpionsScramble+0x328>)
 80034e0:	f7ff fc1a 	bl	8002d18 <schedulerAddTask>
			newDelay += ROBOT_TURNDOUBLE;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 80034ea:	3304      	adds	r3, #4
 80034ec:	60fb      	str	r3, [r7, #12]
			break;
 80034ee:	e19e      	b.n	800382e <scorpionsScramble+0x4e6>
		case FN:
			schedulerAddTask(robotTurnFrontNormal, NULL, newDelay, 0);
 80034f0:	2300      	movs	r3, #0
 80034f2:	68fa      	ldr	r2, [r7, #12]
 80034f4:	2100      	movs	r1, #0
 80034f6:	4858      	ldr	r0, [pc, #352]	; (8003658 <scorpionsScramble+0x310>)
 80034f8:	f7ff fc0e 	bl	8002d18 <schedulerAddTask>
			newDelay += ROBOT_TURNSINGLE;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 8003502:	331e      	adds	r3, #30
 8003504:	60fb      	str	r3, [r7, #12]
			break;
 8003506:	e192      	b.n	800382e <scorpionsScramble+0x4e6>
		case FI:
			schedulerAddTask(robotTurnFrontInvert, NULL, newDelay, 0);
 8003508:	2300      	movs	r3, #0
 800350a:	68fa      	ldr	r2, [r7, #12]
 800350c:	2100      	movs	r1, #0
 800350e:	4854      	ldr	r0, [pc, #336]	; (8003660 <scorpionsScramble+0x318>)
 8003510:	f7ff fc02 	bl	8002d18 <schedulerAddTask>
			newDelay += ROBOT_TURNSINGLE;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 800351a:	331e      	adds	r3, #30
 800351c:	60fb      	str	r3, [r7, #12]
			break;
 800351e:	e186      	b.n	800382e <scorpionsScramble+0x4e6>
		case F2:
			schedulerAddTask(robotTurnFrontDouble, NULL, newDelay, 0);
 8003520:	2300      	movs	r3, #0
 8003522:	68fa      	ldr	r2, [r7, #12]
 8003524:	2100      	movs	r1, #0
 8003526:	484f      	ldr	r0, [pc, #316]	; (8003664 <scorpionsScramble+0x31c>)
 8003528:	f7ff fbf6 	bl	8002d18 <schedulerAddTask>
			newDelay += ROBOT_TURNDOUBLE;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8003532:	3304      	adds	r3, #4
 8003534:	60fb      	str	r3, [r7, #12]
			break;
 8003536:	e17a      	b.n	800382e <scorpionsScramble+0x4e6>
		case RN:
			schedulerAddTask(robotTurnRightNormal, NULL, newDelay, 0);
 8003538:	2300      	movs	r3, #0
 800353a:	68fa      	ldr	r2, [r7, #12]
 800353c:	2100      	movs	r1, #0
 800353e:	484d      	ldr	r0, [pc, #308]	; (8003674 <scorpionsScramble+0x32c>)
 8003540:	f7ff fbea 	bl	8002d18 <schedulerAddTask>
			newDelay += ROBOT_TURNSINGLE;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 800354a:	331e      	adds	r3, #30
 800354c:	60fb      	str	r3, [r7, #12]
			break;
 800354e:	e16e      	b.n	800382e <scorpionsScramble+0x4e6>
		case RI:
			schedulerAddTask(robotTurnRightInvert, NULL, newDelay, 0);
 8003550:	2300      	movs	r3, #0
 8003552:	68fa      	ldr	r2, [r7, #12]
 8003554:	2100      	movs	r1, #0
 8003556:	4848      	ldr	r0, [pc, #288]	; (8003678 <scorpionsScramble+0x330>)
 8003558:	f7ff fbde 	bl	8002d18 <schedulerAddTask>
			newDelay += ROBOT_TURNSINGLE;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 8003562:	331e      	adds	r3, #30
 8003564:	60fb      	str	r3, [r7, #12]
			break;
 8003566:	e162      	b.n	800382e <scorpionsScramble+0x4e6>
		case R2:
			schedulerAddTask(robotTurnRightDouble, NULL, newDelay, 0);
 8003568:	2300      	movs	r3, #0
 800356a:	68fa      	ldr	r2, [r7, #12]
 800356c:	2100      	movs	r1, #0
 800356e:	4843      	ldr	r0, [pc, #268]	; (800367c <scorpionsScramble+0x334>)
 8003570:	f7ff fbd2 	bl	8002d18 <schedulerAddTask>
			newDelay += ROBOT_TURNDOUBLE;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800357a:	3304      	adds	r3, #4
 800357c:	60fb      	str	r3, [r7, #12]
			break;
 800357e:	e156      	b.n	800382e <scorpionsScramble+0x4e6>
		case BN:
			schedulerAddTask(robotTurnBackNormal, NULL, newDelay, 0);
 8003580:	2300      	movs	r3, #0
 8003582:	68fa      	ldr	r2, [r7, #12]
 8003584:	2100      	movs	r1, #0
 8003586:	483e      	ldr	r0, [pc, #248]	; (8003680 <scorpionsScramble+0x338>)
 8003588:	f7ff fbc6 	bl	8002d18 <schedulerAddTask>
			newDelay += ROBOT_TURNSINGLE;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 8003592:	331e      	adds	r3, #30
 8003594:	60fb      	str	r3, [r7, #12]
			break;
 8003596:	e14a      	b.n	800382e <scorpionsScramble+0x4e6>
		case BI:
			schedulerAddTask(robotTurnBackInvert, NULL, newDelay, 0);
 8003598:	2300      	movs	r3, #0
 800359a:	68fa      	ldr	r2, [r7, #12]
 800359c:	2100      	movs	r1, #0
 800359e:	4839      	ldr	r0, [pc, #228]	; (8003684 <scorpionsScramble+0x33c>)
 80035a0:	f7ff fbba 	bl	8002d18 <schedulerAddTask>
			newDelay += ROBOT_TURNSINGLE;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 80035aa:	331e      	adds	r3, #30
 80035ac:	60fb      	str	r3, [r7, #12]
			break;
 80035ae:	e13e      	b.n	800382e <scorpionsScramble+0x4e6>
		case B2:
			schedulerAddTask(robotTurnBackDouble, NULL, newDelay, 0);
 80035b0:	2300      	movs	r3, #0
 80035b2:	68fa      	ldr	r2, [r7, #12]
 80035b4:	2100      	movs	r1, #0
 80035b6:	4834      	ldr	r0, [pc, #208]	; (8003688 <scorpionsScramble+0x340>)
 80035b8:	f7ff fbae 	bl	8002d18 <schedulerAddTask>
			newDelay += ROBOT_TURNDOUBLE;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 80035c2:	3304      	adds	r3, #4
 80035c4:	60fb      	str	r3, [r7, #12]
			break;
 80035c6:	e132      	b.n	800382e <scorpionsScramble+0x4e6>
		case DN:
			schedulerAddTask(robotFlipXInvert, NULL, newDelay, 0);
 80035c8:	2300      	movs	r3, #0
 80035ca:	68fa      	ldr	r2, [r7, #12]
 80035cc:	2100      	movs	r1, #0
 80035ce:	4823      	ldr	r0, [pc, #140]	; (800365c <scorpionsScramble+0x314>)
 80035d0:	f7ff fba2 	bl	8002d18 <schedulerAddTask>
			newDelay += ROBOT_FLIPSINGLE;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f503 53ab 	add.w	r3, r3, #5472	; 0x1560
 80035da:	3311      	adds	r3, #17
 80035dc:	60fb      	str	r3, [r7, #12]
			schedulerAddTask(robotTurnFrontNormal, NULL, newDelay, 0);
 80035de:	2300      	movs	r3, #0
 80035e0:	68fa      	ldr	r2, [r7, #12]
 80035e2:	2100      	movs	r1, #0
 80035e4:	481c      	ldr	r0, [pc, #112]	; (8003658 <scorpionsScramble+0x310>)
 80035e6:	f7ff fb97 	bl	8002d18 <schedulerAddTask>
			newDelay += ROBOT_TURNSINGLE;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 80035f0:	331e      	adds	r3, #30
 80035f2:	60fb      	str	r3, [r7, #12]
			schedulerAddTask(robotFlipXNormal, NULL, newDelay, 0);
 80035f4:	2300      	movs	r3, #0
 80035f6:	68fa      	ldr	r2, [r7, #12]
 80035f8:	2100      	movs	r1, #0
 80035fa:	4816      	ldr	r0, [pc, #88]	; (8003654 <scorpionsScramble+0x30c>)
 80035fc:	f7ff fb8c 	bl	8002d18 <schedulerAddTask>
			newDelay += ROBOT_FLIPSINGLE;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f503 53ab 	add.w	r3, r3, #5472	; 0x1560
 8003606:	3311      	adds	r3, #17
 8003608:	60fb      	str	r3, [r7, #12]
			break;
 800360a:	e110      	b.n	800382e <scorpionsScramble+0x4e6>
		case DI:
			schedulerAddTask(robotFlipXInvert, NULL, newDelay, 0);
 800360c:	2300      	movs	r3, #0
 800360e:	68fa      	ldr	r2, [r7, #12]
 8003610:	2100      	movs	r1, #0
 8003612:	4812      	ldr	r0, [pc, #72]	; (800365c <scorpionsScramble+0x314>)
 8003614:	f7ff fb80 	bl	8002d18 <schedulerAddTask>
			newDelay += ROBOT_FLIPSINGLE;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f503 53ab 	add.w	r3, r3, #5472	; 0x1560
 800361e:	3311      	adds	r3, #17
 8003620:	60fb      	str	r3, [r7, #12]
			schedulerAddTask(robotTurnFrontInvert, NULL, newDelay, 0);
 8003622:	2300      	movs	r3, #0
 8003624:	68fa      	ldr	r2, [r7, #12]
 8003626:	2100      	movs	r1, #0
 8003628:	480d      	ldr	r0, [pc, #52]	; (8003660 <scorpionsScramble+0x318>)
 800362a:	f7ff fb75 	bl	8002d18 <schedulerAddTask>
			newDelay += ROBOT_TURNSINGLE;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 8003634:	331e      	adds	r3, #30
 8003636:	60fb      	str	r3, [r7, #12]
			schedulerAddTask(robotFlipXNormal, NULL, newDelay, 0);
 8003638:	2300      	movs	r3, #0
 800363a:	68fa      	ldr	r2, [r7, #12]
 800363c:	2100      	movs	r1, #0
 800363e:	4805      	ldr	r0, [pc, #20]	; (8003654 <scorpionsScramble+0x30c>)
 8003640:	f7ff fb6a 	bl	8002d18 <schedulerAddTask>
			newDelay += ROBOT_FLIPSINGLE;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f503 53ab 	add.w	r3, r3, #5472	; 0x1560
 800364a:	3311      	adds	r3, #17
 800364c:	60fb      	str	r3, [r7, #12]
			break;
 800364e:	e0ee      	b.n	800382e <scorpionsScramble+0x4e6>
 8003650:	20000008 	.word	0x20000008
 8003654:	08002981 	.word	0x08002981
 8003658:	08002339 	.word	0x08002339
 800365c:	080029e1 	.word	0x080029e1
 8003660:	08002375 	.word	0x08002375
 8003664:	080023b1 	.word	0x080023b1
 8003668:	08002285 	.word	0x08002285
 800366c:	080022c1 	.word	0x080022c1
 8003670:	080022fd 	.word	0x080022fd
 8003674:	080023ed 	.word	0x080023ed
 8003678:	08002429 	.word	0x08002429
 800367c:	08002465 	.word	0x08002465
 8003680:	080024a1 	.word	0x080024a1
 8003684:	080024dd 	.word	0x080024dd
 8003688:	08002519 	.word	0x08002519
		case D2:
			schedulerAddTask(robotFlipXInvert, NULL, newDelay, 0);
 800368c:	2300      	movs	r3, #0
 800368e:	68fa      	ldr	r2, [r7, #12]
 8003690:	2100      	movs	r1, #0
 8003692:	486e      	ldr	r0, [pc, #440]	; (800384c <scorpionsScramble+0x504>)
 8003694:	f7ff fb40 	bl	8002d18 <schedulerAddTask>
			newDelay += ROBOT_FLIPSINGLE;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f503 53ab 	add.w	r3, r3, #5472	; 0x1560
 800369e:	3311      	adds	r3, #17
 80036a0:	60fb      	str	r3, [r7, #12]
			schedulerAddTask(robotTurnFrontDouble, NULL, newDelay, 0);
 80036a2:	2300      	movs	r3, #0
 80036a4:	68fa      	ldr	r2, [r7, #12]
 80036a6:	2100      	movs	r1, #0
 80036a8:	4869      	ldr	r0, [pc, #420]	; (8003850 <scorpionsScramble+0x508>)
 80036aa:	f7ff fb35 	bl	8002d18 <schedulerAddTask>
			newDelay += ROBOT_TURNDOUBLE;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 80036b4:	3304      	adds	r3, #4
 80036b6:	60fb      	str	r3, [r7, #12]
			schedulerAddTask(robotFlipXNormal, NULL, newDelay, 0);
 80036b8:	2300      	movs	r3, #0
 80036ba:	68fa      	ldr	r2, [r7, #12]
 80036bc:	2100      	movs	r1, #0
 80036be:	4865      	ldr	r0, [pc, #404]	; (8003854 <scorpionsScramble+0x50c>)
 80036c0:	f7ff fb2a 	bl	8002d18 <schedulerAddTask>
			newDelay += ROBOT_FLIPSINGLE;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f503 53ab 	add.w	r3, r3, #5472	; 0x1560
 80036ca:	3311      	adds	r3, #17
 80036cc:	60fb      	str	r3, [r7, #12]
			break;
 80036ce:	e0ae      	b.n	800382e <scorpionsScramble+0x4e6>
		case xN:
			schedulerAddTask(robotFlipXNormal, NULL, newDelay, 0);
 80036d0:	2300      	movs	r3, #0
 80036d2:	68fa      	ldr	r2, [r7, #12]
 80036d4:	2100      	movs	r1, #0
 80036d6:	485f      	ldr	r0, [pc, #380]	; (8003854 <scorpionsScramble+0x50c>)
 80036d8:	f7ff fb1e 	bl	8002d18 <schedulerAddTask>
			newDelay += ROBOT_FLIPSINGLE;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f503 53ab 	add.w	r3, r3, #5472	; 0x1560
 80036e2:	3311      	adds	r3, #17
 80036e4:	60fb      	str	r3, [r7, #12]
			break;
 80036e6:	e0a2      	b.n	800382e <scorpionsScramble+0x4e6>
		case xI:
			schedulerAddTask(robotFlipXInvert, NULL, newDelay, 0);
 80036e8:	2300      	movs	r3, #0
 80036ea:	68fa      	ldr	r2, [r7, #12]
 80036ec:	2100      	movs	r1, #0
 80036ee:	4857      	ldr	r0, [pc, #348]	; (800384c <scorpionsScramble+0x504>)
 80036f0:	f7ff fb12 	bl	8002d18 <schedulerAddTask>
			newDelay += ROBOT_FLIPSINGLE;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f503 53ab 	add.w	r3, r3, #5472	; 0x1560
 80036fa:	3311      	adds	r3, #17
 80036fc:	60fb      	str	r3, [r7, #12]
			break;
 80036fe:	e096      	b.n	800382e <scorpionsScramble+0x4e6>
		case x2:
			schedulerAddTask(robotFlipXDouble, NULL, newDelay, 0);
 8003700:	2300      	movs	r3, #0
 8003702:	68fa      	ldr	r2, [r7, #12]
 8003704:	2100      	movs	r1, #0
 8003706:	4854      	ldr	r0, [pc, #336]	; (8003858 <scorpionsScramble+0x510>)
 8003708:	f7ff fb06 	bl	8002d18 <schedulerAddTask>
			newDelay += ROBOT_FLIPDOUBLE;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f503 53f9 	add.w	r3, r3, #7968	; 0x1f20
 8003712:	3310      	adds	r3, #16
 8003714:	60fb      	str	r3, [r7, #12]
			break;
 8003716:	e08a      	b.n	800382e <scorpionsScramble+0x4e6>
		case yN:
			schedulerAddTask(robotFlipXNormal, NULL, newDelay, 0);
 8003718:	2300      	movs	r3, #0
 800371a:	68fa      	ldr	r2, [r7, #12]
 800371c:	2100      	movs	r1, #0
 800371e:	484d      	ldr	r0, [pc, #308]	; (8003854 <scorpionsScramble+0x50c>)
 8003720:	f7ff fafa 	bl	8002d18 <schedulerAddTask>
			newDelay += ROBOT_FLIPSINGLE;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f503 53ab 	add.w	r3, r3, #5472	; 0x1560
 800372a:	3311      	adds	r3, #17
 800372c:	60fb      	str	r3, [r7, #12]
			schedulerAddTask(robotFlipZNormal, NULL, newDelay, 0);
 800372e:	2300      	movs	r3, #0
 8003730:	68fa      	ldr	r2, [r7, #12]
 8003732:	2100      	movs	r1, #0
 8003734:	4849      	ldr	r0, [pc, #292]	; (800385c <scorpionsScramble+0x514>)
 8003736:	f7ff faef 	bl	8002d18 <schedulerAddTask>
			newDelay += ROBOT_FLIPSINGLE;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	f503 53ab 	add.w	r3, r3, #5472	; 0x1560
 8003740:	3311      	adds	r3, #17
 8003742:	60fb      	str	r3, [r7, #12]
			schedulerAddTask(robotFlipXInvert, NULL, newDelay, 0);
 8003744:	2300      	movs	r3, #0
 8003746:	68fa      	ldr	r2, [r7, #12]
 8003748:	2100      	movs	r1, #0
 800374a:	4840      	ldr	r0, [pc, #256]	; (800384c <scorpionsScramble+0x504>)
 800374c:	f7ff fae4 	bl	8002d18 <schedulerAddTask>
			newDelay += ROBOT_FLIPSINGLE;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f503 53ab 	add.w	r3, r3, #5472	; 0x1560
 8003756:	3311      	adds	r3, #17
 8003758:	60fb      	str	r3, [r7, #12]
			break;
 800375a:	e068      	b.n	800382e <scorpionsScramble+0x4e6>
		case yI:
			schedulerAddTask(robotFlipXNormal, NULL, newDelay, 0);
 800375c:	2300      	movs	r3, #0
 800375e:	68fa      	ldr	r2, [r7, #12]
 8003760:	2100      	movs	r1, #0
 8003762:	483c      	ldr	r0, [pc, #240]	; (8003854 <scorpionsScramble+0x50c>)
 8003764:	f7ff fad8 	bl	8002d18 <schedulerAddTask>
			newDelay += ROBOT_FLIPSINGLE;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f503 53ab 	add.w	r3, r3, #5472	; 0x1560
 800376e:	3311      	adds	r3, #17
 8003770:	60fb      	str	r3, [r7, #12]
			schedulerAddTask(robotFlipZInvert, NULL, newDelay, 0);
 8003772:	2300      	movs	r3, #0
 8003774:	68fa      	ldr	r2, [r7, #12]
 8003776:	2100      	movs	r1, #0
 8003778:	4839      	ldr	r0, [pc, #228]	; (8003860 <scorpionsScramble+0x518>)
 800377a:	f7ff facd 	bl	8002d18 <schedulerAddTask>
			newDelay += ROBOT_FLIPSINGLE;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f503 53ab 	add.w	r3, r3, #5472	; 0x1560
 8003784:	3311      	adds	r3, #17
 8003786:	60fb      	str	r3, [r7, #12]
			schedulerAddTask(robotFlipXInvert, NULL, newDelay, 0);
 8003788:	2300      	movs	r3, #0
 800378a:	68fa      	ldr	r2, [r7, #12]
 800378c:	2100      	movs	r1, #0
 800378e:	482f      	ldr	r0, [pc, #188]	; (800384c <scorpionsScramble+0x504>)
 8003790:	f7ff fac2 	bl	8002d18 <schedulerAddTask>
			newDelay += ROBOT_FLIPSINGLE;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f503 53ab 	add.w	r3, r3, #5472	; 0x1560
 800379a:	3311      	adds	r3, #17
 800379c:	60fb      	str	r3, [r7, #12]
			break;
 800379e:	e046      	b.n	800382e <scorpionsScramble+0x4e6>
		case y2:
			schedulerAddTask(robotFlipXNormal, NULL, newDelay, 0);
 80037a0:	2300      	movs	r3, #0
 80037a2:	68fa      	ldr	r2, [r7, #12]
 80037a4:	2100      	movs	r1, #0
 80037a6:	482b      	ldr	r0, [pc, #172]	; (8003854 <scorpionsScramble+0x50c>)
 80037a8:	f7ff fab6 	bl	8002d18 <schedulerAddTask>
			newDelay += ROBOT_FLIPSINGLE;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f503 53ab 	add.w	r3, r3, #5472	; 0x1560
 80037b2:	3311      	adds	r3, #17
 80037b4:	60fb      	str	r3, [r7, #12]
			schedulerAddTask(robotFlipZDouble, NULL, newDelay, 0);
 80037b6:	2300      	movs	r3, #0
 80037b8:	68fa      	ldr	r2, [r7, #12]
 80037ba:	2100      	movs	r1, #0
 80037bc:	4829      	ldr	r0, [pc, #164]	; (8003864 <scorpionsScramble+0x51c>)
 80037be:	f7ff faab 	bl	8002d18 <schedulerAddTask>
			newDelay += ROBOT_FLIPDOUBLE;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	f503 53f9 	add.w	r3, r3, #7968	; 0x1f20
 80037c8:	3310      	adds	r3, #16
 80037ca:	60fb      	str	r3, [r7, #12]
			schedulerAddTask(robotFlipXInvert, NULL, newDelay, 0);
 80037cc:	2300      	movs	r3, #0
 80037ce:	68fa      	ldr	r2, [r7, #12]
 80037d0:	2100      	movs	r1, #0
 80037d2:	481e      	ldr	r0, [pc, #120]	; (800384c <scorpionsScramble+0x504>)
 80037d4:	f7ff faa0 	bl	8002d18 <schedulerAddTask>
			newDelay += ROBOT_FLIPSINGLE;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f503 53ab 	add.w	r3, r3, #5472	; 0x1560
 80037de:	3311      	adds	r3, #17
 80037e0:	60fb      	str	r3, [r7, #12]
			break;
 80037e2:	e024      	b.n	800382e <scorpionsScramble+0x4e6>
		case zN:
			schedulerAddTask(robotFlipZNormal, NULL, newDelay, 0);
 80037e4:	2300      	movs	r3, #0
 80037e6:	68fa      	ldr	r2, [r7, #12]
 80037e8:	2100      	movs	r1, #0
 80037ea:	481c      	ldr	r0, [pc, #112]	; (800385c <scorpionsScramble+0x514>)
 80037ec:	f7ff fa94 	bl	8002d18 <schedulerAddTask>
			newDelay += ROBOT_FLIPSINGLE;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f503 53ab 	add.w	r3, r3, #5472	; 0x1560
 80037f6:	3311      	adds	r3, #17
 80037f8:	60fb      	str	r3, [r7, #12]
			break;
 80037fa:	e018      	b.n	800382e <scorpionsScramble+0x4e6>
		case zI:
			schedulerAddTask(robotFlipZInvert, NULL, newDelay, 0);
 80037fc:	2300      	movs	r3, #0
 80037fe:	68fa      	ldr	r2, [r7, #12]
 8003800:	2100      	movs	r1, #0
 8003802:	4817      	ldr	r0, [pc, #92]	; (8003860 <scorpionsScramble+0x518>)
 8003804:	f7ff fa88 	bl	8002d18 <schedulerAddTask>
			newDelay += ROBOT_FLIPSINGLE;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f503 53ab 	add.w	r3, r3, #5472	; 0x1560
 800380e:	3311      	adds	r3, #17
 8003810:	60fb      	str	r3, [r7, #12]
			break;
 8003812:	e00c      	b.n	800382e <scorpionsScramble+0x4e6>
		case z2:
			schedulerAddTask(robotFlipZDouble, NULL, newDelay, 0);
 8003814:	2300      	movs	r3, #0
 8003816:	68fa      	ldr	r2, [r7, #12]
 8003818:	2100      	movs	r1, #0
 800381a:	4812      	ldr	r0, [pc, #72]	; (8003864 <scorpionsScramble+0x51c>)
 800381c:	f7ff fa7c 	bl	8002d18 <schedulerAddTask>
			newDelay += ROBOT_FLIPDOUBLE;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f503 53f9 	add.w	r3, r3, #7968	; 0x1f20
 8003826:	3310      	adds	r3, #16
 8003828:	60fb      	str	r3, [r7, #12]
			break;
 800382a:	e000      	b.n	800382e <scorpionsScramble+0x4e6>
		default:
			break;
 800382c:	bf00      	nop
	for (uint8_t i = 0; i < scramble; i ++) {
 800382e:	7afb      	ldrb	r3, [r7, #11]
 8003830:	3301      	adds	r3, #1
 8003832:	72fb      	strb	r3, [r7, #11]
 8003834:	4b0c      	ldr	r3, [pc, #48]	; (8003868 <scorpionsScramble+0x520>)
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	7afa      	ldrb	r2, [r7, #11]
 800383a:	429a      	cmp	r2, r3
 800383c:	f4ff ad8e 	bcc.w	800335c <scorpionsScramble+0x14>
		}
	}
}
 8003840:	bf00      	nop
 8003842:	bf00      	nop
 8003844:	3710      	adds	r7, #16
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	080029e1 	.word	0x080029e1
 8003850:	080023b1 	.word	0x080023b1
 8003854:	08002981 	.word	0x08002981
 8003858:	08002a41 	.word	0x08002a41
 800385c:	08002aa1 	.word	0x08002aa1
 8003860:	08002b01 	.word	0x08002b01
 8003864:	08002b61 	.word	0x08002b61
 8003868:	20000004 	.word	0x20000004

0800386c <servoInit>:
#include "servo.h"
#include "scheduler.h"

servo servos[SERVO_NUMBER];

void servoInit(void) {
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < SERVO_NUMBER; i ++) {
 8003872:	2300      	movs	r3, #0
 8003874:	71fb      	strb	r3, [r7, #7]
 8003876:	e01f      	b.n	80038b8 <servoInit+0x4c>
		servos[i].timer = NULL;
 8003878:	79fb      	ldrb	r3, [r7, #7]
 800387a:	4a14      	ldr	r2, [pc, #80]	; (80038cc <servoInit+0x60>)
 800387c:	011b      	lsls	r3, r3, #4
 800387e:	4413      	add	r3, r2
 8003880:	2200      	movs	r2, #0
 8003882:	601a      	str	r2, [r3, #0]
		servos[i].channel = 0;
 8003884:	79fb      	ldrb	r3, [r7, #7]
 8003886:	4a11      	ldr	r2, [pc, #68]	; (80038cc <servoInit+0x60>)
 8003888:	011b      	lsls	r3, r3, #4
 800388a:	4413      	add	r3, r2
 800388c:	3304      	adds	r3, #4
 800388e:	2200      	movs	r2, #0
 8003890:	601a      	str	r2, [r3, #0]
		servos[i].offset = 0;
 8003892:	79fb      	ldrb	r3, [r7, #7]
 8003894:	4a0d      	ldr	r2, [pc, #52]	; (80038cc <servoInit+0x60>)
 8003896:	011b      	lsls	r3, r3, #4
 8003898:	4413      	add	r3, r2
 800389a:	3308      	adds	r3, #8
 800389c:	f04f 0200 	mov.w	r2, #0
 80038a0:	601a      	str	r2, [r3, #0]
		servos[i].target = 0;
 80038a2:	79fb      	ldrb	r3, [r7, #7]
 80038a4:	4a09      	ldr	r2, [pc, #36]	; (80038cc <servoInit+0x60>)
 80038a6:	011b      	lsls	r3, r3, #4
 80038a8:	4413      	add	r3, r2
 80038aa:	330c      	adds	r3, #12
 80038ac:	f04f 0200 	mov.w	r2, #0
 80038b0:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < SERVO_NUMBER; i ++) {
 80038b2:	79fb      	ldrb	r3, [r7, #7]
 80038b4:	3301      	adds	r3, #1
 80038b6:	71fb      	strb	r3, [r7, #7]
 80038b8:	79fb      	ldrb	r3, [r7, #7]
 80038ba:	2b0b      	cmp	r3, #11
 80038bc:	d9dc      	bls.n	8003878 <servoInit+0xc>
	}
}
 80038be:	bf00      	nop
 80038c0:	bf00      	nop
 80038c2:	370c      	adds	r7, #12
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bc80      	pop	{r7}
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	20000810 	.word	0x20000810

080038d0 <servoStart>:

uint8_t servoStart(TIM_HandleTypeDef *timer, uint32_t channel, float offset) {
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b086      	sub	sp, #24
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	60b9      	str	r1, [r7, #8]
 80038da:	607a      	str	r2, [r7, #4]
	for (uint8_t i = 0; i < SERVO_NUMBER; i ++) {
 80038dc:	2300      	movs	r3, #0
 80038de:	75fb      	strb	r3, [r7, #23]
 80038e0:	e045      	b.n	800396e <servoStart+0x9e>
		if (servos[i].timer != NULL) continue;
 80038e2:	7dfb      	ldrb	r3, [r7, #23]
 80038e4:	4a26      	ldr	r2, [pc, #152]	; (8003980 <servoStart+0xb0>)
 80038e6:	011b      	lsls	r3, r3, #4
 80038e8:	4413      	add	r3, r2
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d13a      	bne.n	8003966 <servoStart+0x96>
		servos[i].timer = timer;
 80038f0:	7dfb      	ldrb	r3, [r7, #23]
 80038f2:	4a23      	ldr	r2, [pc, #140]	; (8003980 <servoStart+0xb0>)
 80038f4:	011b      	lsls	r3, r3, #4
 80038f6:	4413      	add	r3, r2
 80038f8:	68fa      	ldr	r2, [r7, #12]
 80038fa:	601a      	str	r2, [r3, #0]
		servos[i].channel = channel;
 80038fc:	7dfb      	ldrb	r3, [r7, #23]
 80038fe:	4a20      	ldr	r2, [pc, #128]	; (8003980 <servoStart+0xb0>)
 8003900:	011b      	lsls	r3, r3, #4
 8003902:	4413      	add	r3, r2
 8003904:	3304      	adds	r3, #4
 8003906:	68ba      	ldr	r2, [r7, #8]
 8003908:	601a      	str	r2, [r3, #0]
		if (offset < -SERVO_OFFSET) servos[i].offset = -SERVO_OFFSET;
 800390a:	491e      	ldr	r1, [pc, #120]	; (8003984 <servoStart+0xb4>)
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f7fd fba7 	bl	8001060 <__aeabi_fcmplt>
 8003912:	4603      	mov	r3, r0
 8003914:	2b00      	cmp	r3, #0
 8003916:	d007      	beq.n	8003928 <servoStart+0x58>
 8003918:	7dfb      	ldrb	r3, [r7, #23]
 800391a:	4a19      	ldr	r2, [pc, #100]	; (8003980 <servoStart+0xb0>)
 800391c:	011b      	lsls	r3, r3, #4
 800391e:	4413      	add	r3, r2
 8003920:	3308      	adds	r3, #8
 8003922:	4a18      	ldr	r2, [pc, #96]	; (8003984 <servoStart+0xb4>)
 8003924:	601a      	str	r2, [r3, #0]
 8003926:	e015      	b.n	8003954 <servoStart+0x84>
		else if (offset > SERVO_OFFSET) servos[i].offset = SERVO_OFFSET;
 8003928:	4917      	ldr	r1, [pc, #92]	; (8003988 <servoStart+0xb8>)
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f7fd fbb6 	bl	800109c <__aeabi_fcmpgt>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d007      	beq.n	8003946 <servoStart+0x76>
 8003936:	7dfb      	ldrb	r3, [r7, #23]
 8003938:	4a11      	ldr	r2, [pc, #68]	; (8003980 <servoStart+0xb0>)
 800393a:	011b      	lsls	r3, r3, #4
 800393c:	4413      	add	r3, r2
 800393e:	3308      	adds	r3, #8
 8003940:	4a11      	ldr	r2, [pc, #68]	; (8003988 <servoStart+0xb8>)
 8003942:	601a      	str	r2, [r3, #0]
 8003944:	e006      	b.n	8003954 <servoStart+0x84>
		else servos[i].offset = offset;
 8003946:	7dfb      	ldrb	r3, [r7, #23]
 8003948:	4a0d      	ldr	r2, [pc, #52]	; (8003980 <servoStart+0xb0>)
 800394a:	011b      	lsls	r3, r3, #4
 800394c:	4413      	add	r3, r2
 800394e:	3308      	adds	r3, #8
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	601a      	str	r2, [r3, #0]
		servos[i].target = 90;
 8003954:	7dfb      	ldrb	r3, [r7, #23]
 8003956:	4a0a      	ldr	r2, [pc, #40]	; (8003980 <servoStart+0xb0>)
 8003958:	011b      	lsls	r3, r3, #4
 800395a:	4413      	add	r3, r2
 800395c:	330c      	adds	r3, #12
 800395e:	4a0b      	ldr	r2, [pc, #44]	; (800398c <servoStart+0xbc>)
 8003960:	601a      	str	r2, [r3, #0]
		return i;
 8003962:	7dfb      	ldrb	r3, [r7, #23]
 8003964:	e007      	b.n	8003976 <servoStart+0xa6>
		if (servos[i].timer != NULL) continue;
 8003966:	bf00      	nop
	for (uint8_t i = 0; i < SERVO_NUMBER; i ++) {
 8003968:	7dfb      	ldrb	r3, [r7, #23]
 800396a:	3301      	adds	r3, #1
 800396c:	75fb      	strb	r3, [r7, #23]
 800396e:	7dfb      	ldrb	r3, [r7, #23]
 8003970:	2b0b      	cmp	r3, #11
 8003972:	d9b6      	bls.n	80038e2 <servoStart+0x12>
	}
	return SERVO_UNDEFINED;
 8003974:	230c      	movs	r3, #12
}
 8003976:	4618      	mov	r0, r3
 8003978:	3718      	adds	r7, #24
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	20000810 	.word	0x20000810
 8003984:	c1580000 	.word	0xc1580000
 8003988:	41580000 	.word	0x41580000
 800398c:	42b40000 	.word	0x42b40000

08003990 <servoRotate>:
		if (servos[i].timer == NULL) continue;
		servoRotate(&servos[i]);
	}
}

void servoRotate(void *servoPointer) {
 8003990:	b5b0      	push	{r4, r5, r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
	servo *newServoPointer = (servo *)servoPointer;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	60fb      	str	r3, [r7, #12]
	if (newServoPointer->timer == NULL) return;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d07c      	beq.n	8003a9e <servoRotate+0x10e>
	if (newServoPointer->target < 0) newServoPointer->target = 0;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	f04f 0100 	mov.w	r1, #0
 80039ac:	4618      	mov	r0, r3
 80039ae:	f7fd fb57 	bl	8001060 <__aeabi_fcmplt>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d004      	beq.n	80039c2 <servoRotate+0x32>
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f04f 0200 	mov.w	r2, #0
 80039be:	60da      	str	r2, [r3, #12]
 80039c0:	e00b      	b.n	80039da <servoRotate+0x4a>
	else if (newServoPointer->target > 180) newServoPointer->target = 180;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	493a      	ldr	r1, [pc, #232]	; (8003ab0 <servoRotate+0x120>)
 80039c8:	4618      	mov	r0, r3
 80039ca:	f7fd fb67 	bl	800109c <__aeabi_fcmpgt>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d002      	beq.n	80039da <servoRotate+0x4a>
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	4a36      	ldr	r2, [pc, #216]	; (8003ab0 <servoRotate+0x120>)
 80039d8:	60da      	str	r2, [r3, #12]
	uint32_t newValue = (newServoPointer->timer->Instance->ARR + 1) / (1.0 * SERVO_PERIOD) * (SERVO_MINIMUM + (SERVO_MAXIMUM - SERVO_MINIMUM) * (newServoPointer->target + newServoPointer->offset) / 180.0);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e2:	3301      	adds	r3, #1
 80039e4:	4618      	mov	r0, r3
 80039e6:	f7fc fcf5 	bl	80003d4 <__aeabi_ui2d>
 80039ea:	a32f      	add	r3, pc, #188	; (adr r3, 8003aa8 <servoRotate+0x118>)
 80039ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f0:	f7fc fe94 	bl	800071c <__aeabi_ddiv>
 80039f4:	4602      	mov	r2, r0
 80039f6:	460b      	mov	r3, r1
 80039f8:	4614      	mov	r4, r2
 80039fa:	461d      	mov	r5, r3
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	68da      	ldr	r2, [r3, #12]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	4619      	mov	r1, r3
 8003a06:	4610      	mov	r0, r2
 8003a08:	f7fd f884 	bl	8000b14 <__addsf3>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	4929      	ldr	r1, [pc, #164]	; (8003ab4 <servoRotate+0x124>)
 8003a10:	4618      	mov	r0, r3
 8003a12:	f7fd f987 	bl	8000d24 <__aeabi_fmul>
 8003a16:	4603      	mov	r3, r0
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f7fc fcfd 	bl	8000418 <__aeabi_f2d>
 8003a1e:	f04f 0200 	mov.w	r2, #0
 8003a22:	4b25      	ldr	r3, [pc, #148]	; (8003ab8 <servoRotate+0x128>)
 8003a24:	f7fc fe7a 	bl	800071c <__aeabi_ddiv>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	460b      	mov	r3, r1
 8003a2c:	4610      	mov	r0, r2
 8003a2e:	4619      	mov	r1, r3
 8003a30:	f04f 0200 	mov.w	r2, #0
 8003a34:	4b21      	ldr	r3, [pc, #132]	; (8003abc <servoRotate+0x12c>)
 8003a36:	f7fc fb91 	bl	800015c <__adddf3>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	460b      	mov	r3, r1
 8003a3e:	4620      	mov	r0, r4
 8003a40:	4629      	mov	r1, r5
 8003a42:	f7fc fd41 	bl	80004c8 <__aeabi_dmul>
 8003a46:	4602      	mov	r2, r0
 8003a48:	460b      	mov	r3, r1
 8003a4a:	4610      	mov	r0, r2
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	f7fc ffeb 	bl	8000a28 <__aeabi_d2uiz>
 8003a52:	4603      	mov	r3, r0
 8003a54:	60bb      	str	r3, [r7, #8]
//	newValue = newServoPointer->timer->Instance->ARR - newValue;
	__HAL_TIM_SET_COMPARE(newServoPointer->timer, newServoPointer->channel, newValue);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d105      	bne.n	8003a6a <servoRotate+0xda>
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	68ba      	ldr	r2, [r7, #8]
 8003a66:	635a      	str	r2, [r3, #52]	; 0x34
 8003a68:	e01a      	b.n	8003aa0 <servoRotate+0x110>
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	2b04      	cmp	r3, #4
 8003a70:	d105      	bne.n	8003a7e <servoRotate+0xee>
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	6393      	str	r3, [r2, #56]	; 0x38
 8003a7c:	e010      	b.n	8003aa0 <servoRotate+0x110>
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	2b08      	cmp	r3, #8
 8003a84:	d105      	bne.n	8003a92 <servoRotate+0x102>
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	63d3      	str	r3, [r2, #60]	; 0x3c
 8003a90:	e006      	b.n	8003aa0 <servoRotate+0x110>
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	6413      	str	r3, [r2, #64]	; 0x40
 8003a9c:	e000      	b.n	8003aa0 <servoRotate+0x110>
	if (newServoPointer->timer == NULL) return;
 8003a9e:	bf00      	nop
}
 8003aa0:	3710      	adds	r7, #16
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bdb0      	pop	{r4, r5, r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	00000000 	.word	0x00000000
 8003aac:	40d38800 	.word	0x40d38800
 8003ab0:	43340000 	.word	0x43340000
 8003ab4:	44fa0000 	.word	0x44fa0000
 8003ab8:	40668000 	.word	0x40668000
 8003abc:	407f4000 	.word	0x407f4000

08003ac0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b085      	sub	sp, #20
 8003ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003ac6:	4b15      	ldr	r3, [pc, #84]	; (8003b1c <HAL_MspInit+0x5c>)
 8003ac8:	699b      	ldr	r3, [r3, #24]
 8003aca:	4a14      	ldr	r2, [pc, #80]	; (8003b1c <HAL_MspInit+0x5c>)
 8003acc:	f043 0301 	orr.w	r3, r3, #1
 8003ad0:	6193      	str	r3, [r2, #24]
 8003ad2:	4b12      	ldr	r3, [pc, #72]	; (8003b1c <HAL_MspInit+0x5c>)
 8003ad4:	699b      	ldr	r3, [r3, #24]
 8003ad6:	f003 0301 	and.w	r3, r3, #1
 8003ada:	60bb      	str	r3, [r7, #8]
 8003adc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ade:	4b0f      	ldr	r3, [pc, #60]	; (8003b1c <HAL_MspInit+0x5c>)
 8003ae0:	69db      	ldr	r3, [r3, #28]
 8003ae2:	4a0e      	ldr	r2, [pc, #56]	; (8003b1c <HAL_MspInit+0x5c>)
 8003ae4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ae8:	61d3      	str	r3, [r2, #28]
 8003aea:	4b0c      	ldr	r3, [pc, #48]	; (8003b1c <HAL_MspInit+0x5c>)
 8003aec:	69db      	ldr	r3, [r3, #28]
 8003aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003af2:	607b      	str	r3, [r7, #4]
 8003af4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003af6:	4b0a      	ldr	r3, [pc, #40]	; (8003b20 <HAL_MspInit+0x60>)
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	60fb      	str	r3, [r7, #12]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003b02:	60fb      	str	r3, [r7, #12]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003b0a:	60fb      	str	r3, [r7, #12]
 8003b0c:	4a04      	ldr	r2, [pc, #16]	; (8003b20 <HAL_MspInit+0x60>)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b12:	bf00      	nop
 8003b14:	3714      	adds	r7, #20
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bc80      	pop	{r7}
 8003b1a:	4770      	bx	lr
 8003b1c:	40021000 	.word	0x40021000
 8003b20:	40010000 	.word	0x40010000

08003b24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b086      	sub	sp, #24
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a40      	ldr	r2, [pc, #256]	; (8003c34 <HAL_TIM_Base_MspInit+0x110>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d12c      	bne.n	8003b90 <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003b36:	4b40      	ldr	r3, [pc, #256]	; (8003c38 <HAL_TIM_Base_MspInit+0x114>)
 8003b38:	699b      	ldr	r3, [r3, #24]
 8003b3a:	4a3f      	ldr	r2, [pc, #252]	; (8003c38 <HAL_TIM_Base_MspInit+0x114>)
 8003b3c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003b40:	6193      	str	r3, [r2, #24]
 8003b42:	4b3d      	ldr	r3, [pc, #244]	; (8003c38 <HAL_TIM_Base_MspInit+0x114>)
 8003b44:	699b      	ldr	r3, [r3, #24]
 8003b46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b4a:	617b      	str	r3, [r7, #20]
 8003b4c:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8003b4e:	2200      	movs	r2, #0
 8003b50:	2100      	movs	r1, #0
 8003b52:	2018      	movs	r0, #24
 8003b54:	f000 fad5 	bl	8004102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8003b58:	2018      	movs	r0, #24
 8003b5a:	f000 faee 	bl	800413a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8003b5e:	2200      	movs	r2, #0
 8003b60:	2100      	movs	r1, #0
 8003b62:	2019      	movs	r0, #25
 8003b64:	f000 facd 	bl	8004102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8003b68:	2019      	movs	r0, #25
 8003b6a:	f000 fae6 	bl	800413a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8003b6e:	2200      	movs	r2, #0
 8003b70:	2100      	movs	r1, #0
 8003b72:	201a      	movs	r0, #26
 8003b74:	f000 fac5 	bl	8004102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8003b78:	201a      	movs	r0, #26
 8003b7a:	f000 fade 	bl	800413a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8003b7e:	2200      	movs	r2, #0
 8003b80:	2100      	movs	r1, #0
 8003b82:	201b      	movs	r0, #27
 8003b84:	f000 fabd 	bl	8004102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8003b88:	201b      	movs	r0, #27
 8003b8a:	f000 fad6 	bl	800413a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003b8e:	e04c      	b.n	8003c2a <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM2)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b98:	d114      	bne.n	8003bc4 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003b9a:	4b27      	ldr	r3, [pc, #156]	; (8003c38 <HAL_TIM_Base_MspInit+0x114>)
 8003b9c:	69db      	ldr	r3, [r3, #28]
 8003b9e:	4a26      	ldr	r2, [pc, #152]	; (8003c38 <HAL_TIM_Base_MspInit+0x114>)
 8003ba0:	f043 0301 	orr.w	r3, r3, #1
 8003ba4:	61d3      	str	r3, [r2, #28]
 8003ba6:	4b24      	ldr	r3, [pc, #144]	; (8003c38 <HAL_TIM_Base_MspInit+0x114>)
 8003ba8:	69db      	ldr	r3, [r3, #28]
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	613b      	str	r3, [r7, #16]
 8003bb0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	2100      	movs	r1, #0
 8003bb6:	201c      	movs	r0, #28
 8003bb8:	f000 faa3 	bl	8004102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003bbc:	201c      	movs	r0, #28
 8003bbe:	f000 fabc 	bl	800413a <HAL_NVIC_EnableIRQ>
}
 8003bc2:	e032      	b.n	8003c2a <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM3)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a1c      	ldr	r2, [pc, #112]	; (8003c3c <HAL_TIM_Base_MspInit+0x118>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d114      	bne.n	8003bf8 <HAL_TIM_Base_MspInit+0xd4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003bce:	4b1a      	ldr	r3, [pc, #104]	; (8003c38 <HAL_TIM_Base_MspInit+0x114>)
 8003bd0:	69db      	ldr	r3, [r3, #28]
 8003bd2:	4a19      	ldr	r2, [pc, #100]	; (8003c38 <HAL_TIM_Base_MspInit+0x114>)
 8003bd4:	f043 0302 	orr.w	r3, r3, #2
 8003bd8:	61d3      	str	r3, [r2, #28]
 8003bda:	4b17      	ldr	r3, [pc, #92]	; (8003c38 <HAL_TIM_Base_MspInit+0x114>)
 8003bdc:	69db      	ldr	r3, [r3, #28]
 8003bde:	f003 0302 	and.w	r3, r3, #2
 8003be2:	60fb      	str	r3, [r7, #12]
 8003be4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003be6:	2200      	movs	r2, #0
 8003be8:	2100      	movs	r1, #0
 8003bea:	201d      	movs	r0, #29
 8003bec:	f000 fa89 	bl	8004102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003bf0:	201d      	movs	r0, #29
 8003bf2:	f000 faa2 	bl	800413a <HAL_NVIC_EnableIRQ>
}
 8003bf6:	e018      	b.n	8003c2a <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM4)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a10      	ldr	r2, [pc, #64]	; (8003c40 <HAL_TIM_Base_MspInit+0x11c>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d113      	bne.n	8003c2a <HAL_TIM_Base_MspInit+0x106>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003c02:	4b0d      	ldr	r3, [pc, #52]	; (8003c38 <HAL_TIM_Base_MspInit+0x114>)
 8003c04:	69db      	ldr	r3, [r3, #28]
 8003c06:	4a0c      	ldr	r2, [pc, #48]	; (8003c38 <HAL_TIM_Base_MspInit+0x114>)
 8003c08:	f043 0304 	orr.w	r3, r3, #4
 8003c0c:	61d3      	str	r3, [r2, #28]
 8003c0e:	4b0a      	ldr	r3, [pc, #40]	; (8003c38 <HAL_TIM_Base_MspInit+0x114>)
 8003c10:	69db      	ldr	r3, [r3, #28]
 8003c12:	f003 0304 	and.w	r3, r3, #4
 8003c16:	60bb      	str	r3, [r7, #8]
 8003c18:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	2100      	movs	r1, #0
 8003c1e:	201e      	movs	r0, #30
 8003c20:	f000 fa6f 	bl	8004102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003c24:	201e      	movs	r0, #30
 8003c26:	f000 fa88 	bl	800413a <HAL_NVIC_EnableIRQ>
}
 8003c2a:	bf00      	nop
 8003c2c:	3718      	adds	r7, #24
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	40012c00 	.word	0x40012c00
 8003c38:	40021000 	.word	0x40021000
 8003c3c:	40000400 	.word	0x40000400
 8003c40:	40000800 	.word	0x40000800

08003c44 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b08a      	sub	sp, #40	; 0x28
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c4c:	f107 0318 	add.w	r3, r7, #24
 8003c50:	2200      	movs	r2, #0
 8003c52:	601a      	str	r2, [r3, #0]
 8003c54:	605a      	str	r2, [r3, #4]
 8003c56:	609a      	str	r2, [r3, #8]
 8003c58:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c62:	d118      	bne.n	8003c96 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c64:	4b38      	ldr	r3, [pc, #224]	; (8003d48 <HAL_TIM_MspPostInit+0x104>)
 8003c66:	699b      	ldr	r3, [r3, #24]
 8003c68:	4a37      	ldr	r2, [pc, #220]	; (8003d48 <HAL_TIM_MspPostInit+0x104>)
 8003c6a:	f043 0304 	orr.w	r3, r3, #4
 8003c6e:	6193      	str	r3, [r2, #24]
 8003c70:	4b35      	ldr	r3, [pc, #212]	; (8003d48 <HAL_TIM_MspPostInit+0x104>)
 8003c72:	699b      	ldr	r3, [r3, #24]
 8003c74:	f003 0304 	and.w	r3, r3, #4
 8003c78:	617b      	str	r3, [r7, #20]
 8003c7a:	697b      	ldr	r3, [r7, #20]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8003c7c:	230f      	movs	r3, #15
 8003c7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c80:	2302      	movs	r3, #2
 8003c82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c84:	2302      	movs	r3, #2
 8003c86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c88:	f107 0318 	add.w	r3, r7, #24
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	482f      	ldr	r0, [pc, #188]	; (8003d4c <HAL_TIM_MspPostInit+0x108>)
 8003c90:	f000 fa6e 	bl	8004170 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003c94:	e053      	b.n	8003d3e <HAL_TIM_MspPostInit+0xfa>
  else if(htim->Instance==TIM3)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a2d      	ldr	r2, [pc, #180]	; (8003d50 <HAL_TIM_MspPostInit+0x10c>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d130      	bne.n	8003d02 <HAL_TIM_MspPostInit+0xbe>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ca0:	4b29      	ldr	r3, [pc, #164]	; (8003d48 <HAL_TIM_MspPostInit+0x104>)
 8003ca2:	699b      	ldr	r3, [r3, #24]
 8003ca4:	4a28      	ldr	r2, [pc, #160]	; (8003d48 <HAL_TIM_MspPostInit+0x104>)
 8003ca6:	f043 0304 	orr.w	r3, r3, #4
 8003caa:	6193      	str	r3, [r2, #24]
 8003cac:	4b26      	ldr	r3, [pc, #152]	; (8003d48 <HAL_TIM_MspPostInit+0x104>)
 8003cae:	699b      	ldr	r3, [r3, #24]
 8003cb0:	f003 0304 	and.w	r3, r3, #4
 8003cb4:	613b      	str	r3, [r7, #16]
 8003cb6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cb8:	4b23      	ldr	r3, [pc, #140]	; (8003d48 <HAL_TIM_MspPostInit+0x104>)
 8003cba:	699b      	ldr	r3, [r3, #24]
 8003cbc:	4a22      	ldr	r2, [pc, #136]	; (8003d48 <HAL_TIM_MspPostInit+0x104>)
 8003cbe:	f043 0308 	orr.w	r3, r3, #8
 8003cc2:	6193      	str	r3, [r2, #24]
 8003cc4:	4b20      	ldr	r3, [pc, #128]	; (8003d48 <HAL_TIM_MspPostInit+0x104>)
 8003cc6:	699b      	ldr	r3, [r3, #24]
 8003cc8:	f003 0308 	and.w	r3, r3, #8
 8003ccc:	60fb      	str	r3, [r7, #12]
 8003cce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003cd0:	23c0      	movs	r3, #192	; 0xc0
 8003cd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cd4:	2302      	movs	r3, #2
 8003cd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cd8:	2302      	movs	r3, #2
 8003cda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cdc:	f107 0318 	add.w	r3, r7, #24
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	481a      	ldr	r0, [pc, #104]	; (8003d4c <HAL_TIM_MspPostInit+0x108>)
 8003ce4:	f000 fa44 	bl	8004170 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003ce8:	2303      	movs	r3, #3
 8003cea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cec:	2302      	movs	r3, #2
 8003cee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cf0:	2302      	movs	r3, #2
 8003cf2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cf4:	f107 0318 	add.w	r3, r7, #24
 8003cf8:	4619      	mov	r1, r3
 8003cfa:	4816      	ldr	r0, [pc, #88]	; (8003d54 <HAL_TIM_MspPostInit+0x110>)
 8003cfc:	f000 fa38 	bl	8004170 <HAL_GPIO_Init>
}
 8003d00:	e01d      	b.n	8003d3e <HAL_TIM_MspPostInit+0xfa>
  else if(htim->Instance==TIM4)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a14      	ldr	r2, [pc, #80]	; (8003d58 <HAL_TIM_MspPostInit+0x114>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d118      	bne.n	8003d3e <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d0c:	4b0e      	ldr	r3, [pc, #56]	; (8003d48 <HAL_TIM_MspPostInit+0x104>)
 8003d0e:	699b      	ldr	r3, [r3, #24]
 8003d10:	4a0d      	ldr	r2, [pc, #52]	; (8003d48 <HAL_TIM_MspPostInit+0x104>)
 8003d12:	f043 0308 	orr.w	r3, r3, #8
 8003d16:	6193      	str	r3, [r2, #24]
 8003d18:	4b0b      	ldr	r3, [pc, #44]	; (8003d48 <HAL_TIM_MspPostInit+0x104>)
 8003d1a:	699b      	ldr	r3, [r3, #24]
 8003d1c:	f003 0308 	and.w	r3, r3, #8
 8003d20:	60bb      	str	r3, [r7, #8]
 8003d22:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8003d24:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8003d28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d2a:	2302      	movs	r3, #2
 8003d2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d2e:	2302      	movs	r3, #2
 8003d30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d32:	f107 0318 	add.w	r3, r7, #24
 8003d36:	4619      	mov	r1, r3
 8003d38:	4806      	ldr	r0, [pc, #24]	; (8003d54 <HAL_TIM_MspPostInit+0x110>)
 8003d3a:	f000 fa19 	bl	8004170 <HAL_GPIO_Init>
}
 8003d3e:	bf00      	nop
 8003d40:	3728      	adds	r7, #40	; 0x28
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	40021000 	.word	0x40021000
 8003d4c:	40010800 	.word	0x40010800
 8003d50:	40000400 	.word	0x40000400
 8003d54:	40010c00 	.word	0x40010c00
 8003d58:	40000800 	.word	0x40000800

08003d5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003d60:	e7fe      	b.n	8003d60 <NMI_Handler+0x4>

08003d62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d62:	b480      	push	{r7}
 8003d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d66:	e7fe      	b.n	8003d66 <HardFault_Handler+0x4>

08003d68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d6c:	e7fe      	b.n	8003d6c <MemManage_Handler+0x4>

08003d6e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d6e:	b480      	push	{r7}
 8003d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d72:	e7fe      	b.n	8003d72 <BusFault_Handler+0x4>

08003d74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d74:	b480      	push	{r7}
 8003d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d78:	e7fe      	b.n	8003d78 <UsageFault_Handler+0x4>

08003d7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003d7a:	b480      	push	{r7}
 8003d7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003d7e:	bf00      	nop
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bc80      	pop	{r7}
 8003d84:	4770      	bx	lr

08003d86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d86:	b480      	push	{r7}
 8003d88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d8a:	bf00      	nop
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bc80      	pop	{r7}
 8003d90:	4770      	bx	lr

08003d92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003d92:	b480      	push	{r7}
 8003d94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d96:	bf00      	nop
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bc80      	pop	{r7}
 8003d9c:	4770      	bx	lr

08003d9e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d9e:	b580      	push	{r7, lr}
 8003da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003da2:	f000 f8bb 	bl	8003f1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003da6:	bf00      	nop
 8003da8:	bd80      	pop	{r7, pc}
	...

08003dac <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003db0:	4802      	ldr	r0, [pc, #8]	; (8003dbc <TIM1_BRK_IRQHandler+0x10>)
 8003db2:	f001 f90d 	bl	8004fd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8003db6:	bf00      	nop
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	200000e4 	.word	0x200000e4

08003dc0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003dc4:	4802      	ldr	r0, [pc, #8]	; (8003dd0 <TIM1_UP_IRQHandler+0x10>)
 8003dc6:	f001 f903 	bl	8004fd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8003dca:	bf00      	nop
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	200000e4 	.word	0x200000e4

08003dd4 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003dd8:	4802      	ldr	r0, [pc, #8]	; (8003de4 <TIM1_TRG_COM_IRQHandler+0x10>)
 8003dda:	f001 f8f9 	bl	8004fd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8003dde:	bf00      	nop
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	200000e4 	.word	0x200000e4

08003de8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003dec:	4802      	ldr	r0, [pc, #8]	; (8003df8 <TIM1_CC_IRQHandler+0x10>)
 8003dee:	f001 f8ef 	bl	8004fd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8003df2:	bf00      	nop
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	200000e4 	.word	0x200000e4

08003dfc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003e00:	4802      	ldr	r0, [pc, #8]	; (8003e0c <TIM2_IRQHandler+0x10>)
 8003e02:	f001 f8e5 	bl	8004fd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003e06:	bf00      	nop
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	2000012c 	.word	0x2000012c

08003e10 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003e14:	4802      	ldr	r0, [pc, #8]	; (8003e20 <TIM3_IRQHandler+0x10>)
 8003e16:	f001 f8db 	bl	8004fd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003e1a:	bf00      	nop
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	20000174 	.word	0x20000174

08003e24 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003e28:	4802      	ldr	r0, [pc, #8]	; (8003e34 <TIM4_IRQHandler+0x10>)
 8003e2a:	f001 f8d1 	bl	8004fd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003e2e:	bf00      	nop
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	200001bc 	.word	0x200001bc

08003e38 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003e3c:	bf00      	nop
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bc80      	pop	{r7}
 8003e42:	4770      	bx	lr

08003e44 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003e44:	f7ff fff8 	bl	8003e38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003e48:	480b      	ldr	r0, [pc, #44]	; (8003e78 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003e4a:	490c      	ldr	r1, [pc, #48]	; (8003e7c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003e4c:	4a0c      	ldr	r2, [pc, #48]	; (8003e80 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003e4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003e50:	e002      	b.n	8003e58 <LoopCopyDataInit>

08003e52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003e52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003e54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003e56:	3304      	adds	r3, #4

08003e58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003e58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003e5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003e5c:	d3f9      	bcc.n	8003e52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003e5e:	4a09      	ldr	r2, [pc, #36]	; (8003e84 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003e60:	4c09      	ldr	r4, [pc, #36]	; (8003e88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003e62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003e64:	e001      	b.n	8003e6a <LoopFillZerobss>

08003e66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003e66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003e68:	3204      	adds	r2, #4

08003e6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003e6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003e6c:	d3fb      	bcc.n	8003e66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003e6e:	f001 fe87 	bl	8005b80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003e72:	f7fd fc43 	bl	80016fc <main>
  bx lr
 8003e76:	4770      	bx	lr
  ldr r0, =_sdata
 8003e78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003e7c:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8003e80:	08007918 	.word	0x08007918
  ldr r2, =_sbss
 8003e84:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8003e88:	20000a0c 	.word	0x20000a0c

08003e8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003e8c:	e7fe      	b.n	8003e8c <ADC1_2_IRQHandler>
	...

08003e90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003e94:	4b08      	ldr	r3, [pc, #32]	; (8003eb8 <HAL_Init+0x28>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a07      	ldr	r2, [pc, #28]	; (8003eb8 <HAL_Init+0x28>)
 8003e9a:	f043 0310 	orr.w	r3, r3, #16
 8003e9e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ea0:	2003      	movs	r0, #3
 8003ea2:	f000 f923 	bl	80040ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003ea6:	200f      	movs	r0, #15
 8003ea8:	f000 f808 	bl	8003ebc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003eac:	f7ff fe08 	bl	8003ac0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003eb0:	2300      	movs	r3, #0
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	40022000 	.word	0x40022000

08003ebc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b082      	sub	sp, #8
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003ec4:	4b12      	ldr	r3, [pc, #72]	; (8003f10 <HAL_InitTick+0x54>)
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	4b12      	ldr	r3, [pc, #72]	; (8003f14 <HAL_InitTick+0x58>)
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	4619      	mov	r1, r3
 8003ece:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ed2:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eda:	4618      	mov	r0, r3
 8003edc:	f000 f93b 	bl	8004156 <HAL_SYSTICK_Config>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d001      	beq.n	8003eea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e00e      	b.n	8003f08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2b0f      	cmp	r3, #15
 8003eee:	d80a      	bhi.n	8003f06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	6879      	ldr	r1, [r7, #4]
 8003ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ef8:	f000 f903 	bl	8004102 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003efc:	4a06      	ldr	r2, [pc, #24]	; (8003f18 <HAL_InitTick+0x5c>)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003f02:	2300      	movs	r3, #0
 8003f04:	e000      	b.n	8003f08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3708      	adds	r7, #8
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	20000014 	.word	0x20000014
 8003f14:	2000001c 	.word	0x2000001c
 8003f18:	20000018 	.word	0x20000018

08003f1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003f20:	4b05      	ldr	r3, [pc, #20]	; (8003f38 <HAL_IncTick+0x1c>)
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	461a      	mov	r2, r3
 8003f26:	4b05      	ldr	r3, [pc, #20]	; (8003f3c <HAL_IncTick+0x20>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4413      	add	r3, r2
 8003f2c:	4a03      	ldr	r2, [pc, #12]	; (8003f3c <HAL_IncTick+0x20>)
 8003f2e:	6013      	str	r3, [r2, #0]
}
 8003f30:	bf00      	nop
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bc80      	pop	{r7}
 8003f36:	4770      	bx	lr
 8003f38:	2000001c 	.word	0x2000001c
 8003f3c:	200008d0 	.word	0x200008d0

08003f40 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f40:	b480      	push	{r7}
 8003f42:	af00      	add	r7, sp, #0
  return uwTick;
 8003f44:	4b02      	ldr	r3, [pc, #8]	; (8003f50 <HAL_GetTick+0x10>)
 8003f46:	681b      	ldr	r3, [r3, #0]
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bc80      	pop	{r7}
 8003f4e:	4770      	bx	lr
 8003f50:	200008d0 	.word	0x200008d0

08003f54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b085      	sub	sp, #20
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f003 0307 	and.w	r3, r3, #7
 8003f62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f64:	4b0c      	ldr	r3, [pc, #48]	; (8003f98 <__NVIC_SetPriorityGrouping+0x44>)
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f6a:	68ba      	ldr	r2, [r7, #8]
 8003f6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003f70:	4013      	ands	r3, r2
 8003f72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003f80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f86:	4a04      	ldr	r2, [pc, #16]	; (8003f98 <__NVIC_SetPriorityGrouping+0x44>)
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	60d3      	str	r3, [r2, #12]
}
 8003f8c:	bf00      	nop
 8003f8e:	3714      	adds	r7, #20
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bc80      	pop	{r7}
 8003f94:	4770      	bx	lr
 8003f96:	bf00      	nop
 8003f98:	e000ed00 	.word	0xe000ed00

08003f9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003fa0:	4b04      	ldr	r3, [pc, #16]	; (8003fb4 <__NVIC_GetPriorityGrouping+0x18>)
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	0a1b      	lsrs	r3, r3, #8
 8003fa6:	f003 0307 	and.w	r3, r3, #7
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bc80      	pop	{r7}
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	e000ed00 	.word	0xe000ed00

08003fb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	db0b      	blt.n	8003fe2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003fca:	79fb      	ldrb	r3, [r7, #7]
 8003fcc:	f003 021f 	and.w	r2, r3, #31
 8003fd0:	4906      	ldr	r1, [pc, #24]	; (8003fec <__NVIC_EnableIRQ+0x34>)
 8003fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fd6:	095b      	lsrs	r3, r3, #5
 8003fd8:	2001      	movs	r0, #1
 8003fda:	fa00 f202 	lsl.w	r2, r0, r2
 8003fde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003fe2:	bf00      	nop
 8003fe4:	370c      	adds	r7, #12
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bc80      	pop	{r7}
 8003fea:	4770      	bx	lr
 8003fec:	e000e100 	.word	0xe000e100

08003ff0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	6039      	str	r1, [r7, #0]
 8003ffa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004000:	2b00      	cmp	r3, #0
 8004002:	db0a      	blt.n	800401a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	b2da      	uxtb	r2, r3
 8004008:	490c      	ldr	r1, [pc, #48]	; (800403c <__NVIC_SetPriority+0x4c>)
 800400a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800400e:	0112      	lsls	r2, r2, #4
 8004010:	b2d2      	uxtb	r2, r2
 8004012:	440b      	add	r3, r1
 8004014:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004018:	e00a      	b.n	8004030 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	b2da      	uxtb	r2, r3
 800401e:	4908      	ldr	r1, [pc, #32]	; (8004040 <__NVIC_SetPriority+0x50>)
 8004020:	79fb      	ldrb	r3, [r7, #7]
 8004022:	f003 030f 	and.w	r3, r3, #15
 8004026:	3b04      	subs	r3, #4
 8004028:	0112      	lsls	r2, r2, #4
 800402a:	b2d2      	uxtb	r2, r2
 800402c:	440b      	add	r3, r1
 800402e:	761a      	strb	r2, [r3, #24]
}
 8004030:	bf00      	nop
 8004032:	370c      	adds	r7, #12
 8004034:	46bd      	mov	sp, r7
 8004036:	bc80      	pop	{r7}
 8004038:	4770      	bx	lr
 800403a:	bf00      	nop
 800403c:	e000e100 	.word	0xe000e100
 8004040:	e000ed00 	.word	0xe000ed00

08004044 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004044:	b480      	push	{r7}
 8004046:	b089      	sub	sp, #36	; 0x24
 8004048:	af00      	add	r7, sp, #0
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	60b9      	str	r1, [r7, #8]
 800404e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f003 0307 	and.w	r3, r3, #7
 8004056:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	f1c3 0307 	rsb	r3, r3, #7
 800405e:	2b04      	cmp	r3, #4
 8004060:	bf28      	it	cs
 8004062:	2304      	movcs	r3, #4
 8004064:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	3304      	adds	r3, #4
 800406a:	2b06      	cmp	r3, #6
 800406c:	d902      	bls.n	8004074 <NVIC_EncodePriority+0x30>
 800406e:	69fb      	ldr	r3, [r7, #28]
 8004070:	3b03      	subs	r3, #3
 8004072:	e000      	b.n	8004076 <NVIC_EncodePriority+0x32>
 8004074:	2300      	movs	r3, #0
 8004076:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004078:	f04f 32ff 	mov.w	r2, #4294967295
 800407c:	69bb      	ldr	r3, [r7, #24]
 800407e:	fa02 f303 	lsl.w	r3, r2, r3
 8004082:	43da      	mvns	r2, r3
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	401a      	ands	r2, r3
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800408c:	f04f 31ff 	mov.w	r1, #4294967295
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	fa01 f303 	lsl.w	r3, r1, r3
 8004096:	43d9      	mvns	r1, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800409c:	4313      	orrs	r3, r2
         );
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3724      	adds	r7, #36	; 0x24
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bc80      	pop	{r7}
 80040a6:	4770      	bx	lr

080040a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	3b01      	subs	r3, #1
 80040b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80040b8:	d301      	bcc.n	80040be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80040ba:	2301      	movs	r3, #1
 80040bc:	e00f      	b.n	80040de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80040be:	4a0a      	ldr	r2, [pc, #40]	; (80040e8 <SysTick_Config+0x40>)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	3b01      	subs	r3, #1
 80040c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80040c6:	210f      	movs	r1, #15
 80040c8:	f04f 30ff 	mov.w	r0, #4294967295
 80040cc:	f7ff ff90 	bl	8003ff0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80040d0:	4b05      	ldr	r3, [pc, #20]	; (80040e8 <SysTick_Config+0x40>)
 80040d2:	2200      	movs	r2, #0
 80040d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80040d6:	4b04      	ldr	r3, [pc, #16]	; (80040e8 <SysTick_Config+0x40>)
 80040d8:	2207      	movs	r2, #7
 80040da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80040dc:	2300      	movs	r3, #0
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3708      	adds	r7, #8
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	e000e010 	.word	0xe000e010

080040ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b082      	sub	sp, #8
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f7ff ff2d 	bl	8003f54 <__NVIC_SetPriorityGrouping>
}
 80040fa:	bf00      	nop
 80040fc:	3708      	adds	r7, #8
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}

08004102 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004102:	b580      	push	{r7, lr}
 8004104:	b086      	sub	sp, #24
 8004106:	af00      	add	r7, sp, #0
 8004108:	4603      	mov	r3, r0
 800410a:	60b9      	str	r1, [r7, #8]
 800410c:	607a      	str	r2, [r7, #4]
 800410e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004110:	2300      	movs	r3, #0
 8004112:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004114:	f7ff ff42 	bl	8003f9c <__NVIC_GetPriorityGrouping>
 8004118:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	68b9      	ldr	r1, [r7, #8]
 800411e:	6978      	ldr	r0, [r7, #20]
 8004120:	f7ff ff90 	bl	8004044 <NVIC_EncodePriority>
 8004124:	4602      	mov	r2, r0
 8004126:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800412a:	4611      	mov	r1, r2
 800412c:	4618      	mov	r0, r3
 800412e:	f7ff ff5f 	bl	8003ff0 <__NVIC_SetPriority>
}
 8004132:	bf00      	nop
 8004134:	3718      	adds	r7, #24
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}

0800413a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800413a:	b580      	push	{r7, lr}
 800413c:	b082      	sub	sp, #8
 800413e:	af00      	add	r7, sp, #0
 8004140:	4603      	mov	r3, r0
 8004142:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004144:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004148:	4618      	mov	r0, r3
 800414a:	f7ff ff35 	bl	8003fb8 <__NVIC_EnableIRQ>
}
 800414e:	bf00      	nop
 8004150:	3708      	adds	r7, #8
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}

08004156 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004156:	b580      	push	{r7, lr}
 8004158:	b082      	sub	sp, #8
 800415a:	af00      	add	r7, sp, #0
 800415c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f7ff ffa2 	bl	80040a8 <SysTick_Config>
 8004164:	4603      	mov	r3, r0
}
 8004166:	4618      	mov	r0, r3
 8004168:	3708      	adds	r7, #8
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
	...

08004170 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004170:	b480      	push	{r7}
 8004172:	b08b      	sub	sp, #44	; 0x2c
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800417a:	2300      	movs	r3, #0
 800417c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800417e:	2300      	movs	r3, #0
 8004180:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004182:	e169      	b.n	8004458 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004184:	2201      	movs	r2, #1
 8004186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004188:	fa02 f303 	lsl.w	r3, r2, r3
 800418c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	69fa      	ldr	r2, [r7, #28]
 8004194:	4013      	ands	r3, r2
 8004196:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004198:	69ba      	ldr	r2, [r7, #24]
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	429a      	cmp	r2, r3
 800419e:	f040 8158 	bne.w	8004452 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	4a9a      	ldr	r2, [pc, #616]	; (8004410 <HAL_GPIO_Init+0x2a0>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d05e      	beq.n	800426a <HAL_GPIO_Init+0xfa>
 80041ac:	4a98      	ldr	r2, [pc, #608]	; (8004410 <HAL_GPIO_Init+0x2a0>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d875      	bhi.n	800429e <HAL_GPIO_Init+0x12e>
 80041b2:	4a98      	ldr	r2, [pc, #608]	; (8004414 <HAL_GPIO_Init+0x2a4>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d058      	beq.n	800426a <HAL_GPIO_Init+0xfa>
 80041b8:	4a96      	ldr	r2, [pc, #600]	; (8004414 <HAL_GPIO_Init+0x2a4>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d86f      	bhi.n	800429e <HAL_GPIO_Init+0x12e>
 80041be:	4a96      	ldr	r2, [pc, #600]	; (8004418 <HAL_GPIO_Init+0x2a8>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d052      	beq.n	800426a <HAL_GPIO_Init+0xfa>
 80041c4:	4a94      	ldr	r2, [pc, #592]	; (8004418 <HAL_GPIO_Init+0x2a8>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d869      	bhi.n	800429e <HAL_GPIO_Init+0x12e>
 80041ca:	4a94      	ldr	r2, [pc, #592]	; (800441c <HAL_GPIO_Init+0x2ac>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d04c      	beq.n	800426a <HAL_GPIO_Init+0xfa>
 80041d0:	4a92      	ldr	r2, [pc, #584]	; (800441c <HAL_GPIO_Init+0x2ac>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d863      	bhi.n	800429e <HAL_GPIO_Init+0x12e>
 80041d6:	4a92      	ldr	r2, [pc, #584]	; (8004420 <HAL_GPIO_Init+0x2b0>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d046      	beq.n	800426a <HAL_GPIO_Init+0xfa>
 80041dc:	4a90      	ldr	r2, [pc, #576]	; (8004420 <HAL_GPIO_Init+0x2b0>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d85d      	bhi.n	800429e <HAL_GPIO_Init+0x12e>
 80041e2:	2b12      	cmp	r3, #18
 80041e4:	d82a      	bhi.n	800423c <HAL_GPIO_Init+0xcc>
 80041e6:	2b12      	cmp	r3, #18
 80041e8:	d859      	bhi.n	800429e <HAL_GPIO_Init+0x12e>
 80041ea:	a201      	add	r2, pc, #4	; (adr r2, 80041f0 <HAL_GPIO_Init+0x80>)
 80041ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041f0:	0800426b 	.word	0x0800426b
 80041f4:	08004245 	.word	0x08004245
 80041f8:	08004257 	.word	0x08004257
 80041fc:	08004299 	.word	0x08004299
 8004200:	0800429f 	.word	0x0800429f
 8004204:	0800429f 	.word	0x0800429f
 8004208:	0800429f 	.word	0x0800429f
 800420c:	0800429f 	.word	0x0800429f
 8004210:	0800429f 	.word	0x0800429f
 8004214:	0800429f 	.word	0x0800429f
 8004218:	0800429f 	.word	0x0800429f
 800421c:	0800429f 	.word	0x0800429f
 8004220:	0800429f 	.word	0x0800429f
 8004224:	0800429f 	.word	0x0800429f
 8004228:	0800429f 	.word	0x0800429f
 800422c:	0800429f 	.word	0x0800429f
 8004230:	0800429f 	.word	0x0800429f
 8004234:	0800424d 	.word	0x0800424d
 8004238:	08004261 	.word	0x08004261
 800423c:	4a79      	ldr	r2, [pc, #484]	; (8004424 <HAL_GPIO_Init+0x2b4>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d013      	beq.n	800426a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004242:	e02c      	b.n	800429e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	623b      	str	r3, [r7, #32]
          break;
 800424a:	e029      	b.n	80042a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	3304      	adds	r3, #4
 8004252:	623b      	str	r3, [r7, #32]
          break;
 8004254:	e024      	b.n	80042a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	3308      	adds	r3, #8
 800425c:	623b      	str	r3, [r7, #32]
          break;
 800425e:	e01f      	b.n	80042a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	330c      	adds	r3, #12
 8004266:	623b      	str	r3, [r7, #32]
          break;
 8004268:	e01a      	b.n	80042a0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d102      	bne.n	8004278 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004272:	2304      	movs	r3, #4
 8004274:	623b      	str	r3, [r7, #32]
          break;
 8004276:	e013      	b.n	80042a0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	2b01      	cmp	r3, #1
 800427e:	d105      	bne.n	800428c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004280:	2308      	movs	r3, #8
 8004282:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	69fa      	ldr	r2, [r7, #28]
 8004288:	611a      	str	r2, [r3, #16]
          break;
 800428a:	e009      	b.n	80042a0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800428c:	2308      	movs	r3, #8
 800428e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	69fa      	ldr	r2, [r7, #28]
 8004294:	615a      	str	r2, [r3, #20]
          break;
 8004296:	e003      	b.n	80042a0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004298:	2300      	movs	r3, #0
 800429a:	623b      	str	r3, [r7, #32]
          break;
 800429c:	e000      	b.n	80042a0 <HAL_GPIO_Init+0x130>
          break;
 800429e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80042a0:	69bb      	ldr	r3, [r7, #24]
 80042a2:	2bff      	cmp	r3, #255	; 0xff
 80042a4:	d801      	bhi.n	80042aa <HAL_GPIO_Init+0x13a>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	e001      	b.n	80042ae <HAL_GPIO_Init+0x13e>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	3304      	adds	r3, #4
 80042ae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	2bff      	cmp	r3, #255	; 0xff
 80042b4:	d802      	bhi.n	80042bc <HAL_GPIO_Init+0x14c>
 80042b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	e002      	b.n	80042c2 <HAL_GPIO_Init+0x152>
 80042bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042be:	3b08      	subs	r3, #8
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	210f      	movs	r1, #15
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	fa01 f303 	lsl.w	r3, r1, r3
 80042d0:	43db      	mvns	r3, r3
 80042d2:	401a      	ands	r2, r3
 80042d4:	6a39      	ldr	r1, [r7, #32]
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	fa01 f303 	lsl.w	r3, r1, r3
 80042dc:	431a      	orrs	r2, r3
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	f000 80b1 	beq.w	8004452 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80042f0:	4b4d      	ldr	r3, [pc, #308]	; (8004428 <HAL_GPIO_Init+0x2b8>)
 80042f2:	699b      	ldr	r3, [r3, #24]
 80042f4:	4a4c      	ldr	r2, [pc, #304]	; (8004428 <HAL_GPIO_Init+0x2b8>)
 80042f6:	f043 0301 	orr.w	r3, r3, #1
 80042fa:	6193      	str	r3, [r2, #24]
 80042fc:	4b4a      	ldr	r3, [pc, #296]	; (8004428 <HAL_GPIO_Init+0x2b8>)
 80042fe:	699b      	ldr	r3, [r3, #24]
 8004300:	f003 0301 	and.w	r3, r3, #1
 8004304:	60bb      	str	r3, [r7, #8]
 8004306:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004308:	4a48      	ldr	r2, [pc, #288]	; (800442c <HAL_GPIO_Init+0x2bc>)
 800430a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430c:	089b      	lsrs	r3, r3, #2
 800430e:	3302      	adds	r3, #2
 8004310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004314:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004318:	f003 0303 	and.w	r3, r3, #3
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	220f      	movs	r2, #15
 8004320:	fa02 f303 	lsl.w	r3, r2, r3
 8004324:	43db      	mvns	r3, r3
 8004326:	68fa      	ldr	r2, [r7, #12]
 8004328:	4013      	ands	r3, r2
 800432a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	4a40      	ldr	r2, [pc, #256]	; (8004430 <HAL_GPIO_Init+0x2c0>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d013      	beq.n	800435c <HAL_GPIO_Init+0x1ec>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	4a3f      	ldr	r2, [pc, #252]	; (8004434 <HAL_GPIO_Init+0x2c4>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d00d      	beq.n	8004358 <HAL_GPIO_Init+0x1e8>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	4a3e      	ldr	r2, [pc, #248]	; (8004438 <HAL_GPIO_Init+0x2c8>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d007      	beq.n	8004354 <HAL_GPIO_Init+0x1e4>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	4a3d      	ldr	r2, [pc, #244]	; (800443c <HAL_GPIO_Init+0x2cc>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d101      	bne.n	8004350 <HAL_GPIO_Init+0x1e0>
 800434c:	2303      	movs	r3, #3
 800434e:	e006      	b.n	800435e <HAL_GPIO_Init+0x1ee>
 8004350:	2304      	movs	r3, #4
 8004352:	e004      	b.n	800435e <HAL_GPIO_Init+0x1ee>
 8004354:	2302      	movs	r3, #2
 8004356:	e002      	b.n	800435e <HAL_GPIO_Init+0x1ee>
 8004358:	2301      	movs	r3, #1
 800435a:	e000      	b.n	800435e <HAL_GPIO_Init+0x1ee>
 800435c:	2300      	movs	r3, #0
 800435e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004360:	f002 0203 	and.w	r2, r2, #3
 8004364:	0092      	lsls	r2, r2, #2
 8004366:	4093      	lsls	r3, r2
 8004368:	68fa      	ldr	r2, [r7, #12]
 800436a:	4313      	orrs	r3, r2
 800436c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800436e:	492f      	ldr	r1, [pc, #188]	; (800442c <HAL_GPIO_Init+0x2bc>)
 8004370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004372:	089b      	lsrs	r3, r3, #2
 8004374:	3302      	adds	r3, #2
 8004376:	68fa      	ldr	r2, [r7, #12]
 8004378:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d006      	beq.n	8004396 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004388:	4b2d      	ldr	r3, [pc, #180]	; (8004440 <HAL_GPIO_Init+0x2d0>)
 800438a:	689a      	ldr	r2, [r3, #8]
 800438c:	492c      	ldr	r1, [pc, #176]	; (8004440 <HAL_GPIO_Init+0x2d0>)
 800438e:	69bb      	ldr	r3, [r7, #24]
 8004390:	4313      	orrs	r3, r2
 8004392:	608b      	str	r3, [r1, #8]
 8004394:	e006      	b.n	80043a4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004396:	4b2a      	ldr	r3, [pc, #168]	; (8004440 <HAL_GPIO_Init+0x2d0>)
 8004398:	689a      	ldr	r2, [r3, #8]
 800439a:	69bb      	ldr	r3, [r7, #24]
 800439c:	43db      	mvns	r3, r3
 800439e:	4928      	ldr	r1, [pc, #160]	; (8004440 <HAL_GPIO_Init+0x2d0>)
 80043a0:	4013      	ands	r3, r2
 80043a2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d006      	beq.n	80043be <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80043b0:	4b23      	ldr	r3, [pc, #140]	; (8004440 <HAL_GPIO_Init+0x2d0>)
 80043b2:	68da      	ldr	r2, [r3, #12]
 80043b4:	4922      	ldr	r1, [pc, #136]	; (8004440 <HAL_GPIO_Init+0x2d0>)
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	60cb      	str	r3, [r1, #12]
 80043bc:	e006      	b.n	80043cc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80043be:	4b20      	ldr	r3, [pc, #128]	; (8004440 <HAL_GPIO_Init+0x2d0>)
 80043c0:	68da      	ldr	r2, [r3, #12]
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	43db      	mvns	r3, r3
 80043c6:	491e      	ldr	r1, [pc, #120]	; (8004440 <HAL_GPIO_Init+0x2d0>)
 80043c8:	4013      	ands	r3, r2
 80043ca:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d006      	beq.n	80043e6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80043d8:	4b19      	ldr	r3, [pc, #100]	; (8004440 <HAL_GPIO_Init+0x2d0>)
 80043da:	685a      	ldr	r2, [r3, #4]
 80043dc:	4918      	ldr	r1, [pc, #96]	; (8004440 <HAL_GPIO_Init+0x2d0>)
 80043de:	69bb      	ldr	r3, [r7, #24]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	604b      	str	r3, [r1, #4]
 80043e4:	e006      	b.n	80043f4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80043e6:	4b16      	ldr	r3, [pc, #88]	; (8004440 <HAL_GPIO_Init+0x2d0>)
 80043e8:	685a      	ldr	r2, [r3, #4]
 80043ea:	69bb      	ldr	r3, [r7, #24]
 80043ec:	43db      	mvns	r3, r3
 80043ee:	4914      	ldr	r1, [pc, #80]	; (8004440 <HAL_GPIO_Init+0x2d0>)
 80043f0:	4013      	ands	r3, r2
 80043f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d021      	beq.n	8004444 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004400:	4b0f      	ldr	r3, [pc, #60]	; (8004440 <HAL_GPIO_Init+0x2d0>)
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	490e      	ldr	r1, [pc, #56]	; (8004440 <HAL_GPIO_Init+0x2d0>)
 8004406:	69bb      	ldr	r3, [r7, #24]
 8004408:	4313      	orrs	r3, r2
 800440a:	600b      	str	r3, [r1, #0]
 800440c:	e021      	b.n	8004452 <HAL_GPIO_Init+0x2e2>
 800440e:	bf00      	nop
 8004410:	10320000 	.word	0x10320000
 8004414:	10310000 	.word	0x10310000
 8004418:	10220000 	.word	0x10220000
 800441c:	10210000 	.word	0x10210000
 8004420:	10120000 	.word	0x10120000
 8004424:	10110000 	.word	0x10110000
 8004428:	40021000 	.word	0x40021000
 800442c:	40010000 	.word	0x40010000
 8004430:	40010800 	.word	0x40010800
 8004434:	40010c00 	.word	0x40010c00
 8004438:	40011000 	.word	0x40011000
 800443c:	40011400 	.word	0x40011400
 8004440:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004444:	4b0b      	ldr	r3, [pc, #44]	; (8004474 <HAL_GPIO_Init+0x304>)
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	69bb      	ldr	r3, [r7, #24]
 800444a:	43db      	mvns	r3, r3
 800444c:	4909      	ldr	r1, [pc, #36]	; (8004474 <HAL_GPIO_Init+0x304>)
 800444e:	4013      	ands	r3, r2
 8004450:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004454:	3301      	adds	r3, #1
 8004456:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445e:	fa22 f303 	lsr.w	r3, r2, r3
 8004462:	2b00      	cmp	r3, #0
 8004464:	f47f ae8e 	bne.w	8004184 <HAL_GPIO_Init+0x14>
  }
}
 8004468:	bf00      	nop
 800446a:	bf00      	nop
 800446c:	372c      	adds	r7, #44	; 0x2c
 800446e:	46bd      	mov	sp, r7
 8004470:	bc80      	pop	{r7}
 8004472:	4770      	bx	lr
 8004474:	40010400 	.word	0x40010400

08004478 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004478:	b480      	push	{r7}
 800447a:	b083      	sub	sp, #12
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	460b      	mov	r3, r1
 8004482:	807b      	strh	r3, [r7, #2]
 8004484:	4613      	mov	r3, r2
 8004486:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004488:	787b      	ldrb	r3, [r7, #1]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d003      	beq.n	8004496 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800448e:	887a      	ldrh	r2, [r7, #2]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004494:	e003      	b.n	800449e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004496:	887b      	ldrh	r3, [r7, #2]
 8004498:	041a      	lsls	r2, r3, #16
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	611a      	str	r2, [r3, #16]
}
 800449e:	bf00      	nop
 80044a0:	370c      	adds	r7, #12
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bc80      	pop	{r7}
 80044a6:	4770      	bx	lr

080044a8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b085      	sub	sp, #20
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	460b      	mov	r3, r1
 80044b2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80044ba:	887a      	ldrh	r2, [r7, #2]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	4013      	ands	r3, r2
 80044c0:	041a      	lsls	r2, r3, #16
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	43d9      	mvns	r1, r3
 80044c6:	887b      	ldrh	r3, [r7, #2]
 80044c8:	400b      	ands	r3, r1
 80044ca:	431a      	orrs	r2, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	611a      	str	r2, [r3, #16]
}
 80044d0:	bf00      	nop
 80044d2:	3714      	adds	r7, #20
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bc80      	pop	{r7}
 80044d8:	4770      	bx	lr
	...

080044dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b086      	sub	sp, #24
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d101      	bne.n	80044ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e272      	b.n	80049d4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 0301 	and.w	r3, r3, #1
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	f000 8087 	beq.w	800460a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80044fc:	4b92      	ldr	r3, [pc, #584]	; (8004748 <HAL_RCC_OscConfig+0x26c>)
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	f003 030c 	and.w	r3, r3, #12
 8004504:	2b04      	cmp	r3, #4
 8004506:	d00c      	beq.n	8004522 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004508:	4b8f      	ldr	r3, [pc, #572]	; (8004748 <HAL_RCC_OscConfig+0x26c>)
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	f003 030c 	and.w	r3, r3, #12
 8004510:	2b08      	cmp	r3, #8
 8004512:	d112      	bne.n	800453a <HAL_RCC_OscConfig+0x5e>
 8004514:	4b8c      	ldr	r3, [pc, #560]	; (8004748 <HAL_RCC_OscConfig+0x26c>)
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800451c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004520:	d10b      	bne.n	800453a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004522:	4b89      	ldr	r3, [pc, #548]	; (8004748 <HAL_RCC_OscConfig+0x26c>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800452a:	2b00      	cmp	r3, #0
 800452c:	d06c      	beq.n	8004608 <HAL_RCC_OscConfig+0x12c>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d168      	bne.n	8004608 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e24c      	b.n	80049d4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004542:	d106      	bne.n	8004552 <HAL_RCC_OscConfig+0x76>
 8004544:	4b80      	ldr	r3, [pc, #512]	; (8004748 <HAL_RCC_OscConfig+0x26c>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a7f      	ldr	r2, [pc, #508]	; (8004748 <HAL_RCC_OscConfig+0x26c>)
 800454a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800454e:	6013      	str	r3, [r2, #0]
 8004550:	e02e      	b.n	80045b0 <HAL_RCC_OscConfig+0xd4>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d10c      	bne.n	8004574 <HAL_RCC_OscConfig+0x98>
 800455a:	4b7b      	ldr	r3, [pc, #492]	; (8004748 <HAL_RCC_OscConfig+0x26c>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a7a      	ldr	r2, [pc, #488]	; (8004748 <HAL_RCC_OscConfig+0x26c>)
 8004560:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004564:	6013      	str	r3, [r2, #0]
 8004566:	4b78      	ldr	r3, [pc, #480]	; (8004748 <HAL_RCC_OscConfig+0x26c>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a77      	ldr	r2, [pc, #476]	; (8004748 <HAL_RCC_OscConfig+0x26c>)
 800456c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004570:	6013      	str	r3, [r2, #0]
 8004572:	e01d      	b.n	80045b0 <HAL_RCC_OscConfig+0xd4>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800457c:	d10c      	bne.n	8004598 <HAL_RCC_OscConfig+0xbc>
 800457e:	4b72      	ldr	r3, [pc, #456]	; (8004748 <HAL_RCC_OscConfig+0x26c>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a71      	ldr	r2, [pc, #452]	; (8004748 <HAL_RCC_OscConfig+0x26c>)
 8004584:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004588:	6013      	str	r3, [r2, #0]
 800458a:	4b6f      	ldr	r3, [pc, #444]	; (8004748 <HAL_RCC_OscConfig+0x26c>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a6e      	ldr	r2, [pc, #440]	; (8004748 <HAL_RCC_OscConfig+0x26c>)
 8004590:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004594:	6013      	str	r3, [r2, #0]
 8004596:	e00b      	b.n	80045b0 <HAL_RCC_OscConfig+0xd4>
 8004598:	4b6b      	ldr	r3, [pc, #428]	; (8004748 <HAL_RCC_OscConfig+0x26c>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a6a      	ldr	r2, [pc, #424]	; (8004748 <HAL_RCC_OscConfig+0x26c>)
 800459e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045a2:	6013      	str	r3, [r2, #0]
 80045a4:	4b68      	ldr	r3, [pc, #416]	; (8004748 <HAL_RCC_OscConfig+0x26c>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a67      	ldr	r2, [pc, #412]	; (8004748 <HAL_RCC_OscConfig+0x26c>)
 80045aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045ae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d013      	beq.n	80045e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045b8:	f7ff fcc2 	bl	8003f40 <HAL_GetTick>
 80045bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045be:	e008      	b.n	80045d2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045c0:	f7ff fcbe 	bl	8003f40 <HAL_GetTick>
 80045c4:	4602      	mov	r2, r0
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	2b64      	cmp	r3, #100	; 0x64
 80045cc:	d901      	bls.n	80045d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	e200      	b.n	80049d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045d2:	4b5d      	ldr	r3, [pc, #372]	; (8004748 <HAL_RCC_OscConfig+0x26c>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d0f0      	beq.n	80045c0 <HAL_RCC_OscConfig+0xe4>
 80045de:	e014      	b.n	800460a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045e0:	f7ff fcae 	bl	8003f40 <HAL_GetTick>
 80045e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045e6:	e008      	b.n	80045fa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045e8:	f7ff fcaa 	bl	8003f40 <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	2b64      	cmp	r3, #100	; 0x64
 80045f4:	d901      	bls.n	80045fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	e1ec      	b.n	80049d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045fa:	4b53      	ldr	r3, [pc, #332]	; (8004748 <HAL_RCC_OscConfig+0x26c>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d1f0      	bne.n	80045e8 <HAL_RCC_OscConfig+0x10c>
 8004606:	e000      	b.n	800460a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004608:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0302 	and.w	r3, r3, #2
 8004612:	2b00      	cmp	r3, #0
 8004614:	d063      	beq.n	80046de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004616:	4b4c      	ldr	r3, [pc, #304]	; (8004748 <HAL_RCC_OscConfig+0x26c>)
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	f003 030c 	and.w	r3, r3, #12
 800461e:	2b00      	cmp	r3, #0
 8004620:	d00b      	beq.n	800463a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004622:	4b49      	ldr	r3, [pc, #292]	; (8004748 <HAL_RCC_OscConfig+0x26c>)
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	f003 030c 	and.w	r3, r3, #12
 800462a:	2b08      	cmp	r3, #8
 800462c:	d11c      	bne.n	8004668 <HAL_RCC_OscConfig+0x18c>
 800462e:	4b46      	ldr	r3, [pc, #280]	; (8004748 <HAL_RCC_OscConfig+0x26c>)
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d116      	bne.n	8004668 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800463a:	4b43      	ldr	r3, [pc, #268]	; (8004748 <HAL_RCC_OscConfig+0x26c>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 0302 	and.w	r3, r3, #2
 8004642:	2b00      	cmp	r3, #0
 8004644:	d005      	beq.n	8004652 <HAL_RCC_OscConfig+0x176>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	691b      	ldr	r3, [r3, #16]
 800464a:	2b01      	cmp	r3, #1
 800464c:	d001      	beq.n	8004652 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e1c0      	b.n	80049d4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004652:	4b3d      	ldr	r3, [pc, #244]	; (8004748 <HAL_RCC_OscConfig+0x26c>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	695b      	ldr	r3, [r3, #20]
 800465e:	00db      	lsls	r3, r3, #3
 8004660:	4939      	ldr	r1, [pc, #228]	; (8004748 <HAL_RCC_OscConfig+0x26c>)
 8004662:	4313      	orrs	r3, r2
 8004664:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004666:	e03a      	b.n	80046de <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	691b      	ldr	r3, [r3, #16]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d020      	beq.n	80046b2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004670:	4b36      	ldr	r3, [pc, #216]	; (800474c <HAL_RCC_OscConfig+0x270>)
 8004672:	2201      	movs	r2, #1
 8004674:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004676:	f7ff fc63 	bl	8003f40 <HAL_GetTick>
 800467a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800467c:	e008      	b.n	8004690 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800467e:	f7ff fc5f 	bl	8003f40 <HAL_GetTick>
 8004682:	4602      	mov	r2, r0
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	2b02      	cmp	r3, #2
 800468a:	d901      	bls.n	8004690 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	e1a1      	b.n	80049d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004690:	4b2d      	ldr	r3, [pc, #180]	; (8004748 <HAL_RCC_OscConfig+0x26c>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0302 	and.w	r3, r3, #2
 8004698:	2b00      	cmp	r3, #0
 800469a:	d0f0      	beq.n	800467e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800469c:	4b2a      	ldr	r3, [pc, #168]	; (8004748 <HAL_RCC_OscConfig+0x26c>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	695b      	ldr	r3, [r3, #20]
 80046a8:	00db      	lsls	r3, r3, #3
 80046aa:	4927      	ldr	r1, [pc, #156]	; (8004748 <HAL_RCC_OscConfig+0x26c>)
 80046ac:	4313      	orrs	r3, r2
 80046ae:	600b      	str	r3, [r1, #0]
 80046b0:	e015      	b.n	80046de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046b2:	4b26      	ldr	r3, [pc, #152]	; (800474c <HAL_RCC_OscConfig+0x270>)
 80046b4:	2200      	movs	r2, #0
 80046b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046b8:	f7ff fc42 	bl	8003f40 <HAL_GetTick>
 80046bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046be:	e008      	b.n	80046d2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046c0:	f7ff fc3e 	bl	8003f40 <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d901      	bls.n	80046d2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e180      	b.n	80049d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046d2:	4b1d      	ldr	r3, [pc, #116]	; (8004748 <HAL_RCC_OscConfig+0x26c>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0302 	and.w	r3, r3, #2
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d1f0      	bne.n	80046c0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0308 	and.w	r3, r3, #8
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d03a      	beq.n	8004760 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	699b      	ldr	r3, [r3, #24]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d019      	beq.n	8004726 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046f2:	4b17      	ldr	r3, [pc, #92]	; (8004750 <HAL_RCC_OscConfig+0x274>)
 80046f4:	2201      	movs	r2, #1
 80046f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046f8:	f7ff fc22 	bl	8003f40 <HAL_GetTick>
 80046fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046fe:	e008      	b.n	8004712 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004700:	f7ff fc1e 	bl	8003f40 <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	2b02      	cmp	r3, #2
 800470c:	d901      	bls.n	8004712 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	e160      	b.n	80049d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004712:	4b0d      	ldr	r3, [pc, #52]	; (8004748 <HAL_RCC_OscConfig+0x26c>)
 8004714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004716:	f003 0302 	and.w	r3, r3, #2
 800471a:	2b00      	cmp	r3, #0
 800471c:	d0f0      	beq.n	8004700 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800471e:	2001      	movs	r0, #1
 8004720:	f000 fa9c 	bl	8004c5c <RCC_Delay>
 8004724:	e01c      	b.n	8004760 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004726:	4b0a      	ldr	r3, [pc, #40]	; (8004750 <HAL_RCC_OscConfig+0x274>)
 8004728:	2200      	movs	r2, #0
 800472a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800472c:	f7ff fc08 	bl	8003f40 <HAL_GetTick>
 8004730:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004732:	e00f      	b.n	8004754 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004734:	f7ff fc04 	bl	8003f40 <HAL_GetTick>
 8004738:	4602      	mov	r2, r0
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	2b02      	cmp	r3, #2
 8004740:	d908      	bls.n	8004754 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	e146      	b.n	80049d4 <HAL_RCC_OscConfig+0x4f8>
 8004746:	bf00      	nop
 8004748:	40021000 	.word	0x40021000
 800474c:	42420000 	.word	0x42420000
 8004750:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004754:	4b92      	ldr	r3, [pc, #584]	; (80049a0 <HAL_RCC_OscConfig+0x4c4>)
 8004756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004758:	f003 0302 	and.w	r3, r3, #2
 800475c:	2b00      	cmp	r3, #0
 800475e:	d1e9      	bne.n	8004734 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0304 	and.w	r3, r3, #4
 8004768:	2b00      	cmp	r3, #0
 800476a:	f000 80a6 	beq.w	80048ba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800476e:	2300      	movs	r3, #0
 8004770:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004772:	4b8b      	ldr	r3, [pc, #556]	; (80049a0 <HAL_RCC_OscConfig+0x4c4>)
 8004774:	69db      	ldr	r3, [r3, #28]
 8004776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d10d      	bne.n	800479a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800477e:	4b88      	ldr	r3, [pc, #544]	; (80049a0 <HAL_RCC_OscConfig+0x4c4>)
 8004780:	69db      	ldr	r3, [r3, #28]
 8004782:	4a87      	ldr	r2, [pc, #540]	; (80049a0 <HAL_RCC_OscConfig+0x4c4>)
 8004784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004788:	61d3      	str	r3, [r2, #28]
 800478a:	4b85      	ldr	r3, [pc, #532]	; (80049a0 <HAL_RCC_OscConfig+0x4c4>)
 800478c:	69db      	ldr	r3, [r3, #28]
 800478e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004792:	60bb      	str	r3, [r7, #8]
 8004794:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004796:	2301      	movs	r3, #1
 8004798:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800479a:	4b82      	ldr	r3, [pc, #520]	; (80049a4 <HAL_RCC_OscConfig+0x4c8>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d118      	bne.n	80047d8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047a6:	4b7f      	ldr	r3, [pc, #508]	; (80049a4 <HAL_RCC_OscConfig+0x4c8>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a7e      	ldr	r2, [pc, #504]	; (80049a4 <HAL_RCC_OscConfig+0x4c8>)
 80047ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047b2:	f7ff fbc5 	bl	8003f40 <HAL_GetTick>
 80047b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047b8:	e008      	b.n	80047cc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047ba:	f7ff fbc1 	bl	8003f40 <HAL_GetTick>
 80047be:	4602      	mov	r2, r0
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	1ad3      	subs	r3, r2, r3
 80047c4:	2b64      	cmp	r3, #100	; 0x64
 80047c6:	d901      	bls.n	80047cc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80047c8:	2303      	movs	r3, #3
 80047ca:	e103      	b.n	80049d4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047cc:	4b75      	ldr	r3, [pc, #468]	; (80049a4 <HAL_RCC_OscConfig+0x4c8>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d0f0      	beq.n	80047ba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d106      	bne.n	80047ee <HAL_RCC_OscConfig+0x312>
 80047e0:	4b6f      	ldr	r3, [pc, #444]	; (80049a0 <HAL_RCC_OscConfig+0x4c4>)
 80047e2:	6a1b      	ldr	r3, [r3, #32]
 80047e4:	4a6e      	ldr	r2, [pc, #440]	; (80049a0 <HAL_RCC_OscConfig+0x4c4>)
 80047e6:	f043 0301 	orr.w	r3, r3, #1
 80047ea:	6213      	str	r3, [r2, #32]
 80047ec:	e02d      	b.n	800484a <HAL_RCC_OscConfig+0x36e>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d10c      	bne.n	8004810 <HAL_RCC_OscConfig+0x334>
 80047f6:	4b6a      	ldr	r3, [pc, #424]	; (80049a0 <HAL_RCC_OscConfig+0x4c4>)
 80047f8:	6a1b      	ldr	r3, [r3, #32]
 80047fa:	4a69      	ldr	r2, [pc, #420]	; (80049a0 <HAL_RCC_OscConfig+0x4c4>)
 80047fc:	f023 0301 	bic.w	r3, r3, #1
 8004800:	6213      	str	r3, [r2, #32]
 8004802:	4b67      	ldr	r3, [pc, #412]	; (80049a0 <HAL_RCC_OscConfig+0x4c4>)
 8004804:	6a1b      	ldr	r3, [r3, #32]
 8004806:	4a66      	ldr	r2, [pc, #408]	; (80049a0 <HAL_RCC_OscConfig+0x4c4>)
 8004808:	f023 0304 	bic.w	r3, r3, #4
 800480c:	6213      	str	r3, [r2, #32]
 800480e:	e01c      	b.n	800484a <HAL_RCC_OscConfig+0x36e>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	2b05      	cmp	r3, #5
 8004816:	d10c      	bne.n	8004832 <HAL_RCC_OscConfig+0x356>
 8004818:	4b61      	ldr	r3, [pc, #388]	; (80049a0 <HAL_RCC_OscConfig+0x4c4>)
 800481a:	6a1b      	ldr	r3, [r3, #32]
 800481c:	4a60      	ldr	r2, [pc, #384]	; (80049a0 <HAL_RCC_OscConfig+0x4c4>)
 800481e:	f043 0304 	orr.w	r3, r3, #4
 8004822:	6213      	str	r3, [r2, #32]
 8004824:	4b5e      	ldr	r3, [pc, #376]	; (80049a0 <HAL_RCC_OscConfig+0x4c4>)
 8004826:	6a1b      	ldr	r3, [r3, #32]
 8004828:	4a5d      	ldr	r2, [pc, #372]	; (80049a0 <HAL_RCC_OscConfig+0x4c4>)
 800482a:	f043 0301 	orr.w	r3, r3, #1
 800482e:	6213      	str	r3, [r2, #32]
 8004830:	e00b      	b.n	800484a <HAL_RCC_OscConfig+0x36e>
 8004832:	4b5b      	ldr	r3, [pc, #364]	; (80049a0 <HAL_RCC_OscConfig+0x4c4>)
 8004834:	6a1b      	ldr	r3, [r3, #32]
 8004836:	4a5a      	ldr	r2, [pc, #360]	; (80049a0 <HAL_RCC_OscConfig+0x4c4>)
 8004838:	f023 0301 	bic.w	r3, r3, #1
 800483c:	6213      	str	r3, [r2, #32]
 800483e:	4b58      	ldr	r3, [pc, #352]	; (80049a0 <HAL_RCC_OscConfig+0x4c4>)
 8004840:	6a1b      	ldr	r3, [r3, #32]
 8004842:	4a57      	ldr	r2, [pc, #348]	; (80049a0 <HAL_RCC_OscConfig+0x4c4>)
 8004844:	f023 0304 	bic.w	r3, r3, #4
 8004848:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d015      	beq.n	800487e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004852:	f7ff fb75 	bl	8003f40 <HAL_GetTick>
 8004856:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004858:	e00a      	b.n	8004870 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800485a:	f7ff fb71 	bl	8003f40 <HAL_GetTick>
 800485e:	4602      	mov	r2, r0
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	f241 3288 	movw	r2, #5000	; 0x1388
 8004868:	4293      	cmp	r3, r2
 800486a:	d901      	bls.n	8004870 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800486c:	2303      	movs	r3, #3
 800486e:	e0b1      	b.n	80049d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004870:	4b4b      	ldr	r3, [pc, #300]	; (80049a0 <HAL_RCC_OscConfig+0x4c4>)
 8004872:	6a1b      	ldr	r3, [r3, #32]
 8004874:	f003 0302 	and.w	r3, r3, #2
 8004878:	2b00      	cmp	r3, #0
 800487a:	d0ee      	beq.n	800485a <HAL_RCC_OscConfig+0x37e>
 800487c:	e014      	b.n	80048a8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800487e:	f7ff fb5f 	bl	8003f40 <HAL_GetTick>
 8004882:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004884:	e00a      	b.n	800489c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004886:	f7ff fb5b 	bl	8003f40 <HAL_GetTick>
 800488a:	4602      	mov	r2, r0
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	1ad3      	subs	r3, r2, r3
 8004890:	f241 3288 	movw	r2, #5000	; 0x1388
 8004894:	4293      	cmp	r3, r2
 8004896:	d901      	bls.n	800489c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004898:	2303      	movs	r3, #3
 800489a:	e09b      	b.n	80049d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800489c:	4b40      	ldr	r3, [pc, #256]	; (80049a0 <HAL_RCC_OscConfig+0x4c4>)
 800489e:	6a1b      	ldr	r3, [r3, #32]
 80048a0:	f003 0302 	and.w	r3, r3, #2
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d1ee      	bne.n	8004886 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80048a8:	7dfb      	ldrb	r3, [r7, #23]
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d105      	bne.n	80048ba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048ae:	4b3c      	ldr	r3, [pc, #240]	; (80049a0 <HAL_RCC_OscConfig+0x4c4>)
 80048b0:	69db      	ldr	r3, [r3, #28]
 80048b2:	4a3b      	ldr	r2, [pc, #236]	; (80049a0 <HAL_RCC_OscConfig+0x4c4>)
 80048b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048b8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	69db      	ldr	r3, [r3, #28]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	f000 8087 	beq.w	80049d2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80048c4:	4b36      	ldr	r3, [pc, #216]	; (80049a0 <HAL_RCC_OscConfig+0x4c4>)
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	f003 030c 	and.w	r3, r3, #12
 80048cc:	2b08      	cmp	r3, #8
 80048ce:	d061      	beq.n	8004994 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	69db      	ldr	r3, [r3, #28]
 80048d4:	2b02      	cmp	r3, #2
 80048d6:	d146      	bne.n	8004966 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048d8:	4b33      	ldr	r3, [pc, #204]	; (80049a8 <HAL_RCC_OscConfig+0x4cc>)
 80048da:	2200      	movs	r2, #0
 80048dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048de:	f7ff fb2f 	bl	8003f40 <HAL_GetTick>
 80048e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048e4:	e008      	b.n	80048f8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048e6:	f7ff fb2b 	bl	8003f40 <HAL_GetTick>
 80048ea:	4602      	mov	r2, r0
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	1ad3      	subs	r3, r2, r3
 80048f0:	2b02      	cmp	r3, #2
 80048f2:	d901      	bls.n	80048f8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80048f4:	2303      	movs	r3, #3
 80048f6:	e06d      	b.n	80049d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048f8:	4b29      	ldr	r3, [pc, #164]	; (80049a0 <HAL_RCC_OscConfig+0x4c4>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004900:	2b00      	cmp	r3, #0
 8004902:	d1f0      	bne.n	80048e6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6a1b      	ldr	r3, [r3, #32]
 8004908:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800490c:	d108      	bne.n	8004920 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800490e:	4b24      	ldr	r3, [pc, #144]	; (80049a0 <HAL_RCC_OscConfig+0x4c4>)
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	4921      	ldr	r1, [pc, #132]	; (80049a0 <HAL_RCC_OscConfig+0x4c4>)
 800491c:	4313      	orrs	r3, r2
 800491e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004920:	4b1f      	ldr	r3, [pc, #124]	; (80049a0 <HAL_RCC_OscConfig+0x4c4>)
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6a19      	ldr	r1, [r3, #32]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004930:	430b      	orrs	r3, r1
 8004932:	491b      	ldr	r1, [pc, #108]	; (80049a0 <HAL_RCC_OscConfig+0x4c4>)
 8004934:	4313      	orrs	r3, r2
 8004936:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004938:	4b1b      	ldr	r3, [pc, #108]	; (80049a8 <HAL_RCC_OscConfig+0x4cc>)
 800493a:	2201      	movs	r2, #1
 800493c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800493e:	f7ff faff 	bl	8003f40 <HAL_GetTick>
 8004942:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004944:	e008      	b.n	8004958 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004946:	f7ff fafb 	bl	8003f40 <HAL_GetTick>
 800494a:	4602      	mov	r2, r0
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	1ad3      	subs	r3, r2, r3
 8004950:	2b02      	cmp	r3, #2
 8004952:	d901      	bls.n	8004958 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004954:	2303      	movs	r3, #3
 8004956:	e03d      	b.n	80049d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004958:	4b11      	ldr	r3, [pc, #68]	; (80049a0 <HAL_RCC_OscConfig+0x4c4>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004960:	2b00      	cmp	r3, #0
 8004962:	d0f0      	beq.n	8004946 <HAL_RCC_OscConfig+0x46a>
 8004964:	e035      	b.n	80049d2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004966:	4b10      	ldr	r3, [pc, #64]	; (80049a8 <HAL_RCC_OscConfig+0x4cc>)
 8004968:	2200      	movs	r2, #0
 800496a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800496c:	f7ff fae8 	bl	8003f40 <HAL_GetTick>
 8004970:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004972:	e008      	b.n	8004986 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004974:	f7ff fae4 	bl	8003f40 <HAL_GetTick>
 8004978:	4602      	mov	r2, r0
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	2b02      	cmp	r3, #2
 8004980:	d901      	bls.n	8004986 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e026      	b.n	80049d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004986:	4b06      	ldr	r3, [pc, #24]	; (80049a0 <HAL_RCC_OscConfig+0x4c4>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d1f0      	bne.n	8004974 <HAL_RCC_OscConfig+0x498>
 8004992:	e01e      	b.n	80049d2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	69db      	ldr	r3, [r3, #28]
 8004998:	2b01      	cmp	r3, #1
 800499a:	d107      	bne.n	80049ac <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	e019      	b.n	80049d4 <HAL_RCC_OscConfig+0x4f8>
 80049a0:	40021000 	.word	0x40021000
 80049a4:	40007000 	.word	0x40007000
 80049a8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80049ac:	4b0b      	ldr	r3, [pc, #44]	; (80049dc <HAL_RCC_OscConfig+0x500>)
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6a1b      	ldr	r3, [r3, #32]
 80049bc:	429a      	cmp	r2, r3
 80049be:	d106      	bne.n	80049ce <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d001      	beq.n	80049d2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e000      	b.n	80049d4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80049d2:	2300      	movs	r3, #0
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3718      	adds	r7, #24
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	40021000 	.word	0x40021000

080049e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d101      	bne.n	80049f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e0d0      	b.n	8004b96 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80049f4:	4b6a      	ldr	r3, [pc, #424]	; (8004ba0 <HAL_RCC_ClockConfig+0x1c0>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 0307 	and.w	r3, r3, #7
 80049fc:	683a      	ldr	r2, [r7, #0]
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d910      	bls.n	8004a24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a02:	4b67      	ldr	r3, [pc, #412]	; (8004ba0 <HAL_RCC_ClockConfig+0x1c0>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f023 0207 	bic.w	r2, r3, #7
 8004a0a:	4965      	ldr	r1, [pc, #404]	; (8004ba0 <HAL_RCC_ClockConfig+0x1c0>)
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a12:	4b63      	ldr	r3, [pc, #396]	; (8004ba0 <HAL_RCC_ClockConfig+0x1c0>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 0307 	and.w	r3, r3, #7
 8004a1a:	683a      	ldr	r2, [r7, #0]
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d001      	beq.n	8004a24 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	e0b8      	b.n	8004b96 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 0302 	and.w	r3, r3, #2
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d020      	beq.n	8004a72 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 0304 	and.w	r3, r3, #4
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d005      	beq.n	8004a48 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a3c:	4b59      	ldr	r3, [pc, #356]	; (8004ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	4a58      	ldr	r2, [pc, #352]	; (8004ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a42:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004a46:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0308 	and.w	r3, r3, #8
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d005      	beq.n	8004a60 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a54:	4b53      	ldr	r3, [pc, #332]	; (8004ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	4a52      	ldr	r2, [pc, #328]	; (8004ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a5a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004a5e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a60:	4b50      	ldr	r3, [pc, #320]	; (8004ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	494d      	ldr	r1, [pc, #308]	; (8004ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 0301 	and.w	r3, r3, #1
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d040      	beq.n	8004b00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d107      	bne.n	8004a96 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a86:	4b47      	ldr	r3, [pc, #284]	; (8004ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d115      	bne.n	8004abe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e07f      	b.n	8004b96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	d107      	bne.n	8004aae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a9e:	4b41      	ldr	r3, [pc, #260]	; (8004ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d109      	bne.n	8004abe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e073      	b.n	8004b96 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004aae:	4b3d      	ldr	r3, [pc, #244]	; (8004ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 0302 	and.w	r3, r3, #2
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d101      	bne.n	8004abe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e06b      	b.n	8004b96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004abe:	4b39      	ldr	r3, [pc, #228]	; (8004ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	f023 0203 	bic.w	r2, r3, #3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	4936      	ldr	r1, [pc, #216]	; (8004ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8004acc:	4313      	orrs	r3, r2
 8004ace:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ad0:	f7ff fa36 	bl	8003f40 <HAL_GetTick>
 8004ad4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ad6:	e00a      	b.n	8004aee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ad8:	f7ff fa32 	bl	8003f40 <HAL_GetTick>
 8004adc:	4602      	mov	r2, r0
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d901      	bls.n	8004aee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	e053      	b.n	8004b96 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aee:	4b2d      	ldr	r3, [pc, #180]	; (8004ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	f003 020c 	and.w	r2, r3, #12
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d1eb      	bne.n	8004ad8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b00:	4b27      	ldr	r3, [pc, #156]	; (8004ba0 <HAL_RCC_ClockConfig+0x1c0>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 0307 	and.w	r3, r3, #7
 8004b08:	683a      	ldr	r2, [r7, #0]
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d210      	bcs.n	8004b30 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b0e:	4b24      	ldr	r3, [pc, #144]	; (8004ba0 <HAL_RCC_ClockConfig+0x1c0>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f023 0207 	bic.w	r2, r3, #7
 8004b16:	4922      	ldr	r1, [pc, #136]	; (8004ba0 <HAL_RCC_ClockConfig+0x1c0>)
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b1e:	4b20      	ldr	r3, [pc, #128]	; (8004ba0 <HAL_RCC_ClockConfig+0x1c0>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0307 	and.w	r3, r3, #7
 8004b26:	683a      	ldr	r2, [r7, #0]
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d001      	beq.n	8004b30 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e032      	b.n	8004b96 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 0304 	and.w	r3, r3, #4
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d008      	beq.n	8004b4e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b3c:	4b19      	ldr	r3, [pc, #100]	; (8004ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	4916      	ldr	r1, [pc, #88]	; (8004ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 0308 	and.w	r3, r3, #8
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d009      	beq.n	8004b6e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004b5a:	4b12      	ldr	r3, [pc, #72]	; (8004ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	691b      	ldr	r3, [r3, #16]
 8004b66:	00db      	lsls	r3, r3, #3
 8004b68:	490e      	ldr	r1, [pc, #56]	; (8004ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b6e:	f000 f821 	bl	8004bb4 <HAL_RCC_GetSysClockFreq>
 8004b72:	4602      	mov	r2, r0
 8004b74:	4b0b      	ldr	r3, [pc, #44]	; (8004ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	091b      	lsrs	r3, r3, #4
 8004b7a:	f003 030f 	and.w	r3, r3, #15
 8004b7e:	490a      	ldr	r1, [pc, #40]	; (8004ba8 <HAL_RCC_ClockConfig+0x1c8>)
 8004b80:	5ccb      	ldrb	r3, [r1, r3]
 8004b82:	fa22 f303 	lsr.w	r3, r2, r3
 8004b86:	4a09      	ldr	r2, [pc, #36]	; (8004bac <HAL_RCC_ClockConfig+0x1cc>)
 8004b88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004b8a:	4b09      	ldr	r3, [pc, #36]	; (8004bb0 <HAL_RCC_ClockConfig+0x1d0>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f7ff f994 	bl	8003ebc <HAL_InitTick>

  return HAL_OK;
 8004b94:	2300      	movs	r3, #0
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3710      	adds	r7, #16
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	40022000 	.word	0x40022000
 8004ba4:	40021000 	.word	0x40021000
 8004ba8:	08007880 	.word	0x08007880
 8004bac:	20000014 	.word	0x20000014
 8004bb0:	20000018 	.word	0x20000018

08004bb4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b087      	sub	sp, #28
 8004bb8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	60fb      	str	r3, [r7, #12]
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	60bb      	str	r3, [r7, #8]
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	617b      	str	r3, [r7, #20]
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004bce:	4b1e      	ldr	r3, [pc, #120]	; (8004c48 <HAL_RCC_GetSysClockFreq+0x94>)
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f003 030c 	and.w	r3, r3, #12
 8004bda:	2b04      	cmp	r3, #4
 8004bdc:	d002      	beq.n	8004be4 <HAL_RCC_GetSysClockFreq+0x30>
 8004bde:	2b08      	cmp	r3, #8
 8004be0:	d003      	beq.n	8004bea <HAL_RCC_GetSysClockFreq+0x36>
 8004be2:	e027      	b.n	8004c34 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004be4:	4b19      	ldr	r3, [pc, #100]	; (8004c4c <HAL_RCC_GetSysClockFreq+0x98>)
 8004be6:	613b      	str	r3, [r7, #16]
      break;
 8004be8:	e027      	b.n	8004c3a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	0c9b      	lsrs	r3, r3, #18
 8004bee:	f003 030f 	and.w	r3, r3, #15
 8004bf2:	4a17      	ldr	r2, [pc, #92]	; (8004c50 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004bf4:	5cd3      	ldrb	r3, [r2, r3]
 8004bf6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d010      	beq.n	8004c24 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004c02:	4b11      	ldr	r3, [pc, #68]	; (8004c48 <HAL_RCC_GetSysClockFreq+0x94>)
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	0c5b      	lsrs	r3, r3, #17
 8004c08:	f003 0301 	and.w	r3, r3, #1
 8004c0c:	4a11      	ldr	r2, [pc, #68]	; (8004c54 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004c0e:	5cd3      	ldrb	r3, [r2, r3]
 8004c10:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4a0d      	ldr	r2, [pc, #52]	; (8004c4c <HAL_RCC_GetSysClockFreq+0x98>)
 8004c16:	fb03 f202 	mul.w	r2, r3, r2
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c20:	617b      	str	r3, [r7, #20]
 8004c22:	e004      	b.n	8004c2e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	4a0c      	ldr	r2, [pc, #48]	; (8004c58 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004c28:	fb02 f303 	mul.w	r3, r2, r3
 8004c2c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	613b      	str	r3, [r7, #16]
      break;
 8004c32:	e002      	b.n	8004c3a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004c34:	4b05      	ldr	r3, [pc, #20]	; (8004c4c <HAL_RCC_GetSysClockFreq+0x98>)
 8004c36:	613b      	str	r3, [r7, #16]
      break;
 8004c38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c3a:	693b      	ldr	r3, [r7, #16]
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	371c      	adds	r7, #28
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bc80      	pop	{r7}
 8004c44:	4770      	bx	lr
 8004c46:	bf00      	nop
 8004c48:	40021000 	.word	0x40021000
 8004c4c:	007a1200 	.word	0x007a1200
 8004c50:	08007890 	.word	0x08007890
 8004c54:	080078a0 	.word	0x080078a0
 8004c58:	003d0900 	.word	0x003d0900

08004c5c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b085      	sub	sp, #20
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004c64:	4b0a      	ldr	r3, [pc, #40]	; (8004c90 <RCC_Delay+0x34>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a0a      	ldr	r2, [pc, #40]	; (8004c94 <RCC_Delay+0x38>)
 8004c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c6e:	0a5b      	lsrs	r3, r3, #9
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	fb02 f303 	mul.w	r3, r2, r3
 8004c76:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004c78:	bf00      	nop
  }
  while (Delay --);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	1e5a      	subs	r2, r3, #1
 8004c7e:	60fa      	str	r2, [r7, #12]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d1f9      	bne.n	8004c78 <RCC_Delay+0x1c>
}
 8004c84:	bf00      	nop
 8004c86:	bf00      	nop
 8004c88:	3714      	adds	r7, #20
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bc80      	pop	{r7}
 8004c8e:	4770      	bx	lr
 8004c90:	20000014 	.word	0x20000014
 8004c94:	10624dd3 	.word	0x10624dd3

08004c98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b082      	sub	sp, #8
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d101      	bne.n	8004caa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e041      	b.n	8004d2e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d106      	bne.n	8004cc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f7fe ff30 	bl	8003b24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2202      	movs	r2, #2
 8004cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	3304      	adds	r3, #4
 8004cd4:	4619      	mov	r1, r3
 8004cd6:	4610      	mov	r0, r2
 8004cd8:	f000 fc30 	bl	800553c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d2c:	2300      	movs	r3, #0
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3708      	adds	r7, #8
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
	...

08004d38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b085      	sub	sp, #20
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d001      	beq.n	8004d50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e03a      	b.n	8004dc6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2202      	movs	r2, #2
 8004d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	68da      	ldr	r2, [r3, #12]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f042 0201 	orr.w	r2, r2, #1
 8004d66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a18      	ldr	r2, [pc, #96]	; (8004dd0 <HAL_TIM_Base_Start_IT+0x98>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d00e      	beq.n	8004d90 <HAL_TIM_Base_Start_IT+0x58>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d7a:	d009      	beq.n	8004d90 <HAL_TIM_Base_Start_IT+0x58>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a14      	ldr	r2, [pc, #80]	; (8004dd4 <HAL_TIM_Base_Start_IT+0x9c>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d004      	beq.n	8004d90 <HAL_TIM_Base_Start_IT+0x58>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a13      	ldr	r2, [pc, #76]	; (8004dd8 <HAL_TIM_Base_Start_IT+0xa0>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d111      	bne.n	8004db4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	f003 0307 	and.w	r3, r3, #7
 8004d9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2b06      	cmp	r3, #6
 8004da0:	d010      	beq.n	8004dc4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f042 0201 	orr.w	r2, r2, #1
 8004db0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004db2:	e007      	b.n	8004dc4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f042 0201 	orr.w	r2, r2, #1
 8004dc2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004dc4:	2300      	movs	r3, #0
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3714      	adds	r7, #20
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bc80      	pop	{r7}
 8004dce:	4770      	bx	lr
 8004dd0:	40012c00 	.word	0x40012c00
 8004dd4:	40000400 	.word	0x40000400
 8004dd8:	40000800 	.word	0x40000800

08004ddc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b082      	sub	sp, #8
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d101      	bne.n	8004dee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e041      	b.n	8004e72 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d106      	bne.n	8004e08 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f000 f839 	bl	8004e7a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2202      	movs	r2, #2
 8004e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	3304      	adds	r3, #4
 8004e18:	4619      	mov	r1, r3
 8004e1a:	4610      	mov	r0, r2
 8004e1c:	f000 fb8e 	bl	800553c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e70:	2300      	movs	r3, #0
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3708      	adds	r7, #8
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}

08004e7a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004e7a:	b480      	push	{r7}
 8004e7c:	b083      	sub	sp, #12
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004e82:	bf00      	nop
 8004e84:	370c      	adds	r7, #12
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bc80      	pop	{r7}
 8004e8a:	4770      	bx	lr

08004e8c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b084      	sub	sp, #16
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d109      	bne.n	8004eb0 <HAL_TIM_PWM_Start+0x24>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	bf14      	ite	ne
 8004ea8:	2301      	movne	r3, #1
 8004eaa:	2300      	moveq	r3, #0
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	e022      	b.n	8004ef6 <HAL_TIM_PWM_Start+0x6a>
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	2b04      	cmp	r3, #4
 8004eb4:	d109      	bne.n	8004eca <HAL_TIM_PWM_Start+0x3e>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	bf14      	ite	ne
 8004ec2:	2301      	movne	r3, #1
 8004ec4:	2300      	moveq	r3, #0
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	e015      	b.n	8004ef6 <HAL_TIM_PWM_Start+0x6a>
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	2b08      	cmp	r3, #8
 8004ece:	d109      	bne.n	8004ee4 <HAL_TIM_PWM_Start+0x58>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	bf14      	ite	ne
 8004edc:	2301      	movne	r3, #1
 8004ede:	2300      	moveq	r3, #0
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	e008      	b.n	8004ef6 <HAL_TIM_PWM_Start+0x6a>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	bf14      	ite	ne
 8004ef0:	2301      	movne	r3, #1
 8004ef2:	2300      	moveq	r3, #0
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d001      	beq.n	8004efe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e05e      	b.n	8004fbc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d104      	bne.n	8004f0e <HAL_TIM_PWM_Start+0x82>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2202      	movs	r2, #2
 8004f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f0c:	e013      	b.n	8004f36 <HAL_TIM_PWM_Start+0xaa>
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	2b04      	cmp	r3, #4
 8004f12:	d104      	bne.n	8004f1e <HAL_TIM_PWM_Start+0x92>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2202      	movs	r2, #2
 8004f18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f1c:	e00b      	b.n	8004f36 <HAL_TIM_PWM_Start+0xaa>
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	2b08      	cmp	r3, #8
 8004f22:	d104      	bne.n	8004f2e <HAL_TIM_PWM_Start+0xa2>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2202      	movs	r2, #2
 8004f28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f2c:	e003      	b.n	8004f36 <HAL_TIM_PWM_Start+0xaa>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2202      	movs	r2, #2
 8004f32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	6839      	ldr	r1, [r7, #0]
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f000 fd7c 	bl	8005a3c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a1e      	ldr	r2, [pc, #120]	; (8004fc4 <HAL_TIM_PWM_Start+0x138>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d107      	bne.n	8004f5e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f5c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a18      	ldr	r2, [pc, #96]	; (8004fc4 <HAL_TIM_PWM_Start+0x138>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d00e      	beq.n	8004f86 <HAL_TIM_PWM_Start+0xfa>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f70:	d009      	beq.n	8004f86 <HAL_TIM_PWM_Start+0xfa>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a14      	ldr	r2, [pc, #80]	; (8004fc8 <HAL_TIM_PWM_Start+0x13c>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d004      	beq.n	8004f86 <HAL_TIM_PWM_Start+0xfa>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a12      	ldr	r2, [pc, #72]	; (8004fcc <HAL_TIM_PWM_Start+0x140>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d111      	bne.n	8004faa <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	f003 0307 	and.w	r3, r3, #7
 8004f90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2b06      	cmp	r3, #6
 8004f96:	d010      	beq.n	8004fba <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f042 0201 	orr.w	r2, r2, #1
 8004fa6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fa8:	e007      	b.n	8004fba <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f042 0201 	orr.w	r2, r2, #1
 8004fb8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004fba:	2300      	movs	r3, #0
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3710      	adds	r7, #16
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}
 8004fc4:	40012c00 	.word	0x40012c00
 8004fc8:	40000400 	.word	0x40000400
 8004fcc:	40000800 	.word	0x40000800

08004fd0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b082      	sub	sp, #8
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	691b      	ldr	r3, [r3, #16]
 8004fde:	f003 0302 	and.w	r3, r3, #2
 8004fe2:	2b02      	cmp	r3, #2
 8004fe4:	d122      	bne.n	800502c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	f003 0302 	and.w	r3, r3, #2
 8004ff0:	2b02      	cmp	r3, #2
 8004ff2:	d11b      	bne.n	800502c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f06f 0202 	mvn.w	r2, #2
 8004ffc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2201      	movs	r2, #1
 8005002:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	699b      	ldr	r3, [r3, #24]
 800500a:	f003 0303 	and.w	r3, r3, #3
 800500e:	2b00      	cmp	r3, #0
 8005010:	d003      	beq.n	800501a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 fa76 	bl	8005504 <HAL_TIM_IC_CaptureCallback>
 8005018:	e005      	b.n	8005026 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f000 fa69 	bl	80054f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f000 fa78 	bl	8005516 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	f003 0304 	and.w	r3, r3, #4
 8005036:	2b04      	cmp	r3, #4
 8005038:	d122      	bne.n	8005080 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	f003 0304 	and.w	r3, r3, #4
 8005044:	2b04      	cmp	r3, #4
 8005046:	d11b      	bne.n	8005080 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f06f 0204 	mvn.w	r2, #4
 8005050:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2202      	movs	r2, #2
 8005056:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	699b      	ldr	r3, [r3, #24]
 800505e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005062:	2b00      	cmp	r3, #0
 8005064:	d003      	beq.n	800506e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f000 fa4c 	bl	8005504 <HAL_TIM_IC_CaptureCallback>
 800506c:	e005      	b.n	800507a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f000 fa3f 	bl	80054f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f000 fa4e 	bl	8005516 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	691b      	ldr	r3, [r3, #16]
 8005086:	f003 0308 	and.w	r3, r3, #8
 800508a:	2b08      	cmp	r3, #8
 800508c:	d122      	bne.n	80050d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	f003 0308 	and.w	r3, r3, #8
 8005098:	2b08      	cmp	r3, #8
 800509a:	d11b      	bne.n	80050d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f06f 0208 	mvn.w	r2, #8
 80050a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2204      	movs	r2, #4
 80050aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	69db      	ldr	r3, [r3, #28]
 80050b2:	f003 0303 	and.w	r3, r3, #3
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d003      	beq.n	80050c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f000 fa22 	bl	8005504 <HAL_TIM_IC_CaptureCallback>
 80050c0:	e005      	b.n	80050ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f000 fa15 	bl	80054f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f000 fa24 	bl	8005516 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2200      	movs	r2, #0
 80050d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	691b      	ldr	r3, [r3, #16]
 80050da:	f003 0310 	and.w	r3, r3, #16
 80050de:	2b10      	cmp	r3, #16
 80050e0:	d122      	bne.n	8005128 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	f003 0310 	and.w	r3, r3, #16
 80050ec:	2b10      	cmp	r3, #16
 80050ee:	d11b      	bne.n	8005128 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f06f 0210 	mvn.w	r2, #16
 80050f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2208      	movs	r2, #8
 80050fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	69db      	ldr	r3, [r3, #28]
 8005106:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800510a:	2b00      	cmp	r3, #0
 800510c:	d003      	beq.n	8005116 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f000 f9f8 	bl	8005504 <HAL_TIM_IC_CaptureCallback>
 8005114:	e005      	b.n	8005122 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f000 f9eb 	bl	80054f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f000 f9fa 	bl	8005516 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	691b      	ldr	r3, [r3, #16]
 800512e:	f003 0301 	and.w	r3, r3, #1
 8005132:	2b01      	cmp	r3, #1
 8005134:	d10e      	bne.n	8005154 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	f003 0301 	and.w	r3, r3, #1
 8005140:	2b01      	cmp	r3, #1
 8005142:	d107      	bne.n	8005154 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f06f 0201 	mvn.w	r2, #1
 800514c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f7fc fdcc 	bl	8001cec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	691b      	ldr	r3, [r3, #16]
 800515a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800515e:	2b80      	cmp	r3, #128	; 0x80
 8005160:	d10e      	bne.n	8005180 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800516c:	2b80      	cmp	r3, #128	; 0x80
 800516e:	d107      	bne.n	8005180 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005178:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 fce9 	bl	8005b52 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	691b      	ldr	r3, [r3, #16]
 8005186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800518a:	2b40      	cmp	r3, #64	; 0x40
 800518c:	d10e      	bne.n	80051ac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005198:	2b40      	cmp	r3, #64	; 0x40
 800519a:	d107      	bne.n	80051ac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80051a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f000 f9be 	bl	8005528 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	f003 0320 	and.w	r3, r3, #32
 80051b6:	2b20      	cmp	r3, #32
 80051b8:	d10e      	bne.n	80051d8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	f003 0320 	and.w	r3, r3, #32
 80051c4:	2b20      	cmp	r3, #32
 80051c6:	d107      	bne.n	80051d8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f06f 0220 	mvn.w	r2, #32
 80051d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 fcb4 	bl	8005b40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80051d8:	bf00      	nop
 80051da:	3708      	adds	r7, #8
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}

080051e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b086      	sub	sp, #24
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	60b9      	str	r1, [r7, #8]
 80051ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051ec:	2300      	movs	r3, #0
 80051ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d101      	bne.n	80051fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80051fa:	2302      	movs	r3, #2
 80051fc:	e0ae      	b.n	800535c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2201      	movs	r2, #1
 8005202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2b0c      	cmp	r3, #12
 800520a:	f200 809f 	bhi.w	800534c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800520e:	a201      	add	r2, pc, #4	; (adr r2, 8005214 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005214:	08005249 	.word	0x08005249
 8005218:	0800534d 	.word	0x0800534d
 800521c:	0800534d 	.word	0x0800534d
 8005220:	0800534d 	.word	0x0800534d
 8005224:	08005289 	.word	0x08005289
 8005228:	0800534d 	.word	0x0800534d
 800522c:	0800534d 	.word	0x0800534d
 8005230:	0800534d 	.word	0x0800534d
 8005234:	080052cb 	.word	0x080052cb
 8005238:	0800534d 	.word	0x0800534d
 800523c:	0800534d 	.word	0x0800534d
 8005240:	0800534d 	.word	0x0800534d
 8005244:	0800530b 	.word	0x0800530b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	68b9      	ldr	r1, [r7, #8]
 800524e:	4618      	mov	r0, r3
 8005250:	f000 f9d6 	bl	8005600 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	699a      	ldr	r2, [r3, #24]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f042 0208 	orr.w	r2, r2, #8
 8005262:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	699a      	ldr	r2, [r3, #24]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f022 0204 	bic.w	r2, r2, #4
 8005272:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	6999      	ldr	r1, [r3, #24]
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	691a      	ldr	r2, [r3, #16]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	430a      	orrs	r2, r1
 8005284:	619a      	str	r2, [r3, #24]
      break;
 8005286:	e064      	b.n	8005352 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	68b9      	ldr	r1, [r7, #8]
 800528e:	4618      	mov	r0, r3
 8005290:	f000 fa1c 	bl	80056cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	699a      	ldr	r2, [r3, #24]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	699a      	ldr	r2, [r3, #24]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	6999      	ldr	r1, [r3, #24]
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	691b      	ldr	r3, [r3, #16]
 80052be:	021a      	lsls	r2, r3, #8
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	430a      	orrs	r2, r1
 80052c6:	619a      	str	r2, [r3, #24]
      break;
 80052c8:	e043      	b.n	8005352 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	68b9      	ldr	r1, [r7, #8]
 80052d0:	4618      	mov	r0, r3
 80052d2:	f000 fa65 	bl	80057a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	69da      	ldr	r2, [r3, #28]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f042 0208 	orr.w	r2, r2, #8
 80052e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	69da      	ldr	r2, [r3, #28]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f022 0204 	bic.w	r2, r2, #4
 80052f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	69d9      	ldr	r1, [r3, #28]
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	691a      	ldr	r2, [r3, #16]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	430a      	orrs	r2, r1
 8005306:	61da      	str	r2, [r3, #28]
      break;
 8005308:	e023      	b.n	8005352 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	68b9      	ldr	r1, [r7, #8]
 8005310:	4618      	mov	r0, r3
 8005312:	f000 faaf 	bl	8005874 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	69da      	ldr	r2, [r3, #28]
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005324:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	69da      	ldr	r2, [r3, #28]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005334:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	69d9      	ldr	r1, [r3, #28]
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	691b      	ldr	r3, [r3, #16]
 8005340:	021a      	lsls	r2, r3, #8
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	430a      	orrs	r2, r1
 8005348:	61da      	str	r2, [r3, #28]
      break;
 800534a:	e002      	b.n	8005352 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	75fb      	strb	r3, [r7, #23]
      break;
 8005350:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2200      	movs	r2, #0
 8005356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800535a:	7dfb      	ldrb	r3, [r7, #23]
}
 800535c:	4618      	mov	r0, r3
 800535e:	3718      	adds	r7, #24
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}

08005364 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800536e:	2300      	movs	r3, #0
 8005370:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005378:	2b01      	cmp	r3, #1
 800537a:	d101      	bne.n	8005380 <HAL_TIM_ConfigClockSource+0x1c>
 800537c:	2302      	movs	r3, #2
 800537e:	e0b4      	b.n	80054ea <HAL_TIM_ConfigClockSource+0x186>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2202      	movs	r2, #2
 800538c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800539e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	68ba      	ldr	r2, [r7, #8]
 80053ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053b8:	d03e      	beq.n	8005438 <HAL_TIM_ConfigClockSource+0xd4>
 80053ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053be:	f200 8087 	bhi.w	80054d0 <HAL_TIM_ConfigClockSource+0x16c>
 80053c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053c6:	f000 8086 	beq.w	80054d6 <HAL_TIM_ConfigClockSource+0x172>
 80053ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053ce:	d87f      	bhi.n	80054d0 <HAL_TIM_ConfigClockSource+0x16c>
 80053d0:	2b70      	cmp	r3, #112	; 0x70
 80053d2:	d01a      	beq.n	800540a <HAL_TIM_ConfigClockSource+0xa6>
 80053d4:	2b70      	cmp	r3, #112	; 0x70
 80053d6:	d87b      	bhi.n	80054d0 <HAL_TIM_ConfigClockSource+0x16c>
 80053d8:	2b60      	cmp	r3, #96	; 0x60
 80053da:	d050      	beq.n	800547e <HAL_TIM_ConfigClockSource+0x11a>
 80053dc:	2b60      	cmp	r3, #96	; 0x60
 80053de:	d877      	bhi.n	80054d0 <HAL_TIM_ConfigClockSource+0x16c>
 80053e0:	2b50      	cmp	r3, #80	; 0x50
 80053e2:	d03c      	beq.n	800545e <HAL_TIM_ConfigClockSource+0xfa>
 80053e4:	2b50      	cmp	r3, #80	; 0x50
 80053e6:	d873      	bhi.n	80054d0 <HAL_TIM_ConfigClockSource+0x16c>
 80053e8:	2b40      	cmp	r3, #64	; 0x40
 80053ea:	d058      	beq.n	800549e <HAL_TIM_ConfigClockSource+0x13a>
 80053ec:	2b40      	cmp	r3, #64	; 0x40
 80053ee:	d86f      	bhi.n	80054d0 <HAL_TIM_ConfigClockSource+0x16c>
 80053f0:	2b30      	cmp	r3, #48	; 0x30
 80053f2:	d064      	beq.n	80054be <HAL_TIM_ConfigClockSource+0x15a>
 80053f4:	2b30      	cmp	r3, #48	; 0x30
 80053f6:	d86b      	bhi.n	80054d0 <HAL_TIM_ConfigClockSource+0x16c>
 80053f8:	2b20      	cmp	r3, #32
 80053fa:	d060      	beq.n	80054be <HAL_TIM_ConfigClockSource+0x15a>
 80053fc:	2b20      	cmp	r3, #32
 80053fe:	d867      	bhi.n	80054d0 <HAL_TIM_ConfigClockSource+0x16c>
 8005400:	2b00      	cmp	r3, #0
 8005402:	d05c      	beq.n	80054be <HAL_TIM_ConfigClockSource+0x15a>
 8005404:	2b10      	cmp	r3, #16
 8005406:	d05a      	beq.n	80054be <HAL_TIM_ConfigClockSource+0x15a>
 8005408:	e062      	b.n	80054d0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800541a:	f000 faf0 	bl	80059fe <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800542c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	68ba      	ldr	r2, [r7, #8]
 8005434:	609a      	str	r2, [r3, #8]
      break;
 8005436:	e04f      	b.n	80054d8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005448:	f000 fad9 	bl	80059fe <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	689a      	ldr	r2, [r3, #8]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800545a:	609a      	str	r2, [r3, #8]
      break;
 800545c:	e03c      	b.n	80054d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800546a:	461a      	mov	r2, r3
 800546c:	f000 fa50 	bl	8005910 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	2150      	movs	r1, #80	; 0x50
 8005476:	4618      	mov	r0, r3
 8005478:	f000 faa7 	bl	80059ca <TIM_ITRx_SetConfig>
      break;
 800547c:	e02c      	b.n	80054d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800548a:	461a      	mov	r2, r3
 800548c:	f000 fa6e 	bl	800596c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	2160      	movs	r1, #96	; 0x60
 8005496:	4618      	mov	r0, r3
 8005498:	f000 fa97 	bl	80059ca <TIM_ITRx_SetConfig>
      break;
 800549c:	e01c      	b.n	80054d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054aa:	461a      	mov	r2, r3
 80054ac:	f000 fa30 	bl	8005910 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	2140      	movs	r1, #64	; 0x40
 80054b6:	4618      	mov	r0, r3
 80054b8:	f000 fa87 	bl	80059ca <TIM_ITRx_SetConfig>
      break;
 80054bc:	e00c      	b.n	80054d8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4619      	mov	r1, r3
 80054c8:	4610      	mov	r0, r2
 80054ca:	f000 fa7e 	bl	80059ca <TIM_ITRx_SetConfig>
      break;
 80054ce:	e003      	b.n	80054d8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	73fb      	strb	r3, [r7, #15]
      break;
 80054d4:	e000      	b.n	80054d8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80054d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2201      	movs	r2, #1
 80054dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2200      	movs	r2, #0
 80054e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80054e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3710      	adds	r7, #16
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}

080054f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054f2:	b480      	push	{r7}
 80054f4:	b083      	sub	sp, #12
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80054fa:	bf00      	nop
 80054fc:	370c      	adds	r7, #12
 80054fe:	46bd      	mov	sp, r7
 8005500:	bc80      	pop	{r7}
 8005502:	4770      	bx	lr

08005504 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005504:	b480      	push	{r7}
 8005506:	b083      	sub	sp, #12
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800550c:	bf00      	nop
 800550e:	370c      	adds	r7, #12
 8005510:	46bd      	mov	sp, r7
 8005512:	bc80      	pop	{r7}
 8005514:	4770      	bx	lr

08005516 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005516:	b480      	push	{r7}
 8005518:	b083      	sub	sp, #12
 800551a:	af00      	add	r7, sp, #0
 800551c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800551e:	bf00      	nop
 8005520:	370c      	adds	r7, #12
 8005522:	46bd      	mov	sp, r7
 8005524:	bc80      	pop	{r7}
 8005526:	4770      	bx	lr

08005528 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005528:	b480      	push	{r7}
 800552a:	b083      	sub	sp, #12
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005530:	bf00      	nop
 8005532:	370c      	adds	r7, #12
 8005534:	46bd      	mov	sp, r7
 8005536:	bc80      	pop	{r7}
 8005538:	4770      	bx	lr
	...

0800553c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800553c:	b480      	push	{r7}
 800553e:	b085      	sub	sp, #20
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	4a29      	ldr	r2, [pc, #164]	; (80055f4 <TIM_Base_SetConfig+0xb8>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d00b      	beq.n	800556c <TIM_Base_SetConfig+0x30>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800555a:	d007      	beq.n	800556c <TIM_Base_SetConfig+0x30>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4a26      	ldr	r2, [pc, #152]	; (80055f8 <TIM_Base_SetConfig+0xbc>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d003      	beq.n	800556c <TIM_Base_SetConfig+0x30>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	4a25      	ldr	r2, [pc, #148]	; (80055fc <TIM_Base_SetConfig+0xc0>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d108      	bne.n	800557e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005572:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	68fa      	ldr	r2, [r7, #12]
 800557a:	4313      	orrs	r3, r2
 800557c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	4a1c      	ldr	r2, [pc, #112]	; (80055f4 <TIM_Base_SetConfig+0xb8>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d00b      	beq.n	800559e <TIM_Base_SetConfig+0x62>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800558c:	d007      	beq.n	800559e <TIM_Base_SetConfig+0x62>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4a19      	ldr	r2, [pc, #100]	; (80055f8 <TIM_Base_SetConfig+0xbc>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d003      	beq.n	800559e <TIM_Base_SetConfig+0x62>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	4a18      	ldr	r2, [pc, #96]	; (80055fc <TIM_Base_SetConfig+0xc0>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d108      	bne.n	80055b0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	68db      	ldr	r3, [r3, #12]
 80055aa:	68fa      	ldr	r2, [r7, #12]
 80055ac:	4313      	orrs	r3, r2
 80055ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	695b      	ldr	r3, [r3, #20]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	68fa      	ldr	r2, [r7, #12]
 80055c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	689a      	ldr	r2, [r3, #8]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	4a07      	ldr	r2, [pc, #28]	; (80055f4 <TIM_Base_SetConfig+0xb8>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d103      	bne.n	80055e4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	691a      	ldr	r2, [r3, #16]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2201      	movs	r2, #1
 80055e8:	615a      	str	r2, [r3, #20]
}
 80055ea:	bf00      	nop
 80055ec:	3714      	adds	r7, #20
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bc80      	pop	{r7}
 80055f2:	4770      	bx	lr
 80055f4:	40012c00 	.word	0x40012c00
 80055f8:	40000400 	.word	0x40000400
 80055fc:	40000800 	.word	0x40000800

08005600 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005600:	b480      	push	{r7}
 8005602:	b087      	sub	sp, #28
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a1b      	ldr	r3, [r3, #32]
 800560e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6a1b      	ldr	r3, [r3, #32]
 8005614:	f023 0201 	bic.w	r2, r3, #1
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	699b      	ldr	r3, [r3, #24]
 8005626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800562e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f023 0303 	bic.w	r3, r3, #3
 8005636:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	68fa      	ldr	r2, [r7, #12]
 800563e:	4313      	orrs	r3, r2
 8005640:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	f023 0302 	bic.w	r3, r3, #2
 8005648:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	697a      	ldr	r2, [r7, #20]
 8005650:	4313      	orrs	r3, r2
 8005652:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	4a1c      	ldr	r2, [pc, #112]	; (80056c8 <TIM_OC1_SetConfig+0xc8>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d10c      	bne.n	8005676 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	f023 0308 	bic.w	r3, r3, #8
 8005662:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	697a      	ldr	r2, [r7, #20]
 800566a:	4313      	orrs	r3, r2
 800566c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	f023 0304 	bic.w	r3, r3, #4
 8005674:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	4a13      	ldr	r2, [pc, #76]	; (80056c8 <TIM_OC1_SetConfig+0xc8>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d111      	bne.n	80056a2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005684:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800568c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	695b      	ldr	r3, [r3, #20]
 8005692:	693a      	ldr	r2, [r7, #16]
 8005694:	4313      	orrs	r3, r2
 8005696:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	699b      	ldr	r3, [r3, #24]
 800569c:	693a      	ldr	r2, [r7, #16]
 800569e:	4313      	orrs	r3, r2
 80056a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	693a      	ldr	r2, [r7, #16]
 80056a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	68fa      	ldr	r2, [r7, #12]
 80056ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	685a      	ldr	r2, [r3, #4]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	697a      	ldr	r2, [r7, #20]
 80056ba:	621a      	str	r2, [r3, #32]
}
 80056bc:	bf00      	nop
 80056be:	371c      	adds	r7, #28
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bc80      	pop	{r7}
 80056c4:	4770      	bx	lr
 80056c6:	bf00      	nop
 80056c8:	40012c00 	.word	0x40012c00

080056cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b087      	sub	sp, #28
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6a1b      	ldr	r3, [r3, #32]
 80056da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6a1b      	ldr	r3, [r3, #32]
 80056e0:	f023 0210 	bic.w	r2, r3, #16
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	699b      	ldr	r3, [r3, #24]
 80056f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005702:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	021b      	lsls	r3, r3, #8
 800570a:	68fa      	ldr	r2, [r7, #12]
 800570c:	4313      	orrs	r3, r2
 800570e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	f023 0320 	bic.w	r3, r3, #32
 8005716:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	011b      	lsls	r3, r3, #4
 800571e:	697a      	ldr	r2, [r7, #20]
 8005720:	4313      	orrs	r3, r2
 8005722:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	4a1d      	ldr	r2, [pc, #116]	; (800579c <TIM_OC2_SetConfig+0xd0>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d10d      	bne.n	8005748 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005732:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	011b      	lsls	r3, r3, #4
 800573a:	697a      	ldr	r2, [r7, #20]
 800573c:	4313      	orrs	r3, r2
 800573e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005746:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	4a14      	ldr	r2, [pc, #80]	; (800579c <TIM_OC2_SetConfig+0xd0>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d113      	bne.n	8005778 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005756:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800575e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	695b      	ldr	r3, [r3, #20]
 8005764:	009b      	lsls	r3, r3, #2
 8005766:	693a      	ldr	r2, [r7, #16]
 8005768:	4313      	orrs	r3, r2
 800576a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	699b      	ldr	r3, [r3, #24]
 8005770:	009b      	lsls	r3, r3, #2
 8005772:	693a      	ldr	r2, [r7, #16]
 8005774:	4313      	orrs	r3, r2
 8005776:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	693a      	ldr	r2, [r7, #16]
 800577c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	68fa      	ldr	r2, [r7, #12]
 8005782:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	685a      	ldr	r2, [r3, #4]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	697a      	ldr	r2, [r7, #20]
 8005790:	621a      	str	r2, [r3, #32]
}
 8005792:	bf00      	nop
 8005794:	371c      	adds	r7, #28
 8005796:	46bd      	mov	sp, r7
 8005798:	bc80      	pop	{r7}
 800579a:	4770      	bx	lr
 800579c:	40012c00 	.word	0x40012c00

080057a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b087      	sub	sp, #28
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6a1b      	ldr	r3, [r3, #32]
 80057ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6a1b      	ldr	r3, [r3, #32]
 80057b4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	69db      	ldr	r3, [r3, #28]
 80057c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f023 0303 	bic.w	r3, r3, #3
 80057d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	68fa      	ldr	r2, [r7, #12]
 80057de:	4313      	orrs	r3, r2
 80057e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80057e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	021b      	lsls	r3, r3, #8
 80057f0:	697a      	ldr	r2, [r7, #20]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4a1d      	ldr	r2, [pc, #116]	; (8005870 <TIM_OC3_SetConfig+0xd0>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d10d      	bne.n	800581a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005804:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	021b      	lsls	r3, r3, #8
 800580c:	697a      	ldr	r2, [r7, #20]
 800580e:	4313      	orrs	r3, r2
 8005810:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005818:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4a14      	ldr	r2, [pc, #80]	; (8005870 <TIM_OC3_SetConfig+0xd0>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d113      	bne.n	800584a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005828:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005830:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	695b      	ldr	r3, [r3, #20]
 8005836:	011b      	lsls	r3, r3, #4
 8005838:	693a      	ldr	r2, [r7, #16]
 800583a:	4313      	orrs	r3, r2
 800583c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	699b      	ldr	r3, [r3, #24]
 8005842:	011b      	lsls	r3, r3, #4
 8005844:	693a      	ldr	r2, [r7, #16]
 8005846:	4313      	orrs	r3, r2
 8005848:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	693a      	ldr	r2, [r7, #16]
 800584e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	68fa      	ldr	r2, [r7, #12]
 8005854:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	685a      	ldr	r2, [r3, #4]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	697a      	ldr	r2, [r7, #20]
 8005862:	621a      	str	r2, [r3, #32]
}
 8005864:	bf00      	nop
 8005866:	371c      	adds	r7, #28
 8005868:	46bd      	mov	sp, r7
 800586a:	bc80      	pop	{r7}
 800586c:	4770      	bx	lr
 800586e:	bf00      	nop
 8005870:	40012c00 	.word	0x40012c00

08005874 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005874:	b480      	push	{r7}
 8005876:	b087      	sub	sp, #28
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a1b      	ldr	r3, [r3, #32]
 8005882:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6a1b      	ldr	r3, [r3, #32]
 8005888:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	69db      	ldr	r3, [r3, #28]
 800589a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	021b      	lsls	r3, r3, #8
 80058b2:	68fa      	ldr	r2, [r7, #12]
 80058b4:	4313      	orrs	r3, r2
 80058b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80058be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	031b      	lsls	r3, r3, #12
 80058c6:	693a      	ldr	r2, [r7, #16]
 80058c8:	4313      	orrs	r3, r2
 80058ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	4a0f      	ldr	r2, [pc, #60]	; (800590c <TIM_OC4_SetConfig+0x98>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d109      	bne.n	80058e8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	695b      	ldr	r3, [r3, #20]
 80058e0:	019b      	lsls	r3, r3, #6
 80058e2:	697a      	ldr	r2, [r7, #20]
 80058e4:	4313      	orrs	r3, r2
 80058e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	697a      	ldr	r2, [r7, #20]
 80058ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	68fa      	ldr	r2, [r7, #12]
 80058f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	685a      	ldr	r2, [r3, #4]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	693a      	ldr	r2, [r7, #16]
 8005900:	621a      	str	r2, [r3, #32]
}
 8005902:	bf00      	nop
 8005904:	371c      	adds	r7, #28
 8005906:	46bd      	mov	sp, r7
 8005908:	bc80      	pop	{r7}
 800590a:	4770      	bx	lr
 800590c:	40012c00 	.word	0x40012c00

08005910 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005910:	b480      	push	{r7}
 8005912:	b087      	sub	sp, #28
 8005914:	af00      	add	r7, sp, #0
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	60b9      	str	r1, [r7, #8]
 800591a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	6a1b      	ldr	r3, [r3, #32]
 8005920:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	6a1b      	ldr	r3, [r3, #32]
 8005926:	f023 0201 	bic.w	r2, r3, #1
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	699b      	ldr	r3, [r3, #24]
 8005932:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800593a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	011b      	lsls	r3, r3, #4
 8005940:	693a      	ldr	r2, [r7, #16]
 8005942:	4313      	orrs	r3, r2
 8005944:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	f023 030a 	bic.w	r3, r3, #10
 800594c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800594e:	697a      	ldr	r2, [r7, #20]
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	4313      	orrs	r3, r2
 8005954:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	693a      	ldr	r2, [r7, #16]
 800595a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	697a      	ldr	r2, [r7, #20]
 8005960:	621a      	str	r2, [r3, #32]
}
 8005962:	bf00      	nop
 8005964:	371c      	adds	r7, #28
 8005966:	46bd      	mov	sp, r7
 8005968:	bc80      	pop	{r7}
 800596a:	4770      	bx	lr

0800596c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800596c:	b480      	push	{r7}
 800596e:	b087      	sub	sp, #28
 8005970:	af00      	add	r7, sp, #0
 8005972:	60f8      	str	r0, [r7, #12]
 8005974:	60b9      	str	r1, [r7, #8]
 8005976:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	6a1b      	ldr	r3, [r3, #32]
 800597c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	6a1b      	ldr	r3, [r3, #32]
 8005982:	f023 0210 	bic.w	r2, r3, #16
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	699b      	ldr	r3, [r3, #24]
 800598e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005996:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	031b      	lsls	r3, r3, #12
 800599c:	693a      	ldr	r2, [r7, #16]
 800599e:	4313      	orrs	r3, r2
 80059a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80059a8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	011b      	lsls	r3, r3, #4
 80059ae:	697a      	ldr	r2, [r7, #20]
 80059b0:	4313      	orrs	r3, r2
 80059b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	693a      	ldr	r2, [r7, #16]
 80059b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	697a      	ldr	r2, [r7, #20]
 80059be:	621a      	str	r2, [r3, #32]
}
 80059c0:	bf00      	nop
 80059c2:	371c      	adds	r7, #28
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bc80      	pop	{r7}
 80059c8:	4770      	bx	lr

080059ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80059ca:	b480      	push	{r7}
 80059cc:	b085      	sub	sp, #20
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	6078      	str	r0, [r7, #4]
 80059d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80059e2:	683a      	ldr	r2, [r7, #0]
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	f043 0307 	orr.w	r3, r3, #7
 80059ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	68fa      	ldr	r2, [r7, #12]
 80059f2:	609a      	str	r2, [r3, #8]
}
 80059f4:	bf00      	nop
 80059f6:	3714      	adds	r7, #20
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bc80      	pop	{r7}
 80059fc:	4770      	bx	lr

080059fe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80059fe:	b480      	push	{r7}
 8005a00:	b087      	sub	sp, #28
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	60f8      	str	r0, [r7, #12]
 8005a06:	60b9      	str	r1, [r7, #8]
 8005a08:	607a      	str	r2, [r7, #4]
 8005a0a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a18:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	021a      	lsls	r2, r3, #8
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	431a      	orrs	r2, r3
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	4313      	orrs	r3, r2
 8005a26:	697a      	ldr	r2, [r7, #20]
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	697a      	ldr	r2, [r7, #20]
 8005a30:	609a      	str	r2, [r3, #8]
}
 8005a32:	bf00      	nop
 8005a34:	371c      	adds	r7, #28
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bc80      	pop	{r7}
 8005a3a:	4770      	bx	lr

08005a3c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b087      	sub	sp, #28
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	60f8      	str	r0, [r7, #12]
 8005a44:	60b9      	str	r1, [r7, #8]
 8005a46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	f003 031f 	and.w	r3, r3, #31
 8005a4e:	2201      	movs	r2, #1
 8005a50:	fa02 f303 	lsl.w	r3, r2, r3
 8005a54:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	6a1a      	ldr	r2, [r3, #32]
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	43db      	mvns	r3, r3
 8005a5e:	401a      	ands	r2, r3
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	6a1a      	ldr	r2, [r3, #32]
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	f003 031f 	and.w	r3, r3, #31
 8005a6e:	6879      	ldr	r1, [r7, #4]
 8005a70:	fa01 f303 	lsl.w	r3, r1, r3
 8005a74:	431a      	orrs	r2, r3
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	621a      	str	r2, [r3, #32]
}
 8005a7a:	bf00      	nop
 8005a7c:	371c      	adds	r7, #28
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bc80      	pop	{r7}
 8005a82:	4770      	bx	lr

08005a84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b085      	sub	sp, #20
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d101      	bne.n	8005a9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a98:	2302      	movs	r3, #2
 8005a9a:	e046      	b.n	8005b2a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2202      	movs	r2, #2
 8005aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ac2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	68fa      	ldr	r2, [r7, #12]
 8005aca:	4313      	orrs	r3, r2
 8005acc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	68fa      	ldr	r2, [r7, #12]
 8005ad4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a16      	ldr	r2, [pc, #88]	; (8005b34 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d00e      	beq.n	8005afe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ae8:	d009      	beq.n	8005afe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a12      	ldr	r2, [pc, #72]	; (8005b38 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d004      	beq.n	8005afe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a10      	ldr	r2, [pc, #64]	; (8005b3c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d10c      	bne.n	8005b18 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	68ba      	ldr	r2, [r7, #8]
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	68ba      	ldr	r2, [r7, #8]
 8005b16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2200      	movs	r2, #0
 8005b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b28:	2300      	movs	r3, #0
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3714      	adds	r7, #20
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bc80      	pop	{r7}
 8005b32:	4770      	bx	lr
 8005b34:	40012c00 	.word	0x40012c00
 8005b38:	40000400 	.word	0x40000400
 8005b3c:	40000800 	.word	0x40000800

08005b40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b083      	sub	sp, #12
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b48:	bf00      	nop
 8005b4a:	370c      	adds	r7, #12
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bc80      	pop	{r7}
 8005b50:	4770      	bx	lr

08005b52 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b52:	b480      	push	{r7}
 8005b54:	b083      	sub	sp, #12
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b5a:	bf00      	nop
 8005b5c:	370c      	adds	r7, #12
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bc80      	pop	{r7}
 8005b62:	4770      	bx	lr

08005b64 <memset>:
 8005b64:	4603      	mov	r3, r0
 8005b66:	4402      	add	r2, r0
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d100      	bne.n	8005b6e <memset+0xa>
 8005b6c:	4770      	bx	lr
 8005b6e:	f803 1b01 	strb.w	r1, [r3], #1
 8005b72:	e7f9      	b.n	8005b68 <memset+0x4>

08005b74 <__errno>:
 8005b74:	4b01      	ldr	r3, [pc, #4]	; (8005b7c <__errno+0x8>)
 8005b76:	6818      	ldr	r0, [r3, #0]
 8005b78:	4770      	bx	lr
 8005b7a:	bf00      	nop
 8005b7c:	2000006c 	.word	0x2000006c

08005b80 <__libc_init_array>:
 8005b80:	b570      	push	{r4, r5, r6, lr}
 8005b82:	2600      	movs	r6, #0
 8005b84:	4d0c      	ldr	r5, [pc, #48]	; (8005bb8 <__libc_init_array+0x38>)
 8005b86:	4c0d      	ldr	r4, [pc, #52]	; (8005bbc <__libc_init_array+0x3c>)
 8005b88:	1b64      	subs	r4, r4, r5
 8005b8a:	10a4      	asrs	r4, r4, #2
 8005b8c:	42a6      	cmp	r6, r4
 8005b8e:	d109      	bne.n	8005ba4 <__libc_init_array+0x24>
 8005b90:	f001 fe6a 	bl	8007868 <_init>
 8005b94:	2600      	movs	r6, #0
 8005b96:	4d0a      	ldr	r5, [pc, #40]	; (8005bc0 <__libc_init_array+0x40>)
 8005b98:	4c0a      	ldr	r4, [pc, #40]	; (8005bc4 <__libc_init_array+0x44>)
 8005b9a:	1b64      	subs	r4, r4, r5
 8005b9c:	10a4      	asrs	r4, r4, #2
 8005b9e:	42a6      	cmp	r6, r4
 8005ba0:	d105      	bne.n	8005bae <__libc_init_array+0x2e>
 8005ba2:	bd70      	pop	{r4, r5, r6, pc}
 8005ba4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ba8:	4798      	blx	r3
 8005baa:	3601      	adds	r6, #1
 8005bac:	e7ee      	b.n	8005b8c <__libc_init_array+0xc>
 8005bae:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bb2:	4798      	blx	r3
 8005bb4:	3601      	adds	r6, #1
 8005bb6:	e7f2      	b.n	8005b9e <__libc_init_array+0x1e>
 8005bb8:	08007910 	.word	0x08007910
 8005bbc:	08007910 	.word	0x08007910
 8005bc0:	08007910 	.word	0x08007910
 8005bc4:	08007914 	.word	0x08007914

08005bc8 <pow>:
 8005bc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bcc:	4614      	mov	r4, r2
 8005bce:	461d      	mov	r5, r3
 8005bd0:	4680      	mov	r8, r0
 8005bd2:	4689      	mov	r9, r1
 8005bd4:	f000 fa7c 	bl	80060d0 <__ieee754_pow>
 8005bd8:	4622      	mov	r2, r4
 8005bda:	4606      	mov	r6, r0
 8005bdc:	460f      	mov	r7, r1
 8005bde:	462b      	mov	r3, r5
 8005be0:	4620      	mov	r0, r4
 8005be2:	4629      	mov	r1, r5
 8005be4:	f7fa ff0a 	bl	80009fc <__aeabi_dcmpun>
 8005be8:	bbc8      	cbnz	r0, 8005c5e <pow+0x96>
 8005bea:	2200      	movs	r2, #0
 8005bec:	2300      	movs	r3, #0
 8005bee:	4640      	mov	r0, r8
 8005bf0:	4649      	mov	r1, r9
 8005bf2:	f7fa fed1 	bl	8000998 <__aeabi_dcmpeq>
 8005bf6:	b1b8      	cbz	r0, 8005c28 <pow+0x60>
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	4620      	mov	r0, r4
 8005bfe:	4629      	mov	r1, r5
 8005c00:	f7fa feca 	bl	8000998 <__aeabi_dcmpeq>
 8005c04:	2800      	cmp	r0, #0
 8005c06:	d141      	bne.n	8005c8c <pow+0xc4>
 8005c08:	4620      	mov	r0, r4
 8005c0a:	4629      	mov	r1, r5
 8005c0c:	f000 f9db 	bl	8005fc6 <finite>
 8005c10:	b328      	cbz	r0, 8005c5e <pow+0x96>
 8005c12:	2200      	movs	r2, #0
 8005c14:	2300      	movs	r3, #0
 8005c16:	4620      	mov	r0, r4
 8005c18:	4629      	mov	r1, r5
 8005c1a:	f7fa fec7 	bl	80009ac <__aeabi_dcmplt>
 8005c1e:	b1f0      	cbz	r0, 8005c5e <pow+0x96>
 8005c20:	f7ff ffa8 	bl	8005b74 <__errno>
 8005c24:	2322      	movs	r3, #34	; 0x22
 8005c26:	e019      	b.n	8005c5c <pow+0x94>
 8005c28:	4630      	mov	r0, r6
 8005c2a:	4639      	mov	r1, r7
 8005c2c:	f000 f9cb 	bl	8005fc6 <finite>
 8005c30:	b9c8      	cbnz	r0, 8005c66 <pow+0x9e>
 8005c32:	4640      	mov	r0, r8
 8005c34:	4649      	mov	r1, r9
 8005c36:	f000 f9c6 	bl	8005fc6 <finite>
 8005c3a:	b1a0      	cbz	r0, 8005c66 <pow+0x9e>
 8005c3c:	4620      	mov	r0, r4
 8005c3e:	4629      	mov	r1, r5
 8005c40:	f000 f9c1 	bl	8005fc6 <finite>
 8005c44:	b178      	cbz	r0, 8005c66 <pow+0x9e>
 8005c46:	4632      	mov	r2, r6
 8005c48:	463b      	mov	r3, r7
 8005c4a:	4630      	mov	r0, r6
 8005c4c:	4639      	mov	r1, r7
 8005c4e:	f7fa fed5 	bl	80009fc <__aeabi_dcmpun>
 8005c52:	2800      	cmp	r0, #0
 8005c54:	d0e4      	beq.n	8005c20 <pow+0x58>
 8005c56:	f7ff ff8d 	bl	8005b74 <__errno>
 8005c5a:	2321      	movs	r3, #33	; 0x21
 8005c5c:	6003      	str	r3, [r0, #0]
 8005c5e:	4630      	mov	r0, r6
 8005c60:	4639      	mov	r1, r7
 8005c62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c66:	2200      	movs	r2, #0
 8005c68:	2300      	movs	r3, #0
 8005c6a:	4630      	mov	r0, r6
 8005c6c:	4639      	mov	r1, r7
 8005c6e:	f7fa fe93 	bl	8000998 <__aeabi_dcmpeq>
 8005c72:	2800      	cmp	r0, #0
 8005c74:	d0f3      	beq.n	8005c5e <pow+0x96>
 8005c76:	4640      	mov	r0, r8
 8005c78:	4649      	mov	r1, r9
 8005c7a:	f000 f9a4 	bl	8005fc6 <finite>
 8005c7e:	2800      	cmp	r0, #0
 8005c80:	d0ed      	beq.n	8005c5e <pow+0x96>
 8005c82:	4620      	mov	r0, r4
 8005c84:	4629      	mov	r1, r5
 8005c86:	f000 f99e 	bl	8005fc6 <finite>
 8005c8a:	e7c8      	b.n	8005c1e <pow+0x56>
 8005c8c:	2600      	movs	r6, #0
 8005c8e:	4f01      	ldr	r7, [pc, #4]	; (8005c94 <pow+0xcc>)
 8005c90:	e7e5      	b.n	8005c5e <pow+0x96>
 8005c92:	bf00      	nop
 8005c94:	3ff00000 	.word	0x3ff00000

08005c98 <acosf>:
 8005c98:	b538      	push	{r3, r4, r5, lr}
 8005c9a:	4604      	mov	r4, r0
 8005c9c:	f000 ff32 	bl	8006b04 <__ieee754_acosf>
 8005ca0:	4621      	mov	r1, r4
 8005ca2:	4605      	mov	r5, r0
 8005ca4:	4620      	mov	r0, r4
 8005ca6:	f7fb fa03 	bl	80010b0 <__aeabi_fcmpun>
 8005caa:	b980      	cbnz	r0, 8005cce <acosf+0x36>
 8005cac:	4620      	mov	r0, r4
 8005cae:	f000 f987 	bl	8005fc0 <fabsf>
 8005cb2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005cb6:	f7fb f9f1 	bl	800109c <__aeabi_fcmpgt>
 8005cba:	b140      	cbz	r0, 8005cce <acosf+0x36>
 8005cbc:	f7ff ff5a 	bl	8005b74 <__errno>
 8005cc0:	2321      	movs	r3, #33	; 0x21
 8005cc2:	6003      	str	r3, [r0, #0]
 8005cc4:	4803      	ldr	r0, [pc, #12]	; (8005cd4 <acosf+0x3c>)
 8005cc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005cca:	f000 b98b 	b.w	8005fe4 <nanf>
 8005cce:	4628      	mov	r0, r5
 8005cd0:	bd38      	pop	{r3, r4, r5, pc}
 8005cd2:	bf00      	nop
 8005cd4:	080078a2 	.word	0x080078a2

08005cd8 <powf>:
 8005cd8:	b570      	push	{r4, r5, r6, lr}
 8005cda:	460c      	mov	r4, r1
 8005cdc:	4606      	mov	r6, r0
 8005cde:	f001 f873 	bl	8006dc8 <__ieee754_powf>
 8005ce2:	4621      	mov	r1, r4
 8005ce4:	4605      	mov	r5, r0
 8005ce6:	4620      	mov	r0, r4
 8005ce8:	f7fb f9e2 	bl	80010b0 <__aeabi_fcmpun>
 8005cec:	bb68      	cbnz	r0, 8005d4a <powf+0x72>
 8005cee:	2100      	movs	r1, #0
 8005cf0:	4630      	mov	r0, r6
 8005cf2:	f7fb f9ab 	bl	800104c <__aeabi_fcmpeq>
 8005cf6:	b190      	cbz	r0, 8005d1e <powf+0x46>
 8005cf8:	2100      	movs	r1, #0
 8005cfa:	4620      	mov	r0, r4
 8005cfc:	f7fb f9a6 	bl	800104c <__aeabi_fcmpeq>
 8005d00:	2800      	cmp	r0, #0
 8005d02:	d133      	bne.n	8005d6c <powf+0x94>
 8005d04:	4620      	mov	r0, r4
 8005d06:	f000 f964 	bl	8005fd2 <finitef>
 8005d0a:	b1f0      	cbz	r0, 8005d4a <powf+0x72>
 8005d0c:	2100      	movs	r1, #0
 8005d0e:	4620      	mov	r0, r4
 8005d10:	f7fb f9a6 	bl	8001060 <__aeabi_fcmplt>
 8005d14:	b1c8      	cbz	r0, 8005d4a <powf+0x72>
 8005d16:	f7ff ff2d 	bl	8005b74 <__errno>
 8005d1a:	2322      	movs	r3, #34	; 0x22
 8005d1c:	e014      	b.n	8005d48 <powf+0x70>
 8005d1e:	4628      	mov	r0, r5
 8005d20:	f000 f957 	bl	8005fd2 <finitef>
 8005d24:	b998      	cbnz	r0, 8005d4e <powf+0x76>
 8005d26:	4630      	mov	r0, r6
 8005d28:	f000 f953 	bl	8005fd2 <finitef>
 8005d2c:	b178      	cbz	r0, 8005d4e <powf+0x76>
 8005d2e:	4620      	mov	r0, r4
 8005d30:	f000 f94f 	bl	8005fd2 <finitef>
 8005d34:	b158      	cbz	r0, 8005d4e <powf+0x76>
 8005d36:	4629      	mov	r1, r5
 8005d38:	4628      	mov	r0, r5
 8005d3a:	f7fb f9b9 	bl	80010b0 <__aeabi_fcmpun>
 8005d3e:	2800      	cmp	r0, #0
 8005d40:	d0e9      	beq.n	8005d16 <powf+0x3e>
 8005d42:	f7ff ff17 	bl	8005b74 <__errno>
 8005d46:	2321      	movs	r3, #33	; 0x21
 8005d48:	6003      	str	r3, [r0, #0]
 8005d4a:	4628      	mov	r0, r5
 8005d4c:	bd70      	pop	{r4, r5, r6, pc}
 8005d4e:	2100      	movs	r1, #0
 8005d50:	4628      	mov	r0, r5
 8005d52:	f7fb f97b 	bl	800104c <__aeabi_fcmpeq>
 8005d56:	2800      	cmp	r0, #0
 8005d58:	d0f7      	beq.n	8005d4a <powf+0x72>
 8005d5a:	4630      	mov	r0, r6
 8005d5c:	f000 f939 	bl	8005fd2 <finitef>
 8005d60:	2800      	cmp	r0, #0
 8005d62:	d0f2      	beq.n	8005d4a <powf+0x72>
 8005d64:	4620      	mov	r0, r4
 8005d66:	f000 f934 	bl	8005fd2 <finitef>
 8005d6a:	e7d3      	b.n	8005d14 <powf+0x3c>
 8005d6c:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
 8005d70:	e7eb      	b.n	8005d4a <powf+0x72>

08005d72 <sqrtf>:
 8005d72:	b538      	push	{r3, r4, r5, lr}
 8005d74:	4605      	mov	r5, r0
 8005d76:	f000 f939 	bl	8005fec <__ieee754_sqrtf>
 8005d7a:	4629      	mov	r1, r5
 8005d7c:	4604      	mov	r4, r0
 8005d7e:	4628      	mov	r0, r5
 8005d80:	f7fb f996 	bl	80010b0 <__aeabi_fcmpun>
 8005d84:	b968      	cbnz	r0, 8005da2 <sqrtf+0x30>
 8005d86:	2100      	movs	r1, #0
 8005d88:	4628      	mov	r0, r5
 8005d8a:	f7fb f969 	bl	8001060 <__aeabi_fcmplt>
 8005d8e:	b140      	cbz	r0, 8005da2 <sqrtf+0x30>
 8005d90:	f7ff fef0 	bl	8005b74 <__errno>
 8005d94:	2321      	movs	r3, #33	; 0x21
 8005d96:	2100      	movs	r1, #0
 8005d98:	6003      	str	r3, [r0, #0]
 8005d9a:	4608      	mov	r0, r1
 8005d9c:	f7fb f876 	bl	8000e8c <__aeabi_fdiv>
 8005da0:	4604      	mov	r4, r0
 8005da2:	4620      	mov	r0, r4
 8005da4:	bd38      	pop	{r3, r4, r5, pc}
	...

08005da8 <atanf>:
 8005da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dac:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 8005db0:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 8005db4:	4604      	mov	r4, r0
 8005db6:	4680      	mov	r8, r0
 8005db8:	db0e      	blt.n	8005dd8 <atanf+0x30>
 8005dba:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8005dbe:	dd04      	ble.n	8005dca <atanf+0x22>
 8005dc0:	4601      	mov	r1, r0
 8005dc2:	f7fa fea7 	bl	8000b14 <__addsf3>
 8005dc6:	4604      	mov	r4, r0
 8005dc8:	e003      	b.n	8005dd2 <atanf+0x2a>
 8005dca:	2800      	cmp	r0, #0
 8005dcc:	f300 80ce 	bgt.w	8005f6c <atanf+0x1c4>
 8005dd0:	4c67      	ldr	r4, [pc, #412]	; (8005f70 <atanf+0x1c8>)
 8005dd2:	4620      	mov	r0, r4
 8005dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005dd8:	4b66      	ldr	r3, [pc, #408]	; (8005f74 <atanf+0x1cc>)
 8005dda:	429d      	cmp	r5, r3
 8005ddc:	dc0e      	bgt.n	8005dfc <atanf+0x54>
 8005dde:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 8005de2:	da08      	bge.n	8005df6 <atanf+0x4e>
 8005de4:	4964      	ldr	r1, [pc, #400]	; (8005f78 <atanf+0x1d0>)
 8005de6:	f7fa fe95 	bl	8000b14 <__addsf3>
 8005dea:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005dee:	f7fb f955 	bl	800109c <__aeabi_fcmpgt>
 8005df2:	2800      	cmp	r0, #0
 8005df4:	d1ed      	bne.n	8005dd2 <atanf+0x2a>
 8005df6:	f04f 36ff 	mov.w	r6, #4294967295
 8005dfa:	e01c      	b.n	8005e36 <atanf+0x8e>
 8005dfc:	f000 f8e0 	bl	8005fc0 <fabsf>
 8005e00:	4b5e      	ldr	r3, [pc, #376]	; (8005f7c <atanf+0x1d4>)
 8005e02:	4604      	mov	r4, r0
 8005e04:	429d      	cmp	r5, r3
 8005e06:	dc7c      	bgt.n	8005f02 <atanf+0x15a>
 8005e08:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8005e0c:	429d      	cmp	r5, r3
 8005e0e:	dc67      	bgt.n	8005ee0 <atanf+0x138>
 8005e10:	4601      	mov	r1, r0
 8005e12:	f7fa fe7f 	bl	8000b14 <__addsf3>
 8005e16:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005e1a:	f7fa fe79 	bl	8000b10 <__aeabi_fsub>
 8005e1e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005e22:	4605      	mov	r5, r0
 8005e24:	4620      	mov	r0, r4
 8005e26:	f7fa fe75 	bl	8000b14 <__addsf3>
 8005e2a:	4601      	mov	r1, r0
 8005e2c:	4628      	mov	r0, r5
 8005e2e:	f7fb f82d 	bl	8000e8c <__aeabi_fdiv>
 8005e32:	2600      	movs	r6, #0
 8005e34:	4604      	mov	r4, r0
 8005e36:	4621      	mov	r1, r4
 8005e38:	4620      	mov	r0, r4
 8005e3a:	f7fa ff73 	bl	8000d24 <__aeabi_fmul>
 8005e3e:	4601      	mov	r1, r0
 8005e40:	4607      	mov	r7, r0
 8005e42:	f7fa ff6f 	bl	8000d24 <__aeabi_fmul>
 8005e46:	4605      	mov	r5, r0
 8005e48:	494d      	ldr	r1, [pc, #308]	; (8005f80 <atanf+0x1d8>)
 8005e4a:	f7fa ff6b 	bl	8000d24 <__aeabi_fmul>
 8005e4e:	494d      	ldr	r1, [pc, #308]	; (8005f84 <atanf+0x1dc>)
 8005e50:	f7fa fe60 	bl	8000b14 <__addsf3>
 8005e54:	4629      	mov	r1, r5
 8005e56:	f7fa ff65 	bl	8000d24 <__aeabi_fmul>
 8005e5a:	494b      	ldr	r1, [pc, #300]	; (8005f88 <atanf+0x1e0>)
 8005e5c:	f7fa fe5a 	bl	8000b14 <__addsf3>
 8005e60:	4629      	mov	r1, r5
 8005e62:	f7fa ff5f 	bl	8000d24 <__aeabi_fmul>
 8005e66:	4949      	ldr	r1, [pc, #292]	; (8005f8c <atanf+0x1e4>)
 8005e68:	f7fa fe54 	bl	8000b14 <__addsf3>
 8005e6c:	4629      	mov	r1, r5
 8005e6e:	f7fa ff59 	bl	8000d24 <__aeabi_fmul>
 8005e72:	4947      	ldr	r1, [pc, #284]	; (8005f90 <atanf+0x1e8>)
 8005e74:	f7fa fe4e 	bl	8000b14 <__addsf3>
 8005e78:	4629      	mov	r1, r5
 8005e7a:	f7fa ff53 	bl	8000d24 <__aeabi_fmul>
 8005e7e:	4945      	ldr	r1, [pc, #276]	; (8005f94 <atanf+0x1ec>)
 8005e80:	f7fa fe48 	bl	8000b14 <__addsf3>
 8005e84:	4639      	mov	r1, r7
 8005e86:	f7fa ff4d 	bl	8000d24 <__aeabi_fmul>
 8005e8a:	4943      	ldr	r1, [pc, #268]	; (8005f98 <atanf+0x1f0>)
 8005e8c:	4607      	mov	r7, r0
 8005e8e:	4628      	mov	r0, r5
 8005e90:	f7fa ff48 	bl	8000d24 <__aeabi_fmul>
 8005e94:	4941      	ldr	r1, [pc, #260]	; (8005f9c <atanf+0x1f4>)
 8005e96:	f7fa fe3b 	bl	8000b10 <__aeabi_fsub>
 8005e9a:	4629      	mov	r1, r5
 8005e9c:	f7fa ff42 	bl	8000d24 <__aeabi_fmul>
 8005ea0:	493f      	ldr	r1, [pc, #252]	; (8005fa0 <atanf+0x1f8>)
 8005ea2:	f7fa fe35 	bl	8000b10 <__aeabi_fsub>
 8005ea6:	4629      	mov	r1, r5
 8005ea8:	f7fa ff3c 	bl	8000d24 <__aeabi_fmul>
 8005eac:	493d      	ldr	r1, [pc, #244]	; (8005fa4 <atanf+0x1fc>)
 8005eae:	f7fa fe2f 	bl	8000b10 <__aeabi_fsub>
 8005eb2:	4629      	mov	r1, r5
 8005eb4:	f7fa ff36 	bl	8000d24 <__aeabi_fmul>
 8005eb8:	493b      	ldr	r1, [pc, #236]	; (8005fa8 <atanf+0x200>)
 8005eba:	f7fa fe29 	bl	8000b10 <__aeabi_fsub>
 8005ebe:	4629      	mov	r1, r5
 8005ec0:	f7fa ff30 	bl	8000d24 <__aeabi_fmul>
 8005ec4:	4601      	mov	r1, r0
 8005ec6:	4638      	mov	r0, r7
 8005ec8:	f7fa fe24 	bl	8000b14 <__addsf3>
 8005ecc:	4621      	mov	r1, r4
 8005ece:	f7fa ff29 	bl	8000d24 <__aeabi_fmul>
 8005ed2:	1c73      	adds	r3, r6, #1
 8005ed4:	4601      	mov	r1, r0
 8005ed6:	d133      	bne.n	8005f40 <atanf+0x198>
 8005ed8:	4620      	mov	r0, r4
 8005eda:	f7fa fe19 	bl	8000b10 <__aeabi_fsub>
 8005ede:	e772      	b.n	8005dc6 <atanf+0x1e>
 8005ee0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005ee4:	f7fa fe14 	bl	8000b10 <__aeabi_fsub>
 8005ee8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005eec:	4605      	mov	r5, r0
 8005eee:	4620      	mov	r0, r4
 8005ef0:	f7fa fe10 	bl	8000b14 <__addsf3>
 8005ef4:	4601      	mov	r1, r0
 8005ef6:	4628      	mov	r0, r5
 8005ef8:	f7fa ffc8 	bl	8000e8c <__aeabi_fdiv>
 8005efc:	2601      	movs	r6, #1
 8005efe:	4604      	mov	r4, r0
 8005f00:	e799      	b.n	8005e36 <atanf+0x8e>
 8005f02:	4b2a      	ldr	r3, [pc, #168]	; (8005fac <atanf+0x204>)
 8005f04:	429d      	cmp	r5, r3
 8005f06:	dc14      	bgt.n	8005f32 <atanf+0x18a>
 8005f08:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8005f0c:	f7fa fe00 	bl	8000b10 <__aeabi_fsub>
 8005f10:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8005f14:	4605      	mov	r5, r0
 8005f16:	4620      	mov	r0, r4
 8005f18:	f7fa ff04 	bl	8000d24 <__aeabi_fmul>
 8005f1c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005f20:	f7fa fdf8 	bl	8000b14 <__addsf3>
 8005f24:	4601      	mov	r1, r0
 8005f26:	4628      	mov	r0, r5
 8005f28:	f7fa ffb0 	bl	8000e8c <__aeabi_fdiv>
 8005f2c:	2602      	movs	r6, #2
 8005f2e:	4604      	mov	r4, r0
 8005f30:	e781      	b.n	8005e36 <atanf+0x8e>
 8005f32:	4601      	mov	r1, r0
 8005f34:	481e      	ldr	r0, [pc, #120]	; (8005fb0 <atanf+0x208>)
 8005f36:	f7fa ffa9 	bl	8000e8c <__aeabi_fdiv>
 8005f3a:	2603      	movs	r6, #3
 8005f3c:	4604      	mov	r4, r0
 8005f3e:	e77a      	b.n	8005e36 <atanf+0x8e>
 8005f40:	4b1c      	ldr	r3, [pc, #112]	; (8005fb4 <atanf+0x20c>)
 8005f42:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 8005f46:	f7fa fde3 	bl	8000b10 <__aeabi_fsub>
 8005f4a:	4621      	mov	r1, r4
 8005f4c:	f7fa fde0 	bl	8000b10 <__aeabi_fsub>
 8005f50:	4b19      	ldr	r3, [pc, #100]	; (8005fb8 <atanf+0x210>)
 8005f52:	4601      	mov	r1, r0
 8005f54:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005f58:	f7fa fdda 	bl	8000b10 <__aeabi_fsub>
 8005f5c:	f1b8 0f00 	cmp.w	r8, #0
 8005f60:	4604      	mov	r4, r0
 8005f62:	f6bf af36 	bge.w	8005dd2 <atanf+0x2a>
 8005f66:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
 8005f6a:	e732      	b.n	8005dd2 <atanf+0x2a>
 8005f6c:	4c13      	ldr	r4, [pc, #76]	; (8005fbc <atanf+0x214>)
 8005f6e:	e730      	b.n	8005dd2 <atanf+0x2a>
 8005f70:	bfc90fdb 	.word	0xbfc90fdb
 8005f74:	3edfffff 	.word	0x3edfffff
 8005f78:	7149f2ca 	.word	0x7149f2ca
 8005f7c:	3f97ffff 	.word	0x3f97ffff
 8005f80:	3c8569d7 	.word	0x3c8569d7
 8005f84:	3d4bda59 	.word	0x3d4bda59
 8005f88:	3d886b35 	.word	0x3d886b35
 8005f8c:	3dba2e6e 	.word	0x3dba2e6e
 8005f90:	3e124925 	.word	0x3e124925
 8005f94:	3eaaaaab 	.word	0x3eaaaaab
 8005f98:	bd15a221 	.word	0xbd15a221
 8005f9c:	3d6ef16b 	.word	0x3d6ef16b
 8005fa0:	3d9d8795 	.word	0x3d9d8795
 8005fa4:	3de38e38 	.word	0x3de38e38
 8005fa8:	3e4ccccd 	.word	0x3e4ccccd
 8005fac:	401bffff 	.word	0x401bffff
 8005fb0:	bf800000 	.word	0xbf800000
 8005fb4:	080078b4 	.word	0x080078b4
 8005fb8:	080078a4 	.word	0x080078a4
 8005fbc:	3fc90fdb 	.word	0x3fc90fdb

08005fc0 <fabsf>:
 8005fc0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005fc4:	4770      	bx	lr

08005fc6 <finite>:
 8005fc6:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8005fca:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8005fce:	0fc0      	lsrs	r0, r0, #31
 8005fd0:	4770      	bx	lr

08005fd2 <finitef>:
 8005fd2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005fd6:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8005fda:	bfac      	ite	ge
 8005fdc:	2000      	movge	r0, #0
 8005fde:	2001      	movlt	r0, #1
 8005fe0:	4770      	bx	lr
	...

08005fe4 <nanf>:
 8005fe4:	4800      	ldr	r0, [pc, #0]	; (8005fe8 <nanf+0x4>)
 8005fe6:	4770      	bx	lr
 8005fe8:	7fc00000 	.word	0x7fc00000

08005fec <__ieee754_sqrtf>:
 8005fec:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8005ff0:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8005ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	4604      	mov	r4, r0
 8005ffc:	d30a      	bcc.n	8006014 <__ieee754_sqrtf+0x28>
 8005ffe:	4601      	mov	r1, r0
 8006000:	f7fa fe90 	bl	8000d24 <__aeabi_fmul>
 8006004:	4601      	mov	r1, r0
 8006006:	4620      	mov	r0, r4
 8006008:	f7fa fd84 	bl	8000b14 <__addsf3>
 800600c:	4604      	mov	r4, r0
 800600e:	4620      	mov	r0, r4
 8006010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006014:	2a00      	cmp	r2, #0
 8006016:	d0fa      	beq.n	800600e <__ieee754_sqrtf+0x22>
 8006018:	2800      	cmp	r0, #0
 800601a:	da06      	bge.n	800602a <__ieee754_sqrtf+0x3e>
 800601c:	4601      	mov	r1, r0
 800601e:	f7fa fd77 	bl	8000b10 <__aeabi_fsub>
 8006022:	4601      	mov	r1, r0
 8006024:	f7fa ff32 	bl	8000e8c <__aeabi_fdiv>
 8006028:	e7f0      	b.n	800600c <__ieee754_sqrtf+0x20>
 800602a:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 800602e:	ea4f 51e0 	mov.w	r1, r0, asr #23
 8006032:	d03e      	beq.n	80060b2 <__ieee754_sqrtf+0xc6>
 8006034:	2400      	movs	r4, #0
 8006036:	f1a1 057f 	sub.w	r5, r1, #127	; 0x7f
 800603a:	07ca      	lsls	r2, r1, #31
 800603c:	f04f 0019 	mov.w	r0, #25
 8006040:	4626      	mov	r6, r4
 8006042:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8006046:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800604a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800604e:	bf58      	it	pl
 8006050:	005b      	lslpl	r3, r3, #1
 8006052:	106d      	asrs	r5, r5, #1
 8006054:	005b      	lsls	r3, r3, #1
 8006056:	1872      	adds	r2, r6, r1
 8006058:	429a      	cmp	r2, r3
 800605a:	bfcf      	iteee	gt
 800605c:	461a      	movgt	r2, r3
 800605e:	1856      	addle	r6, r2, r1
 8006060:	1864      	addle	r4, r4, r1
 8006062:	1a9a      	suble	r2, r3, r2
 8006064:	3801      	subs	r0, #1
 8006066:	ea4f 0342 	mov.w	r3, r2, lsl #1
 800606a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800606e:	d1f2      	bne.n	8006056 <__ieee754_sqrtf+0x6a>
 8006070:	b1ba      	cbz	r2, 80060a2 <__ieee754_sqrtf+0xb6>
 8006072:	4e14      	ldr	r6, [pc, #80]	; (80060c4 <__ieee754_sqrtf+0xd8>)
 8006074:	4f14      	ldr	r7, [pc, #80]	; (80060c8 <__ieee754_sqrtf+0xdc>)
 8006076:	6830      	ldr	r0, [r6, #0]
 8006078:	6839      	ldr	r1, [r7, #0]
 800607a:	f7fa fd49 	bl	8000b10 <__aeabi_fsub>
 800607e:	f8d6 8000 	ldr.w	r8, [r6]
 8006082:	4601      	mov	r1, r0
 8006084:	4640      	mov	r0, r8
 8006086:	f7fa fff5 	bl	8001074 <__aeabi_fcmple>
 800608a:	b150      	cbz	r0, 80060a2 <__ieee754_sqrtf+0xb6>
 800608c:	6830      	ldr	r0, [r6, #0]
 800608e:	6839      	ldr	r1, [r7, #0]
 8006090:	f7fa fd40 	bl	8000b14 <__addsf3>
 8006094:	6836      	ldr	r6, [r6, #0]
 8006096:	4601      	mov	r1, r0
 8006098:	4630      	mov	r0, r6
 800609a:	f7fa ffe1 	bl	8001060 <__aeabi_fcmplt>
 800609e:	b168      	cbz	r0, 80060bc <__ieee754_sqrtf+0xd0>
 80060a0:	3402      	adds	r4, #2
 80060a2:	1064      	asrs	r4, r4, #1
 80060a4:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 80060a8:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 80060ac:	e7af      	b.n	800600e <__ieee754_sqrtf+0x22>
 80060ae:	005b      	lsls	r3, r3, #1
 80060b0:	3201      	adds	r2, #1
 80060b2:	0218      	lsls	r0, r3, #8
 80060b4:	d5fb      	bpl.n	80060ae <__ieee754_sqrtf+0xc2>
 80060b6:	3a01      	subs	r2, #1
 80060b8:	1a89      	subs	r1, r1, r2
 80060ba:	e7bb      	b.n	8006034 <__ieee754_sqrtf+0x48>
 80060bc:	3401      	adds	r4, #1
 80060be:	f024 0401 	bic.w	r4, r4, #1
 80060c2:	e7ee      	b.n	80060a2 <__ieee754_sqrtf+0xb6>
 80060c4:	20000070 	.word	0x20000070
 80060c8:	20000074 	.word	0x20000074
 80060cc:	00000000 	.word	0x00000000

080060d0 <__ieee754_pow>:
 80060d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060d4:	b093      	sub	sp, #76	; 0x4c
 80060d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80060da:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 80060de:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 80060e2:	4689      	mov	r9, r1
 80060e4:	ea56 0102 	orrs.w	r1, r6, r2
 80060e8:	4680      	mov	r8, r0
 80060ea:	d111      	bne.n	8006110 <__ieee754_pow+0x40>
 80060ec:	1803      	adds	r3, r0, r0
 80060ee:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 80060f2:	4152      	adcs	r2, r2
 80060f4:	4299      	cmp	r1, r3
 80060f6:	4b82      	ldr	r3, [pc, #520]	; (8006300 <__ieee754_pow+0x230>)
 80060f8:	4193      	sbcs	r3, r2
 80060fa:	f080 84ba 	bcs.w	8006a72 <__ieee754_pow+0x9a2>
 80060fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006102:	4640      	mov	r0, r8
 8006104:	4649      	mov	r1, r9
 8006106:	f7fa f829 	bl	800015c <__adddf3>
 800610a:	4683      	mov	fp, r0
 800610c:	468c      	mov	ip, r1
 800610e:	e06f      	b.n	80061f0 <__ieee754_pow+0x120>
 8006110:	4b7c      	ldr	r3, [pc, #496]	; (8006304 <__ieee754_pow+0x234>)
 8006112:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 8006116:	429c      	cmp	r4, r3
 8006118:	464d      	mov	r5, r9
 800611a:	4682      	mov	sl, r0
 800611c:	dc06      	bgt.n	800612c <__ieee754_pow+0x5c>
 800611e:	d101      	bne.n	8006124 <__ieee754_pow+0x54>
 8006120:	2800      	cmp	r0, #0
 8006122:	d1ec      	bne.n	80060fe <__ieee754_pow+0x2e>
 8006124:	429e      	cmp	r6, r3
 8006126:	dc01      	bgt.n	800612c <__ieee754_pow+0x5c>
 8006128:	d10f      	bne.n	800614a <__ieee754_pow+0x7a>
 800612a:	b172      	cbz	r2, 800614a <__ieee754_pow+0x7a>
 800612c:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8006130:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8006134:	ea55 050a 	orrs.w	r5, r5, sl
 8006138:	d1e1      	bne.n	80060fe <__ieee754_pow+0x2e>
 800613a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800613e:	18db      	adds	r3, r3, r3
 8006140:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8006144:	4152      	adcs	r2, r2
 8006146:	429d      	cmp	r5, r3
 8006148:	e7d5      	b.n	80060f6 <__ieee754_pow+0x26>
 800614a:	2d00      	cmp	r5, #0
 800614c:	da39      	bge.n	80061c2 <__ieee754_pow+0xf2>
 800614e:	4b6e      	ldr	r3, [pc, #440]	; (8006308 <__ieee754_pow+0x238>)
 8006150:	429e      	cmp	r6, r3
 8006152:	dc52      	bgt.n	80061fa <__ieee754_pow+0x12a>
 8006154:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8006158:	429e      	cmp	r6, r3
 800615a:	f340 849d 	ble.w	8006a98 <__ieee754_pow+0x9c8>
 800615e:	1533      	asrs	r3, r6, #20
 8006160:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006164:	2b14      	cmp	r3, #20
 8006166:	dd0f      	ble.n	8006188 <__ieee754_pow+0xb8>
 8006168:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800616c:	fa22 f103 	lsr.w	r1, r2, r3
 8006170:	fa01 f303 	lsl.w	r3, r1, r3
 8006174:	4293      	cmp	r3, r2
 8006176:	f040 848f 	bne.w	8006a98 <__ieee754_pow+0x9c8>
 800617a:	f001 0101 	and.w	r1, r1, #1
 800617e:	f1c1 0302 	rsb	r3, r1, #2
 8006182:	9300      	str	r3, [sp, #0]
 8006184:	b182      	cbz	r2, 80061a8 <__ieee754_pow+0xd8>
 8006186:	e05d      	b.n	8006244 <__ieee754_pow+0x174>
 8006188:	2a00      	cmp	r2, #0
 800618a:	d159      	bne.n	8006240 <__ieee754_pow+0x170>
 800618c:	f1c3 0314 	rsb	r3, r3, #20
 8006190:	fa46 f103 	asr.w	r1, r6, r3
 8006194:	fa01 f303 	lsl.w	r3, r1, r3
 8006198:	42b3      	cmp	r3, r6
 800619a:	f040 847a 	bne.w	8006a92 <__ieee754_pow+0x9c2>
 800619e:	f001 0101 	and.w	r1, r1, #1
 80061a2:	f1c1 0302 	rsb	r3, r1, #2
 80061a6:	9300      	str	r3, [sp, #0]
 80061a8:	4b58      	ldr	r3, [pc, #352]	; (800630c <__ieee754_pow+0x23c>)
 80061aa:	429e      	cmp	r6, r3
 80061ac:	d132      	bne.n	8006214 <__ieee754_pow+0x144>
 80061ae:	2f00      	cmp	r7, #0
 80061b0:	f280 846b 	bge.w	8006a8a <__ieee754_pow+0x9ba>
 80061b4:	4642      	mov	r2, r8
 80061b6:	464b      	mov	r3, r9
 80061b8:	2000      	movs	r0, #0
 80061ba:	4954      	ldr	r1, [pc, #336]	; (800630c <__ieee754_pow+0x23c>)
 80061bc:	f7fa faae 	bl	800071c <__aeabi_ddiv>
 80061c0:	e7a3      	b.n	800610a <__ieee754_pow+0x3a>
 80061c2:	2300      	movs	r3, #0
 80061c4:	9300      	str	r3, [sp, #0]
 80061c6:	2a00      	cmp	r2, #0
 80061c8:	d13c      	bne.n	8006244 <__ieee754_pow+0x174>
 80061ca:	4b4e      	ldr	r3, [pc, #312]	; (8006304 <__ieee754_pow+0x234>)
 80061cc:	429e      	cmp	r6, r3
 80061ce:	d1eb      	bne.n	80061a8 <__ieee754_pow+0xd8>
 80061d0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80061d4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80061d8:	ea53 030a 	orrs.w	r3, r3, sl
 80061dc:	f000 8449 	beq.w	8006a72 <__ieee754_pow+0x9a2>
 80061e0:	4b4b      	ldr	r3, [pc, #300]	; (8006310 <__ieee754_pow+0x240>)
 80061e2:	429c      	cmp	r4, r3
 80061e4:	dd0b      	ble.n	80061fe <__ieee754_pow+0x12e>
 80061e6:	2f00      	cmp	r7, #0
 80061e8:	f2c0 8449 	blt.w	8006a7e <__ieee754_pow+0x9ae>
 80061ec:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 80061f0:	4658      	mov	r0, fp
 80061f2:	4661      	mov	r1, ip
 80061f4:	b013      	add	sp, #76	; 0x4c
 80061f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061fa:	2302      	movs	r3, #2
 80061fc:	e7e2      	b.n	80061c4 <__ieee754_pow+0xf4>
 80061fe:	2f00      	cmp	r7, #0
 8006200:	f04f 0b00 	mov.w	fp, #0
 8006204:	f04f 0c00 	mov.w	ip, #0
 8006208:	daf2      	bge.n	80061f0 <__ieee754_pow+0x120>
 800620a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800620e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8006212:	e7ed      	b.n	80061f0 <__ieee754_pow+0x120>
 8006214:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8006218:	d106      	bne.n	8006228 <__ieee754_pow+0x158>
 800621a:	4642      	mov	r2, r8
 800621c:	464b      	mov	r3, r9
 800621e:	4640      	mov	r0, r8
 8006220:	4649      	mov	r1, r9
 8006222:	f7fa f951 	bl	80004c8 <__aeabi_dmul>
 8006226:	e770      	b.n	800610a <__ieee754_pow+0x3a>
 8006228:	4b3a      	ldr	r3, [pc, #232]	; (8006314 <__ieee754_pow+0x244>)
 800622a:	429f      	cmp	r7, r3
 800622c:	d10a      	bne.n	8006244 <__ieee754_pow+0x174>
 800622e:	2d00      	cmp	r5, #0
 8006230:	db08      	blt.n	8006244 <__ieee754_pow+0x174>
 8006232:	4640      	mov	r0, r8
 8006234:	4649      	mov	r1, r9
 8006236:	b013      	add	sp, #76	; 0x4c
 8006238:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800623c:	f001 ba3c 	b.w	80076b8 <__ieee754_sqrt>
 8006240:	2300      	movs	r3, #0
 8006242:	9300      	str	r3, [sp, #0]
 8006244:	4640      	mov	r0, r8
 8006246:	4649      	mov	r1, r9
 8006248:	f000 fc58 	bl	8006afc <fabs>
 800624c:	4683      	mov	fp, r0
 800624e:	468c      	mov	ip, r1
 8006250:	f1ba 0f00 	cmp.w	sl, #0
 8006254:	d128      	bne.n	80062a8 <__ieee754_pow+0x1d8>
 8006256:	b124      	cbz	r4, 8006262 <__ieee754_pow+0x192>
 8006258:	4b2c      	ldr	r3, [pc, #176]	; (800630c <__ieee754_pow+0x23c>)
 800625a:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800625e:	429a      	cmp	r2, r3
 8006260:	d122      	bne.n	80062a8 <__ieee754_pow+0x1d8>
 8006262:	2f00      	cmp	r7, #0
 8006264:	da07      	bge.n	8006276 <__ieee754_pow+0x1a6>
 8006266:	465a      	mov	r2, fp
 8006268:	4663      	mov	r3, ip
 800626a:	2000      	movs	r0, #0
 800626c:	4927      	ldr	r1, [pc, #156]	; (800630c <__ieee754_pow+0x23c>)
 800626e:	f7fa fa55 	bl	800071c <__aeabi_ddiv>
 8006272:	4683      	mov	fp, r0
 8006274:	468c      	mov	ip, r1
 8006276:	2d00      	cmp	r5, #0
 8006278:	daba      	bge.n	80061f0 <__ieee754_pow+0x120>
 800627a:	9b00      	ldr	r3, [sp, #0]
 800627c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006280:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006284:	431c      	orrs	r4, r3
 8006286:	d108      	bne.n	800629a <__ieee754_pow+0x1ca>
 8006288:	465a      	mov	r2, fp
 800628a:	4663      	mov	r3, ip
 800628c:	4658      	mov	r0, fp
 800628e:	4661      	mov	r1, ip
 8006290:	f7f9 ff62 	bl	8000158 <__aeabi_dsub>
 8006294:	4602      	mov	r2, r0
 8006296:	460b      	mov	r3, r1
 8006298:	e790      	b.n	80061bc <__ieee754_pow+0xec>
 800629a:	9b00      	ldr	r3, [sp, #0]
 800629c:	2b01      	cmp	r3, #1
 800629e:	d1a7      	bne.n	80061f0 <__ieee754_pow+0x120>
 80062a0:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 80062a4:	469c      	mov	ip, r3
 80062a6:	e7a3      	b.n	80061f0 <__ieee754_pow+0x120>
 80062a8:	0feb      	lsrs	r3, r5, #31
 80062aa:	3b01      	subs	r3, #1
 80062ac:	930c      	str	r3, [sp, #48]	; 0x30
 80062ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80062b0:	9b00      	ldr	r3, [sp, #0]
 80062b2:	4313      	orrs	r3, r2
 80062b4:	d104      	bne.n	80062c0 <__ieee754_pow+0x1f0>
 80062b6:	4642      	mov	r2, r8
 80062b8:	464b      	mov	r3, r9
 80062ba:	4640      	mov	r0, r8
 80062bc:	4649      	mov	r1, r9
 80062be:	e7e7      	b.n	8006290 <__ieee754_pow+0x1c0>
 80062c0:	4b15      	ldr	r3, [pc, #84]	; (8006318 <__ieee754_pow+0x248>)
 80062c2:	429e      	cmp	r6, r3
 80062c4:	f340 80f6 	ble.w	80064b4 <__ieee754_pow+0x3e4>
 80062c8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80062cc:	429e      	cmp	r6, r3
 80062ce:	4b10      	ldr	r3, [pc, #64]	; (8006310 <__ieee754_pow+0x240>)
 80062d0:	dd09      	ble.n	80062e6 <__ieee754_pow+0x216>
 80062d2:	429c      	cmp	r4, r3
 80062d4:	dc0c      	bgt.n	80062f0 <__ieee754_pow+0x220>
 80062d6:	2f00      	cmp	r7, #0
 80062d8:	da0c      	bge.n	80062f4 <__ieee754_pow+0x224>
 80062da:	2000      	movs	r0, #0
 80062dc:	b013      	add	sp, #76	; 0x4c
 80062de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062e2:	f001 b97a 	b.w	80075da <__math_oflow>
 80062e6:	429c      	cmp	r4, r3
 80062e8:	dbf5      	blt.n	80062d6 <__ieee754_pow+0x206>
 80062ea:	4b08      	ldr	r3, [pc, #32]	; (800630c <__ieee754_pow+0x23c>)
 80062ec:	429c      	cmp	r4, r3
 80062ee:	dd15      	ble.n	800631c <__ieee754_pow+0x24c>
 80062f0:	2f00      	cmp	r7, #0
 80062f2:	dcf2      	bgt.n	80062da <__ieee754_pow+0x20a>
 80062f4:	2000      	movs	r0, #0
 80062f6:	b013      	add	sp, #76	; 0x4c
 80062f8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062fc:	f001 b968 	b.w	80075d0 <__math_uflow>
 8006300:	fff00000 	.word	0xfff00000
 8006304:	7ff00000 	.word	0x7ff00000
 8006308:	433fffff 	.word	0x433fffff
 800630c:	3ff00000 	.word	0x3ff00000
 8006310:	3fefffff 	.word	0x3fefffff
 8006314:	3fe00000 	.word	0x3fe00000
 8006318:	41e00000 	.word	0x41e00000
 800631c:	4661      	mov	r1, ip
 800631e:	2200      	movs	r2, #0
 8006320:	4658      	mov	r0, fp
 8006322:	4b5f      	ldr	r3, [pc, #380]	; (80064a0 <__ieee754_pow+0x3d0>)
 8006324:	f7f9 ff18 	bl	8000158 <__aeabi_dsub>
 8006328:	a355      	add	r3, pc, #340	; (adr r3, 8006480 <__ieee754_pow+0x3b0>)
 800632a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800632e:	4604      	mov	r4, r0
 8006330:	460d      	mov	r5, r1
 8006332:	f7fa f8c9 	bl	80004c8 <__aeabi_dmul>
 8006336:	a354      	add	r3, pc, #336	; (adr r3, 8006488 <__ieee754_pow+0x3b8>)
 8006338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800633c:	4606      	mov	r6, r0
 800633e:	460f      	mov	r7, r1
 8006340:	4620      	mov	r0, r4
 8006342:	4629      	mov	r1, r5
 8006344:	f7fa f8c0 	bl	80004c8 <__aeabi_dmul>
 8006348:	2200      	movs	r2, #0
 800634a:	4682      	mov	sl, r0
 800634c:	468b      	mov	fp, r1
 800634e:	4620      	mov	r0, r4
 8006350:	4629      	mov	r1, r5
 8006352:	4b54      	ldr	r3, [pc, #336]	; (80064a4 <__ieee754_pow+0x3d4>)
 8006354:	f7fa f8b8 	bl	80004c8 <__aeabi_dmul>
 8006358:	4602      	mov	r2, r0
 800635a:	460b      	mov	r3, r1
 800635c:	a14c      	add	r1, pc, #304	; (adr r1, 8006490 <__ieee754_pow+0x3c0>)
 800635e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006362:	f7f9 fef9 	bl	8000158 <__aeabi_dsub>
 8006366:	4622      	mov	r2, r4
 8006368:	462b      	mov	r3, r5
 800636a:	f7fa f8ad 	bl	80004c8 <__aeabi_dmul>
 800636e:	4602      	mov	r2, r0
 8006370:	460b      	mov	r3, r1
 8006372:	2000      	movs	r0, #0
 8006374:	494c      	ldr	r1, [pc, #304]	; (80064a8 <__ieee754_pow+0x3d8>)
 8006376:	f7f9 feef 	bl	8000158 <__aeabi_dsub>
 800637a:	4622      	mov	r2, r4
 800637c:	462b      	mov	r3, r5
 800637e:	4680      	mov	r8, r0
 8006380:	4689      	mov	r9, r1
 8006382:	4620      	mov	r0, r4
 8006384:	4629      	mov	r1, r5
 8006386:	f7fa f89f 	bl	80004c8 <__aeabi_dmul>
 800638a:	4602      	mov	r2, r0
 800638c:	460b      	mov	r3, r1
 800638e:	4640      	mov	r0, r8
 8006390:	4649      	mov	r1, r9
 8006392:	f7fa f899 	bl	80004c8 <__aeabi_dmul>
 8006396:	a340      	add	r3, pc, #256	; (adr r3, 8006498 <__ieee754_pow+0x3c8>)
 8006398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800639c:	f7fa f894 	bl	80004c8 <__aeabi_dmul>
 80063a0:	4602      	mov	r2, r0
 80063a2:	460b      	mov	r3, r1
 80063a4:	4650      	mov	r0, sl
 80063a6:	4659      	mov	r1, fp
 80063a8:	f7f9 fed6 	bl	8000158 <__aeabi_dsub>
 80063ac:	4602      	mov	r2, r0
 80063ae:	460b      	mov	r3, r1
 80063b0:	4604      	mov	r4, r0
 80063b2:	460d      	mov	r5, r1
 80063b4:	4630      	mov	r0, r6
 80063b6:	4639      	mov	r1, r7
 80063b8:	f7f9 fed0 	bl	800015c <__adddf3>
 80063bc:	2000      	movs	r0, #0
 80063be:	4632      	mov	r2, r6
 80063c0:	463b      	mov	r3, r7
 80063c2:	4682      	mov	sl, r0
 80063c4:	468b      	mov	fp, r1
 80063c6:	f7f9 fec7 	bl	8000158 <__aeabi_dsub>
 80063ca:	4602      	mov	r2, r0
 80063cc:	460b      	mov	r3, r1
 80063ce:	4620      	mov	r0, r4
 80063d0:	4629      	mov	r1, r5
 80063d2:	f7f9 fec1 	bl	8000158 <__aeabi_dsub>
 80063d6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80063da:	9b00      	ldr	r3, [sp, #0]
 80063dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80063de:	3b01      	subs	r3, #1
 80063e0:	4313      	orrs	r3, r2
 80063e2:	f04f 0600 	mov.w	r6, #0
 80063e6:	f04f 0200 	mov.w	r2, #0
 80063ea:	bf0c      	ite	eq
 80063ec:	4b2f      	ldreq	r3, [pc, #188]	; (80064ac <__ieee754_pow+0x3dc>)
 80063ee:	4b2c      	ldrne	r3, [pc, #176]	; (80064a0 <__ieee754_pow+0x3d0>)
 80063f0:	4604      	mov	r4, r0
 80063f2:	460d      	mov	r5, r1
 80063f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063f8:	e9cd 2300 	strd	r2, r3, [sp]
 80063fc:	4632      	mov	r2, r6
 80063fe:	463b      	mov	r3, r7
 8006400:	f7f9 feaa 	bl	8000158 <__aeabi_dsub>
 8006404:	4652      	mov	r2, sl
 8006406:	465b      	mov	r3, fp
 8006408:	f7fa f85e 	bl	80004c8 <__aeabi_dmul>
 800640c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006410:	4680      	mov	r8, r0
 8006412:	4689      	mov	r9, r1
 8006414:	4620      	mov	r0, r4
 8006416:	4629      	mov	r1, r5
 8006418:	f7fa f856 	bl	80004c8 <__aeabi_dmul>
 800641c:	4602      	mov	r2, r0
 800641e:	460b      	mov	r3, r1
 8006420:	4640      	mov	r0, r8
 8006422:	4649      	mov	r1, r9
 8006424:	f7f9 fe9a 	bl	800015c <__adddf3>
 8006428:	4632      	mov	r2, r6
 800642a:	463b      	mov	r3, r7
 800642c:	4680      	mov	r8, r0
 800642e:	4689      	mov	r9, r1
 8006430:	4650      	mov	r0, sl
 8006432:	4659      	mov	r1, fp
 8006434:	f7fa f848 	bl	80004c8 <__aeabi_dmul>
 8006438:	4604      	mov	r4, r0
 800643a:	460d      	mov	r5, r1
 800643c:	460b      	mov	r3, r1
 800643e:	4602      	mov	r2, r0
 8006440:	4649      	mov	r1, r9
 8006442:	4640      	mov	r0, r8
 8006444:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006448:	f7f9 fe88 	bl	800015c <__adddf3>
 800644c:	4b18      	ldr	r3, [pc, #96]	; (80064b0 <__ieee754_pow+0x3e0>)
 800644e:	4682      	mov	sl, r0
 8006450:	4299      	cmp	r1, r3
 8006452:	460f      	mov	r7, r1
 8006454:	460e      	mov	r6, r1
 8006456:	f340 82e7 	ble.w	8006a28 <__ieee754_pow+0x958>
 800645a:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800645e:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8006462:	4303      	orrs	r3, r0
 8006464:	f000 81e2 	beq.w	800682c <__ieee754_pow+0x75c>
 8006468:	e9dd 0100 	ldrd	r0, r1, [sp]
 800646c:	2200      	movs	r2, #0
 800646e:	2300      	movs	r3, #0
 8006470:	f7fa fa9c 	bl	80009ac <__aeabi_dcmplt>
 8006474:	3800      	subs	r0, #0
 8006476:	bf18      	it	ne
 8006478:	2001      	movne	r0, #1
 800647a:	e72f      	b.n	80062dc <__ieee754_pow+0x20c>
 800647c:	f3af 8000 	nop.w
 8006480:	60000000 	.word	0x60000000
 8006484:	3ff71547 	.word	0x3ff71547
 8006488:	f85ddf44 	.word	0xf85ddf44
 800648c:	3e54ae0b 	.word	0x3e54ae0b
 8006490:	55555555 	.word	0x55555555
 8006494:	3fd55555 	.word	0x3fd55555
 8006498:	652b82fe 	.word	0x652b82fe
 800649c:	3ff71547 	.word	0x3ff71547
 80064a0:	3ff00000 	.word	0x3ff00000
 80064a4:	3fd00000 	.word	0x3fd00000
 80064a8:	3fe00000 	.word	0x3fe00000
 80064ac:	bff00000 	.word	0xbff00000
 80064b0:	408fffff 	.word	0x408fffff
 80064b4:	4bd4      	ldr	r3, [pc, #848]	; (8006808 <__ieee754_pow+0x738>)
 80064b6:	2200      	movs	r2, #0
 80064b8:	402b      	ands	r3, r5
 80064ba:	b943      	cbnz	r3, 80064ce <__ieee754_pow+0x3fe>
 80064bc:	4658      	mov	r0, fp
 80064be:	4661      	mov	r1, ip
 80064c0:	4bd2      	ldr	r3, [pc, #840]	; (800680c <__ieee754_pow+0x73c>)
 80064c2:	f7fa f801 	bl	80004c8 <__aeabi_dmul>
 80064c6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80064ca:	4683      	mov	fp, r0
 80064cc:	460c      	mov	r4, r1
 80064ce:	1523      	asrs	r3, r4, #20
 80064d0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80064d4:	4413      	add	r3, r2
 80064d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80064d8:	4bcd      	ldr	r3, [pc, #820]	; (8006810 <__ieee754_pow+0x740>)
 80064da:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80064de:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80064e2:	429c      	cmp	r4, r3
 80064e4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80064e8:	dd08      	ble.n	80064fc <__ieee754_pow+0x42c>
 80064ea:	4bca      	ldr	r3, [pc, #808]	; (8006814 <__ieee754_pow+0x744>)
 80064ec:	429c      	cmp	r4, r3
 80064ee:	f340 8164 	ble.w	80067ba <__ieee754_pow+0x6ea>
 80064f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064f4:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80064f8:	3301      	adds	r3, #1
 80064fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80064fc:	2600      	movs	r6, #0
 80064fe:	00f3      	lsls	r3, r6, #3
 8006500:	930d      	str	r3, [sp, #52]	; 0x34
 8006502:	4bc5      	ldr	r3, [pc, #788]	; (8006818 <__ieee754_pow+0x748>)
 8006504:	4658      	mov	r0, fp
 8006506:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800650a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800650e:	4629      	mov	r1, r5
 8006510:	461a      	mov	r2, r3
 8006512:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8006516:	4623      	mov	r3, r4
 8006518:	f7f9 fe1e 	bl	8000158 <__aeabi_dsub>
 800651c:	46da      	mov	sl, fp
 800651e:	462b      	mov	r3, r5
 8006520:	4652      	mov	r2, sl
 8006522:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8006526:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800652a:	f7f9 fe17 	bl	800015c <__adddf3>
 800652e:	4602      	mov	r2, r0
 8006530:	460b      	mov	r3, r1
 8006532:	2000      	movs	r0, #0
 8006534:	49b9      	ldr	r1, [pc, #740]	; (800681c <__ieee754_pow+0x74c>)
 8006536:	f7fa f8f1 	bl	800071c <__aeabi_ddiv>
 800653a:	4602      	mov	r2, r0
 800653c:	460b      	mov	r3, r1
 800653e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006542:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006546:	f7f9 ffbf 	bl	80004c8 <__aeabi_dmul>
 800654a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800654e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8006552:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006556:	2300      	movs	r3, #0
 8006558:	2200      	movs	r2, #0
 800655a:	46ab      	mov	fp, r5
 800655c:	106d      	asrs	r5, r5, #1
 800655e:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8006562:	9304      	str	r3, [sp, #16]
 8006564:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8006568:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800656c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8006570:	4640      	mov	r0, r8
 8006572:	4649      	mov	r1, r9
 8006574:	4614      	mov	r4, r2
 8006576:	461d      	mov	r5, r3
 8006578:	f7f9 ffa6 	bl	80004c8 <__aeabi_dmul>
 800657c:	4602      	mov	r2, r0
 800657e:	460b      	mov	r3, r1
 8006580:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006584:	f7f9 fde8 	bl	8000158 <__aeabi_dsub>
 8006588:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800658c:	4606      	mov	r6, r0
 800658e:	460f      	mov	r7, r1
 8006590:	4620      	mov	r0, r4
 8006592:	4629      	mov	r1, r5
 8006594:	f7f9 fde0 	bl	8000158 <__aeabi_dsub>
 8006598:	4602      	mov	r2, r0
 800659a:	460b      	mov	r3, r1
 800659c:	4650      	mov	r0, sl
 800659e:	4659      	mov	r1, fp
 80065a0:	f7f9 fdda 	bl	8000158 <__aeabi_dsub>
 80065a4:	4642      	mov	r2, r8
 80065a6:	464b      	mov	r3, r9
 80065a8:	f7f9 ff8e 	bl	80004c8 <__aeabi_dmul>
 80065ac:	4602      	mov	r2, r0
 80065ae:	460b      	mov	r3, r1
 80065b0:	4630      	mov	r0, r6
 80065b2:	4639      	mov	r1, r7
 80065b4:	f7f9 fdd0 	bl	8000158 <__aeabi_dsub>
 80065b8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80065bc:	f7f9 ff84 	bl	80004c8 <__aeabi_dmul>
 80065c0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80065c4:	4682      	mov	sl, r0
 80065c6:	468b      	mov	fp, r1
 80065c8:	4610      	mov	r0, r2
 80065ca:	4619      	mov	r1, r3
 80065cc:	f7f9 ff7c 	bl	80004c8 <__aeabi_dmul>
 80065d0:	a37b      	add	r3, pc, #492	; (adr r3, 80067c0 <__ieee754_pow+0x6f0>)
 80065d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d6:	4604      	mov	r4, r0
 80065d8:	460d      	mov	r5, r1
 80065da:	f7f9 ff75 	bl	80004c8 <__aeabi_dmul>
 80065de:	a37a      	add	r3, pc, #488	; (adr r3, 80067c8 <__ieee754_pow+0x6f8>)
 80065e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e4:	f7f9 fdba 	bl	800015c <__adddf3>
 80065e8:	4622      	mov	r2, r4
 80065ea:	462b      	mov	r3, r5
 80065ec:	f7f9 ff6c 	bl	80004c8 <__aeabi_dmul>
 80065f0:	a377      	add	r3, pc, #476	; (adr r3, 80067d0 <__ieee754_pow+0x700>)
 80065f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f6:	f7f9 fdb1 	bl	800015c <__adddf3>
 80065fa:	4622      	mov	r2, r4
 80065fc:	462b      	mov	r3, r5
 80065fe:	f7f9 ff63 	bl	80004c8 <__aeabi_dmul>
 8006602:	a375      	add	r3, pc, #468	; (adr r3, 80067d8 <__ieee754_pow+0x708>)
 8006604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006608:	f7f9 fda8 	bl	800015c <__adddf3>
 800660c:	4622      	mov	r2, r4
 800660e:	462b      	mov	r3, r5
 8006610:	f7f9 ff5a 	bl	80004c8 <__aeabi_dmul>
 8006614:	a372      	add	r3, pc, #456	; (adr r3, 80067e0 <__ieee754_pow+0x710>)
 8006616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800661a:	f7f9 fd9f 	bl	800015c <__adddf3>
 800661e:	4622      	mov	r2, r4
 8006620:	462b      	mov	r3, r5
 8006622:	f7f9 ff51 	bl	80004c8 <__aeabi_dmul>
 8006626:	a370      	add	r3, pc, #448	; (adr r3, 80067e8 <__ieee754_pow+0x718>)
 8006628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800662c:	f7f9 fd96 	bl	800015c <__adddf3>
 8006630:	4622      	mov	r2, r4
 8006632:	4606      	mov	r6, r0
 8006634:	460f      	mov	r7, r1
 8006636:	462b      	mov	r3, r5
 8006638:	4620      	mov	r0, r4
 800663a:	4629      	mov	r1, r5
 800663c:	f7f9 ff44 	bl	80004c8 <__aeabi_dmul>
 8006640:	4602      	mov	r2, r0
 8006642:	460b      	mov	r3, r1
 8006644:	4630      	mov	r0, r6
 8006646:	4639      	mov	r1, r7
 8006648:	f7f9 ff3e 	bl	80004c8 <__aeabi_dmul>
 800664c:	4604      	mov	r4, r0
 800664e:	460d      	mov	r5, r1
 8006650:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006654:	4642      	mov	r2, r8
 8006656:	464b      	mov	r3, r9
 8006658:	f7f9 fd80 	bl	800015c <__adddf3>
 800665c:	4652      	mov	r2, sl
 800665e:	465b      	mov	r3, fp
 8006660:	f7f9 ff32 	bl	80004c8 <__aeabi_dmul>
 8006664:	4622      	mov	r2, r4
 8006666:	462b      	mov	r3, r5
 8006668:	f7f9 fd78 	bl	800015c <__adddf3>
 800666c:	4642      	mov	r2, r8
 800666e:	4606      	mov	r6, r0
 8006670:	460f      	mov	r7, r1
 8006672:	464b      	mov	r3, r9
 8006674:	4640      	mov	r0, r8
 8006676:	4649      	mov	r1, r9
 8006678:	f7f9 ff26 	bl	80004c8 <__aeabi_dmul>
 800667c:	4602      	mov	r2, r0
 800667e:	460b      	mov	r3, r1
 8006680:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006684:	2200      	movs	r2, #0
 8006686:	4b66      	ldr	r3, [pc, #408]	; (8006820 <__ieee754_pow+0x750>)
 8006688:	f7f9 fd68 	bl	800015c <__adddf3>
 800668c:	4632      	mov	r2, r6
 800668e:	463b      	mov	r3, r7
 8006690:	f7f9 fd64 	bl	800015c <__adddf3>
 8006694:	2400      	movs	r4, #0
 8006696:	460d      	mov	r5, r1
 8006698:	4622      	mov	r2, r4
 800669a:	460b      	mov	r3, r1
 800669c:	4640      	mov	r0, r8
 800669e:	4649      	mov	r1, r9
 80066a0:	f7f9 ff12 	bl	80004c8 <__aeabi_dmul>
 80066a4:	2200      	movs	r2, #0
 80066a6:	4680      	mov	r8, r0
 80066a8:	4689      	mov	r9, r1
 80066aa:	4620      	mov	r0, r4
 80066ac:	4629      	mov	r1, r5
 80066ae:	4b5c      	ldr	r3, [pc, #368]	; (8006820 <__ieee754_pow+0x750>)
 80066b0:	f7f9 fd52 	bl	8000158 <__aeabi_dsub>
 80066b4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80066b8:	f7f9 fd4e 	bl	8000158 <__aeabi_dsub>
 80066bc:	4602      	mov	r2, r0
 80066be:	460b      	mov	r3, r1
 80066c0:	4630      	mov	r0, r6
 80066c2:	4639      	mov	r1, r7
 80066c4:	f7f9 fd48 	bl	8000158 <__aeabi_dsub>
 80066c8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80066cc:	f7f9 fefc 	bl	80004c8 <__aeabi_dmul>
 80066d0:	4622      	mov	r2, r4
 80066d2:	4606      	mov	r6, r0
 80066d4:	460f      	mov	r7, r1
 80066d6:	462b      	mov	r3, r5
 80066d8:	4650      	mov	r0, sl
 80066da:	4659      	mov	r1, fp
 80066dc:	f7f9 fef4 	bl	80004c8 <__aeabi_dmul>
 80066e0:	4602      	mov	r2, r0
 80066e2:	460b      	mov	r3, r1
 80066e4:	4630      	mov	r0, r6
 80066e6:	4639      	mov	r1, r7
 80066e8:	f7f9 fd38 	bl	800015c <__adddf3>
 80066ec:	2400      	movs	r4, #0
 80066ee:	4606      	mov	r6, r0
 80066f0:	460f      	mov	r7, r1
 80066f2:	4602      	mov	r2, r0
 80066f4:	460b      	mov	r3, r1
 80066f6:	4640      	mov	r0, r8
 80066f8:	4649      	mov	r1, r9
 80066fa:	f7f9 fd2f 	bl	800015c <__adddf3>
 80066fe:	a33c      	add	r3, pc, #240	; (adr r3, 80067f0 <__ieee754_pow+0x720>)
 8006700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006704:	4620      	mov	r0, r4
 8006706:	460d      	mov	r5, r1
 8006708:	f7f9 fede 	bl	80004c8 <__aeabi_dmul>
 800670c:	4642      	mov	r2, r8
 800670e:	464b      	mov	r3, r9
 8006710:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006714:	4620      	mov	r0, r4
 8006716:	4629      	mov	r1, r5
 8006718:	f7f9 fd1e 	bl	8000158 <__aeabi_dsub>
 800671c:	4602      	mov	r2, r0
 800671e:	460b      	mov	r3, r1
 8006720:	4630      	mov	r0, r6
 8006722:	4639      	mov	r1, r7
 8006724:	f7f9 fd18 	bl	8000158 <__aeabi_dsub>
 8006728:	a333      	add	r3, pc, #204	; (adr r3, 80067f8 <__ieee754_pow+0x728>)
 800672a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800672e:	f7f9 fecb 	bl	80004c8 <__aeabi_dmul>
 8006732:	a333      	add	r3, pc, #204	; (adr r3, 8006800 <__ieee754_pow+0x730>)
 8006734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006738:	4606      	mov	r6, r0
 800673a:	460f      	mov	r7, r1
 800673c:	4620      	mov	r0, r4
 800673e:	4629      	mov	r1, r5
 8006740:	f7f9 fec2 	bl	80004c8 <__aeabi_dmul>
 8006744:	4602      	mov	r2, r0
 8006746:	460b      	mov	r3, r1
 8006748:	4630      	mov	r0, r6
 800674a:	4639      	mov	r1, r7
 800674c:	f7f9 fd06 	bl	800015c <__adddf3>
 8006750:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006752:	4b34      	ldr	r3, [pc, #208]	; (8006824 <__ieee754_pow+0x754>)
 8006754:	4413      	add	r3, r2
 8006756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800675a:	f7f9 fcff 	bl	800015c <__adddf3>
 800675e:	4680      	mov	r8, r0
 8006760:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006762:	4689      	mov	r9, r1
 8006764:	f7f9 fe46 	bl	80003f4 <__aeabi_i2d>
 8006768:	4604      	mov	r4, r0
 800676a:	460d      	mov	r5, r1
 800676c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006770:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006772:	4b2d      	ldr	r3, [pc, #180]	; (8006828 <__ieee754_pow+0x758>)
 8006774:	4413      	add	r3, r2
 8006776:	e9d3 6700 	ldrd	r6, r7, [r3]
 800677a:	4642      	mov	r2, r8
 800677c:	464b      	mov	r3, r9
 800677e:	f7f9 fced 	bl	800015c <__adddf3>
 8006782:	4632      	mov	r2, r6
 8006784:	463b      	mov	r3, r7
 8006786:	f7f9 fce9 	bl	800015c <__adddf3>
 800678a:	4622      	mov	r2, r4
 800678c:	462b      	mov	r3, r5
 800678e:	f7f9 fce5 	bl	800015c <__adddf3>
 8006792:	2000      	movs	r0, #0
 8006794:	4622      	mov	r2, r4
 8006796:	462b      	mov	r3, r5
 8006798:	4682      	mov	sl, r0
 800679a:	468b      	mov	fp, r1
 800679c:	f7f9 fcdc 	bl	8000158 <__aeabi_dsub>
 80067a0:	4632      	mov	r2, r6
 80067a2:	463b      	mov	r3, r7
 80067a4:	f7f9 fcd8 	bl	8000158 <__aeabi_dsub>
 80067a8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80067ac:	f7f9 fcd4 	bl	8000158 <__aeabi_dsub>
 80067b0:	4602      	mov	r2, r0
 80067b2:	460b      	mov	r3, r1
 80067b4:	4640      	mov	r0, r8
 80067b6:	4649      	mov	r1, r9
 80067b8:	e60b      	b.n	80063d2 <__ieee754_pow+0x302>
 80067ba:	2601      	movs	r6, #1
 80067bc:	e69f      	b.n	80064fe <__ieee754_pow+0x42e>
 80067be:	bf00      	nop
 80067c0:	4a454eef 	.word	0x4a454eef
 80067c4:	3fca7e28 	.word	0x3fca7e28
 80067c8:	93c9db65 	.word	0x93c9db65
 80067cc:	3fcd864a 	.word	0x3fcd864a
 80067d0:	a91d4101 	.word	0xa91d4101
 80067d4:	3fd17460 	.word	0x3fd17460
 80067d8:	518f264d 	.word	0x518f264d
 80067dc:	3fd55555 	.word	0x3fd55555
 80067e0:	db6fabff 	.word	0xdb6fabff
 80067e4:	3fdb6db6 	.word	0x3fdb6db6
 80067e8:	33333303 	.word	0x33333303
 80067ec:	3fe33333 	.word	0x3fe33333
 80067f0:	e0000000 	.word	0xe0000000
 80067f4:	3feec709 	.word	0x3feec709
 80067f8:	dc3a03fd 	.word	0xdc3a03fd
 80067fc:	3feec709 	.word	0x3feec709
 8006800:	145b01f5 	.word	0x145b01f5
 8006804:	be3e2fe0 	.word	0xbe3e2fe0
 8006808:	7ff00000 	.word	0x7ff00000
 800680c:	43400000 	.word	0x43400000
 8006810:	0003988e 	.word	0x0003988e
 8006814:	000bb679 	.word	0x000bb679
 8006818:	080078c8 	.word	0x080078c8
 800681c:	3ff00000 	.word	0x3ff00000
 8006820:	40080000 	.word	0x40080000
 8006824:	080078e8 	.word	0x080078e8
 8006828:	080078d8 	.word	0x080078d8
 800682c:	a39c      	add	r3, pc, #624	; (adr r3, 8006aa0 <__ieee754_pow+0x9d0>)
 800682e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006832:	4640      	mov	r0, r8
 8006834:	4649      	mov	r1, r9
 8006836:	f7f9 fc91 	bl	800015c <__adddf3>
 800683a:	4622      	mov	r2, r4
 800683c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006840:	462b      	mov	r3, r5
 8006842:	4650      	mov	r0, sl
 8006844:	4639      	mov	r1, r7
 8006846:	f7f9 fc87 	bl	8000158 <__aeabi_dsub>
 800684a:	4602      	mov	r2, r0
 800684c:	460b      	mov	r3, r1
 800684e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006852:	f7fa f8c9 	bl	80009e8 <__aeabi_dcmpgt>
 8006856:	2800      	cmp	r0, #0
 8006858:	f47f ae06 	bne.w	8006468 <__ieee754_pow+0x398>
 800685c:	4aa2      	ldr	r2, [pc, #648]	; (8006ae8 <__ieee754_pow+0xa18>)
 800685e:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8006862:	4293      	cmp	r3, r2
 8006864:	f340 8100 	ble.w	8006a68 <__ieee754_pow+0x998>
 8006868:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800686c:	151b      	asrs	r3, r3, #20
 800686e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8006872:	fa4a fa03 	asr.w	sl, sl, r3
 8006876:	44b2      	add	sl, r6
 8006878:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800687c:	489b      	ldr	r0, [pc, #620]	; (8006aec <__ieee754_pow+0xa1c>)
 800687e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8006882:	4108      	asrs	r0, r1
 8006884:	ea00 030a 	and.w	r3, r0, sl
 8006888:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800688c:	f1c1 0114 	rsb	r1, r1, #20
 8006890:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8006894:	fa4a fa01 	asr.w	sl, sl, r1
 8006898:	2e00      	cmp	r6, #0
 800689a:	f04f 0200 	mov.w	r2, #0
 800689e:	4620      	mov	r0, r4
 80068a0:	4629      	mov	r1, r5
 80068a2:	bfb8      	it	lt
 80068a4:	f1ca 0a00 	rsblt	sl, sl, #0
 80068a8:	f7f9 fc56 	bl	8000158 <__aeabi_dsub>
 80068ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80068b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80068b4:	2400      	movs	r4, #0
 80068b6:	4642      	mov	r2, r8
 80068b8:	464b      	mov	r3, r9
 80068ba:	f7f9 fc4f 	bl	800015c <__adddf3>
 80068be:	a37a      	add	r3, pc, #488	; (adr r3, 8006aa8 <__ieee754_pow+0x9d8>)
 80068c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068c4:	4620      	mov	r0, r4
 80068c6:	460d      	mov	r5, r1
 80068c8:	f7f9 fdfe 	bl	80004c8 <__aeabi_dmul>
 80068cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80068d0:	4606      	mov	r6, r0
 80068d2:	460f      	mov	r7, r1
 80068d4:	4620      	mov	r0, r4
 80068d6:	4629      	mov	r1, r5
 80068d8:	f7f9 fc3e 	bl	8000158 <__aeabi_dsub>
 80068dc:	4602      	mov	r2, r0
 80068de:	460b      	mov	r3, r1
 80068e0:	4640      	mov	r0, r8
 80068e2:	4649      	mov	r1, r9
 80068e4:	f7f9 fc38 	bl	8000158 <__aeabi_dsub>
 80068e8:	a371      	add	r3, pc, #452	; (adr r3, 8006ab0 <__ieee754_pow+0x9e0>)
 80068ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ee:	f7f9 fdeb 	bl	80004c8 <__aeabi_dmul>
 80068f2:	a371      	add	r3, pc, #452	; (adr r3, 8006ab8 <__ieee754_pow+0x9e8>)
 80068f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f8:	4680      	mov	r8, r0
 80068fa:	4689      	mov	r9, r1
 80068fc:	4620      	mov	r0, r4
 80068fe:	4629      	mov	r1, r5
 8006900:	f7f9 fde2 	bl	80004c8 <__aeabi_dmul>
 8006904:	4602      	mov	r2, r0
 8006906:	460b      	mov	r3, r1
 8006908:	4640      	mov	r0, r8
 800690a:	4649      	mov	r1, r9
 800690c:	f7f9 fc26 	bl	800015c <__adddf3>
 8006910:	4604      	mov	r4, r0
 8006912:	460d      	mov	r5, r1
 8006914:	4602      	mov	r2, r0
 8006916:	460b      	mov	r3, r1
 8006918:	4630      	mov	r0, r6
 800691a:	4639      	mov	r1, r7
 800691c:	f7f9 fc1e 	bl	800015c <__adddf3>
 8006920:	4632      	mov	r2, r6
 8006922:	463b      	mov	r3, r7
 8006924:	4680      	mov	r8, r0
 8006926:	4689      	mov	r9, r1
 8006928:	f7f9 fc16 	bl	8000158 <__aeabi_dsub>
 800692c:	4602      	mov	r2, r0
 800692e:	460b      	mov	r3, r1
 8006930:	4620      	mov	r0, r4
 8006932:	4629      	mov	r1, r5
 8006934:	f7f9 fc10 	bl	8000158 <__aeabi_dsub>
 8006938:	4642      	mov	r2, r8
 800693a:	4606      	mov	r6, r0
 800693c:	460f      	mov	r7, r1
 800693e:	464b      	mov	r3, r9
 8006940:	4640      	mov	r0, r8
 8006942:	4649      	mov	r1, r9
 8006944:	f7f9 fdc0 	bl	80004c8 <__aeabi_dmul>
 8006948:	a35d      	add	r3, pc, #372	; (adr r3, 8006ac0 <__ieee754_pow+0x9f0>)
 800694a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800694e:	4604      	mov	r4, r0
 8006950:	460d      	mov	r5, r1
 8006952:	f7f9 fdb9 	bl	80004c8 <__aeabi_dmul>
 8006956:	a35c      	add	r3, pc, #368	; (adr r3, 8006ac8 <__ieee754_pow+0x9f8>)
 8006958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800695c:	f7f9 fbfc 	bl	8000158 <__aeabi_dsub>
 8006960:	4622      	mov	r2, r4
 8006962:	462b      	mov	r3, r5
 8006964:	f7f9 fdb0 	bl	80004c8 <__aeabi_dmul>
 8006968:	a359      	add	r3, pc, #356	; (adr r3, 8006ad0 <__ieee754_pow+0xa00>)
 800696a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800696e:	f7f9 fbf5 	bl	800015c <__adddf3>
 8006972:	4622      	mov	r2, r4
 8006974:	462b      	mov	r3, r5
 8006976:	f7f9 fda7 	bl	80004c8 <__aeabi_dmul>
 800697a:	a357      	add	r3, pc, #348	; (adr r3, 8006ad8 <__ieee754_pow+0xa08>)
 800697c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006980:	f7f9 fbea 	bl	8000158 <__aeabi_dsub>
 8006984:	4622      	mov	r2, r4
 8006986:	462b      	mov	r3, r5
 8006988:	f7f9 fd9e 	bl	80004c8 <__aeabi_dmul>
 800698c:	a354      	add	r3, pc, #336	; (adr r3, 8006ae0 <__ieee754_pow+0xa10>)
 800698e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006992:	f7f9 fbe3 	bl	800015c <__adddf3>
 8006996:	4622      	mov	r2, r4
 8006998:	462b      	mov	r3, r5
 800699a:	f7f9 fd95 	bl	80004c8 <__aeabi_dmul>
 800699e:	4602      	mov	r2, r0
 80069a0:	460b      	mov	r3, r1
 80069a2:	4640      	mov	r0, r8
 80069a4:	4649      	mov	r1, r9
 80069a6:	f7f9 fbd7 	bl	8000158 <__aeabi_dsub>
 80069aa:	4604      	mov	r4, r0
 80069ac:	460d      	mov	r5, r1
 80069ae:	4602      	mov	r2, r0
 80069b0:	460b      	mov	r3, r1
 80069b2:	4640      	mov	r0, r8
 80069b4:	4649      	mov	r1, r9
 80069b6:	f7f9 fd87 	bl	80004c8 <__aeabi_dmul>
 80069ba:	2200      	movs	r2, #0
 80069bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80069c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80069c4:	4620      	mov	r0, r4
 80069c6:	4629      	mov	r1, r5
 80069c8:	f7f9 fbc6 	bl	8000158 <__aeabi_dsub>
 80069cc:	4602      	mov	r2, r0
 80069ce:	460b      	mov	r3, r1
 80069d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069d4:	f7f9 fea2 	bl	800071c <__aeabi_ddiv>
 80069d8:	4632      	mov	r2, r6
 80069da:	4604      	mov	r4, r0
 80069dc:	460d      	mov	r5, r1
 80069de:	463b      	mov	r3, r7
 80069e0:	4640      	mov	r0, r8
 80069e2:	4649      	mov	r1, r9
 80069e4:	f7f9 fd70 	bl	80004c8 <__aeabi_dmul>
 80069e8:	4632      	mov	r2, r6
 80069ea:	463b      	mov	r3, r7
 80069ec:	f7f9 fbb6 	bl	800015c <__adddf3>
 80069f0:	4602      	mov	r2, r0
 80069f2:	460b      	mov	r3, r1
 80069f4:	4620      	mov	r0, r4
 80069f6:	4629      	mov	r1, r5
 80069f8:	f7f9 fbae 	bl	8000158 <__aeabi_dsub>
 80069fc:	4642      	mov	r2, r8
 80069fe:	464b      	mov	r3, r9
 8006a00:	f7f9 fbaa 	bl	8000158 <__aeabi_dsub>
 8006a04:	4602      	mov	r2, r0
 8006a06:	460b      	mov	r3, r1
 8006a08:	2000      	movs	r0, #0
 8006a0a:	4939      	ldr	r1, [pc, #228]	; (8006af0 <__ieee754_pow+0xa20>)
 8006a0c:	f7f9 fba4 	bl	8000158 <__aeabi_dsub>
 8006a10:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8006a14:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8006a18:	da29      	bge.n	8006a6e <__ieee754_pow+0x99e>
 8006a1a:	4652      	mov	r2, sl
 8006a1c:	f000 fd3c 	bl	8007498 <scalbn>
 8006a20:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006a24:	f7ff bbfd 	b.w	8006222 <__ieee754_pow+0x152>
 8006a28:	4b32      	ldr	r3, [pc, #200]	; (8006af4 <__ieee754_pow+0xa24>)
 8006a2a:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8006a2e:	429f      	cmp	r7, r3
 8006a30:	f77f af14 	ble.w	800685c <__ieee754_pow+0x78c>
 8006a34:	4b30      	ldr	r3, [pc, #192]	; (8006af8 <__ieee754_pow+0xa28>)
 8006a36:	440b      	add	r3, r1
 8006a38:	4303      	orrs	r3, r0
 8006a3a:	d009      	beq.n	8006a50 <__ieee754_pow+0x980>
 8006a3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006a40:	2200      	movs	r2, #0
 8006a42:	2300      	movs	r3, #0
 8006a44:	f7f9 ffb2 	bl	80009ac <__aeabi_dcmplt>
 8006a48:	3800      	subs	r0, #0
 8006a4a:	bf18      	it	ne
 8006a4c:	2001      	movne	r0, #1
 8006a4e:	e452      	b.n	80062f6 <__ieee754_pow+0x226>
 8006a50:	4622      	mov	r2, r4
 8006a52:	462b      	mov	r3, r5
 8006a54:	f7f9 fb80 	bl	8000158 <__aeabi_dsub>
 8006a58:	4642      	mov	r2, r8
 8006a5a:	464b      	mov	r3, r9
 8006a5c:	f7f9 ffba 	bl	80009d4 <__aeabi_dcmpge>
 8006a60:	2800      	cmp	r0, #0
 8006a62:	f43f aefb 	beq.w	800685c <__ieee754_pow+0x78c>
 8006a66:	e7e9      	b.n	8006a3c <__ieee754_pow+0x96c>
 8006a68:	f04f 0a00 	mov.w	sl, #0
 8006a6c:	e720      	b.n	80068b0 <__ieee754_pow+0x7e0>
 8006a6e:	4621      	mov	r1, r4
 8006a70:	e7d6      	b.n	8006a20 <__ieee754_pow+0x950>
 8006a72:	f04f 0b00 	mov.w	fp, #0
 8006a76:	f8df c078 	ldr.w	ip, [pc, #120]	; 8006af0 <__ieee754_pow+0xa20>
 8006a7a:	f7ff bbb9 	b.w	80061f0 <__ieee754_pow+0x120>
 8006a7e:	f04f 0b00 	mov.w	fp, #0
 8006a82:	f04f 0c00 	mov.w	ip, #0
 8006a86:	f7ff bbb3 	b.w	80061f0 <__ieee754_pow+0x120>
 8006a8a:	4640      	mov	r0, r8
 8006a8c:	4649      	mov	r1, r9
 8006a8e:	f7ff bb3c 	b.w	800610a <__ieee754_pow+0x3a>
 8006a92:	9200      	str	r2, [sp, #0]
 8006a94:	f7ff bb88 	b.w	80061a8 <__ieee754_pow+0xd8>
 8006a98:	2300      	movs	r3, #0
 8006a9a:	f7ff bb72 	b.w	8006182 <__ieee754_pow+0xb2>
 8006a9e:	bf00      	nop
 8006aa0:	652b82fe 	.word	0x652b82fe
 8006aa4:	3c971547 	.word	0x3c971547
 8006aa8:	00000000 	.word	0x00000000
 8006aac:	3fe62e43 	.word	0x3fe62e43
 8006ab0:	fefa39ef 	.word	0xfefa39ef
 8006ab4:	3fe62e42 	.word	0x3fe62e42
 8006ab8:	0ca86c39 	.word	0x0ca86c39
 8006abc:	be205c61 	.word	0xbe205c61
 8006ac0:	72bea4d0 	.word	0x72bea4d0
 8006ac4:	3e663769 	.word	0x3e663769
 8006ac8:	c5d26bf1 	.word	0xc5d26bf1
 8006acc:	3ebbbd41 	.word	0x3ebbbd41
 8006ad0:	af25de2c 	.word	0xaf25de2c
 8006ad4:	3f11566a 	.word	0x3f11566a
 8006ad8:	16bebd93 	.word	0x16bebd93
 8006adc:	3f66c16c 	.word	0x3f66c16c
 8006ae0:	5555553e 	.word	0x5555553e
 8006ae4:	3fc55555 	.word	0x3fc55555
 8006ae8:	3fe00000 	.word	0x3fe00000
 8006aec:	fff00000 	.word	0xfff00000
 8006af0:	3ff00000 	.word	0x3ff00000
 8006af4:	4090cbff 	.word	0x4090cbff
 8006af8:	3f6f3400 	.word	0x3f6f3400

08006afc <fabs>:
 8006afc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006b00:	4619      	mov	r1, r3
 8006b02:	4770      	bx	lr

08006b04 <__ieee754_acosf>:
 8006b04:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8006b08:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8006b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b0e:	4605      	mov	r5, r0
 8006b10:	d104      	bne.n	8006b1c <__ieee754_acosf+0x18>
 8006b12:	2800      	cmp	r0, #0
 8006b14:	f300 8135 	bgt.w	8006d82 <__ieee754_acosf+0x27e>
 8006b18:	489c      	ldr	r0, [pc, #624]	; (8006d8c <__ieee754_acosf+0x288>)
 8006b1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b1c:	dd06      	ble.n	8006b2c <__ieee754_acosf+0x28>
 8006b1e:	4601      	mov	r1, r0
 8006b20:	f7f9 fff6 	bl	8000b10 <__aeabi_fsub>
 8006b24:	4601      	mov	r1, r0
 8006b26:	f7fa f9b1 	bl	8000e8c <__aeabi_fdiv>
 8006b2a:	e7f6      	b.n	8006b1a <__ieee754_acosf+0x16>
 8006b2c:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 8006b30:	da57      	bge.n	8006be2 <__ieee754_acosf+0xde>
 8006b32:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 8006b36:	f340 8126 	ble.w	8006d86 <__ieee754_acosf+0x282>
 8006b3a:	4601      	mov	r1, r0
 8006b3c:	f7fa f8f2 	bl	8000d24 <__aeabi_fmul>
 8006b40:	4604      	mov	r4, r0
 8006b42:	4993      	ldr	r1, [pc, #588]	; (8006d90 <__ieee754_acosf+0x28c>)
 8006b44:	f7fa f8ee 	bl	8000d24 <__aeabi_fmul>
 8006b48:	4992      	ldr	r1, [pc, #584]	; (8006d94 <__ieee754_acosf+0x290>)
 8006b4a:	f7f9 ffe3 	bl	8000b14 <__addsf3>
 8006b4e:	4621      	mov	r1, r4
 8006b50:	f7fa f8e8 	bl	8000d24 <__aeabi_fmul>
 8006b54:	4990      	ldr	r1, [pc, #576]	; (8006d98 <__ieee754_acosf+0x294>)
 8006b56:	f7f9 ffdb 	bl	8000b10 <__aeabi_fsub>
 8006b5a:	4621      	mov	r1, r4
 8006b5c:	f7fa f8e2 	bl	8000d24 <__aeabi_fmul>
 8006b60:	498e      	ldr	r1, [pc, #568]	; (8006d9c <__ieee754_acosf+0x298>)
 8006b62:	f7f9 ffd7 	bl	8000b14 <__addsf3>
 8006b66:	4621      	mov	r1, r4
 8006b68:	f7fa f8dc 	bl	8000d24 <__aeabi_fmul>
 8006b6c:	498c      	ldr	r1, [pc, #560]	; (8006da0 <__ieee754_acosf+0x29c>)
 8006b6e:	f7f9 ffcf 	bl	8000b10 <__aeabi_fsub>
 8006b72:	4621      	mov	r1, r4
 8006b74:	f7fa f8d6 	bl	8000d24 <__aeabi_fmul>
 8006b78:	498a      	ldr	r1, [pc, #552]	; (8006da4 <__ieee754_acosf+0x2a0>)
 8006b7a:	f7f9 ffcb 	bl	8000b14 <__addsf3>
 8006b7e:	4621      	mov	r1, r4
 8006b80:	f7fa f8d0 	bl	8000d24 <__aeabi_fmul>
 8006b84:	4988      	ldr	r1, [pc, #544]	; (8006da8 <__ieee754_acosf+0x2a4>)
 8006b86:	4606      	mov	r6, r0
 8006b88:	4620      	mov	r0, r4
 8006b8a:	f7fa f8cb 	bl	8000d24 <__aeabi_fmul>
 8006b8e:	4987      	ldr	r1, [pc, #540]	; (8006dac <__ieee754_acosf+0x2a8>)
 8006b90:	f7f9 ffbe 	bl	8000b10 <__aeabi_fsub>
 8006b94:	4621      	mov	r1, r4
 8006b96:	f7fa f8c5 	bl	8000d24 <__aeabi_fmul>
 8006b9a:	4985      	ldr	r1, [pc, #532]	; (8006db0 <__ieee754_acosf+0x2ac>)
 8006b9c:	f7f9 ffba 	bl	8000b14 <__addsf3>
 8006ba0:	4621      	mov	r1, r4
 8006ba2:	f7fa f8bf 	bl	8000d24 <__aeabi_fmul>
 8006ba6:	4983      	ldr	r1, [pc, #524]	; (8006db4 <__ieee754_acosf+0x2b0>)
 8006ba8:	f7f9 ffb2 	bl	8000b10 <__aeabi_fsub>
 8006bac:	4621      	mov	r1, r4
 8006bae:	f7fa f8b9 	bl	8000d24 <__aeabi_fmul>
 8006bb2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8006bb6:	f7f9 ffad 	bl	8000b14 <__addsf3>
 8006bba:	4601      	mov	r1, r0
 8006bbc:	4630      	mov	r0, r6
 8006bbe:	f7fa f965 	bl	8000e8c <__aeabi_fdiv>
 8006bc2:	4629      	mov	r1, r5
 8006bc4:	f7fa f8ae 	bl	8000d24 <__aeabi_fmul>
 8006bc8:	4601      	mov	r1, r0
 8006bca:	487b      	ldr	r0, [pc, #492]	; (8006db8 <__ieee754_acosf+0x2b4>)
 8006bcc:	f7f9 ffa0 	bl	8000b10 <__aeabi_fsub>
 8006bd0:	4601      	mov	r1, r0
 8006bd2:	4628      	mov	r0, r5
 8006bd4:	f7f9 ff9c 	bl	8000b10 <__aeabi_fsub>
 8006bd8:	4601      	mov	r1, r0
 8006bda:	4878      	ldr	r0, [pc, #480]	; (8006dbc <__ieee754_acosf+0x2b8>)
 8006bdc:	f7f9 ff98 	bl	8000b10 <__aeabi_fsub>
 8006be0:	e79b      	b.n	8006b1a <__ieee754_acosf+0x16>
 8006be2:	2800      	cmp	r0, #0
 8006be4:	da5b      	bge.n	8006c9e <__ieee754_acosf+0x19a>
 8006be6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8006bea:	f7f9 ff93 	bl	8000b14 <__addsf3>
 8006bee:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8006bf2:	f7fa f897 	bl	8000d24 <__aeabi_fmul>
 8006bf6:	4604      	mov	r4, r0
 8006bf8:	4965      	ldr	r1, [pc, #404]	; (8006d90 <__ieee754_acosf+0x28c>)
 8006bfa:	f7fa f893 	bl	8000d24 <__aeabi_fmul>
 8006bfe:	4965      	ldr	r1, [pc, #404]	; (8006d94 <__ieee754_acosf+0x290>)
 8006c00:	f7f9 ff88 	bl	8000b14 <__addsf3>
 8006c04:	4621      	mov	r1, r4
 8006c06:	f7fa f88d 	bl	8000d24 <__aeabi_fmul>
 8006c0a:	4963      	ldr	r1, [pc, #396]	; (8006d98 <__ieee754_acosf+0x294>)
 8006c0c:	f7f9 ff80 	bl	8000b10 <__aeabi_fsub>
 8006c10:	4621      	mov	r1, r4
 8006c12:	f7fa f887 	bl	8000d24 <__aeabi_fmul>
 8006c16:	4961      	ldr	r1, [pc, #388]	; (8006d9c <__ieee754_acosf+0x298>)
 8006c18:	f7f9 ff7c 	bl	8000b14 <__addsf3>
 8006c1c:	4621      	mov	r1, r4
 8006c1e:	f7fa f881 	bl	8000d24 <__aeabi_fmul>
 8006c22:	495f      	ldr	r1, [pc, #380]	; (8006da0 <__ieee754_acosf+0x29c>)
 8006c24:	f7f9 ff74 	bl	8000b10 <__aeabi_fsub>
 8006c28:	4621      	mov	r1, r4
 8006c2a:	f7fa f87b 	bl	8000d24 <__aeabi_fmul>
 8006c2e:	495d      	ldr	r1, [pc, #372]	; (8006da4 <__ieee754_acosf+0x2a0>)
 8006c30:	f7f9 ff70 	bl	8000b14 <__addsf3>
 8006c34:	4621      	mov	r1, r4
 8006c36:	f7fa f875 	bl	8000d24 <__aeabi_fmul>
 8006c3a:	4606      	mov	r6, r0
 8006c3c:	4620      	mov	r0, r4
 8006c3e:	f7ff f9d5 	bl	8005fec <__ieee754_sqrtf>
 8006c42:	4959      	ldr	r1, [pc, #356]	; (8006da8 <__ieee754_acosf+0x2a4>)
 8006c44:	4605      	mov	r5, r0
 8006c46:	4620      	mov	r0, r4
 8006c48:	f7fa f86c 	bl	8000d24 <__aeabi_fmul>
 8006c4c:	4957      	ldr	r1, [pc, #348]	; (8006dac <__ieee754_acosf+0x2a8>)
 8006c4e:	f7f9 ff5f 	bl	8000b10 <__aeabi_fsub>
 8006c52:	4621      	mov	r1, r4
 8006c54:	f7fa f866 	bl	8000d24 <__aeabi_fmul>
 8006c58:	4955      	ldr	r1, [pc, #340]	; (8006db0 <__ieee754_acosf+0x2ac>)
 8006c5a:	f7f9 ff5b 	bl	8000b14 <__addsf3>
 8006c5e:	4621      	mov	r1, r4
 8006c60:	f7fa f860 	bl	8000d24 <__aeabi_fmul>
 8006c64:	4953      	ldr	r1, [pc, #332]	; (8006db4 <__ieee754_acosf+0x2b0>)
 8006c66:	f7f9 ff53 	bl	8000b10 <__aeabi_fsub>
 8006c6a:	4621      	mov	r1, r4
 8006c6c:	f7fa f85a 	bl	8000d24 <__aeabi_fmul>
 8006c70:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8006c74:	f7f9 ff4e 	bl	8000b14 <__addsf3>
 8006c78:	4601      	mov	r1, r0
 8006c7a:	4630      	mov	r0, r6
 8006c7c:	f7fa f906 	bl	8000e8c <__aeabi_fdiv>
 8006c80:	4629      	mov	r1, r5
 8006c82:	f7fa f84f 	bl	8000d24 <__aeabi_fmul>
 8006c86:	494c      	ldr	r1, [pc, #304]	; (8006db8 <__ieee754_acosf+0x2b4>)
 8006c88:	f7f9 ff42 	bl	8000b10 <__aeabi_fsub>
 8006c8c:	4629      	mov	r1, r5
 8006c8e:	f7f9 ff41 	bl	8000b14 <__addsf3>
 8006c92:	4601      	mov	r1, r0
 8006c94:	f7f9 ff3e 	bl	8000b14 <__addsf3>
 8006c98:	4601      	mov	r1, r0
 8006c9a:	4849      	ldr	r0, [pc, #292]	; (8006dc0 <__ieee754_acosf+0x2bc>)
 8006c9c:	e79e      	b.n	8006bdc <__ieee754_acosf+0xd8>
 8006c9e:	4601      	mov	r1, r0
 8006ca0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8006ca4:	f7f9 ff34 	bl	8000b10 <__aeabi_fsub>
 8006ca8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8006cac:	f7fa f83a 	bl	8000d24 <__aeabi_fmul>
 8006cb0:	4604      	mov	r4, r0
 8006cb2:	f7ff f99b 	bl	8005fec <__ieee754_sqrtf>
 8006cb6:	4936      	ldr	r1, [pc, #216]	; (8006d90 <__ieee754_acosf+0x28c>)
 8006cb8:	4606      	mov	r6, r0
 8006cba:	f420 657f 	bic.w	r5, r0, #4080	; 0xff0
 8006cbe:	4620      	mov	r0, r4
 8006cc0:	f7fa f830 	bl	8000d24 <__aeabi_fmul>
 8006cc4:	4933      	ldr	r1, [pc, #204]	; (8006d94 <__ieee754_acosf+0x290>)
 8006cc6:	f7f9 ff25 	bl	8000b14 <__addsf3>
 8006cca:	4621      	mov	r1, r4
 8006ccc:	f7fa f82a 	bl	8000d24 <__aeabi_fmul>
 8006cd0:	4931      	ldr	r1, [pc, #196]	; (8006d98 <__ieee754_acosf+0x294>)
 8006cd2:	f7f9 ff1d 	bl	8000b10 <__aeabi_fsub>
 8006cd6:	4621      	mov	r1, r4
 8006cd8:	f7fa f824 	bl	8000d24 <__aeabi_fmul>
 8006cdc:	492f      	ldr	r1, [pc, #188]	; (8006d9c <__ieee754_acosf+0x298>)
 8006cde:	f7f9 ff19 	bl	8000b14 <__addsf3>
 8006ce2:	4621      	mov	r1, r4
 8006ce4:	f7fa f81e 	bl	8000d24 <__aeabi_fmul>
 8006ce8:	492d      	ldr	r1, [pc, #180]	; (8006da0 <__ieee754_acosf+0x29c>)
 8006cea:	f7f9 ff11 	bl	8000b10 <__aeabi_fsub>
 8006cee:	4621      	mov	r1, r4
 8006cf0:	f7fa f818 	bl	8000d24 <__aeabi_fmul>
 8006cf4:	492b      	ldr	r1, [pc, #172]	; (8006da4 <__ieee754_acosf+0x2a0>)
 8006cf6:	f7f9 ff0d 	bl	8000b14 <__addsf3>
 8006cfa:	4621      	mov	r1, r4
 8006cfc:	f7fa f812 	bl	8000d24 <__aeabi_fmul>
 8006d00:	4929      	ldr	r1, [pc, #164]	; (8006da8 <__ieee754_acosf+0x2a4>)
 8006d02:	4607      	mov	r7, r0
 8006d04:	4620      	mov	r0, r4
 8006d06:	f7fa f80d 	bl	8000d24 <__aeabi_fmul>
 8006d0a:	4928      	ldr	r1, [pc, #160]	; (8006dac <__ieee754_acosf+0x2a8>)
 8006d0c:	f7f9 ff00 	bl	8000b10 <__aeabi_fsub>
 8006d10:	4621      	mov	r1, r4
 8006d12:	f7fa f807 	bl	8000d24 <__aeabi_fmul>
 8006d16:	4926      	ldr	r1, [pc, #152]	; (8006db0 <__ieee754_acosf+0x2ac>)
 8006d18:	f7f9 fefc 	bl	8000b14 <__addsf3>
 8006d1c:	4621      	mov	r1, r4
 8006d1e:	f7fa f801 	bl	8000d24 <__aeabi_fmul>
 8006d22:	4924      	ldr	r1, [pc, #144]	; (8006db4 <__ieee754_acosf+0x2b0>)
 8006d24:	f7f9 fef4 	bl	8000b10 <__aeabi_fsub>
 8006d28:	4621      	mov	r1, r4
 8006d2a:	f7f9 fffb 	bl	8000d24 <__aeabi_fmul>
 8006d2e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8006d32:	f7f9 feef 	bl	8000b14 <__addsf3>
 8006d36:	4601      	mov	r1, r0
 8006d38:	4638      	mov	r0, r7
 8006d3a:	f7fa f8a7 	bl	8000e8c <__aeabi_fdiv>
 8006d3e:	4631      	mov	r1, r6
 8006d40:	f7f9 fff0 	bl	8000d24 <__aeabi_fmul>
 8006d44:	f025 050f 	bic.w	r5, r5, #15
 8006d48:	4607      	mov	r7, r0
 8006d4a:	4629      	mov	r1, r5
 8006d4c:	4628      	mov	r0, r5
 8006d4e:	f7f9 ffe9 	bl	8000d24 <__aeabi_fmul>
 8006d52:	4601      	mov	r1, r0
 8006d54:	4620      	mov	r0, r4
 8006d56:	f7f9 fedb 	bl	8000b10 <__aeabi_fsub>
 8006d5a:	4629      	mov	r1, r5
 8006d5c:	4604      	mov	r4, r0
 8006d5e:	4630      	mov	r0, r6
 8006d60:	f7f9 fed8 	bl	8000b14 <__addsf3>
 8006d64:	4601      	mov	r1, r0
 8006d66:	4620      	mov	r0, r4
 8006d68:	f7fa f890 	bl	8000e8c <__aeabi_fdiv>
 8006d6c:	4601      	mov	r1, r0
 8006d6e:	4638      	mov	r0, r7
 8006d70:	f7f9 fed0 	bl	8000b14 <__addsf3>
 8006d74:	4629      	mov	r1, r5
 8006d76:	f7f9 fecd 	bl	8000b14 <__addsf3>
 8006d7a:	4601      	mov	r1, r0
 8006d7c:	f7f9 feca 	bl	8000b14 <__addsf3>
 8006d80:	e6cb      	b.n	8006b1a <__ieee754_acosf+0x16>
 8006d82:	2000      	movs	r0, #0
 8006d84:	e6c9      	b.n	8006b1a <__ieee754_acosf+0x16>
 8006d86:	480f      	ldr	r0, [pc, #60]	; (8006dc4 <__ieee754_acosf+0x2c0>)
 8006d88:	e6c7      	b.n	8006b1a <__ieee754_acosf+0x16>
 8006d8a:	bf00      	nop
 8006d8c:	40490fdb 	.word	0x40490fdb
 8006d90:	3811ef08 	.word	0x3811ef08
 8006d94:	3a4f7f04 	.word	0x3a4f7f04
 8006d98:	3d241146 	.word	0x3d241146
 8006d9c:	3e4e0aa8 	.word	0x3e4e0aa8
 8006da0:	3ea6b090 	.word	0x3ea6b090
 8006da4:	3e2aaaab 	.word	0x3e2aaaab
 8006da8:	3d9dc62e 	.word	0x3d9dc62e
 8006dac:	3f303361 	.word	0x3f303361
 8006db0:	4001572d 	.word	0x4001572d
 8006db4:	4019d139 	.word	0x4019d139
 8006db8:	33a22168 	.word	0x33a22168
 8006dbc:	3fc90fda 	.word	0x3fc90fda
 8006dc0:	40490fda 	.word	0x40490fda
 8006dc4:	3fc90fdb 	.word	0x3fc90fdb

08006dc8 <__ieee754_powf>:
 8006dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dcc:	f031 4a00 	bics.w	sl, r1, #2147483648	; 0x80000000
 8006dd0:	4681      	mov	r9, r0
 8006dd2:	460f      	mov	r7, r1
 8006dd4:	4680      	mov	r8, r0
 8006dd6:	460c      	mov	r4, r1
 8006dd8:	b087      	sub	sp, #28
 8006dda:	d10d      	bne.n	8006df8 <__ieee754_powf+0x30>
 8006ddc:	f480 0880 	eor.w	r8, r0, #4194304	; 0x400000
 8006de0:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8006de4:	f518 0f00 	cmn.w	r8, #8388608	; 0x800000
 8006de8:	f240 8336 	bls.w	8007458 <__ieee754_powf+0x690>
 8006dec:	4639      	mov	r1, r7
 8006dee:	4648      	mov	r0, r9
 8006df0:	f7f9 fe90 	bl	8000b14 <__addsf3>
 8006df4:	4601      	mov	r1, r0
 8006df6:	e040      	b.n	8006e7a <__ieee754_powf+0xb2>
 8006df8:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8006dfc:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8006e00:	dcf4      	bgt.n	8006dec <__ieee754_powf+0x24>
 8006e02:	f1ba 4fff 	cmp.w	sl, #2139095040	; 0x7f800000
 8006e06:	dd08      	ble.n	8006e1a <__ieee754_powf+0x52>
 8006e08:	f1b0 5f7e 	cmp.w	r0, #1065353216	; 0x3f800000
 8006e0c:	d1ee      	bne.n	8006dec <__ieee754_powf+0x24>
 8006e0e:	f481 0480 	eor.w	r4, r1, #4194304	; 0x400000
 8006e12:	0064      	lsls	r4, r4, #1
 8006e14:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8006e18:	e7e6      	b.n	8006de8 <__ieee754_powf+0x20>
 8006e1a:	2800      	cmp	r0, #0
 8006e1c:	da20      	bge.n	8006e60 <__ieee754_powf+0x98>
 8006e1e:	f1ba 4f97 	cmp.w	sl, #1266679808	; 0x4b800000
 8006e22:	da2e      	bge.n	8006e82 <__ieee754_powf+0xba>
 8006e24:	f1ba 5f7e 	cmp.w	sl, #1065353216	; 0x3f800000
 8006e28:	f2c0 831b 	blt.w	8007462 <__ieee754_powf+0x69a>
 8006e2c:	ea4f 53ea 	mov.w	r3, sl, asr #23
 8006e30:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8006e34:	fa4a f503 	asr.w	r5, sl, r3
 8006e38:	fa05 f303 	lsl.w	r3, r5, r3
 8006e3c:	4553      	cmp	r3, sl
 8006e3e:	f040 8310 	bne.w	8007462 <__ieee754_powf+0x69a>
 8006e42:	f005 0501 	and.w	r5, r5, #1
 8006e46:	f1c5 0502 	rsb	r5, r5, #2
 8006e4a:	f1ba 5f7e 	cmp.w	sl, #1065353216	; 0x3f800000
 8006e4e:	d120      	bne.n	8006e92 <__ieee754_powf+0xca>
 8006e50:	2c00      	cmp	r4, #0
 8006e52:	4649      	mov	r1, r9
 8006e54:	da11      	bge.n	8006e7a <__ieee754_powf+0xb2>
 8006e56:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8006e5a:	f7fa f817 	bl	8000e8c <__aeabi_fdiv>
 8006e5e:	e7c9      	b.n	8006df4 <__ieee754_powf+0x2c>
 8006e60:	2500      	movs	r5, #0
 8006e62:	f1ba 4fff 	cmp.w	sl, #2139095040	; 0x7f800000
 8006e66:	d1f0      	bne.n	8006e4a <__ieee754_powf+0x82>
 8006e68:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 8006e6c:	f000 82f4 	beq.w	8007458 <__ieee754_powf+0x690>
 8006e70:	dd09      	ble.n	8006e86 <__ieee754_powf+0xbe>
 8006e72:	2c00      	cmp	r4, #0
 8006e74:	f2c0 82f3 	blt.w	800745e <__ieee754_powf+0x696>
 8006e78:	4639      	mov	r1, r7
 8006e7a:	4608      	mov	r0, r1
 8006e7c:	b007      	add	sp, #28
 8006e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e82:	2502      	movs	r5, #2
 8006e84:	e7ed      	b.n	8006e62 <__ieee754_powf+0x9a>
 8006e86:	2c00      	cmp	r4, #0
 8006e88:	f280 82e9 	bge.w	800745e <__ieee754_powf+0x696>
 8006e8c:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
 8006e90:	e7f3      	b.n	8006e7a <__ieee754_powf+0xb2>
 8006e92:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8006e96:	d104      	bne.n	8006ea2 <__ieee754_powf+0xda>
 8006e98:	4649      	mov	r1, r9
 8006e9a:	4648      	mov	r0, r9
 8006e9c:	f7f9 ff42 	bl	8000d24 <__aeabi_fmul>
 8006ea0:	e7a8      	b.n	8006df4 <__ieee754_powf+0x2c>
 8006ea2:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8006ea6:	4648      	mov	r0, r9
 8006ea8:	d107      	bne.n	8006eba <__ieee754_powf+0xf2>
 8006eaa:	f1b8 0f00 	cmp.w	r8, #0
 8006eae:	db04      	blt.n	8006eba <__ieee754_powf+0xf2>
 8006eb0:	b007      	add	sp, #28
 8006eb2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eb6:	f7ff b899 	b.w	8005fec <__ieee754_sqrtf>
 8006eba:	f7ff f881 	bl	8005fc0 <fabsf>
 8006ebe:	4601      	mov	r1, r0
 8006ec0:	b126      	cbz	r6, 8006ecc <__ieee754_powf+0x104>
 8006ec2:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8006ec6:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8006eca:	d117      	bne.n	8006efc <__ieee754_powf+0x134>
 8006ecc:	2c00      	cmp	r4, #0
 8006ece:	da04      	bge.n	8006eda <__ieee754_powf+0x112>
 8006ed0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8006ed4:	f7f9 ffda 	bl	8000e8c <__aeabi_fdiv>
 8006ed8:	4601      	mov	r1, r0
 8006eda:	f1b8 0f00 	cmp.w	r8, #0
 8006ede:	dacc      	bge.n	8006e7a <__ieee754_powf+0xb2>
 8006ee0:	f1a6 567e 	sub.w	r6, r6, #1065353216	; 0x3f800000
 8006ee4:	432e      	orrs	r6, r5
 8006ee6:	d104      	bne.n	8006ef2 <__ieee754_powf+0x12a>
 8006ee8:	4608      	mov	r0, r1
 8006eea:	f7f9 fe11 	bl	8000b10 <__aeabi_fsub>
 8006eee:	4601      	mov	r1, r0
 8006ef0:	e7b3      	b.n	8006e5a <__ieee754_powf+0x92>
 8006ef2:	2d01      	cmp	r5, #1
 8006ef4:	d1c1      	bne.n	8006e7a <__ieee754_powf+0xb2>
 8006ef6:	f101 4000 	add.w	r0, r1, #2147483648	; 0x80000000
 8006efa:	e77b      	b.n	8006df4 <__ieee754_powf+0x2c>
 8006efc:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 8006f00:	3b01      	subs	r3, #1
 8006f02:	9302      	str	r3, [sp, #8]
 8006f04:	432b      	orrs	r3, r5
 8006f06:	d101      	bne.n	8006f0c <__ieee754_powf+0x144>
 8006f08:	4649      	mov	r1, r9
 8006f0a:	e7ed      	b.n	8006ee8 <__ieee754_powf+0x120>
 8006f0c:	f1ba 4f9a 	cmp.w	sl, #1291845632	; 0x4d000000
 8006f10:	f340 809e 	ble.w	8007050 <__ieee754_powf+0x288>
 8006f14:	4b47      	ldr	r3, [pc, #284]	; (8007034 <__ieee754_powf+0x26c>)
 8006f16:	429e      	cmp	r6, r3
 8006f18:	dc07      	bgt.n	8006f2a <__ieee754_powf+0x162>
 8006f1a:	2c00      	cmp	r4, #0
 8006f1c:	da0a      	bge.n	8006f34 <__ieee754_powf+0x16c>
 8006f1e:	2000      	movs	r0, #0
 8006f20:	b007      	add	sp, #28
 8006f22:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f26:	f000 bbc2 	b.w	80076ae <__math_oflowf>
 8006f2a:	4b43      	ldr	r3, [pc, #268]	; (8007038 <__ieee754_powf+0x270>)
 8006f2c:	429e      	cmp	r6, r3
 8006f2e:	dd07      	ble.n	8006f40 <__ieee754_powf+0x178>
 8006f30:	2c00      	cmp	r4, #0
 8006f32:	dcf4      	bgt.n	8006f1e <__ieee754_powf+0x156>
 8006f34:	2000      	movs	r0, #0
 8006f36:	b007      	add	sp, #28
 8006f38:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f3c:	f000 bbb3 	b.w	80076a6 <__math_uflowf>
 8006f40:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8006f44:	f7f9 fde4 	bl	8000b10 <__aeabi_fsub>
 8006f48:	493c      	ldr	r1, [pc, #240]	; (800703c <__ieee754_powf+0x274>)
 8006f4a:	4606      	mov	r6, r0
 8006f4c:	f7f9 feea 	bl	8000d24 <__aeabi_fmul>
 8006f50:	493b      	ldr	r1, [pc, #236]	; (8007040 <__ieee754_powf+0x278>)
 8006f52:	4680      	mov	r8, r0
 8006f54:	4630      	mov	r0, r6
 8006f56:	f7f9 fee5 	bl	8000d24 <__aeabi_fmul>
 8006f5a:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 8006f5e:	4681      	mov	r9, r0
 8006f60:	4630      	mov	r0, r6
 8006f62:	f7f9 fedf 	bl	8000d24 <__aeabi_fmul>
 8006f66:	4601      	mov	r1, r0
 8006f68:	4836      	ldr	r0, [pc, #216]	; (8007044 <__ieee754_powf+0x27c>)
 8006f6a:	f7f9 fdd1 	bl	8000b10 <__aeabi_fsub>
 8006f6e:	4631      	mov	r1, r6
 8006f70:	f7f9 fed8 	bl	8000d24 <__aeabi_fmul>
 8006f74:	4601      	mov	r1, r0
 8006f76:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8006f7a:	f7f9 fdc9 	bl	8000b10 <__aeabi_fsub>
 8006f7e:	4631      	mov	r1, r6
 8006f80:	4682      	mov	sl, r0
 8006f82:	4630      	mov	r0, r6
 8006f84:	f7f9 fece 	bl	8000d24 <__aeabi_fmul>
 8006f88:	4601      	mov	r1, r0
 8006f8a:	4650      	mov	r0, sl
 8006f8c:	f7f9 feca 	bl	8000d24 <__aeabi_fmul>
 8006f90:	492d      	ldr	r1, [pc, #180]	; (8007048 <__ieee754_powf+0x280>)
 8006f92:	f7f9 fec7 	bl	8000d24 <__aeabi_fmul>
 8006f96:	4601      	mov	r1, r0
 8006f98:	4648      	mov	r0, r9
 8006f9a:	f7f9 fdb9 	bl	8000b10 <__aeabi_fsub>
 8006f9e:	4601      	mov	r1, r0
 8006fa0:	4606      	mov	r6, r0
 8006fa2:	4640      	mov	r0, r8
 8006fa4:	f7f9 fdb6 	bl	8000b14 <__addsf3>
 8006fa8:	f420 697f 	bic.w	r9, r0, #4080	; 0xff0
 8006fac:	f029 090f 	bic.w	r9, r9, #15
 8006fb0:	4641      	mov	r1, r8
 8006fb2:	4648      	mov	r0, r9
 8006fb4:	f7f9 fdac 	bl	8000b10 <__aeabi_fsub>
 8006fb8:	4601      	mov	r1, r0
 8006fba:	4630      	mov	r0, r6
 8006fbc:	f7f9 fda8 	bl	8000b10 <__aeabi_fsub>
 8006fc0:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 8006fc4:	9b02      	ldr	r3, [sp, #8]
 8006fc6:	3d01      	subs	r5, #1
 8006fc8:	f024 040f 	bic.w	r4, r4, #15
 8006fcc:	431d      	orrs	r5, r3
 8006fce:	4606      	mov	r6, r0
 8006fd0:	4621      	mov	r1, r4
 8006fd2:	4638      	mov	r0, r7
 8006fd4:	bf14      	ite	ne
 8006fd6:	f04f 557e 	movne.w	r5, #1065353216	; 0x3f800000
 8006fda:	4d1c      	ldreq	r5, [pc, #112]	; (800704c <__ieee754_powf+0x284>)
 8006fdc:	f7f9 fd98 	bl	8000b10 <__aeabi_fsub>
 8006fe0:	4649      	mov	r1, r9
 8006fe2:	f7f9 fe9f 	bl	8000d24 <__aeabi_fmul>
 8006fe6:	4639      	mov	r1, r7
 8006fe8:	4680      	mov	r8, r0
 8006fea:	4630      	mov	r0, r6
 8006fec:	f7f9 fe9a 	bl	8000d24 <__aeabi_fmul>
 8006ff0:	4601      	mov	r1, r0
 8006ff2:	4640      	mov	r0, r8
 8006ff4:	f7f9 fd8e 	bl	8000b14 <__addsf3>
 8006ff8:	4621      	mov	r1, r4
 8006ffa:	4606      	mov	r6, r0
 8006ffc:	4648      	mov	r0, r9
 8006ffe:	f7f9 fe91 	bl	8000d24 <__aeabi_fmul>
 8007002:	4601      	mov	r1, r0
 8007004:	4607      	mov	r7, r0
 8007006:	4681      	mov	r9, r0
 8007008:	4630      	mov	r0, r6
 800700a:	f7f9 fd83 	bl	8000b14 <__addsf3>
 800700e:	2800      	cmp	r0, #0
 8007010:	4682      	mov	sl, r0
 8007012:	4680      	mov	r8, r0
 8007014:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 8007018:	f340 8200 	ble.w	800741c <__ieee754_powf+0x654>
 800701c:	f1b4 4f86 	cmp.w	r4, #1124073472	; 0x43000000
 8007020:	f340 814e 	ble.w	80072c0 <__ieee754_powf+0x4f8>
 8007024:	2100      	movs	r1, #0
 8007026:	4628      	mov	r0, r5
 8007028:	f7fa f81a 	bl	8001060 <__aeabi_fcmplt>
 800702c:	3800      	subs	r0, #0
 800702e:	bf18      	it	ne
 8007030:	2001      	movne	r0, #1
 8007032:	e775      	b.n	8006f20 <__ieee754_powf+0x158>
 8007034:	3f7ffff3 	.word	0x3f7ffff3
 8007038:	3f800007 	.word	0x3f800007
 800703c:	3fb8aa00 	.word	0x3fb8aa00
 8007040:	36eca570 	.word	0x36eca570
 8007044:	3eaaaaab 	.word	0x3eaaaaab
 8007048:	3fb8aa3b 	.word	0x3fb8aa3b
 800704c:	bf800000 	.word	0xbf800000
 8007050:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 8007054:	f040 8111 	bne.w	800727a <__ieee754_powf+0x4b2>
 8007058:	f04f 4197 	mov.w	r1, #1266679808	; 0x4b800000
 800705c:	f7f9 fe62 	bl	8000d24 <__aeabi_fmul>
 8007060:	f06f 0217 	mvn.w	r2, #23
 8007064:	4606      	mov	r6, r0
 8007066:	15f3      	asrs	r3, r6, #23
 8007068:	3b7f      	subs	r3, #127	; 0x7f
 800706a:	4413      	add	r3, r2
 800706c:	4a85      	ldr	r2, [pc, #532]	; (8007284 <__ieee754_powf+0x4bc>)
 800706e:	9301      	str	r3, [sp, #4]
 8007070:	f3c6 0316 	ubfx	r3, r6, #0, #23
 8007074:	4293      	cmp	r3, r2
 8007076:	f043 567e 	orr.w	r6, r3, #1065353216	; 0x3f800000
 800707a:	dd08      	ble.n	800708e <__ieee754_powf+0x2c6>
 800707c:	4a82      	ldr	r2, [pc, #520]	; (8007288 <__ieee754_powf+0x4c0>)
 800707e:	4293      	cmp	r3, r2
 8007080:	f340 80fd 	ble.w	800727e <__ieee754_powf+0x4b6>
 8007084:	9b01      	ldr	r3, [sp, #4]
 8007086:	f5a6 0600 	sub.w	r6, r6, #8388608	; 0x800000
 800708a:	3301      	adds	r3, #1
 800708c:	9301      	str	r3, [sp, #4]
 800708e:	2300      	movs	r3, #0
 8007090:	9300      	str	r3, [sp, #0]
 8007092:	9900      	ldr	r1, [sp, #0]
 8007094:	4a7d      	ldr	r2, [pc, #500]	; (800728c <__ieee754_powf+0x4c4>)
 8007096:	4630      	mov	r0, r6
 8007098:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800709c:	9603      	str	r6, [sp, #12]
 800709e:	4611      	mov	r1, r2
 80070a0:	9205      	str	r2, [sp, #20]
 80070a2:	f7f9 fd35 	bl	8000b10 <__aeabi_fsub>
 80070a6:	9a05      	ldr	r2, [sp, #20]
 80070a8:	9b03      	ldr	r3, [sp, #12]
 80070aa:	4683      	mov	fp, r0
 80070ac:	4619      	mov	r1, r3
 80070ae:	4610      	mov	r0, r2
 80070b0:	9203      	str	r2, [sp, #12]
 80070b2:	9304      	str	r3, [sp, #16]
 80070b4:	f7f9 fd2e 	bl	8000b14 <__addsf3>
 80070b8:	4601      	mov	r1, r0
 80070ba:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80070be:	f7f9 fee5 	bl	8000e8c <__aeabi_fdiv>
 80070c2:	4682      	mov	sl, r0
 80070c4:	4601      	mov	r1, r0
 80070c6:	4658      	mov	r0, fp
 80070c8:	f7f9 fe2c 	bl	8000d24 <__aeabi_fmul>
 80070cc:	1076      	asrs	r6, r6, #1
 80070ce:	9b00      	ldr	r3, [sp, #0]
 80070d0:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 80070d4:	f420 697f 	bic.w	r9, r0, #4080	; 0xff0
 80070d8:	f506 2680 	add.w	r6, r6, #262144	; 0x40000
 80070dc:	f029 090f 	bic.w	r9, r9, #15
 80070e0:	eb06 5643 	add.w	r6, r6, r3, lsl #21
 80070e4:	4680      	mov	r8, r0
 80070e6:	4631      	mov	r1, r6
 80070e8:	4648      	mov	r0, r9
 80070ea:	f7f9 fe1b 	bl	8000d24 <__aeabi_fmul>
 80070ee:	4601      	mov	r1, r0
 80070f0:	4658      	mov	r0, fp
 80070f2:	f7f9 fd0d 	bl	8000b10 <__aeabi_fsub>
 80070f6:	9a03      	ldr	r2, [sp, #12]
 80070f8:	4683      	mov	fp, r0
 80070fa:	4611      	mov	r1, r2
 80070fc:	4630      	mov	r0, r6
 80070fe:	f7f9 fd07 	bl	8000b10 <__aeabi_fsub>
 8007102:	9b04      	ldr	r3, [sp, #16]
 8007104:	4601      	mov	r1, r0
 8007106:	4618      	mov	r0, r3
 8007108:	f7f9 fd02 	bl	8000b10 <__aeabi_fsub>
 800710c:	4649      	mov	r1, r9
 800710e:	f7f9 fe09 	bl	8000d24 <__aeabi_fmul>
 8007112:	4601      	mov	r1, r0
 8007114:	4658      	mov	r0, fp
 8007116:	f7f9 fcfb 	bl	8000b10 <__aeabi_fsub>
 800711a:	4651      	mov	r1, sl
 800711c:	f7f9 fe02 	bl	8000d24 <__aeabi_fmul>
 8007120:	4641      	mov	r1, r8
 8007122:	4682      	mov	sl, r0
 8007124:	4640      	mov	r0, r8
 8007126:	f7f9 fdfd 	bl	8000d24 <__aeabi_fmul>
 800712a:	4606      	mov	r6, r0
 800712c:	4958      	ldr	r1, [pc, #352]	; (8007290 <__ieee754_powf+0x4c8>)
 800712e:	f7f9 fdf9 	bl	8000d24 <__aeabi_fmul>
 8007132:	4958      	ldr	r1, [pc, #352]	; (8007294 <__ieee754_powf+0x4cc>)
 8007134:	f7f9 fcee 	bl	8000b14 <__addsf3>
 8007138:	4631      	mov	r1, r6
 800713a:	f7f9 fdf3 	bl	8000d24 <__aeabi_fmul>
 800713e:	4956      	ldr	r1, [pc, #344]	; (8007298 <__ieee754_powf+0x4d0>)
 8007140:	f7f9 fce8 	bl	8000b14 <__addsf3>
 8007144:	4631      	mov	r1, r6
 8007146:	f7f9 fded 	bl	8000d24 <__aeabi_fmul>
 800714a:	4954      	ldr	r1, [pc, #336]	; (800729c <__ieee754_powf+0x4d4>)
 800714c:	f7f9 fce2 	bl	8000b14 <__addsf3>
 8007150:	4631      	mov	r1, r6
 8007152:	f7f9 fde7 	bl	8000d24 <__aeabi_fmul>
 8007156:	4952      	ldr	r1, [pc, #328]	; (80072a0 <__ieee754_powf+0x4d8>)
 8007158:	f7f9 fcdc 	bl	8000b14 <__addsf3>
 800715c:	4631      	mov	r1, r6
 800715e:	f7f9 fde1 	bl	8000d24 <__aeabi_fmul>
 8007162:	4950      	ldr	r1, [pc, #320]	; (80072a4 <__ieee754_powf+0x4dc>)
 8007164:	f7f9 fcd6 	bl	8000b14 <__addsf3>
 8007168:	4631      	mov	r1, r6
 800716a:	4683      	mov	fp, r0
 800716c:	4630      	mov	r0, r6
 800716e:	f7f9 fdd9 	bl	8000d24 <__aeabi_fmul>
 8007172:	4601      	mov	r1, r0
 8007174:	4658      	mov	r0, fp
 8007176:	f7f9 fdd5 	bl	8000d24 <__aeabi_fmul>
 800717a:	4606      	mov	r6, r0
 800717c:	4649      	mov	r1, r9
 800717e:	4640      	mov	r0, r8
 8007180:	f7f9 fcc8 	bl	8000b14 <__addsf3>
 8007184:	4651      	mov	r1, sl
 8007186:	f7f9 fdcd 	bl	8000d24 <__aeabi_fmul>
 800718a:	4631      	mov	r1, r6
 800718c:	f7f9 fcc2 	bl	8000b14 <__addsf3>
 8007190:	4649      	mov	r1, r9
 8007192:	4683      	mov	fp, r0
 8007194:	4648      	mov	r0, r9
 8007196:	f7f9 fdc5 	bl	8000d24 <__aeabi_fmul>
 800719a:	4943      	ldr	r1, [pc, #268]	; (80072a8 <__ieee754_powf+0x4e0>)
 800719c:	9003      	str	r0, [sp, #12]
 800719e:	f7f9 fcb9 	bl	8000b14 <__addsf3>
 80071a2:	4659      	mov	r1, fp
 80071a4:	f7f9 fcb6 	bl	8000b14 <__addsf3>
 80071a8:	f420 667f 	bic.w	r6, r0, #4080	; 0xff0
 80071ac:	f026 060f 	bic.w	r6, r6, #15
 80071b0:	4631      	mov	r1, r6
 80071b2:	4648      	mov	r0, r9
 80071b4:	f7f9 fdb6 	bl	8000d24 <__aeabi_fmul>
 80071b8:	493b      	ldr	r1, [pc, #236]	; (80072a8 <__ieee754_powf+0x4e0>)
 80071ba:	4681      	mov	r9, r0
 80071bc:	4630      	mov	r0, r6
 80071be:	f7f9 fca7 	bl	8000b10 <__aeabi_fsub>
 80071c2:	9b03      	ldr	r3, [sp, #12]
 80071c4:	4619      	mov	r1, r3
 80071c6:	f7f9 fca3 	bl	8000b10 <__aeabi_fsub>
 80071ca:	4601      	mov	r1, r0
 80071cc:	4658      	mov	r0, fp
 80071ce:	f7f9 fc9f 	bl	8000b10 <__aeabi_fsub>
 80071d2:	4641      	mov	r1, r8
 80071d4:	f7f9 fda6 	bl	8000d24 <__aeabi_fmul>
 80071d8:	4631      	mov	r1, r6
 80071da:	4680      	mov	r8, r0
 80071dc:	4650      	mov	r0, sl
 80071de:	f7f9 fda1 	bl	8000d24 <__aeabi_fmul>
 80071e2:	4601      	mov	r1, r0
 80071e4:	4640      	mov	r0, r8
 80071e6:	f7f9 fc95 	bl	8000b14 <__addsf3>
 80071ea:	4682      	mov	sl, r0
 80071ec:	4601      	mov	r1, r0
 80071ee:	4648      	mov	r0, r9
 80071f0:	f7f9 fc90 	bl	8000b14 <__addsf3>
 80071f4:	f420 667f 	bic.w	r6, r0, #4080	; 0xff0
 80071f8:	f026 060f 	bic.w	r6, r6, #15
 80071fc:	4630      	mov	r0, r6
 80071fe:	492b      	ldr	r1, [pc, #172]	; (80072ac <__ieee754_powf+0x4e4>)
 8007200:	f7f9 fd90 	bl	8000d24 <__aeabi_fmul>
 8007204:	4649      	mov	r1, r9
 8007206:	4680      	mov	r8, r0
 8007208:	4630      	mov	r0, r6
 800720a:	f7f9 fc81 	bl	8000b10 <__aeabi_fsub>
 800720e:	4601      	mov	r1, r0
 8007210:	4650      	mov	r0, sl
 8007212:	f7f9 fc7d 	bl	8000b10 <__aeabi_fsub>
 8007216:	4926      	ldr	r1, [pc, #152]	; (80072b0 <__ieee754_powf+0x4e8>)
 8007218:	f7f9 fd84 	bl	8000d24 <__aeabi_fmul>
 800721c:	4925      	ldr	r1, [pc, #148]	; (80072b4 <__ieee754_powf+0x4ec>)
 800721e:	4681      	mov	r9, r0
 8007220:	4630      	mov	r0, r6
 8007222:	f7f9 fd7f 	bl	8000d24 <__aeabi_fmul>
 8007226:	4601      	mov	r1, r0
 8007228:	4648      	mov	r0, r9
 800722a:	f7f9 fc73 	bl	8000b14 <__addsf3>
 800722e:	4b22      	ldr	r3, [pc, #136]	; (80072b8 <__ieee754_powf+0x4f0>)
 8007230:	9a00      	ldr	r2, [sp, #0]
 8007232:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007236:	f7f9 fc6d 	bl	8000b14 <__addsf3>
 800723a:	4606      	mov	r6, r0
 800723c:	9801      	ldr	r0, [sp, #4]
 800723e:	f7f9 fd1d 	bl	8000c7c <__aeabi_i2f>
 8007242:	4682      	mov	sl, r0
 8007244:	4b1d      	ldr	r3, [pc, #116]	; (80072bc <__ieee754_powf+0x4f4>)
 8007246:	9a00      	ldr	r2, [sp, #0]
 8007248:	4631      	mov	r1, r6
 800724a:	f853 b022 	ldr.w	fp, [r3, r2, lsl #2]
 800724e:	4640      	mov	r0, r8
 8007250:	f7f9 fc60 	bl	8000b14 <__addsf3>
 8007254:	4659      	mov	r1, fp
 8007256:	f7f9 fc5d 	bl	8000b14 <__addsf3>
 800725a:	4651      	mov	r1, sl
 800725c:	f7f9 fc5a 	bl	8000b14 <__addsf3>
 8007260:	f420 697f 	bic.w	r9, r0, #4080	; 0xff0
 8007264:	f029 090f 	bic.w	r9, r9, #15
 8007268:	4651      	mov	r1, sl
 800726a:	4648      	mov	r0, r9
 800726c:	f7f9 fc50 	bl	8000b10 <__aeabi_fsub>
 8007270:	4659      	mov	r1, fp
 8007272:	f7f9 fc4d 	bl	8000b10 <__aeabi_fsub>
 8007276:	4641      	mov	r1, r8
 8007278:	e69c      	b.n	8006fb4 <__ieee754_powf+0x1ec>
 800727a:	2200      	movs	r2, #0
 800727c:	e6f3      	b.n	8007066 <__ieee754_powf+0x29e>
 800727e:	2301      	movs	r3, #1
 8007280:	e706      	b.n	8007090 <__ieee754_powf+0x2c8>
 8007282:	bf00      	nop
 8007284:	001cc471 	.word	0x001cc471
 8007288:	005db3d6 	.word	0x005db3d6
 800728c:	080078f8 	.word	0x080078f8
 8007290:	3e53f142 	.word	0x3e53f142
 8007294:	3e6c3255 	.word	0x3e6c3255
 8007298:	3e8ba305 	.word	0x3e8ba305
 800729c:	3eaaaaab 	.word	0x3eaaaaab
 80072a0:	3edb6db7 	.word	0x3edb6db7
 80072a4:	3f19999a 	.word	0x3f19999a
 80072a8:	40400000 	.word	0x40400000
 80072ac:	3f763800 	.word	0x3f763800
 80072b0:	3f76384f 	.word	0x3f76384f
 80072b4:	369dc3a0 	.word	0x369dc3a0
 80072b8:	08007908 	.word	0x08007908
 80072bc:	08007900 	.word	0x08007900
 80072c0:	f040 80c2 	bne.w	8007448 <__ieee754_powf+0x680>
 80072c4:	4968      	ldr	r1, [pc, #416]	; (8007468 <__ieee754_powf+0x6a0>)
 80072c6:	4630      	mov	r0, r6
 80072c8:	f7f9 fc24 	bl	8000b14 <__addsf3>
 80072cc:	4639      	mov	r1, r7
 80072ce:	4681      	mov	r9, r0
 80072d0:	4650      	mov	r0, sl
 80072d2:	f7f9 fc1d 	bl	8000b10 <__aeabi_fsub>
 80072d6:	4601      	mov	r1, r0
 80072d8:	4648      	mov	r0, r9
 80072da:	f7f9 fedf 	bl	800109c <__aeabi_fcmpgt>
 80072de:	2800      	cmp	r0, #0
 80072e0:	f47f aea0 	bne.w	8007024 <__ieee754_powf+0x25c>
 80072e4:	15e4      	asrs	r4, r4, #23
 80072e6:	f1a4 037e 	sub.w	r3, r4, #126	; 0x7e
 80072ea:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
 80072ee:	411c      	asrs	r4, r3
 80072f0:	4444      	add	r4, r8
 80072f2:	f3c4 53c7 	ubfx	r3, r4, #23, #8
 80072f6:	495d      	ldr	r1, [pc, #372]	; (800746c <__ieee754_powf+0x6a4>)
 80072f8:	3b7f      	subs	r3, #127	; 0x7f
 80072fa:	4119      	asrs	r1, r3
 80072fc:	4021      	ands	r1, r4
 80072fe:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8007302:	f1c3 0317 	rsb	r3, r3, #23
 8007306:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
 800730a:	411c      	asrs	r4, r3
 800730c:	f1b8 0f00 	cmp.w	r8, #0
 8007310:	4638      	mov	r0, r7
 8007312:	bfb8      	it	lt
 8007314:	4264      	neglt	r4, r4
 8007316:	f7f9 fbfb 	bl	8000b10 <__aeabi_fsub>
 800731a:	4681      	mov	r9, r0
 800731c:	4631      	mov	r1, r6
 800731e:	4648      	mov	r0, r9
 8007320:	f7f9 fbf8 	bl	8000b14 <__addsf3>
 8007324:	f420 677f 	bic.w	r7, r0, #4080	; 0xff0
 8007328:	f027 070f 	bic.w	r7, r7, #15
 800732c:	4638      	mov	r0, r7
 800732e:	4950      	ldr	r1, [pc, #320]	; (8007470 <__ieee754_powf+0x6a8>)
 8007330:	f7f9 fcf8 	bl	8000d24 <__aeabi_fmul>
 8007334:	4649      	mov	r1, r9
 8007336:	4680      	mov	r8, r0
 8007338:	4638      	mov	r0, r7
 800733a:	f7f9 fbe9 	bl	8000b10 <__aeabi_fsub>
 800733e:	4601      	mov	r1, r0
 8007340:	4630      	mov	r0, r6
 8007342:	f7f9 fbe5 	bl	8000b10 <__aeabi_fsub>
 8007346:	494b      	ldr	r1, [pc, #300]	; (8007474 <__ieee754_powf+0x6ac>)
 8007348:	f7f9 fcec 	bl	8000d24 <__aeabi_fmul>
 800734c:	494a      	ldr	r1, [pc, #296]	; (8007478 <__ieee754_powf+0x6b0>)
 800734e:	4606      	mov	r6, r0
 8007350:	4638      	mov	r0, r7
 8007352:	f7f9 fce7 	bl	8000d24 <__aeabi_fmul>
 8007356:	4601      	mov	r1, r0
 8007358:	4630      	mov	r0, r6
 800735a:	f7f9 fbdb 	bl	8000b14 <__addsf3>
 800735e:	4607      	mov	r7, r0
 8007360:	4601      	mov	r1, r0
 8007362:	4640      	mov	r0, r8
 8007364:	f7f9 fbd6 	bl	8000b14 <__addsf3>
 8007368:	4641      	mov	r1, r8
 800736a:	4606      	mov	r6, r0
 800736c:	f7f9 fbd0 	bl	8000b10 <__aeabi_fsub>
 8007370:	4601      	mov	r1, r0
 8007372:	4638      	mov	r0, r7
 8007374:	f7f9 fbcc 	bl	8000b10 <__aeabi_fsub>
 8007378:	4631      	mov	r1, r6
 800737a:	4680      	mov	r8, r0
 800737c:	4630      	mov	r0, r6
 800737e:	f7f9 fcd1 	bl	8000d24 <__aeabi_fmul>
 8007382:	4607      	mov	r7, r0
 8007384:	493d      	ldr	r1, [pc, #244]	; (800747c <__ieee754_powf+0x6b4>)
 8007386:	f7f9 fccd 	bl	8000d24 <__aeabi_fmul>
 800738a:	493d      	ldr	r1, [pc, #244]	; (8007480 <__ieee754_powf+0x6b8>)
 800738c:	f7f9 fbc0 	bl	8000b10 <__aeabi_fsub>
 8007390:	4639      	mov	r1, r7
 8007392:	f7f9 fcc7 	bl	8000d24 <__aeabi_fmul>
 8007396:	493b      	ldr	r1, [pc, #236]	; (8007484 <__ieee754_powf+0x6bc>)
 8007398:	f7f9 fbbc 	bl	8000b14 <__addsf3>
 800739c:	4639      	mov	r1, r7
 800739e:	f7f9 fcc1 	bl	8000d24 <__aeabi_fmul>
 80073a2:	4939      	ldr	r1, [pc, #228]	; (8007488 <__ieee754_powf+0x6c0>)
 80073a4:	f7f9 fbb4 	bl	8000b10 <__aeabi_fsub>
 80073a8:	4639      	mov	r1, r7
 80073aa:	f7f9 fcbb 	bl	8000d24 <__aeabi_fmul>
 80073ae:	4937      	ldr	r1, [pc, #220]	; (800748c <__ieee754_powf+0x6c4>)
 80073b0:	f7f9 fbb0 	bl	8000b14 <__addsf3>
 80073b4:	4639      	mov	r1, r7
 80073b6:	f7f9 fcb5 	bl	8000d24 <__aeabi_fmul>
 80073ba:	4601      	mov	r1, r0
 80073bc:	4630      	mov	r0, r6
 80073be:	f7f9 fba7 	bl	8000b10 <__aeabi_fsub>
 80073c2:	4607      	mov	r7, r0
 80073c4:	4601      	mov	r1, r0
 80073c6:	4630      	mov	r0, r6
 80073c8:	f7f9 fcac 	bl	8000d24 <__aeabi_fmul>
 80073cc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80073d0:	4681      	mov	r9, r0
 80073d2:	4638      	mov	r0, r7
 80073d4:	f7f9 fb9c 	bl	8000b10 <__aeabi_fsub>
 80073d8:	4601      	mov	r1, r0
 80073da:	4648      	mov	r0, r9
 80073dc:	f7f9 fd56 	bl	8000e8c <__aeabi_fdiv>
 80073e0:	4641      	mov	r1, r8
 80073e2:	4607      	mov	r7, r0
 80073e4:	4630      	mov	r0, r6
 80073e6:	f7f9 fc9d 	bl	8000d24 <__aeabi_fmul>
 80073ea:	4641      	mov	r1, r8
 80073ec:	f7f9 fb92 	bl	8000b14 <__addsf3>
 80073f0:	4601      	mov	r1, r0
 80073f2:	4638      	mov	r0, r7
 80073f4:	f7f9 fb8c 	bl	8000b10 <__aeabi_fsub>
 80073f8:	4631      	mov	r1, r6
 80073fa:	f7f9 fb89 	bl	8000b10 <__aeabi_fsub>
 80073fe:	4601      	mov	r1, r0
 8007400:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8007404:	f7f9 fb84 	bl	8000b10 <__aeabi_fsub>
 8007408:	eb00 53c4 	add.w	r3, r0, r4, lsl #23
 800740c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007410:	da20      	bge.n	8007454 <__ieee754_powf+0x68c>
 8007412:	4621      	mov	r1, r4
 8007414:	f000 f8e6 	bl	80075e4 <scalbnf>
 8007418:	4629      	mov	r1, r5
 800741a:	e53f      	b.n	8006e9c <__ieee754_powf+0xd4>
 800741c:	4b1c      	ldr	r3, [pc, #112]	; (8007490 <__ieee754_powf+0x6c8>)
 800741e:	429c      	cmp	r4, r3
 8007420:	dd07      	ble.n	8007432 <__ieee754_powf+0x66a>
 8007422:	2100      	movs	r1, #0
 8007424:	4628      	mov	r0, r5
 8007426:	f7f9 fe1b 	bl	8001060 <__aeabi_fcmplt>
 800742a:	3800      	subs	r0, #0
 800742c:	bf18      	it	ne
 800742e:	2001      	movne	r0, #1
 8007430:	e581      	b.n	8006f36 <__ieee754_powf+0x16e>
 8007432:	d109      	bne.n	8007448 <__ieee754_powf+0x680>
 8007434:	4639      	mov	r1, r7
 8007436:	f7f9 fb6b 	bl	8000b10 <__aeabi_fsub>
 800743a:	4631      	mov	r1, r6
 800743c:	f7f9 fe24 	bl	8001088 <__aeabi_fcmpge>
 8007440:	2800      	cmp	r0, #0
 8007442:	f43f af4f 	beq.w	80072e4 <__ieee754_powf+0x51c>
 8007446:	e7ec      	b.n	8007422 <__ieee754_powf+0x65a>
 8007448:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800744c:	f73f af4a 	bgt.w	80072e4 <__ieee754_powf+0x51c>
 8007450:	2400      	movs	r4, #0
 8007452:	e763      	b.n	800731c <__ieee754_powf+0x554>
 8007454:	4618      	mov	r0, r3
 8007456:	e7df      	b.n	8007418 <__ieee754_powf+0x650>
 8007458:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800745c:	e50d      	b.n	8006e7a <__ieee754_powf+0xb2>
 800745e:	2100      	movs	r1, #0
 8007460:	e50b      	b.n	8006e7a <__ieee754_powf+0xb2>
 8007462:	2500      	movs	r5, #0
 8007464:	e4f1      	b.n	8006e4a <__ieee754_powf+0x82>
 8007466:	bf00      	nop
 8007468:	3338aa3c 	.word	0x3338aa3c
 800746c:	ff800000 	.word	0xff800000
 8007470:	3f317200 	.word	0x3f317200
 8007474:	3f317218 	.word	0x3f317218
 8007478:	35bfbe8c 	.word	0x35bfbe8c
 800747c:	3331bb4c 	.word	0x3331bb4c
 8007480:	35ddea0e 	.word	0x35ddea0e
 8007484:	388ab355 	.word	0x388ab355
 8007488:	3b360b61 	.word	0x3b360b61
 800748c:	3e2aaaab 	.word	0x3e2aaaab
 8007490:	43160000 	.word	0x43160000
 8007494:	00000000 	.word	0x00000000

08007498 <scalbn>:
 8007498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800749a:	4616      	mov	r6, r2
 800749c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80074a0:	4604      	mov	r4, r0
 80074a2:	460d      	mov	r5, r1
 80074a4:	460b      	mov	r3, r1
 80074a6:	b992      	cbnz	r2, 80074ce <scalbn+0x36>
 80074a8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80074ac:	4303      	orrs	r3, r0
 80074ae:	d03c      	beq.n	800752a <scalbn+0x92>
 80074b0:	4b31      	ldr	r3, [pc, #196]	; (8007578 <scalbn+0xe0>)
 80074b2:	2200      	movs	r2, #0
 80074b4:	f7f9 f808 	bl	80004c8 <__aeabi_dmul>
 80074b8:	4b30      	ldr	r3, [pc, #192]	; (800757c <scalbn+0xe4>)
 80074ba:	4604      	mov	r4, r0
 80074bc:	429e      	cmp	r6, r3
 80074be:	460d      	mov	r5, r1
 80074c0:	da0f      	bge.n	80074e2 <scalbn+0x4a>
 80074c2:	a329      	add	r3, pc, #164	; (adr r3, 8007568 <scalbn+0xd0>)
 80074c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074c8:	f7f8 fffe 	bl	80004c8 <__aeabi_dmul>
 80074cc:	e006      	b.n	80074dc <scalbn+0x44>
 80074ce:	f240 77ff 	movw	r7, #2047	; 0x7ff
 80074d2:	42ba      	cmp	r2, r7
 80074d4:	d109      	bne.n	80074ea <scalbn+0x52>
 80074d6:	4602      	mov	r2, r0
 80074d8:	f7f8 fe40 	bl	800015c <__adddf3>
 80074dc:	4604      	mov	r4, r0
 80074de:	460d      	mov	r5, r1
 80074e0:	e023      	b.n	800752a <scalbn+0x92>
 80074e2:	460b      	mov	r3, r1
 80074e4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80074e8:	3a36      	subs	r2, #54	; 0x36
 80074ea:	f24c 3150 	movw	r1, #50000	; 0xc350
 80074ee:	428e      	cmp	r6, r1
 80074f0:	dd0e      	ble.n	8007510 <scalbn+0x78>
 80074f2:	a31f      	add	r3, pc, #124	; (adr r3, 8007570 <scalbn+0xd8>)
 80074f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074f8:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 80074fc:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8007500:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8007504:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8007508:	481d      	ldr	r0, [pc, #116]	; (8007580 <scalbn+0xe8>)
 800750a:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800750e:	e7db      	b.n	80074c8 <scalbn+0x30>
 8007510:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007514:	4432      	add	r2, r6
 8007516:	428a      	cmp	r2, r1
 8007518:	dceb      	bgt.n	80074f2 <scalbn+0x5a>
 800751a:	2a00      	cmp	r2, #0
 800751c:	dd08      	ble.n	8007530 <scalbn+0x98>
 800751e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007522:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007526:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800752a:	4620      	mov	r0, r4
 800752c:	4629      	mov	r1, r5
 800752e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007530:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007534:	da0c      	bge.n	8007550 <scalbn+0xb8>
 8007536:	a30c      	add	r3, pc, #48	; (adr r3, 8007568 <scalbn+0xd0>)
 8007538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800753c:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8007540:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8007544:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8007548:	480e      	ldr	r0, [pc, #56]	; (8007584 <scalbn+0xec>)
 800754a:	f041 011f 	orr.w	r1, r1, #31
 800754e:	e7bb      	b.n	80074c8 <scalbn+0x30>
 8007550:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007554:	3236      	adds	r2, #54	; 0x36
 8007556:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800755a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800755e:	4620      	mov	r0, r4
 8007560:	4629      	mov	r1, r5
 8007562:	2200      	movs	r2, #0
 8007564:	4b08      	ldr	r3, [pc, #32]	; (8007588 <scalbn+0xf0>)
 8007566:	e7af      	b.n	80074c8 <scalbn+0x30>
 8007568:	c2f8f359 	.word	0xc2f8f359
 800756c:	01a56e1f 	.word	0x01a56e1f
 8007570:	8800759c 	.word	0x8800759c
 8007574:	7e37e43c 	.word	0x7e37e43c
 8007578:	43500000 	.word	0x43500000
 800757c:	ffff3cb0 	.word	0xffff3cb0
 8007580:	8800759c 	.word	0x8800759c
 8007584:	c2f8f359 	.word	0xc2f8f359
 8007588:	3c900000 	.word	0x3c900000

0800758c <with_errno>:
 800758c:	b570      	push	{r4, r5, r6, lr}
 800758e:	4604      	mov	r4, r0
 8007590:	460d      	mov	r5, r1
 8007592:	4616      	mov	r6, r2
 8007594:	f7fe faee 	bl	8005b74 <__errno>
 8007598:	4629      	mov	r1, r5
 800759a:	6006      	str	r6, [r0, #0]
 800759c:	4620      	mov	r0, r4
 800759e:	bd70      	pop	{r4, r5, r6, pc}

080075a0 <xflow>:
 80075a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80075a2:	4615      	mov	r5, r2
 80075a4:	461c      	mov	r4, r3
 80075a6:	b180      	cbz	r0, 80075ca <xflow+0x2a>
 80075a8:	4610      	mov	r0, r2
 80075aa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80075ae:	e9cd 0100 	strd	r0, r1, [sp]
 80075b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80075b6:	4628      	mov	r0, r5
 80075b8:	4621      	mov	r1, r4
 80075ba:	f7f8 ff85 	bl	80004c8 <__aeabi_dmul>
 80075be:	2222      	movs	r2, #34	; 0x22
 80075c0:	b003      	add	sp, #12
 80075c2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80075c6:	f7ff bfe1 	b.w	800758c <with_errno>
 80075ca:	4610      	mov	r0, r2
 80075cc:	4619      	mov	r1, r3
 80075ce:	e7ee      	b.n	80075ae <xflow+0xe>

080075d0 <__math_uflow>:
 80075d0:	2200      	movs	r2, #0
 80075d2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80075d6:	f7ff bfe3 	b.w	80075a0 <xflow>

080075da <__math_oflow>:
 80075da:	2200      	movs	r2, #0
 80075dc:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80075e0:	f7ff bfde 	b.w	80075a0 <xflow>

080075e4 <scalbnf>:
 80075e4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80075e8:	b538      	push	{r3, r4, r5, lr}
 80075ea:	4603      	mov	r3, r0
 80075ec:	460d      	mov	r5, r1
 80075ee:	4604      	mov	r4, r0
 80075f0:	d02e      	beq.n	8007650 <scalbnf+0x6c>
 80075f2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80075f6:	d304      	bcc.n	8007602 <scalbnf+0x1e>
 80075f8:	4601      	mov	r1, r0
 80075fa:	f7f9 fa8b 	bl	8000b14 <__addsf3>
 80075fe:	4603      	mov	r3, r0
 8007600:	e026      	b.n	8007650 <scalbnf+0x6c>
 8007602:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 8007606:	d118      	bne.n	800763a <scalbnf+0x56>
 8007608:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 800760c:	f7f9 fb8a 	bl	8000d24 <__aeabi_fmul>
 8007610:	4a17      	ldr	r2, [pc, #92]	; (8007670 <scalbnf+0x8c>)
 8007612:	4603      	mov	r3, r0
 8007614:	4295      	cmp	r5, r2
 8007616:	db0c      	blt.n	8007632 <scalbnf+0x4e>
 8007618:	4604      	mov	r4, r0
 800761a:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800761e:	3a19      	subs	r2, #25
 8007620:	f24c 3150 	movw	r1, #50000	; 0xc350
 8007624:	428d      	cmp	r5, r1
 8007626:	dd0a      	ble.n	800763e <scalbnf+0x5a>
 8007628:	4912      	ldr	r1, [pc, #72]	; (8007674 <scalbnf+0x90>)
 800762a:	4618      	mov	r0, r3
 800762c:	f361 001e 	bfi	r0, r1, #0, #31
 8007630:	e000      	b.n	8007634 <scalbnf+0x50>
 8007632:	4911      	ldr	r1, [pc, #68]	; (8007678 <scalbnf+0x94>)
 8007634:	f7f9 fb76 	bl	8000d24 <__aeabi_fmul>
 8007638:	e7e1      	b.n	80075fe <scalbnf+0x1a>
 800763a:	0dd2      	lsrs	r2, r2, #23
 800763c:	e7f0      	b.n	8007620 <scalbnf+0x3c>
 800763e:	1951      	adds	r1, r2, r5
 8007640:	29fe      	cmp	r1, #254	; 0xfe
 8007642:	dcf1      	bgt.n	8007628 <scalbnf+0x44>
 8007644:	2900      	cmp	r1, #0
 8007646:	dd05      	ble.n	8007654 <scalbnf+0x70>
 8007648:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 800764c:	ea44 53c1 	orr.w	r3, r4, r1, lsl #23
 8007650:	4618      	mov	r0, r3
 8007652:	bd38      	pop	{r3, r4, r5, pc}
 8007654:	f111 0f16 	cmn.w	r1, #22
 8007658:	da01      	bge.n	800765e <scalbnf+0x7a>
 800765a:	4907      	ldr	r1, [pc, #28]	; (8007678 <scalbnf+0x94>)
 800765c:	e7e5      	b.n	800762a <scalbnf+0x46>
 800765e:	f101 0019 	add.w	r0, r1, #25
 8007662:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 8007666:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 800766a:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
 800766e:	e7e1      	b.n	8007634 <scalbnf+0x50>
 8007670:	ffff3cb0 	.word	0xffff3cb0
 8007674:	7149f2ca 	.word	0x7149f2ca
 8007678:	0da24260 	.word	0x0da24260

0800767c <with_errnof>:
 800767c:	b538      	push	{r3, r4, r5, lr}
 800767e:	4604      	mov	r4, r0
 8007680:	460d      	mov	r5, r1
 8007682:	f7fe fa77 	bl	8005b74 <__errno>
 8007686:	6005      	str	r5, [r0, #0]
 8007688:	4620      	mov	r0, r4
 800768a:	bd38      	pop	{r3, r4, r5, pc}

0800768c <xflowf>:
 800768c:	b508      	push	{r3, lr}
 800768e:	b140      	cbz	r0, 80076a2 <xflowf+0x16>
 8007690:	f101 4000 	add.w	r0, r1, #2147483648	; 0x80000000
 8007694:	f7f9 fb46 	bl	8000d24 <__aeabi_fmul>
 8007698:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800769c:	2122      	movs	r1, #34	; 0x22
 800769e:	f7ff bfed 	b.w	800767c <with_errnof>
 80076a2:	4608      	mov	r0, r1
 80076a4:	e7f6      	b.n	8007694 <xflowf+0x8>

080076a6 <__math_uflowf>:
 80076a6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
 80076aa:	f7ff bfef 	b.w	800768c <xflowf>

080076ae <__math_oflowf>:
 80076ae:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 80076b2:	f7ff bfeb 	b.w	800768c <xflowf>
	...

080076b8 <__ieee754_sqrt>:
 80076b8:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 800785c <__ieee754_sqrt+0x1a4>
 80076bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076c0:	ea3c 0c01 	bics.w	ip, ip, r1
 80076c4:	460b      	mov	r3, r1
 80076c6:	4606      	mov	r6, r0
 80076c8:	460d      	mov	r5, r1
 80076ca:	460a      	mov	r2, r1
 80076cc:	4604      	mov	r4, r0
 80076ce:	d10e      	bne.n	80076ee <__ieee754_sqrt+0x36>
 80076d0:	4602      	mov	r2, r0
 80076d2:	f7f8 fef9 	bl	80004c8 <__aeabi_dmul>
 80076d6:	4602      	mov	r2, r0
 80076d8:	460b      	mov	r3, r1
 80076da:	4630      	mov	r0, r6
 80076dc:	4629      	mov	r1, r5
 80076de:	f7f8 fd3d 	bl	800015c <__adddf3>
 80076e2:	4606      	mov	r6, r0
 80076e4:	460d      	mov	r5, r1
 80076e6:	4630      	mov	r0, r6
 80076e8:	4629      	mov	r1, r5
 80076ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076ee:	2900      	cmp	r1, #0
 80076f0:	dc0d      	bgt.n	800770e <__ieee754_sqrt+0x56>
 80076f2:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80076f6:	ea5c 0c00 	orrs.w	ip, ip, r0
 80076fa:	d0f4      	beq.n	80076e6 <__ieee754_sqrt+0x2e>
 80076fc:	b139      	cbz	r1, 800770e <__ieee754_sqrt+0x56>
 80076fe:	4602      	mov	r2, r0
 8007700:	f7f8 fd2a 	bl	8000158 <__aeabi_dsub>
 8007704:	4602      	mov	r2, r0
 8007706:	460b      	mov	r3, r1
 8007708:	f7f9 f808 	bl	800071c <__aeabi_ddiv>
 800770c:	e7e9      	b.n	80076e2 <__ieee754_sqrt+0x2a>
 800770e:	1512      	asrs	r2, r2, #20
 8007710:	f000 8089 	beq.w	8007826 <__ieee754_sqrt+0x16e>
 8007714:	2500      	movs	r5, #0
 8007716:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800771a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800771e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007722:	07d2      	lsls	r2, r2, #31
 8007724:	bf5c      	itt	pl
 8007726:	005b      	lslpl	r3, r3, #1
 8007728:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800772c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007730:	bf58      	it	pl
 8007732:	0064      	lslpl	r4, r4, #1
 8007734:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8007738:	0062      	lsls	r2, r4, #1
 800773a:	2016      	movs	r0, #22
 800773c:	4629      	mov	r1, r5
 800773e:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 8007742:	1076      	asrs	r6, r6, #1
 8007744:	190f      	adds	r7, r1, r4
 8007746:	429f      	cmp	r7, r3
 8007748:	bfde      	ittt	le
 800774a:	1bdb      	suble	r3, r3, r7
 800774c:	1939      	addle	r1, r7, r4
 800774e:	192d      	addle	r5, r5, r4
 8007750:	005b      	lsls	r3, r3, #1
 8007752:	3801      	subs	r0, #1
 8007754:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8007758:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800775c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8007760:	d1f0      	bne.n	8007744 <__ieee754_sqrt+0x8c>
 8007762:	4604      	mov	r4, r0
 8007764:	2720      	movs	r7, #32
 8007766:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800776a:	428b      	cmp	r3, r1
 800776c:	eb0c 0e00 	add.w	lr, ip, r0
 8007770:	dc02      	bgt.n	8007778 <__ieee754_sqrt+0xc0>
 8007772:	d113      	bne.n	800779c <__ieee754_sqrt+0xe4>
 8007774:	4596      	cmp	lr, r2
 8007776:	d811      	bhi.n	800779c <__ieee754_sqrt+0xe4>
 8007778:	f1be 0f00 	cmp.w	lr, #0
 800777c:	eb0e 000c 	add.w	r0, lr, ip
 8007780:	da56      	bge.n	8007830 <__ieee754_sqrt+0x178>
 8007782:	2800      	cmp	r0, #0
 8007784:	db54      	blt.n	8007830 <__ieee754_sqrt+0x178>
 8007786:	f101 0801 	add.w	r8, r1, #1
 800778a:	1a5b      	subs	r3, r3, r1
 800778c:	4641      	mov	r1, r8
 800778e:	4596      	cmp	lr, r2
 8007790:	bf88      	it	hi
 8007792:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8007796:	eba2 020e 	sub.w	r2, r2, lr
 800779a:	4464      	add	r4, ip
 800779c:	005b      	lsls	r3, r3, #1
 800779e:	3f01      	subs	r7, #1
 80077a0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80077a4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80077a8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80077ac:	d1dd      	bne.n	800776a <__ieee754_sqrt+0xb2>
 80077ae:	4313      	orrs	r3, r2
 80077b0:	d01b      	beq.n	80077ea <__ieee754_sqrt+0x132>
 80077b2:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8007860 <__ieee754_sqrt+0x1a8>
 80077b6:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8007864 <__ieee754_sqrt+0x1ac>
 80077ba:	e9da 0100 	ldrd	r0, r1, [sl]
 80077be:	e9db 2300 	ldrd	r2, r3, [fp]
 80077c2:	f7f8 fcc9 	bl	8000158 <__aeabi_dsub>
 80077c6:	e9da 8900 	ldrd	r8, r9, [sl]
 80077ca:	4602      	mov	r2, r0
 80077cc:	460b      	mov	r3, r1
 80077ce:	4640      	mov	r0, r8
 80077d0:	4649      	mov	r1, r9
 80077d2:	f7f9 f8f5 	bl	80009c0 <__aeabi_dcmple>
 80077d6:	b140      	cbz	r0, 80077ea <__ieee754_sqrt+0x132>
 80077d8:	e9da 0100 	ldrd	r0, r1, [sl]
 80077dc:	e9db 2300 	ldrd	r2, r3, [fp]
 80077e0:	f1b4 3fff 	cmp.w	r4, #4294967295
 80077e4:	d126      	bne.n	8007834 <__ieee754_sqrt+0x17c>
 80077e6:	463c      	mov	r4, r7
 80077e8:	3501      	adds	r5, #1
 80077ea:	106b      	asrs	r3, r5, #1
 80077ec:	0864      	lsrs	r4, r4, #1
 80077ee:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80077f2:	07ea      	lsls	r2, r5, #31
 80077f4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80077f8:	bf48      	it	mi
 80077fa:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 80077fe:	4620      	mov	r0, r4
 8007800:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8007804:	e76d      	b.n	80076e2 <__ieee754_sqrt+0x2a>
 8007806:	0ae3      	lsrs	r3, r4, #11
 8007808:	3915      	subs	r1, #21
 800780a:	0564      	lsls	r4, r4, #21
 800780c:	2b00      	cmp	r3, #0
 800780e:	d0fa      	beq.n	8007806 <__ieee754_sqrt+0x14e>
 8007810:	02d8      	lsls	r0, r3, #11
 8007812:	d50a      	bpl.n	800782a <__ieee754_sqrt+0x172>
 8007814:	f1c2 0020 	rsb	r0, r2, #32
 8007818:	fa24 f000 	lsr.w	r0, r4, r0
 800781c:	1e55      	subs	r5, r2, #1
 800781e:	4094      	lsls	r4, r2
 8007820:	4303      	orrs	r3, r0
 8007822:	1b4a      	subs	r2, r1, r5
 8007824:	e776      	b.n	8007714 <__ieee754_sqrt+0x5c>
 8007826:	4611      	mov	r1, r2
 8007828:	e7f0      	b.n	800780c <__ieee754_sqrt+0x154>
 800782a:	005b      	lsls	r3, r3, #1
 800782c:	3201      	adds	r2, #1
 800782e:	e7ef      	b.n	8007810 <__ieee754_sqrt+0x158>
 8007830:	4688      	mov	r8, r1
 8007832:	e7aa      	b.n	800778a <__ieee754_sqrt+0xd2>
 8007834:	f7f8 fc92 	bl	800015c <__adddf3>
 8007838:	e9da 8900 	ldrd	r8, r9, [sl]
 800783c:	4602      	mov	r2, r0
 800783e:	460b      	mov	r3, r1
 8007840:	4640      	mov	r0, r8
 8007842:	4649      	mov	r1, r9
 8007844:	f7f9 f8b2 	bl	80009ac <__aeabi_dcmplt>
 8007848:	b120      	cbz	r0, 8007854 <__ieee754_sqrt+0x19c>
 800784a:	1ca1      	adds	r1, r4, #2
 800784c:	bf08      	it	eq
 800784e:	3501      	addeq	r5, #1
 8007850:	3402      	adds	r4, #2
 8007852:	e7ca      	b.n	80077ea <__ieee754_sqrt+0x132>
 8007854:	3401      	adds	r4, #1
 8007856:	f024 0401 	bic.w	r4, r4, #1
 800785a:	e7c6      	b.n	80077ea <__ieee754_sqrt+0x132>
 800785c:	7ff00000 	.word	0x7ff00000
 8007860:	20000078 	.word	0x20000078
 8007864:	20000080 	.word	0x20000080

08007868 <_init>:
 8007868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800786a:	bf00      	nop
 800786c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800786e:	bc08      	pop	{r3}
 8007870:	469e      	mov	lr, r3
 8007872:	4770      	bx	lr

08007874 <_fini>:
 8007874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007876:	bf00      	nop
 8007878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800787a:	bc08      	pop	{r3}
 800787c:	469e      	mov	lr, r3
 800787e:	4770      	bx	lr

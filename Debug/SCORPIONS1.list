
SCORPIONS1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006928  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08006a38  08006a38  00016a38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ac8  08006ac8  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  08006ac8  08006ac8  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006ac8  08006ac8  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ac8  08006ac8  00016ac8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006acc  08006acc  00016acc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08006ad0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000684  20000088  08006b58  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000070c  08006b58  0002070c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a196  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e07  00000000  00000000  0002a28a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b60  00000000  00000000  0002c098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008be  00000000  00000000  0002cbf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018074  00000000  00000000  0002d4b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cbf3  00000000  00000000  0004552a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000887d2  00000000  00000000  0005211d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003874  00000000  00000000  000da8f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  000de164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000088 	.word	0x20000088
 800012c:	00000000 	.word	0x00000000
 8000130:	08006a20 	.word	0x08006a20

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000008c 	.word	0x2000008c
 800014c:	08006a20 	.word	0x08006a20

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2f>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a30:	bf24      	itt	cs
 8000a32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a3a:	d90d      	bls.n	8000a58 <__aeabi_d2f+0x30>
 8000a3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a50:	bf08      	it	eq
 8000a52:	f020 0001 	biceq.w	r0, r0, #1
 8000a56:	4770      	bx	lr
 8000a58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a5c:	d121      	bne.n	8000aa2 <__aeabi_d2f+0x7a>
 8000a5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a62:	bfbc      	itt	lt
 8000a64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	4770      	bxlt	lr
 8000a6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a72:	f1c2 0218 	rsb	r2, r2, #24
 8000a76:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a82:	bf18      	it	ne
 8000a84:	f040 0001 	orrne.w	r0, r0, #1
 8000a88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a94:	ea40 000c 	orr.w	r0, r0, ip
 8000a98:	fa23 f302 	lsr.w	r3, r3, r2
 8000a9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa0:	e7cc      	b.n	8000a3c <__aeabi_d2f+0x14>
 8000aa2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aa6:	d107      	bne.n	8000ab8 <__aeabi_d2f+0x90>
 8000aa8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aac:	bf1e      	ittt	ne
 8000aae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ab2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ab6:	4770      	bxne	lr
 8000ab8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ac0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_frsub>:
 8000ac8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	e002      	b.n	8000ad4 <__addsf3>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_fsub>:
 8000ad0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ad4 <__addsf3>:
 8000ad4:	0042      	lsls	r2, r0, #1
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000adc:	ea92 0f03 	teqne	r2, r3
 8000ae0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae8:	d06a      	beq.n	8000bc0 <__addsf3+0xec>
 8000aea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af2:	bfc1      	itttt	gt
 8000af4:	18d2      	addgt	r2, r2, r3
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	4048      	eorgt	r0, r1
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	bfb8      	it	lt
 8000afe:	425b      	neglt	r3, r3
 8000b00:	2b19      	cmp	r3, #25
 8000b02:	bf88      	it	hi
 8000b04:	4770      	bxhi	lr
 8000b06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4249      	negne	r1, r1
 8000b26:	ea92 0f03 	teq	r2, r3
 8000b2a:	d03f      	beq.n	8000bac <__addsf3+0xd8>
 8000b2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b30:	fa41 fc03 	asr.w	ip, r1, r3
 8000b34:	eb10 000c 	adds.w	r0, r0, ip
 8000b38:	f1c3 0320 	rsb	r3, r3, #32
 8000b3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__addsf3+0x78>
 8000b46:	4249      	negs	r1, r1
 8000b48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b50:	d313      	bcc.n	8000b7a <__addsf3+0xa6>
 8000b52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b56:	d306      	bcc.n	8000b66 <__addsf3+0x92>
 8000b58:	0840      	lsrs	r0, r0, #1
 8000b5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5e:	f102 0201 	add.w	r2, r2, #1
 8000b62:	2afe      	cmp	r2, #254	; 0xfe
 8000b64:	d251      	bcs.n	8000c0a <__addsf3+0x136>
 8000b66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6e:	bf08      	it	eq
 8000b70:	f020 0001 	biceq.w	r0, r0, #1
 8000b74:	ea40 0003 	orr.w	r0, r0, r3
 8000b78:	4770      	bx	lr
 8000b7a:	0049      	lsls	r1, r1, #1
 8000b7c:	eb40 0000 	adc.w	r0, r0, r0
 8000b80:	3a01      	subs	r2, #1
 8000b82:	bf28      	it	cs
 8000b84:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b88:	d2ed      	bcs.n	8000b66 <__addsf3+0x92>
 8000b8a:	fab0 fc80 	clz	ip, r0
 8000b8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b92:	ebb2 020c 	subs.w	r2, r2, ip
 8000b96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9a:	bfaa      	itet	ge
 8000b9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba0:	4252      	neglt	r2, r2
 8000ba2:	4318      	orrge	r0, r3
 8000ba4:	bfbc      	itt	lt
 8000ba6:	40d0      	lsrlt	r0, r2
 8000ba8:	4318      	orrlt	r0, r3
 8000baa:	4770      	bx	lr
 8000bac:	f092 0f00 	teq	r2, #0
 8000bb0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bb4:	bf06      	itte	eq
 8000bb6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bba:	3201      	addeq	r2, #1
 8000bbc:	3b01      	subne	r3, #1
 8000bbe:	e7b5      	b.n	8000b2c <__addsf3+0x58>
 8000bc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc8:	bf18      	it	ne
 8000bca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bce:	d021      	beq.n	8000c14 <__addsf3+0x140>
 8000bd0:	ea92 0f03 	teq	r2, r3
 8000bd4:	d004      	beq.n	8000be0 <__addsf3+0x10c>
 8000bd6:	f092 0f00 	teq	r2, #0
 8000bda:	bf08      	it	eq
 8000bdc:	4608      	moveq	r0, r1
 8000bde:	4770      	bx	lr
 8000be0:	ea90 0f01 	teq	r0, r1
 8000be4:	bf1c      	itt	ne
 8000be6:	2000      	movne	r0, #0
 8000be8:	4770      	bxne	lr
 8000bea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bee:	d104      	bne.n	8000bfa <__addsf3+0x126>
 8000bf0:	0040      	lsls	r0, r0, #1
 8000bf2:	bf28      	it	cs
 8000bf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bfe:	bf3c      	itt	cc
 8000c00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c04:	4770      	bxcc	lr
 8000c06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c18:	bf16      	itet	ne
 8000c1a:	4608      	movne	r0, r1
 8000c1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c20:	4601      	movne	r1, r0
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	bf06      	itte	eq
 8000c26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2a:	ea90 0f01 	teqeq	r0, r1
 8000c2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_ui2f>:
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e004      	b.n	8000c44 <__aeabi_i2f+0x8>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_i2f>:
 8000c3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c40:	bf48      	it	mi
 8000c42:	4240      	negmi	r0, r0
 8000c44:	ea5f 0c00 	movs.w	ip, r0
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c50:	4601      	mov	r1, r0
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	e01c      	b.n	8000c92 <__aeabi_l2f+0x2a>

08000c58 <__aeabi_ul2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e00a      	b.n	8000c7c <__aeabi_l2f+0x14>
 8000c66:	bf00      	nop

08000c68 <__aeabi_l2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__aeabi_l2f+0x14>
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	ea5f 0c01 	movs.w	ip, r1
 8000c80:	bf02      	ittt	eq
 8000c82:	4684      	moveq	ip, r0
 8000c84:	4601      	moveq	r1, r0
 8000c86:	2000      	moveq	r0, #0
 8000c88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c96:	fabc f28c 	clz	r2, ip
 8000c9a:	3a08      	subs	r2, #8
 8000c9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca0:	db10      	blt.n	8000cc4 <__aeabi_l2f+0x5c>
 8000ca2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	f020 0001 	biceq.w	r0, r0, #1
 8000cc2:	4770      	bx	lr
 8000cc4:	f102 0220 	add.w	r2, r2, #32
 8000cc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce2:	4770      	bx	lr

08000ce4 <__aeabi_fmul>:
 8000ce4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ce8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cec:	bf1e      	ittt	ne
 8000cee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cf2:	ea92 0f0c 	teqne	r2, ip
 8000cf6:	ea93 0f0c 	teqne	r3, ip
 8000cfa:	d06f      	beq.n	8000ddc <__aeabi_fmul+0xf8>
 8000cfc:	441a      	add	r2, r3
 8000cfe:	ea80 0c01 	eor.w	ip, r0, r1
 8000d02:	0240      	lsls	r0, r0, #9
 8000d04:	bf18      	it	ne
 8000d06:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d0a:	d01e      	beq.n	8000d4a <__aeabi_fmul+0x66>
 8000d0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d10:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d14:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d18:	fba0 3101 	umull	r3, r1, r0, r1
 8000d1c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d20:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d24:	bf3e      	ittt	cc
 8000d26:	0049      	lslcc	r1, r1, #1
 8000d28:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d2c:	005b      	lslcc	r3, r3, #1
 8000d2e:	ea40 0001 	orr.w	r0, r0, r1
 8000d32:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d36:	2afd      	cmp	r2, #253	; 0xfd
 8000d38:	d81d      	bhi.n	8000d76 <__aeabi_fmul+0x92>
 8000d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d42:	bf08      	it	eq
 8000d44:	f020 0001 	biceq.w	r0, r0, #1
 8000d48:	4770      	bx	lr
 8000d4a:	f090 0f00 	teq	r0, #0
 8000d4e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d52:	bf08      	it	eq
 8000d54:	0249      	lsleq	r1, r1, #9
 8000d56:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d5a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d5e:	3a7f      	subs	r2, #127	; 0x7f
 8000d60:	bfc2      	ittt	gt
 8000d62:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d66:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6a:	4770      	bxgt	lr
 8000d6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	3a01      	subs	r2, #1
 8000d76:	dc5d      	bgt.n	8000e34 <__aeabi_fmul+0x150>
 8000d78:	f112 0f19 	cmn.w	r2, #25
 8000d7c:	bfdc      	itt	le
 8000d7e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d82:	4770      	bxle	lr
 8000d84:	f1c2 0200 	rsb	r2, r2, #0
 8000d88:	0041      	lsls	r1, r0, #1
 8000d8a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d8e:	f1c2 0220 	rsb	r2, r2, #32
 8000d92:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d96:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d9a:	f140 0000 	adc.w	r0, r0, #0
 8000d9e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000da2:	bf08      	it	eq
 8000da4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da8:	4770      	bx	lr
 8000daa:	f092 0f00 	teq	r2, #0
 8000dae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000db2:	bf02      	ittt	eq
 8000db4:	0040      	lsleq	r0, r0, #1
 8000db6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dba:	3a01      	subeq	r2, #1
 8000dbc:	d0f9      	beq.n	8000db2 <__aeabi_fmul+0xce>
 8000dbe:	ea40 000c 	orr.w	r0, r0, ip
 8000dc2:	f093 0f00 	teq	r3, #0
 8000dc6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dca:	bf02      	ittt	eq
 8000dcc:	0049      	lsleq	r1, r1, #1
 8000dce:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dd2:	3b01      	subeq	r3, #1
 8000dd4:	d0f9      	beq.n	8000dca <__aeabi_fmul+0xe6>
 8000dd6:	ea41 010c 	orr.w	r1, r1, ip
 8000dda:	e78f      	b.n	8000cfc <__aeabi_fmul+0x18>
 8000ddc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000de0:	ea92 0f0c 	teq	r2, ip
 8000de4:	bf18      	it	ne
 8000de6:	ea93 0f0c 	teqne	r3, ip
 8000dea:	d00a      	beq.n	8000e02 <__aeabi_fmul+0x11e>
 8000dec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000df0:	bf18      	it	ne
 8000df2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000df6:	d1d8      	bne.n	8000daa <__aeabi_fmul+0xc6>
 8000df8:	ea80 0001 	eor.w	r0, r0, r1
 8000dfc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f090 0f00 	teq	r0, #0
 8000e06:	bf17      	itett	ne
 8000e08:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e0c:	4608      	moveq	r0, r1
 8000e0e:	f091 0f00 	teqne	r1, #0
 8000e12:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e16:	d014      	beq.n	8000e42 <__aeabi_fmul+0x15e>
 8000e18:	ea92 0f0c 	teq	r2, ip
 8000e1c:	d101      	bne.n	8000e22 <__aeabi_fmul+0x13e>
 8000e1e:	0242      	lsls	r2, r0, #9
 8000e20:	d10f      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e22:	ea93 0f0c 	teq	r3, ip
 8000e26:	d103      	bne.n	8000e30 <__aeabi_fmul+0x14c>
 8000e28:	024b      	lsls	r3, r1, #9
 8000e2a:	bf18      	it	ne
 8000e2c:	4608      	movne	r0, r1
 8000e2e:	d108      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e30:	ea80 0001 	eor.w	r0, r0, r1
 8000e34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e40:	4770      	bx	lr
 8000e42:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e46:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e4a:	4770      	bx	lr

08000e4c <__aeabi_fdiv>:
 8000e4c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e54:	bf1e      	ittt	ne
 8000e56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e5a:	ea92 0f0c 	teqne	r2, ip
 8000e5e:	ea93 0f0c 	teqne	r3, ip
 8000e62:	d069      	beq.n	8000f38 <__aeabi_fdiv+0xec>
 8000e64:	eba2 0203 	sub.w	r2, r2, r3
 8000e68:	ea80 0c01 	eor.w	ip, r0, r1
 8000e6c:	0249      	lsls	r1, r1, #9
 8000e6e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e72:	d037      	beq.n	8000ee4 <__aeabi_fdiv+0x98>
 8000e74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e78:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e7c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e80:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e84:	428b      	cmp	r3, r1
 8000e86:	bf38      	it	cc
 8000e88:	005b      	lslcc	r3, r3, #1
 8000e8a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e8e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e92:	428b      	cmp	r3, r1
 8000e94:	bf24      	itt	cs
 8000e96:	1a5b      	subcs	r3, r3, r1
 8000e98:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e9c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ea0:	bf24      	itt	cs
 8000ea2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ea6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eaa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eae:	bf24      	itt	cs
 8000eb0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ebc:	bf24      	itt	cs
 8000ebe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ec2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	bf18      	it	ne
 8000eca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ece:	d1e0      	bne.n	8000e92 <__aeabi_fdiv+0x46>
 8000ed0:	2afd      	cmp	r2, #253	; 0xfd
 8000ed2:	f63f af50 	bhi.w	8000d76 <__aeabi_fmul+0x92>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000edc:	bf08      	it	eq
 8000ede:	f020 0001 	biceq.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ee8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eec:	327f      	adds	r2, #127	; 0x7f
 8000eee:	bfc2      	ittt	gt
 8000ef0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ef4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef8:	4770      	bxgt	lr
 8000efa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	3a01      	subs	r2, #1
 8000f04:	e737      	b.n	8000d76 <__aeabi_fmul+0x92>
 8000f06:	f092 0f00 	teq	r2, #0
 8000f0a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f0e:	bf02      	ittt	eq
 8000f10:	0040      	lsleq	r0, r0, #1
 8000f12:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f16:	3a01      	subeq	r2, #1
 8000f18:	d0f9      	beq.n	8000f0e <__aeabi_fdiv+0xc2>
 8000f1a:	ea40 000c 	orr.w	r0, r0, ip
 8000f1e:	f093 0f00 	teq	r3, #0
 8000f22:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f26:	bf02      	ittt	eq
 8000f28:	0049      	lsleq	r1, r1, #1
 8000f2a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f2e:	3b01      	subeq	r3, #1
 8000f30:	d0f9      	beq.n	8000f26 <__aeabi_fdiv+0xda>
 8000f32:	ea41 010c 	orr.w	r1, r1, ip
 8000f36:	e795      	b.n	8000e64 <__aeabi_fdiv+0x18>
 8000f38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f3c:	ea92 0f0c 	teq	r2, ip
 8000f40:	d108      	bne.n	8000f54 <__aeabi_fdiv+0x108>
 8000f42:	0242      	lsls	r2, r0, #9
 8000f44:	f47f af7d 	bne.w	8000e42 <__aeabi_fmul+0x15e>
 8000f48:	ea93 0f0c 	teq	r3, ip
 8000f4c:	f47f af70 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e776      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f54:	ea93 0f0c 	teq	r3, ip
 8000f58:	d104      	bne.n	8000f64 <__aeabi_fdiv+0x118>
 8000f5a:	024b      	lsls	r3, r1, #9
 8000f5c:	f43f af4c 	beq.w	8000df8 <__aeabi_fmul+0x114>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e76e      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1ca      	bne.n	8000f06 <__aeabi_fdiv+0xba>
 8000f70:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f74:	f47f af5c 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f78:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f7c:	f47f af3c 	bne.w	8000df8 <__aeabi_fmul+0x114>
 8000f80:	e75f      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f82:	bf00      	nop

08000f84 <__gesf2>:
 8000f84:	f04f 3cff 	mov.w	ip, #4294967295
 8000f88:	e006      	b.n	8000f98 <__cmpsf2+0x4>
 8000f8a:	bf00      	nop

08000f8c <__lesf2>:
 8000f8c:	f04f 0c01 	mov.w	ip, #1
 8000f90:	e002      	b.n	8000f98 <__cmpsf2+0x4>
 8000f92:	bf00      	nop

08000f94 <__cmpsf2>:
 8000f94:	f04f 0c01 	mov.w	ip, #1
 8000f98:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f9c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fa0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fa4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fa8:	bf18      	it	ne
 8000faa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fae:	d011      	beq.n	8000fd4 <__cmpsf2+0x40>
 8000fb0:	b001      	add	sp, #4
 8000fb2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fb6:	bf18      	it	ne
 8000fb8:	ea90 0f01 	teqne	r0, r1
 8000fbc:	bf58      	it	pl
 8000fbe:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fc2:	bf88      	it	hi
 8000fc4:	17c8      	asrhi	r0, r1, #31
 8000fc6:	bf38      	it	cc
 8000fc8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fcc:	bf18      	it	ne
 8000fce:	f040 0001 	orrne.w	r0, r0, #1
 8000fd2:	4770      	bx	lr
 8000fd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fd8:	d102      	bne.n	8000fe0 <__cmpsf2+0x4c>
 8000fda:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fde:	d105      	bne.n	8000fec <__cmpsf2+0x58>
 8000fe0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fe4:	d1e4      	bne.n	8000fb0 <__cmpsf2+0x1c>
 8000fe6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fea:	d0e1      	beq.n	8000fb0 <__cmpsf2+0x1c>
 8000fec:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_cfrcmple>:
 8000ff4:	4684      	mov	ip, r0
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	4661      	mov	r1, ip
 8000ffa:	e7ff      	b.n	8000ffc <__aeabi_cfcmpeq>

08000ffc <__aeabi_cfcmpeq>:
 8000ffc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ffe:	f7ff ffc9 	bl	8000f94 <__cmpsf2>
 8001002:	2800      	cmp	r0, #0
 8001004:	bf48      	it	mi
 8001006:	f110 0f00 	cmnmi.w	r0, #0
 800100a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800100c <__aeabi_fcmpeq>:
 800100c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001010:	f7ff fff4 	bl	8000ffc <__aeabi_cfcmpeq>
 8001014:	bf0c      	ite	eq
 8001016:	2001      	moveq	r0, #1
 8001018:	2000      	movne	r0, #0
 800101a:	f85d fb08 	ldr.w	pc, [sp], #8
 800101e:	bf00      	nop

08001020 <__aeabi_fcmplt>:
 8001020:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001024:	f7ff ffea 	bl	8000ffc <__aeabi_cfcmpeq>
 8001028:	bf34      	ite	cc
 800102a:	2001      	movcc	r0, #1
 800102c:	2000      	movcs	r0, #0
 800102e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001032:	bf00      	nop

08001034 <__aeabi_fcmple>:
 8001034:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001038:	f7ff ffe0 	bl	8000ffc <__aeabi_cfcmpeq>
 800103c:	bf94      	ite	ls
 800103e:	2001      	movls	r0, #1
 8001040:	2000      	movhi	r0, #0
 8001042:	f85d fb08 	ldr.w	pc, [sp], #8
 8001046:	bf00      	nop

08001048 <__aeabi_fcmpge>:
 8001048:	f84d ed08 	str.w	lr, [sp, #-8]!
 800104c:	f7ff ffd2 	bl	8000ff4 <__aeabi_cfrcmple>
 8001050:	bf94      	ite	ls
 8001052:	2001      	movls	r0, #1
 8001054:	2000      	movhi	r0, #0
 8001056:	f85d fb08 	ldr.w	pc, [sp], #8
 800105a:	bf00      	nop

0800105c <__aeabi_fcmpgt>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff ffc8 	bl	8000ff4 <__aeabi_cfrcmple>
 8001064:	bf34      	ite	cc
 8001066:	2001      	movcc	r0, #1
 8001068:	2000      	movcs	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_fcmpun>:
 8001070:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001074:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001078:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800107c:	d102      	bne.n	8001084 <__aeabi_fcmpun+0x14>
 800107e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001082:	d108      	bne.n	8001096 <__aeabi_fcmpun+0x26>
 8001084:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001088:	d102      	bne.n	8001090 <__aeabi_fcmpun+0x20>
 800108a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108e:	d102      	bne.n	8001096 <__aeabi_fcmpun+0x26>
 8001090:	f04f 0000 	mov.w	r0, #0
 8001094:	4770      	bx	lr
 8001096:	f04f 0001 	mov.w	r0, #1
 800109a:	4770      	bx	lr

0800109c <__aeabi_f2uiz>:
 800109c:	0042      	lsls	r2, r0, #1
 800109e:	d20e      	bcs.n	80010be <__aeabi_f2uiz+0x22>
 80010a0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010a4:	d30b      	bcc.n	80010be <__aeabi_f2uiz+0x22>
 80010a6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010aa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010ae:	d409      	bmi.n	80010c4 <__aeabi_f2uiz+0x28>
 80010b0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010b8:	fa23 f002 	lsr.w	r0, r3, r2
 80010bc:	4770      	bx	lr
 80010be:	f04f 0000 	mov.w	r0, #0
 80010c2:	4770      	bx	lr
 80010c4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010c8:	d101      	bne.n	80010ce <__aeabi_f2uiz+0x32>
 80010ca:	0242      	lsls	r2, r0, #9
 80010cc:	d102      	bne.n	80010d4 <__aeabi_f2uiz+0x38>
 80010ce:	f04f 30ff 	mov.w	r0, #4294967295
 80010d2:	4770      	bx	lr
 80010d4:	f04f 0000 	mov.w	r0, #0
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop

080010dc <armInit>:

#include "arm.h"

arm arms[ARM_NUMBER];

void armInit(void) {
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < ARM_NUMBER; i ++) {
 80010e2:	2300      	movs	r3, #0
 80010e4:	71fb      	strb	r3, [r7, #7]
 80010e6:	e02e      	b.n	8001146 <armInit+0x6a>
		arms[i].gripperID = SERVO_UNDEFINED;
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	4a1b      	ldr	r2, [pc, #108]	; (8001158 <armInit+0x7c>)
 80010ec:	011b      	lsls	r3, r3, #4
 80010ee:	4413      	add	r3, r2
 80010f0:	220c      	movs	r2, #12
 80010f2:	701a      	strb	r2, [r3, #0]
		arms[i].wristID = SERVO_UNDEFINED;
 80010f4:	79fb      	ldrb	r3, [r7, #7]
 80010f6:	4a18      	ldr	r2, [pc, #96]	; (8001158 <armInit+0x7c>)
 80010f8:	011b      	lsls	r3, r3, #4
 80010fa:	4413      	add	r3, r2
 80010fc:	3301      	adds	r3, #1
 80010fe:	220c      	movs	r2, #12
 8001100:	701a      	strb	r2, [r3, #0]
		arms[i].elbowID = SERVO_UNDEFINED;
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	4a14      	ldr	r2, [pc, #80]	; (8001158 <armInit+0x7c>)
 8001106:	011b      	lsls	r3, r3, #4
 8001108:	4413      	add	r3, r2
 800110a:	3302      	adds	r3, #2
 800110c:	220c      	movs	r2, #12
 800110e:	701a      	strb	r2, [r3, #0]
		arms[i].distance = 0;
 8001110:	79fb      	ldrb	r3, [r7, #7]
 8001112:	4a11      	ldr	r2, [pc, #68]	; (8001158 <armInit+0x7c>)
 8001114:	011b      	lsls	r3, r3, #4
 8001116:	4413      	add	r3, r2
 8001118:	3304      	adds	r3, #4
 800111a:	f04f 0200 	mov.w	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
		arms[i].degree = 0;
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	4a0d      	ldr	r2, [pc, #52]	; (8001158 <armInit+0x7c>)
 8001124:	011b      	lsls	r3, r3, #4
 8001126:	4413      	add	r3, r2
 8001128:	3308      	adds	r3, #8
 800112a:	f04f 0200 	mov.w	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
		arms[i].location = 0;
 8001130:	79fb      	ldrb	r3, [r7, #7]
 8001132:	4a09      	ldr	r2, [pc, #36]	; (8001158 <armInit+0x7c>)
 8001134:	011b      	lsls	r3, r3, #4
 8001136:	4413      	add	r3, r2
 8001138:	330c      	adds	r3, #12
 800113a:	f04f 0200 	mov.w	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < ARM_NUMBER; i ++) {
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	3301      	adds	r3, #1
 8001144:	71fb      	strb	r3, [r7, #7]
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	2b03      	cmp	r3, #3
 800114a:	d9cd      	bls.n	80010e8 <armInit+0xc>
	}
}
 800114c:	bf00      	nop
 800114e:	bf00      	nop
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	bc80      	pop	{r7}
 8001156:	4770      	bx	lr
 8001158:	200000a4 	.word	0x200000a4

0800115c <armStart>:

uint8_t armStart(uint8_t gripperID, uint8_t wristID, uint8_t elbowID) {
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	71fb      	strb	r3, [r7, #7]
 8001166:	460b      	mov	r3, r1
 8001168:	71bb      	strb	r3, [r7, #6]
 800116a:	4613      	mov	r3, r2
 800116c:	717b      	strb	r3, [r7, #5]
	for (uint8_t i = 0; i < ARM_NUMBER; i ++) {
 800116e:	2300      	movs	r3, #0
 8001170:	73fb      	strb	r3, [r7, #15]
 8001172:	e046      	b.n	8001202 <armStart+0xa6>
		if (arms[i].gripperID != SERVO_UNDEFINED || arms[i].wristID != SERVO_UNDEFINED || arms[i].elbowID != SERVO_UNDEFINED) continue;
 8001174:	7bfb      	ldrb	r3, [r7, #15]
 8001176:	4a27      	ldr	r2, [pc, #156]	; (8001214 <armStart+0xb8>)
 8001178:	011b      	lsls	r3, r3, #4
 800117a:	4413      	add	r3, r2
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	2b0c      	cmp	r3, #12
 8001180:	d13b      	bne.n	80011fa <armStart+0x9e>
 8001182:	7bfb      	ldrb	r3, [r7, #15]
 8001184:	4a23      	ldr	r2, [pc, #140]	; (8001214 <armStart+0xb8>)
 8001186:	011b      	lsls	r3, r3, #4
 8001188:	4413      	add	r3, r2
 800118a:	3301      	adds	r3, #1
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	2b0c      	cmp	r3, #12
 8001190:	d133      	bne.n	80011fa <armStart+0x9e>
 8001192:	7bfb      	ldrb	r3, [r7, #15]
 8001194:	4a1f      	ldr	r2, [pc, #124]	; (8001214 <armStart+0xb8>)
 8001196:	011b      	lsls	r3, r3, #4
 8001198:	4413      	add	r3, r2
 800119a:	3302      	adds	r3, #2
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	2b0c      	cmp	r3, #12
 80011a0:	d12b      	bne.n	80011fa <armStart+0x9e>
		arms[i].gripperID = gripperID;
 80011a2:	7bfb      	ldrb	r3, [r7, #15]
 80011a4:	4a1b      	ldr	r2, [pc, #108]	; (8001214 <armStart+0xb8>)
 80011a6:	011b      	lsls	r3, r3, #4
 80011a8:	4413      	add	r3, r2
 80011aa:	79fa      	ldrb	r2, [r7, #7]
 80011ac:	701a      	strb	r2, [r3, #0]
		arms[i].wristID = wristID;
 80011ae:	7bfb      	ldrb	r3, [r7, #15]
 80011b0:	4a18      	ldr	r2, [pc, #96]	; (8001214 <armStart+0xb8>)
 80011b2:	011b      	lsls	r3, r3, #4
 80011b4:	4413      	add	r3, r2
 80011b6:	3301      	adds	r3, #1
 80011b8:	79ba      	ldrb	r2, [r7, #6]
 80011ba:	701a      	strb	r2, [r3, #0]
		arms[i].elbowID = elbowID;
 80011bc:	7bfb      	ldrb	r3, [r7, #15]
 80011be:	4a15      	ldr	r2, [pc, #84]	; (8001214 <armStart+0xb8>)
 80011c0:	011b      	lsls	r3, r3, #4
 80011c2:	4413      	add	r3, r2
 80011c4:	3302      	adds	r3, #2
 80011c6:	797a      	ldrb	r2, [r7, #5]
 80011c8:	701a      	strb	r2, [r3, #0]
		arms[i].distance = ARM_RELAX;
 80011ca:	7bfb      	ldrb	r3, [r7, #15]
 80011cc:	4a11      	ldr	r2, [pc, #68]	; (8001214 <armStart+0xb8>)
 80011ce:	011b      	lsls	r3, r3, #4
 80011d0:	4413      	add	r3, r2
 80011d2:	3304      	adds	r3, #4
 80011d4:	4a10      	ldr	r2, [pc, #64]	; (8001218 <armStart+0xbc>)
 80011d6:	601a      	str	r2, [r3, #0]
		arms[i].degree = ARM_NORTHWARD;
 80011d8:	7bfb      	ldrb	r3, [r7, #15]
 80011da:	4a0e      	ldr	r2, [pc, #56]	; (8001214 <armStart+0xb8>)
 80011dc:	011b      	lsls	r3, r3, #4
 80011de:	4413      	add	r3, r2
 80011e0:	3308      	adds	r3, #8
 80011e2:	4a0e      	ldr	r2, [pc, #56]	; (800121c <armStart+0xc0>)
 80011e4:	601a      	str	r2, [r3, #0]
		arms[i].location = ARM_BACKWARD;
 80011e6:	7bfb      	ldrb	r3, [r7, #15]
 80011e8:	4a0a      	ldr	r2, [pc, #40]	; (8001214 <armStart+0xb8>)
 80011ea:	011b      	lsls	r3, r3, #4
 80011ec:	4413      	add	r3, r2
 80011ee:	330c      	adds	r3, #12
 80011f0:	f04f 0200 	mov.w	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
		return i;
 80011f6:	7bfb      	ldrb	r3, [r7, #15]
 80011f8:	e007      	b.n	800120a <armStart+0xae>
		if (arms[i].gripperID != SERVO_UNDEFINED || arms[i].wristID != SERVO_UNDEFINED || arms[i].elbowID != SERVO_UNDEFINED) continue;
 80011fa:	bf00      	nop
	for (uint8_t i = 0; i < ARM_NUMBER; i ++) {
 80011fc:	7bfb      	ldrb	r3, [r7, #15]
 80011fe:	3301      	adds	r3, #1
 8001200:	73fb      	strb	r3, [r7, #15]
 8001202:	7bfb      	ldrb	r3, [r7, #15]
 8001204:	2b03      	cmp	r3, #3
 8001206:	d9b5      	bls.n	8001174 <armStart+0x18>
	}
	return ARM_UNDEFINED;
 8001208:	2304      	movs	r3, #4
}
 800120a:	4618      	mov	r0, r3
 800120c:	3714      	adds	r7, #20
 800120e:	46bd      	mov	sp, r7
 8001210:	bc80      	pop	{r7}
 8001212:	4770      	bx	lr
 8001214:	200000a4 	.word	0x200000a4
 8001218:	42aa0000 	.word	0x42aa0000
 800121c:	42b40000 	.word	0x42b40000

08001220 <armRun>:

void armRun(void *) {
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < ARM_NUMBER; i ++) {
 8001228:	2300      	movs	r3, #0
 800122a:	73fb      	strb	r3, [r7, #15]
 800122c:	e02e      	b.n	800128c <armRun+0x6c>
		if (arms[i].gripperID != SERVO_UNDEFINED) {
 800122e:	7bfb      	ldrb	r3, [r7, #15]
 8001230:	4a1a      	ldr	r2, [pc, #104]	; (800129c <armRun+0x7c>)
 8001232:	011b      	lsls	r3, r3, #4
 8001234:	4413      	add	r3, r2
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	2b0c      	cmp	r3, #12
 800123a:	d006      	beq.n	800124a <armRun+0x2a>
			armGrip(&arms[i]);
 800123c:	7bfb      	ldrb	r3, [r7, #15]
 800123e:	011b      	lsls	r3, r3, #4
 8001240:	4a16      	ldr	r2, [pc, #88]	; (800129c <armRun+0x7c>)
 8001242:	4413      	add	r3, r2
 8001244:	4618      	mov	r0, r3
 8001246:	f000 f82b 	bl	80012a0 <armGrip>
		}
		if (arms[i].wristID != SERVO_UNDEFINED) {
 800124a:	7bfb      	ldrb	r3, [r7, #15]
 800124c:	4a13      	ldr	r2, [pc, #76]	; (800129c <armRun+0x7c>)
 800124e:	011b      	lsls	r3, r3, #4
 8001250:	4413      	add	r3, r2
 8001252:	3301      	adds	r3, #1
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	2b0c      	cmp	r3, #12
 8001258:	d006      	beq.n	8001268 <armRun+0x48>
			armRotate(&arms[i]);
 800125a:	7bfb      	ldrb	r3, [r7, #15]
 800125c:	011b      	lsls	r3, r3, #4
 800125e:	4a0f      	ldr	r2, [pc, #60]	; (800129c <armRun+0x7c>)
 8001260:	4413      	add	r3, r2
 8001262:	4618      	mov	r0, r3
 8001264:	f000 f8c2 	bl	80013ec <armRotate>
		}
		if (arms[i].elbowID != SERVO_UNDEFINED) {
 8001268:	7bfb      	ldrb	r3, [r7, #15]
 800126a:	4a0c      	ldr	r2, [pc, #48]	; (800129c <armRun+0x7c>)
 800126c:	011b      	lsls	r3, r3, #4
 800126e:	4413      	add	r3, r2
 8001270:	3302      	adds	r3, #2
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	2b0c      	cmp	r3, #12
 8001276:	d006      	beq.n	8001286 <armRun+0x66>
			armMove(&arms[i]);
 8001278:	7bfb      	ldrb	r3, [r7, #15]
 800127a:	011b      	lsls	r3, r3, #4
 800127c:	4a07      	ldr	r2, [pc, #28]	; (800129c <armRun+0x7c>)
 800127e:	4413      	add	r3, r2
 8001280:	4618      	mov	r0, r3
 8001282:	f000 f8f1 	bl	8001468 <armMove>
	for (uint8_t i = 0; i < ARM_NUMBER; i ++) {
 8001286:	7bfb      	ldrb	r3, [r7, #15]
 8001288:	3301      	adds	r3, #1
 800128a:	73fb      	strb	r3, [r7, #15]
 800128c:	7bfb      	ldrb	r3, [r7, #15]
 800128e:	2b03      	cmp	r3, #3
 8001290:	d9cd      	bls.n	800122e <armRun+0xe>
		}
	}
}
 8001292:	bf00      	nop
 8001294:	bf00      	nop
 8001296:	3710      	adds	r7, #16
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	200000a4 	.word	0x200000a4

080012a0 <armGrip>:

void armGrip(void *armPointer) {
 80012a0:	b590      	push	{r4, r7, lr}
 80012a2:	b087      	sub	sp, #28
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
	arm *newArmPointer = (arm *)armPointer;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	613b      	str	r3, [r7, #16]
	if (newArmPointer->gripperID == SERVO_UNDEFINED) return;
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	2b0c      	cmp	r3, #12
 80012b2:	d07e      	beq.n	80013b2 <armGrip+0x112>
	float newDistance = newArmPointer->distance / 2.0 + GRIPPER_THICK;
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff f8ad 	bl	8000418 <__aeabi_f2d>
 80012be:	f04f 0200 	mov.w	r2, #0
 80012c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012c6:	f7ff fa29 	bl	800071c <__aeabi_ddiv>
 80012ca:	4602      	mov	r2, r0
 80012cc:	460b      	mov	r3, r1
 80012ce:	4610      	mov	r0, r2
 80012d0:	4619      	mov	r1, r3
 80012d2:	f04f 0200 	mov.w	r2, #0
 80012d6:	4b3c      	ldr	r3, [pc, #240]	; (80013c8 <armGrip+0x128>)
 80012d8:	f7fe ff40 	bl	800015c <__adddf3>
 80012dc:	4602      	mov	r2, r0
 80012de:	460b      	mov	r3, r1
 80012e0:	4610      	mov	r0, r2
 80012e2:	4619      	mov	r1, r3
 80012e4:	f7ff fba0 	bl	8000a28 <__aeabi_d2f>
 80012e8:	4603      	mov	r3, r0
 80012ea:	617b      	str	r3, [r7, #20]
	if (newDistance < GRIPPER_MINIMUM) newDistance = GRIPPER_MINIMUM;
 80012ec:	4937      	ldr	r1, [pc, #220]	; (80013cc <armGrip+0x12c>)
 80012ee:	6978      	ldr	r0, [r7, #20]
 80012f0:	f7ff fe96 	bl	8001020 <__aeabi_fcmplt>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d002      	beq.n	8001300 <armGrip+0x60>
 80012fa:	4b34      	ldr	r3, [pc, #208]	; (80013cc <armGrip+0x12c>)
 80012fc:	617b      	str	r3, [r7, #20]
 80012fe:	e008      	b.n	8001312 <armGrip+0x72>
	else if (newDistance > GRIPPER_MAXIMUM) newDistance = GRIPPER_MAXIMUM;
 8001300:	4933      	ldr	r1, [pc, #204]	; (80013d0 <armGrip+0x130>)
 8001302:	6978      	ldr	r0, [r7, #20]
 8001304:	f7ff feaa 	bl	800105c <__aeabi_fcmpgt>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <armGrip+0x72>
 800130e:	4b30      	ldr	r3, [pc, #192]	; (80013d0 <armGrip+0x130>)
 8001310:	617b      	str	r3, [r7, #20]
	float newTarget = 90 - acosf((powf(GRIPPER_CRANK, 2) + powf(newDistance, 2) - powf(GRIPPER_ROD, 2)) / (2 * GRIPPER_CRANK * newDistance)) / M_PI * 180.0;
 8001312:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001316:	6978      	ldr	r0, [r7, #20]
 8001318:	f003 fdba 	bl	8004e90 <powf>
 800131c:	4603      	mov	r3, r0
 800131e:	492d      	ldr	r1, [pc, #180]	; (80013d4 <armGrip+0x134>)
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff fbd7 	bl	8000ad4 <__addsf3>
 8001326:	4603      	mov	r3, r0
 8001328:	492b      	ldr	r1, [pc, #172]	; (80013d8 <armGrip+0x138>)
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff fbd0 	bl	8000ad0 <__aeabi_fsub>
 8001330:	4603      	mov	r3, r0
 8001332:	461c      	mov	r4, r3
 8001334:	4929      	ldr	r1, [pc, #164]	; (80013dc <armGrip+0x13c>)
 8001336:	6978      	ldr	r0, [r7, #20]
 8001338:	f7ff fcd4 	bl	8000ce4 <__aeabi_fmul>
 800133c:	4603      	mov	r3, r0
 800133e:	4619      	mov	r1, r3
 8001340:	4620      	mov	r0, r4
 8001342:	f7ff fd83 	bl	8000e4c <__aeabi_fdiv>
 8001346:	4603      	mov	r3, r0
 8001348:	4618      	mov	r0, r3
 800134a:	f003 fd81 	bl	8004e50 <acosf>
 800134e:	4603      	mov	r3, r0
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff f861 	bl	8000418 <__aeabi_f2d>
 8001356:	a31a      	add	r3, pc, #104	; (adr r3, 80013c0 <armGrip+0x120>)
 8001358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800135c:	f7ff f9de 	bl	800071c <__aeabi_ddiv>
 8001360:	4602      	mov	r2, r0
 8001362:	460b      	mov	r3, r1
 8001364:	4610      	mov	r0, r2
 8001366:	4619      	mov	r1, r3
 8001368:	f04f 0200 	mov.w	r2, #0
 800136c:	4b1c      	ldr	r3, [pc, #112]	; (80013e0 <armGrip+0x140>)
 800136e:	f7ff f8ab 	bl	80004c8 <__aeabi_dmul>
 8001372:	4602      	mov	r2, r0
 8001374:	460b      	mov	r3, r1
 8001376:	f04f 0000 	mov.w	r0, #0
 800137a:	491a      	ldr	r1, [pc, #104]	; (80013e4 <armGrip+0x144>)
 800137c:	f7fe feec 	bl	8000158 <__aeabi_dsub>
 8001380:	4602      	mov	r2, r0
 8001382:	460b      	mov	r3, r1
 8001384:	4610      	mov	r0, r2
 8001386:	4619      	mov	r1, r3
 8001388:	f7ff fb4e 	bl	8000a28 <__aeabi_d2f>
 800138c:	4603      	mov	r3, r0
 800138e:	60fb      	str	r3, [r7, #12]
	servos[newArmPointer->gripperID].target = newTarget;
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	4a14      	ldr	r2, [pc, #80]	; (80013e8 <armGrip+0x148>)
 8001396:	011b      	lsls	r3, r3, #4
 8001398:	4413      	add	r3, r2
 800139a:	330c      	adds	r3, #12
 800139c:	68fa      	ldr	r2, [r7, #12]
 800139e:	601a      	str	r2, [r3, #0]
	servoRotate(&servos[newArmPointer->gripperID]);
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	011b      	lsls	r3, r3, #4
 80013a6:	4a10      	ldr	r2, [pc, #64]	; (80013e8 <armGrip+0x148>)
 80013a8:	4413      	add	r3, r2
 80013aa:	4618      	mov	r0, r3
 80013ac:	f001 fbe0 	bl	8002b70 <servoRotate>
 80013b0:	e000      	b.n	80013b4 <armGrip+0x114>
	if (newArmPointer->gripperID == SERVO_UNDEFINED) return;
 80013b2:	bf00      	nop
}
 80013b4:	371c      	adds	r7, #28
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd90      	pop	{r4, r7, pc}
 80013ba:	bf00      	nop
 80013bc:	f3af 8000 	nop.w
 80013c0:	54442d18 	.word	0x54442d18
 80013c4:	400921fb 	.word	0x400921fb
 80013c8:	3ff80000 	.word	0x3ff80000
 80013cc:	41d00000 	.word	0x41d00000
 80013d0:	42300000 	.word	0x42300000
 80013d4:	43610000 	.word	0x43610000
 80013d8:	44610000 	.word	0x44610000
 80013dc:	41f00000 	.word	0x41f00000
 80013e0:	40668000 	.word	0x40668000
 80013e4:	40568000 	.word	0x40568000
 80013e8:	20000510 	.word	0x20000510

080013ec <armRotate>:

void armRotate(void *armPointer) {
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b086      	sub	sp, #24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
	arm *newArmPointer = (arm *)armPointer;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	613b      	str	r3, [r7, #16]
	if (newArmPointer->wristID == SERVO_UNDEFINED) return;
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	785b      	ldrb	r3, [r3, #1]
 80013fc:	2b0c      	cmp	r3, #12
 80013fe:	d02a      	beq.n	8001456 <armRotate+0x6a>
	float newDegree = newArmPointer->degree;
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	617b      	str	r3, [r7, #20]
	if (newDegree < WRIST_MINIMUM) newDegree = WRIST_MINIMUM;
 8001406:	f04f 0100 	mov.w	r1, #0
 800140a:	6978      	ldr	r0, [r7, #20]
 800140c:	f7ff fe08 	bl	8001020 <__aeabi_fcmplt>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d003      	beq.n	800141e <armRotate+0x32>
 8001416:	f04f 0300 	mov.w	r3, #0
 800141a:	617b      	str	r3, [r7, #20]
 800141c:	e008      	b.n	8001430 <armRotate+0x44>
	else if (newDegree > WRIST_MAXIMUM) newDegree = WRIST_MAXIMUM;
 800141e:	4910      	ldr	r1, [pc, #64]	; (8001460 <armRotate+0x74>)
 8001420:	6978      	ldr	r0, [r7, #20]
 8001422:	f7ff fe1b 	bl	800105c <__aeabi_fcmpgt>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <armRotate+0x44>
 800142c:	4b0c      	ldr	r3, [pc, #48]	; (8001460 <armRotate+0x74>)
 800142e:	617b      	str	r3, [r7, #20]
	float newTarget = newDegree;
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	60fb      	str	r3, [r7, #12]
	servos[newArmPointer->wristID].target = newTarget;
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	785b      	ldrb	r3, [r3, #1]
 8001438:	4a0a      	ldr	r2, [pc, #40]	; (8001464 <armRotate+0x78>)
 800143a:	011b      	lsls	r3, r3, #4
 800143c:	4413      	add	r3, r2
 800143e:	330c      	adds	r3, #12
 8001440:	68fa      	ldr	r2, [r7, #12]
 8001442:	601a      	str	r2, [r3, #0]
	servoRotate(&servos[newArmPointer->wristID]);
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	785b      	ldrb	r3, [r3, #1]
 8001448:	011b      	lsls	r3, r3, #4
 800144a:	4a06      	ldr	r2, [pc, #24]	; (8001464 <armRotate+0x78>)
 800144c:	4413      	add	r3, r2
 800144e:	4618      	mov	r0, r3
 8001450:	f001 fb8e 	bl	8002b70 <servoRotate>
 8001454:	e000      	b.n	8001458 <armRotate+0x6c>
	if (newArmPointer->wristID == SERVO_UNDEFINED) return;
 8001456:	bf00      	nop
}
 8001458:	3718      	adds	r7, #24
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	43340000 	.word	0x43340000
 8001464:	20000510 	.word	0x20000510

08001468 <armMove>:

void armMove(void *armPointer) {
 8001468:	b5b0      	push	{r4, r5, r7, lr}
 800146a:	b086      	sub	sp, #24
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
	arm *newArmPointer = (arm *)armPointer;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	613b      	str	r3, [r7, #16]
	if (newArmPointer->elbowID == SERVO_UNDEFINED) return;
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	789b      	ldrb	r3, [r3, #2]
 8001478:	2b0c      	cmp	r3, #12
 800147a:	f000 809d 	beq.w	80015b8 <armMove+0x150>
	float newLocation = newArmPointer->location;
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	68db      	ldr	r3, [r3, #12]
 8001482:	617b      	str	r3, [r7, #20]
	if (newLocation < ELBOW_MINIMUM) newLocation = ELBOW_MINIMUM;
 8001484:	f04f 0100 	mov.w	r1, #0
 8001488:	6978      	ldr	r0, [r7, #20]
 800148a:	f7ff fdc9 	bl	8001020 <__aeabi_fcmplt>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d003      	beq.n	800149c <armMove+0x34>
 8001494:	f04f 0300 	mov.w	r3, #0
 8001498:	617b      	str	r3, [r7, #20]
 800149a:	e008      	b.n	80014ae <armMove+0x46>
	else if (newLocation > ELBOW_MAXIMUM) newLocation = ELBOW_MAXIMUM;
 800149c:	494a      	ldr	r1, [pc, #296]	; (80015c8 <armMove+0x160>)
 800149e:	6978      	ldr	r0, [r7, #20]
 80014a0:	f7ff fddc 	bl	800105c <__aeabi_fcmpgt>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <armMove+0x46>
 80014aa:	4b47      	ldr	r3, [pc, #284]	; (80015c8 <armMove+0x160>)
 80014ac:	617b      	str	r3, [r7, #20]
	float tempValue = (powf(ELBOW_CRANK, 2) - powf(ELBOW_ROD, 2) + powf(ELBOW_OFFSET, 2) + powf(newLocation, 2)) / (2 * ELBOW_CRANK);
 80014ae:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80014b2:	6978      	ldr	r0, [r7, #20]
 80014b4:	f003 fcec 	bl	8004e90 <powf>
 80014b8:	4603      	mov	r3, r0
 80014ba:	4944      	ldr	r1, [pc, #272]	; (80015cc <armMove+0x164>)
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff fb09 	bl	8000ad4 <__addsf3>
 80014c2:	4603      	mov	r3, r0
 80014c4:	4942      	ldr	r1, [pc, #264]	; (80015d0 <armMove+0x168>)
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff fcc0 	bl	8000e4c <__aeabi_fdiv>
 80014cc:	4603      	mov	r3, r0
 80014ce:	60fb      	str	r3, [r7, #12]
	float newTarget = 180 - (2 * atanf((ELBOW_OFFSET + sqrtf(powf(ELBOW_OFFSET, 2) + powf(newLocation, 2) - pow(tempValue, 2))) / (newLocation + tempValue)) / M_PI * 180.0);
 80014d0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80014d4:	6978      	ldr	r0, [r7, #20]
 80014d6:	f003 fcdb 	bl	8004e90 <powf>
 80014da:	4603      	mov	r3, r0
 80014dc:	493d      	ldr	r1, [pc, #244]	; (80015d4 <armMove+0x16c>)
 80014de:	4618      	mov	r0, r3
 80014e0:	f7ff faf8 	bl	8000ad4 <__addsf3>
 80014e4:	4603      	mov	r3, r0
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7fe ff96 	bl	8000418 <__aeabi_f2d>
 80014ec:	4604      	mov	r4, r0
 80014ee:	460d      	mov	r5, r1
 80014f0:	68f8      	ldr	r0, [r7, #12]
 80014f2:	f7fe ff91 	bl	8000418 <__aeabi_f2d>
 80014f6:	f04f 0200 	mov.w	r2, #0
 80014fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014fe:	f003 fc3f 	bl	8004d80 <pow>
 8001502:	4602      	mov	r2, r0
 8001504:	460b      	mov	r3, r1
 8001506:	4620      	mov	r0, r4
 8001508:	4629      	mov	r1, r5
 800150a:	f7fe fe25 	bl	8000158 <__aeabi_dsub>
 800150e:	4602      	mov	r2, r0
 8001510:	460b      	mov	r3, r1
 8001512:	4610      	mov	r0, r2
 8001514:	4619      	mov	r1, r3
 8001516:	f7ff fa87 	bl	8000a28 <__aeabi_d2f>
 800151a:	4603      	mov	r3, r0
 800151c:	4618      	mov	r0, r3
 800151e:	f003 fd04 	bl	8004f2a <sqrtf>
 8001522:	4603      	mov	r3, r0
 8001524:	492c      	ldr	r1, [pc, #176]	; (80015d8 <armMove+0x170>)
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff fad4 	bl	8000ad4 <__addsf3>
 800152c:	4603      	mov	r3, r0
 800152e:	461c      	mov	r4, r3
 8001530:	68f9      	ldr	r1, [r7, #12]
 8001532:	6978      	ldr	r0, [r7, #20]
 8001534:	f7ff face 	bl	8000ad4 <__addsf3>
 8001538:	4603      	mov	r3, r0
 800153a:	4619      	mov	r1, r3
 800153c:	4620      	mov	r0, r4
 800153e:	f7ff fc85 	bl	8000e4c <__aeabi_fdiv>
 8001542:	4603      	mov	r3, r0
 8001544:	4618      	mov	r0, r3
 8001546:	f003 fd0b 	bl	8004f60 <atanf>
 800154a:	4603      	mov	r3, r0
 800154c:	4619      	mov	r1, r3
 800154e:	4618      	mov	r0, r3
 8001550:	f7ff fac0 	bl	8000ad4 <__addsf3>
 8001554:	4603      	mov	r3, r0
 8001556:	4618      	mov	r0, r3
 8001558:	f7fe ff5e 	bl	8000418 <__aeabi_f2d>
 800155c:	a318      	add	r3, pc, #96	; (adr r3, 80015c0 <armMove+0x158>)
 800155e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001562:	f7ff f8db 	bl	800071c <__aeabi_ddiv>
 8001566:	4602      	mov	r2, r0
 8001568:	460b      	mov	r3, r1
 800156a:	4610      	mov	r0, r2
 800156c:	4619      	mov	r1, r3
 800156e:	f04f 0200 	mov.w	r2, #0
 8001572:	4b1a      	ldr	r3, [pc, #104]	; (80015dc <armMove+0x174>)
 8001574:	f7fe ffa8 	bl	80004c8 <__aeabi_dmul>
 8001578:	4602      	mov	r2, r0
 800157a:	460b      	mov	r3, r1
 800157c:	f04f 0000 	mov.w	r0, #0
 8001580:	4916      	ldr	r1, [pc, #88]	; (80015dc <armMove+0x174>)
 8001582:	f7fe fde9 	bl	8000158 <__aeabi_dsub>
 8001586:	4602      	mov	r2, r0
 8001588:	460b      	mov	r3, r1
 800158a:	4610      	mov	r0, r2
 800158c:	4619      	mov	r1, r3
 800158e:	f7ff fa4b 	bl	8000a28 <__aeabi_d2f>
 8001592:	4603      	mov	r3, r0
 8001594:	60bb      	str	r3, [r7, #8]
	servos[newArmPointer->elbowID].target = newTarget;
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	789b      	ldrb	r3, [r3, #2]
 800159a:	4a11      	ldr	r2, [pc, #68]	; (80015e0 <armMove+0x178>)
 800159c:	011b      	lsls	r3, r3, #4
 800159e:	4413      	add	r3, r2
 80015a0:	330c      	adds	r3, #12
 80015a2:	68ba      	ldr	r2, [r7, #8]
 80015a4:	601a      	str	r2, [r3, #0]
	servoRotate(&servos[newArmPointer->elbowID]);
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	789b      	ldrb	r3, [r3, #2]
 80015aa:	011b      	lsls	r3, r3, #4
 80015ac:	4a0c      	ldr	r2, [pc, #48]	; (80015e0 <armMove+0x178>)
 80015ae:	4413      	add	r3, r2
 80015b0:	4618      	mov	r0, r3
 80015b2:	f001 fadd 	bl	8002b70 <servoRotate>
 80015b6:	e000      	b.n	80015ba <armMove+0x152>
	if (newArmPointer->elbowID == SERVO_UNDEFINED) return;
 80015b8:	bf00      	nop
}
 80015ba:	3718      	adds	r7, #24
 80015bc:	46bd      	mov	sp, r7
 80015be:	bdb0      	pop	{r4, r5, r7, pc}
 80015c0:	54442d18 	.word	0x54442d18
 80015c4:	400921fb 	.word	0x400921fb
 80015c8:	41c80000 	.word	0x41c80000
 80015cc:	43610000 	.word	0x43610000
 80015d0:	41f00000 	.word	0x41f00000
 80015d4:	43c80000 	.word	0x43c80000
 80015d8:	41a00000 	.word	0x41a00000
 80015dc:	40668000 	.word	0x40668000
 80015e0:	20000510 	.word	0x20000510

080015e4 <armHold>:

void armHold(void *armPointer) {
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
	arm *newArmPointer = (arm *)armPointer;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	60fb      	str	r3, [r7, #12]
	newArmPointer->distance = ARM_HOLD;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	4a04      	ldr	r2, [pc, #16]	; (8001604 <armHold+0x20>)
 80015f4:	605a      	str	r2, [r3, #4]
	armGrip(newArmPointer);
 80015f6:	68f8      	ldr	r0, [r7, #12]
 80015f8:	f7ff fe52 	bl	80012a0 <armGrip>
}
 80015fc:	bf00      	nop
 80015fe:	3710      	adds	r7, #16
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	42640000 	.word	0x42640000

08001608 <armRelease>:

void armRelease(void *armPointer) {
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
	arm *newArmPointer = (arm *)armPointer;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	60fb      	str	r3, [r7, #12]
	newArmPointer->distance = ARM_RELEASE;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	4a04      	ldr	r2, [pc, #16]	; (8001628 <armRelease+0x20>)
 8001618:	605a      	str	r2, [r3, #4]
	armGrip(newArmPointer);
 800161a:	68f8      	ldr	r0, [r7, #12]
 800161c:	f7ff fe40 	bl	80012a0 <armGrip>
}
 8001620:	bf00      	nop
 8001622:	3710      	adds	r7, #16
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	42820000 	.word	0x42820000

0800162c <armWestward>:
	arm *newArmPointer = (arm *)armPointer;
	newArmPointer->distance = ARM_RELAX;
	armGrip(newArmPointer);
}

void armWestward(void *armPointer) {
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
	arm *newArmPointer = (arm *)armPointer;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	60fb      	str	r3, [r7, #12]
	newArmPointer->degree = ARM_WESTWARD;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	4a04      	ldr	r2, [pc, #16]	; (800164c <armWestward+0x20>)
 800163c:	609a      	str	r2, [r3, #8]
	armRotate(newArmPointer);
 800163e:	68f8      	ldr	r0, [r7, #12]
 8001640:	f7ff fed4 	bl	80013ec <armRotate>
}
 8001644:	bf00      	nop
 8001646:	3710      	adds	r7, #16
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	43340000 	.word	0x43340000

08001650 <armNorthward>:
	arm *newArmPointer = (arm *)armPointer;
	newArmPointer->degree = ARM_NORTHWEST;
	armRotate(newArmPointer);
}

void armNorthward(void *armPointer) {
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
	arm *newArmPointer = (arm *)armPointer;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	60fb      	str	r3, [r7, #12]
	newArmPointer->degree = ARM_NORTHWARD;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	4a04      	ldr	r2, [pc, #16]	; (8001670 <armNorthward+0x20>)
 8001660:	609a      	str	r2, [r3, #8]
	armRotate(newArmPointer);
 8001662:	68f8      	ldr	r0, [r7, #12]
 8001664:	f7ff fec2 	bl	80013ec <armRotate>
}
 8001668:	bf00      	nop
 800166a:	3710      	adds	r7, #16
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	42b40000 	.word	0x42b40000

08001674 <armEastward>:
	arm *newArmPointer = (arm *)armPointer;
	newArmPointer->degree = ARM_NORTHEAST;
	armRotate(newArmPointer);
}

void armEastward(void *armPointer) {
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
	arm *newArmPointer = (arm *)armPointer;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	60fb      	str	r3, [r7, #12]
	newArmPointer->degree = ARM_EASTWARD;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	f04f 0200 	mov.w	r2, #0
 8001686:	609a      	str	r2, [r3, #8]
	armRotate(newArmPointer);
 8001688:	68f8      	ldr	r0, [r7, #12]
 800168a:	f7ff feaf 	bl	80013ec <armRotate>
}
 800168e:	bf00      	nop
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
	...

08001698 <armForward>:

void armForward(void *armPointer) {
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
	arm *newArmPointer = (arm *)armPointer;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	60fb      	str	r3, [r7, #12]
	newArmPointer->location = ARM_FORWARD;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	4a04      	ldr	r2, [pc, #16]	; (80016b8 <armForward+0x20>)
 80016a8:	60da      	str	r2, [r3, #12]
	armMove(newArmPointer);
 80016aa:	68f8      	ldr	r0, [r7, #12]
 80016ac:	f7ff fedc 	bl	8001468 <armMove>
}
 80016b0:	bf00      	nop
 80016b2:	3710      	adds	r7, #16
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	41900000 	.word	0x41900000

080016bc <armBackward>:

void armBackward(void *armPointer) {
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
	arm *newArmPointer = (arm *)armPointer;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	60fb      	str	r3, [r7, #12]
	newArmPointer->location = ARM_BACKWARD;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	f04f 0200 	mov.w	r2, #0
 80016ce:	60da      	str	r2, [r3, #12]
	armMove(newArmPointer);
 80016d0:	68f8      	ldr	r0, [r7, #12]
 80016d2:	f7ff fec9 	bl	8001468 <armMove>
}
 80016d6:	bf00      	nop
 80016d8:	3710      	adds	r7, #16
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
	...

080016e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016e4:	f001 fcb0 	bl	8003048 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016e8:	f000 f860 	bl	80017ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016ec:	f000 fab4 	bl	8001c58 <MX_GPIO_Init>
  MX_TIM1_Init();
 80016f0:	f000 f89c 	bl	800182c <MX_TIM1_Init>
  MX_TIM2_Init();
 80016f4:	f000 f8ea 	bl	80018cc <MX_TIM2_Init>
  MX_TIM3_Init();
 80016f8:	f000 f97e 	bl	80019f8 <MX_TIM3_Init>
  MX_TIM4_Init();
 80016fc:	f000 fa14 	bl	8001b28 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8001700:	4824      	ldr	r0, [pc, #144]	; (8001794 <main+0xb4>)
 8001702:	f002 fbf5 	bl	8003ef0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001706:	2100      	movs	r1, #0
 8001708:	4823      	ldr	r0, [pc, #140]	; (8001798 <main+0xb8>)
 800170a:	f002 fc9b 	bl	8004044 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800170e:	2104      	movs	r1, #4
 8001710:	4821      	ldr	r0, [pc, #132]	; (8001798 <main+0xb8>)
 8001712:	f002 fc97 	bl	8004044 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001716:	2108      	movs	r1, #8
 8001718:	481f      	ldr	r0, [pc, #124]	; (8001798 <main+0xb8>)
 800171a:	f002 fc93 	bl	8004044 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800171e:	210c      	movs	r1, #12
 8001720:	481d      	ldr	r0, [pc, #116]	; (8001798 <main+0xb8>)
 8001722:	f002 fc8f 	bl	8004044 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001726:	2100      	movs	r1, #0
 8001728:	481c      	ldr	r0, [pc, #112]	; (800179c <main+0xbc>)
 800172a:	f002 fc8b 	bl	8004044 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800172e:	2104      	movs	r1, #4
 8001730:	481a      	ldr	r0, [pc, #104]	; (800179c <main+0xbc>)
 8001732:	f002 fc87 	bl	8004044 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001736:	2108      	movs	r1, #8
 8001738:	4818      	ldr	r0, [pc, #96]	; (800179c <main+0xbc>)
 800173a:	f002 fc83 	bl	8004044 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800173e:	210c      	movs	r1, #12
 8001740:	4816      	ldr	r0, [pc, #88]	; (800179c <main+0xbc>)
 8001742:	f002 fc7f 	bl	8004044 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001746:	2100      	movs	r1, #0
 8001748:	4815      	ldr	r0, [pc, #84]	; (80017a0 <main+0xc0>)
 800174a:	f002 fc7b 	bl	8004044 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800174e:	2104      	movs	r1, #4
 8001750:	4813      	ldr	r0, [pc, #76]	; (80017a0 <main+0xc0>)
 8001752:	f002 fc77 	bl	8004044 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001756:	2108      	movs	r1, #8
 8001758:	4811      	ldr	r0, [pc, #68]	; (80017a0 <main+0xc0>)
 800175a:	f002 fc73 	bl	8004044 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800175e:	210c      	movs	r1, #12
 8001760:	480f      	ldr	r0, [pc, #60]	; (80017a0 <main+0xc0>)
 8001762:	f002 fc6f 	bl	8004044 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  schedulerInit();
 8001766:	f000 fd97 	bl	8002298 <schedulerInit>
  robotInit();
 800176a:	f000 faed 	bl	8001d48 <robotInit>
//  schedulerAddTask(servoRun, NULL, 1000, 0);
  schedulerAddTask(robotBoot, NULL, 1000, 0);
 800176e:	2300      	movs	r3, #0
 8001770:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001774:	2100      	movs	r1, #0
 8001776:	480b      	ldr	r0, [pc, #44]	; (80017a4 <main+0xc4>)
 8001778:	f000 fe2c 	bl	80023d4 <schedulerAddTask>
  schedulerAddTask(robotFlipXNormal, NULL, 20000, 20000);
 800177c:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001780:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001784:	2100      	movs	r1, #0
 8001786:	4808      	ldr	r0, [pc, #32]	; (80017a8 <main+0xc8>)
 8001788:	f000 fe24 	bl	80023d4 <schedulerAddTask>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  schedulerDispatch();
 800178c:	f000 fe04 	bl	8002398 <schedulerDispatch>
 8001790:	e7fc      	b.n	800178c <main+0xac>
 8001792:	bf00      	nop
 8001794:	200000e4 	.word	0x200000e4
 8001798:	2000012c 	.word	0x2000012c
 800179c:	20000174 	.word	0x20000174
 80017a0:	200001bc 	.word	0x200001bc
 80017a4:	08001f31 	.word	0x08001f31
 80017a8:	0800205d 	.word	0x0800205d

080017ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b090      	sub	sp, #64	; 0x40
 80017b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017b2:	f107 0318 	add.w	r3, r7, #24
 80017b6:	2228      	movs	r2, #40	; 0x28
 80017b8:	2100      	movs	r1, #0
 80017ba:	4618      	mov	r0, r3
 80017bc:	f003 faae 	bl	8004d1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017c0:	1d3b      	adds	r3, r7, #4
 80017c2:	2200      	movs	r2, #0
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	605a      	str	r2, [r3, #4]
 80017c8:	609a      	str	r2, [r3, #8]
 80017ca:	60da      	str	r2, [r3, #12]
 80017cc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017ce:	2302      	movs	r3, #2
 80017d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017d2:	2301      	movs	r3, #1
 80017d4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017d6:	2310      	movs	r3, #16
 80017d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017da:	2302      	movs	r3, #2
 80017dc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80017de:	2300      	movs	r3, #0
 80017e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80017e2:	2300      	movs	r3, #0
 80017e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017e6:	f107 0318 	add.w	r3, r7, #24
 80017ea:	4618      	mov	r0, r3
 80017ec:	f001 ff52 	bl	8003694 <HAL_RCC_OscConfig>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <SystemClock_Config+0x4e>
  {
    Error_Handler();
 80017f6:	f000 fa7f 	bl	8001cf8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017fa:	230f      	movs	r3, #15
 80017fc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017fe:	2302      	movs	r3, #2
 8001800:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001802:	2300      	movs	r3, #0
 8001804:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001806:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800180a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800180c:	2300      	movs	r3, #0
 800180e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001810:	1d3b      	adds	r3, r7, #4
 8001812:	2100      	movs	r1, #0
 8001814:	4618      	mov	r0, r3
 8001816:	f002 f9bf 	bl	8003b98 <HAL_RCC_ClockConfig>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001820:	f000 fa6a 	bl	8001cf8 <Error_Handler>
  }
}
 8001824:	bf00      	nop
 8001826:	3740      	adds	r7, #64	; 0x40
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}

0800182c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b086      	sub	sp, #24
 8001830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001832:	f107 0308 	add.w	r3, r7, #8
 8001836:	2200      	movs	r2, #0
 8001838:	601a      	str	r2, [r3, #0]
 800183a:	605a      	str	r2, [r3, #4]
 800183c:	609a      	str	r2, [r3, #8]
 800183e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001840:	463b      	mov	r3, r7
 8001842:	2200      	movs	r2, #0
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001848:	4b1e      	ldr	r3, [pc, #120]	; (80018c4 <MX_TIM1_Init+0x98>)
 800184a:	4a1f      	ldr	r2, [pc, #124]	; (80018c8 <MX_TIM1_Init+0x9c>)
 800184c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800184e:	4b1d      	ldr	r3, [pc, #116]	; (80018c4 <MX_TIM1_Init+0x98>)
 8001850:	2200      	movs	r2, #0
 8001852:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001854:	4b1b      	ldr	r3, [pc, #108]	; (80018c4 <MX_TIM1_Init+0x98>)
 8001856:	2200      	movs	r2, #0
 8001858:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7999;
 800185a:	4b1a      	ldr	r3, [pc, #104]	; (80018c4 <MX_TIM1_Init+0x98>)
 800185c:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001860:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001862:	4b18      	ldr	r3, [pc, #96]	; (80018c4 <MX_TIM1_Init+0x98>)
 8001864:	2200      	movs	r2, #0
 8001866:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001868:	4b16      	ldr	r3, [pc, #88]	; (80018c4 <MX_TIM1_Init+0x98>)
 800186a:	2200      	movs	r2, #0
 800186c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800186e:	4b15      	ldr	r3, [pc, #84]	; (80018c4 <MX_TIM1_Init+0x98>)
 8001870:	2200      	movs	r2, #0
 8001872:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001874:	4813      	ldr	r0, [pc, #76]	; (80018c4 <MX_TIM1_Init+0x98>)
 8001876:	f002 faeb 	bl	8003e50 <HAL_TIM_Base_Init>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001880:	f000 fa3a 	bl	8001cf8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001884:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001888:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800188a:	f107 0308 	add.w	r3, r7, #8
 800188e:	4619      	mov	r1, r3
 8001890:	480c      	ldr	r0, [pc, #48]	; (80018c4 <MX_TIM1_Init+0x98>)
 8001892:	f002 fe43 	bl	800451c <HAL_TIM_ConfigClockSource>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800189c:	f000 fa2c 	bl	8001cf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018a0:	2300      	movs	r3, #0
 80018a2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018a4:	2300      	movs	r3, #0
 80018a6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018a8:	463b      	mov	r3, r7
 80018aa:	4619      	mov	r1, r3
 80018ac:	4805      	ldr	r0, [pc, #20]	; (80018c4 <MX_TIM1_Init+0x98>)
 80018ae:	f003 f9c5 	bl	8004c3c <HAL_TIMEx_MasterConfigSynchronization>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80018b8:	f000 fa1e 	bl	8001cf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80018bc:	bf00      	nop
 80018be:	3718      	adds	r7, #24
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	200000e4 	.word	0x200000e4
 80018c8:	40012c00 	.word	0x40012c00

080018cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b08e      	sub	sp, #56	; 0x38
 80018d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]
 80018da:	605a      	str	r2, [r3, #4]
 80018dc:	609a      	str	r2, [r3, #8]
 80018de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018e0:	f107 0320 	add.w	r3, r7, #32
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018ea:	1d3b      	adds	r3, r7, #4
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	609a      	str	r2, [r3, #8]
 80018f4:	60da      	str	r2, [r3, #12]
 80018f6:	611a      	str	r2, [r3, #16]
 80018f8:	615a      	str	r2, [r3, #20]
 80018fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018fc:	4b3d      	ldr	r3, [pc, #244]	; (80019f4 <MX_TIM2_Init+0x128>)
 80018fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001902:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3;
 8001904:	4b3b      	ldr	r3, [pc, #236]	; (80019f4 <MX_TIM2_Init+0x128>)
 8001906:	2203      	movs	r2, #3
 8001908:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800190a:	4b3a      	ldr	r3, [pc, #232]	; (80019f4 <MX_TIM2_Init+0x128>)
 800190c:	2200      	movs	r2, #0
 800190e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 39999;
 8001910:	4b38      	ldr	r3, [pc, #224]	; (80019f4 <MX_TIM2_Init+0x128>)
 8001912:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8001916:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001918:	4b36      	ldr	r3, [pc, #216]	; (80019f4 <MX_TIM2_Init+0x128>)
 800191a:	2200      	movs	r2, #0
 800191c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800191e:	4b35      	ldr	r3, [pc, #212]	; (80019f4 <MX_TIM2_Init+0x128>)
 8001920:	2200      	movs	r2, #0
 8001922:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001924:	4833      	ldr	r0, [pc, #204]	; (80019f4 <MX_TIM2_Init+0x128>)
 8001926:	f002 fa93 	bl	8003e50 <HAL_TIM_Base_Init>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001930:	f000 f9e2 	bl	8001cf8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001934:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001938:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800193a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800193e:	4619      	mov	r1, r3
 8001940:	482c      	ldr	r0, [pc, #176]	; (80019f4 <MX_TIM2_Init+0x128>)
 8001942:	f002 fdeb 	bl	800451c <HAL_TIM_ConfigClockSource>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800194c:	f000 f9d4 	bl	8001cf8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001950:	4828      	ldr	r0, [pc, #160]	; (80019f4 <MX_TIM2_Init+0x128>)
 8001952:	f002 fb1f 	bl	8003f94 <HAL_TIM_PWM_Init>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800195c:	f000 f9cc 	bl	8001cf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001960:	2300      	movs	r3, #0
 8001962:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001964:	2300      	movs	r3, #0
 8001966:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001968:	f107 0320 	add.w	r3, r7, #32
 800196c:	4619      	mov	r1, r3
 800196e:	4821      	ldr	r0, [pc, #132]	; (80019f4 <MX_TIM2_Init+0x128>)
 8001970:	f003 f964 	bl	8004c3c <HAL_TIMEx_MasterConfigSynchronization>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800197a:	f000 f9bd 	bl	8001cf8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800197e:	2360      	movs	r3, #96	; 0x60
 8001980:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001982:	2300      	movs	r3, #0
 8001984:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001986:	2300      	movs	r3, #0
 8001988:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800198a:	2300      	movs	r3, #0
 800198c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800198e:	1d3b      	adds	r3, r7, #4
 8001990:	2200      	movs	r2, #0
 8001992:	4619      	mov	r1, r3
 8001994:	4817      	ldr	r0, [pc, #92]	; (80019f4 <MX_TIM2_Init+0x128>)
 8001996:	f002 fcff 	bl	8004398 <HAL_TIM_PWM_ConfigChannel>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80019a0:	f000 f9aa 	bl	8001cf8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019a4:	1d3b      	adds	r3, r7, #4
 80019a6:	2204      	movs	r2, #4
 80019a8:	4619      	mov	r1, r3
 80019aa:	4812      	ldr	r0, [pc, #72]	; (80019f4 <MX_TIM2_Init+0x128>)
 80019ac:	f002 fcf4 	bl	8004398 <HAL_TIM_PWM_ConfigChannel>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80019b6:	f000 f99f 	bl	8001cf8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80019ba:	1d3b      	adds	r3, r7, #4
 80019bc:	2208      	movs	r2, #8
 80019be:	4619      	mov	r1, r3
 80019c0:	480c      	ldr	r0, [pc, #48]	; (80019f4 <MX_TIM2_Init+0x128>)
 80019c2:	f002 fce9 	bl	8004398 <HAL_TIM_PWM_ConfigChannel>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 80019cc:	f000 f994 	bl	8001cf8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80019d0:	1d3b      	adds	r3, r7, #4
 80019d2:	220c      	movs	r2, #12
 80019d4:	4619      	mov	r1, r3
 80019d6:	4807      	ldr	r0, [pc, #28]	; (80019f4 <MX_TIM2_Init+0x128>)
 80019d8:	f002 fcde 	bl	8004398 <HAL_TIM_PWM_ConfigChannel>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 80019e2:	f000 f989 	bl	8001cf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80019e6:	4803      	ldr	r0, [pc, #12]	; (80019f4 <MX_TIM2_Init+0x128>)
 80019e8:	f001 fa08 	bl	8002dfc <HAL_TIM_MspPostInit>

}
 80019ec:	bf00      	nop
 80019ee:	3738      	adds	r7, #56	; 0x38
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	2000012c 	.word	0x2000012c

080019f8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b08e      	sub	sp, #56	; 0x38
 80019fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a02:	2200      	movs	r2, #0
 8001a04:	601a      	str	r2, [r3, #0]
 8001a06:	605a      	str	r2, [r3, #4]
 8001a08:	609a      	str	r2, [r3, #8]
 8001a0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a0c:	f107 0320 	add.w	r3, r7, #32
 8001a10:	2200      	movs	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a16:	1d3b      	adds	r3, r7, #4
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	605a      	str	r2, [r3, #4]
 8001a1e:	609a      	str	r2, [r3, #8]
 8001a20:	60da      	str	r2, [r3, #12]
 8001a22:	611a      	str	r2, [r3, #16]
 8001a24:	615a      	str	r2, [r3, #20]
 8001a26:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a28:	4b3d      	ldr	r3, [pc, #244]	; (8001b20 <MX_TIM3_Init+0x128>)
 8001a2a:	4a3e      	ldr	r2, [pc, #248]	; (8001b24 <MX_TIM3_Init+0x12c>)
 8001a2c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3;
 8001a2e:	4b3c      	ldr	r3, [pc, #240]	; (8001b20 <MX_TIM3_Init+0x128>)
 8001a30:	2203      	movs	r2, #3
 8001a32:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a34:	4b3a      	ldr	r3, [pc, #232]	; (8001b20 <MX_TIM3_Init+0x128>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 39999;
 8001a3a:	4b39      	ldr	r3, [pc, #228]	; (8001b20 <MX_TIM3_Init+0x128>)
 8001a3c:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8001a40:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a42:	4b37      	ldr	r3, [pc, #220]	; (8001b20 <MX_TIM3_Init+0x128>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a48:	4b35      	ldr	r3, [pc, #212]	; (8001b20 <MX_TIM3_Init+0x128>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a4e:	4834      	ldr	r0, [pc, #208]	; (8001b20 <MX_TIM3_Init+0x128>)
 8001a50:	f002 f9fe 	bl	8003e50 <HAL_TIM_Base_Init>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001a5a:	f000 f94d 	bl	8001cf8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a62:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a64:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a68:	4619      	mov	r1, r3
 8001a6a:	482d      	ldr	r0, [pc, #180]	; (8001b20 <MX_TIM3_Init+0x128>)
 8001a6c:	f002 fd56 	bl	800451c <HAL_TIM_ConfigClockSource>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001a76:	f000 f93f 	bl	8001cf8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001a7a:	4829      	ldr	r0, [pc, #164]	; (8001b20 <MX_TIM3_Init+0x128>)
 8001a7c:	f002 fa8a 	bl	8003f94 <HAL_TIM_PWM_Init>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001a86:	f000 f937 	bl	8001cf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a92:	f107 0320 	add.w	r3, r7, #32
 8001a96:	4619      	mov	r1, r3
 8001a98:	4821      	ldr	r0, [pc, #132]	; (8001b20 <MX_TIM3_Init+0x128>)
 8001a9a:	f003 f8cf 	bl	8004c3c <HAL_TIMEx_MasterConfigSynchronization>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001aa4:	f000 f928 	bl	8001cf8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001aa8:	2360      	movs	r3, #96	; 0x60
 8001aaa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001aac:	2300      	movs	r3, #0
 8001aae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ab8:	1d3b      	adds	r3, r7, #4
 8001aba:	2200      	movs	r2, #0
 8001abc:	4619      	mov	r1, r3
 8001abe:	4818      	ldr	r0, [pc, #96]	; (8001b20 <MX_TIM3_Init+0x128>)
 8001ac0:	f002 fc6a 	bl	8004398 <HAL_TIM_PWM_ConfigChannel>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001aca:	f000 f915 	bl	8001cf8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ace:	1d3b      	adds	r3, r7, #4
 8001ad0:	2204      	movs	r2, #4
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	4812      	ldr	r0, [pc, #72]	; (8001b20 <MX_TIM3_Init+0x128>)
 8001ad6:	f002 fc5f 	bl	8004398 <HAL_TIM_PWM_ConfigChannel>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001ae0:	f000 f90a 	bl	8001cf8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ae4:	1d3b      	adds	r3, r7, #4
 8001ae6:	2208      	movs	r2, #8
 8001ae8:	4619      	mov	r1, r3
 8001aea:	480d      	ldr	r0, [pc, #52]	; (8001b20 <MX_TIM3_Init+0x128>)
 8001aec:	f002 fc54 	bl	8004398 <HAL_TIM_PWM_ConfigChannel>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8001af6:	f000 f8ff 	bl	8001cf8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001afa:	1d3b      	adds	r3, r7, #4
 8001afc:	220c      	movs	r2, #12
 8001afe:	4619      	mov	r1, r3
 8001b00:	4807      	ldr	r0, [pc, #28]	; (8001b20 <MX_TIM3_Init+0x128>)
 8001b02:	f002 fc49 	bl	8004398 <HAL_TIM_PWM_ConfigChannel>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8001b0c:	f000 f8f4 	bl	8001cf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001b10:	4803      	ldr	r0, [pc, #12]	; (8001b20 <MX_TIM3_Init+0x128>)
 8001b12:	f001 f973 	bl	8002dfc <HAL_TIM_MspPostInit>

}
 8001b16:	bf00      	nop
 8001b18:	3738      	adds	r7, #56	; 0x38
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	20000174 	.word	0x20000174
 8001b24:	40000400 	.word	0x40000400

08001b28 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b08e      	sub	sp, #56	; 0x38
 8001b2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b32:	2200      	movs	r2, #0
 8001b34:	601a      	str	r2, [r3, #0]
 8001b36:	605a      	str	r2, [r3, #4]
 8001b38:	609a      	str	r2, [r3, #8]
 8001b3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b3c:	f107 0320 	add.w	r3, r7, #32
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b46:	1d3b      	adds	r3, r7, #4
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	605a      	str	r2, [r3, #4]
 8001b4e:	609a      	str	r2, [r3, #8]
 8001b50:	60da      	str	r2, [r3, #12]
 8001b52:	611a      	str	r2, [r3, #16]
 8001b54:	615a      	str	r2, [r3, #20]
 8001b56:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001b58:	4b3d      	ldr	r3, [pc, #244]	; (8001c50 <MX_TIM4_Init+0x128>)
 8001b5a:	4a3e      	ldr	r2, [pc, #248]	; (8001c54 <MX_TIM4_Init+0x12c>)
 8001b5c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 3;
 8001b5e:	4b3c      	ldr	r3, [pc, #240]	; (8001c50 <MX_TIM4_Init+0x128>)
 8001b60:	2203      	movs	r2, #3
 8001b62:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b64:	4b3a      	ldr	r3, [pc, #232]	; (8001c50 <MX_TIM4_Init+0x128>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 39999;
 8001b6a:	4b39      	ldr	r3, [pc, #228]	; (8001c50 <MX_TIM4_Init+0x128>)
 8001b6c:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8001b70:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b72:	4b37      	ldr	r3, [pc, #220]	; (8001c50 <MX_TIM4_Init+0x128>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b78:	4b35      	ldr	r3, [pc, #212]	; (8001c50 <MX_TIM4_Init+0x128>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001b7e:	4834      	ldr	r0, [pc, #208]	; (8001c50 <MX_TIM4_Init+0x128>)
 8001b80:	f002 f966 	bl	8003e50 <HAL_TIM_Base_Init>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001b8a:	f000 f8b5 	bl	8001cf8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b92:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001b94:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b98:	4619      	mov	r1, r3
 8001b9a:	482d      	ldr	r0, [pc, #180]	; (8001c50 <MX_TIM4_Init+0x128>)
 8001b9c:	f002 fcbe 	bl	800451c <HAL_TIM_ConfigClockSource>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001ba6:	f000 f8a7 	bl	8001cf8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001baa:	4829      	ldr	r0, [pc, #164]	; (8001c50 <MX_TIM4_Init+0x128>)
 8001bac:	f002 f9f2 	bl	8003f94 <HAL_TIM_PWM_Init>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001bb6:	f000 f89f 	bl	8001cf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001bc2:	f107 0320 	add.w	r3, r7, #32
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	4821      	ldr	r0, [pc, #132]	; (8001c50 <MX_TIM4_Init+0x128>)
 8001bca:	f003 f837 	bl	8004c3c <HAL_TIMEx_MasterConfigSynchronization>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001bd4:	f000 f890 	bl	8001cf8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bd8:	2360      	movs	r3, #96	; 0x60
 8001bda:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001be0:	2300      	movs	r3, #0
 8001be2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001be4:	2300      	movs	r3, #0
 8001be6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001be8:	1d3b      	adds	r3, r7, #4
 8001bea:	2200      	movs	r2, #0
 8001bec:	4619      	mov	r1, r3
 8001bee:	4818      	ldr	r0, [pc, #96]	; (8001c50 <MX_TIM4_Init+0x128>)
 8001bf0:	f002 fbd2 	bl	8004398 <HAL_TIM_PWM_ConfigChannel>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001bfa:	f000 f87d 	bl	8001cf8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001bfe:	1d3b      	adds	r3, r7, #4
 8001c00:	2204      	movs	r2, #4
 8001c02:	4619      	mov	r1, r3
 8001c04:	4812      	ldr	r0, [pc, #72]	; (8001c50 <MX_TIM4_Init+0x128>)
 8001c06:	f002 fbc7 	bl	8004398 <HAL_TIM_PWM_ConfigChannel>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8001c10:	f000 f872 	bl	8001cf8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c14:	1d3b      	adds	r3, r7, #4
 8001c16:	2208      	movs	r2, #8
 8001c18:	4619      	mov	r1, r3
 8001c1a:	480d      	ldr	r0, [pc, #52]	; (8001c50 <MX_TIM4_Init+0x128>)
 8001c1c:	f002 fbbc 	bl	8004398 <HAL_TIM_PWM_ConfigChannel>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8001c26:	f000 f867 	bl	8001cf8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001c2a:	1d3b      	adds	r3, r7, #4
 8001c2c:	220c      	movs	r2, #12
 8001c2e:	4619      	mov	r1, r3
 8001c30:	4807      	ldr	r0, [pc, #28]	; (8001c50 <MX_TIM4_Init+0x128>)
 8001c32:	f002 fbb1 	bl	8004398 <HAL_TIM_PWM_ConfigChannel>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8001c3c:	f000 f85c 	bl	8001cf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001c40:	4803      	ldr	r0, [pc, #12]	; (8001c50 <MX_TIM4_Init+0x128>)
 8001c42:	f001 f8db 	bl	8002dfc <HAL_TIM_MspPostInit>

}
 8001c46:	bf00      	nop
 8001c48:	3738      	adds	r7, #56	; 0x38
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	200001bc 	.word	0x200001bc
 8001c54:	40000800 	.word	0x40000800

08001c58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b086      	sub	sp, #24
 8001c5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c5e:	f107 0308 	add.w	r3, r7, #8
 8001c62:	2200      	movs	r2, #0
 8001c64:	601a      	str	r2, [r3, #0]
 8001c66:	605a      	str	r2, [r3, #4]
 8001c68:	609a      	str	r2, [r3, #8]
 8001c6a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c6c:	4b17      	ldr	r3, [pc, #92]	; (8001ccc <MX_GPIO_Init+0x74>)
 8001c6e:	699b      	ldr	r3, [r3, #24]
 8001c70:	4a16      	ldr	r2, [pc, #88]	; (8001ccc <MX_GPIO_Init+0x74>)
 8001c72:	f043 0304 	orr.w	r3, r3, #4
 8001c76:	6193      	str	r3, [r2, #24]
 8001c78:	4b14      	ldr	r3, [pc, #80]	; (8001ccc <MX_GPIO_Init+0x74>)
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	f003 0304 	and.w	r3, r3, #4
 8001c80:	607b      	str	r3, [r7, #4]
 8001c82:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c84:	4b11      	ldr	r3, [pc, #68]	; (8001ccc <MX_GPIO_Init+0x74>)
 8001c86:	699b      	ldr	r3, [r3, #24]
 8001c88:	4a10      	ldr	r2, [pc, #64]	; (8001ccc <MX_GPIO_Init+0x74>)
 8001c8a:	f043 0308 	orr.w	r3, r3, #8
 8001c8e:	6193      	str	r3, [r2, #24]
 8001c90:	4b0e      	ldr	r3, [pc, #56]	; (8001ccc <MX_GPIO_Init+0x74>)
 8001c92:	699b      	ldr	r3, [r3, #24]
 8001c94:	f003 0308 	and.w	r3, r3, #8
 8001c98:	603b      	str	r3, [r7, #0]
 8001c9a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SCHEDULER_LED_GPIO_Port, SCHEDULER_LED_Pin, GPIO_PIN_RESET);
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	2120      	movs	r1, #32
 8001ca0:	480b      	ldr	r0, [pc, #44]	; (8001cd0 <MX_GPIO_Init+0x78>)
 8001ca2:	f001 fcc5 	bl	8003630 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SCHEDULER_LED_Pin */
  GPIO_InitStruct.Pin = SCHEDULER_LED_Pin;
 8001ca6:	2320      	movs	r3, #32
 8001ca8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001caa:	2301      	movs	r3, #1
 8001cac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SCHEDULER_LED_GPIO_Port, &GPIO_InitStruct);
 8001cb6:	f107 0308 	add.w	r3, r7, #8
 8001cba:	4619      	mov	r1, r3
 8001cbc:	4804      	ldr	r0, [pc, #16]	; (8001cd0 <MX_GPIO_Init+0x78>)
 8001cbe:	f001 fb33 	bl	8003328 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001cc2:	bf00      	nop
 8001cc4:	3718      	adds	r7, #24
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	40021000 	.word	0x40021000
 8001cd0:	40010800 	.word	0x40010800

08001cd4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a04      	ldr	r2, [pc, #16]	; (8001cf4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d101      	bne.n	8001cea <HAL_TIM_PeriodElapsedCallback+0x16>
		schedulerUpdate();
 8001ce6:	f000 fb31 	bl	800234c <schedulerUpdate>
	}
}
 8001cea:	bf00      	nop
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	40012c00 	.word	0x40012c00

08001cf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cfc:	b672      	cpsid	i
}
 8001cfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d00:	e7fe      	b.n	8001d00 <Error_Handler+0x8>
	...

08001d04 <robotFree>:

static robotState state;
static robotMovingArm movingArm;
static robotFlippingArm flippingArm;

void robotFree(void *) {
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
	state = FREE;
 8001d0c:	4b0b      	ldr	r3, [pc, #44]	; (8001d3c <robotFree+0x38>)
 8001d0e:	2201      	movs	r2, #1
 8001d10:	701a      	strb	r2, [r3, #0]
	movingArm.armID = ARM_UNDEFINED;
 8001d12:	4b0b      	ldr	r3, [pc, #44]	; (8001d40 <robotFree+0x3c>)
 8001d14:	2204      	movs	r2, #4
 8001d16:	701a      	strb	r2, [r3, #0]
	flippingArm.firstArmID = ARM_UNDEFINED;
 8001d18:	4b0a      	ldr	r3, [pc, #40]	; (8001d44 <robotFree+0x40>)
 8001d1a:	2204      	movs	r2, #4
 8001d1c:	701a      	strb	r2, [r3, #0]
	flippingArm.secondArmID = ARM_UNDEFINED;
 8001d1e:	4b09      	ldr	r3, [pc, #36]	; (8001d44 <robotFree+0x40>)
 8001d20:	2204      	movs	r2, #4
 8001d22:	705a      	strb	r2, [r3, #1]
	flippingArm.thirdArmID = ARM_UNDEFINED;
 8001d24:	4b07      	ldr	r3, [pc, #28]	; (8001d44 <robotFree+0x40>)
 8001d26:	2204      	movs	r2, #4
 8001d28:	709a      	strb	r2, [r3, #2]
	flippingArm.fourthArmID = ARM_UNDEFINED;
 8001d2a:	4b06      	ldr	r3, [pc, #24]	; (8001d44 <robotFree+0x40>)
 8001d2c:	2204      	movs	r2, #4
 8001d2e:	70da      	strb	r2, [r3, #3]
}
 8001d30:	bf00      	nop
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bc80      	pop	{r7}
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	20000204 	.word	0x20000204
 8001d40:	20000208 	.word	0x20000208
 8001d44:	2000020c 	.word	0x2000020c

08001d48 <robotInit>:

void robotInit(void) {
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
	state = INIT;
 8001d4c:	4b60      	ldr	r3, [pc, #384]	; (8001ed0 <robotInit+0x188>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	701a      	strb	r2, [r3, #0]
	movingArm.armID = ARM_UNDEFINED;
 8001d52:	4b60      	ldr	r3, [pc, #384]	; (8001ed4 <robotInit+0x18c>)
 8001d54:	2204      	movs	r2, #4
 8001d56:	701a      	strb	r2, [r3, #0]
	flippingArm.firstArmID = ARM_UNDEFINED;
 8001d58:	4b5f      	ldr	r3, [pc, #380]	; (8001ed8 <robotInit+0x190>)
 8001d5a:	2204      	movs	r2, #4
 8001d5c:	701a      	strb	r2, [r3, #0]
	flippingArm.secondArmID = ARM_UNDEFINED;
 8001d5e:	4b5e      	ldr	r3, [pc, #376]	; (8001ed8 <robotInit+0x190>)
 8001d60:	2204      	movs	r2, #4
 8001d62:	705a      	strb	r2, [r3, #1]
	flippingArm.thirdArmID = ARM_UNDEFINED;
 8001d64:	4b5c      	ldr	r3, [pc, #368]	; (8001ed8 <robotInit+0x190>)
 8001d66:	2204      	movs	r2, #4
 8001d68:	709a      	strb	r2, [r3, #2]
	flippingArm.fourthArmID = ARM_UNDEFINED;
 8001d6a:	4b5b      	ldr	r3, [pc, #364]	; (8001ed8 <robotInit+0x190>)
 8001d6c:	2204      	movs	r2, #4
 8001d6e:	70da      	strb	r2, [r3, #3]

	servoInit();
 8001d70:	f000 fe48 	bl	8002a04 <servoInit>
	armInit();
 8001d74:	f7ff f9b2 	bl	80010dc <armInit>

	leftGripper = servoStart(&htim2, TIM_CHANNEL_1, 0);
 8001d78:	f04f 0200 	mov.w	r2, #0
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	4857      	ldr	r0, [pc, #348]	; (8001edc <robotInit+0x194>)
 8001d80:	f000 fe72 	bl	8002a68 <servoStart>
 8001d84:	4603      	mov	r3, r0
 8001d86:	461a      	mov	r2, r3
 8001d88:	4b55      	ldr	r3, [pc, #340]	; (8001ee0 <robotInit+0x198>)
 8001d8a:	701a      	strb	r2, [r3, #0]
	frontGripper = servoStart(&htim2, TIM_CHANNEL_2, 0);
 8001d8c:	f04f 0200 	mov.w	r2, #0
 8001d90:	2104      	movs	r1, #4
 8001d92:	4852      	ldr	r0, [pc, #328]	; (8001edc <robotInit+0x194>)
 8001d94:	f000 fe68 	bl	8002a68 <servoStart>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	4b51      	ldr	r3, [pc, #324]	; (8001ee4 <robotInit+0x19c>)
 8001d9e:	701a      	strb	r2, [r3, #0]
	rightGripper = servoStart(&htim2, TIM_CHANNEL_3, 0);
 8001da0:	f04f 0200 	mov.w	r2, #0
 8001da4:	2108      	movs	r1, #8
 8001da6:	484d      	ldr	r0, [pc, #308]	; (8001edc <robotInit+0x194>)
 8001da8:	f000 fe5e 	bl	8002a68 <servoStart>
 8001dac:	4603      	mov	r3, r0
 8001dae:	461a      	mov	r2, r3
 8001db0:	4b4d      	ldr	r3, [pc, #308]	; (8001ee8 <robotInit+0x1a0>)
 8001db2:	701a      	strb	r2, [r3, #0]
	backGripper = servoStart(&htim2, TIM_CHANNEL_4, -7);
 8001db4:	4a4d      	ldr	r2, [pc, #308]	; (8001eec <robotInit+0x1a4>)
 8001db6:	210c      	movs	r1, #12
 8001db8:	4848      	ldr	r0, [pc, #288]	; (8001edc <robotInit+0x194>)
 8001dba:	f000 fe55 	bl	8002a68 <servoStart>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	4b4b      	ldr	r3, [pc, #300]	; (8001ef0 <robotInit+0x1a8>)
 8001dc4:	701a      	strb	r2, [r3, #0]

	leftWrist = servoStart(&htim3, TIM_CHANNEL_1, -5);
 8001dc6:	4a4b      	ldr	r2, [pc, #300]	; (8001ef4 <robotInit+0x1ac>)
 8001dc8:	2100      	movs	r1, #0
 8001dca:	484b      	ldr	r0, [pc, #300]	; (8001ef8 <robotInit+0x1b0>)
 8001dcc:	f000 fe4c 	bl	8002a68 <servoStart>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	4b49      	ldr	r3, [pc, #292]	; (8001efc <robotInit+0x1b4>)
 8001dd6:	701a      	strb	r2, [r3, #0]
	frontWrist = servoStart(&htim3, TIM_CHANNEL_2, 0);
 8001dd8:	f04f 0200 	mov.w	r2, #0
 8001ddc:	2104      	movs	r1, #4
 8001dde:	4846      	ldr	r0, [pc, #280]	; (8001ef8 <robotInit+0x1b0>)
 8001de0:	f000 fe42 	bl	8002a68 <servoStart>
 8001de4:	4603      	mov	r3, r0
 8001de6:	461a      	mov	r2, r3
 8001de8:	4b45      	ldr	r3, [pc, #276]	; (8001f00 <robotInit+0x1b8>)
 8001dea:	701a      	strb	r2, [r3, #0]
	rightWrist = servoStart(&htim3, TIM_CHANNEL_3, 0);
 8001dec:	f04f 0200 	mov.w	r2, #0
 8001df0:	2108      	movs	r1, #8
 8001df2:	4841      	ldr	r0, [pc, #260]	; (8001ef8 <robotInit+0x1b0>)
 8001df4:	f000 fe38 	bl	8002a68 <servoStart>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	4b41      	ldr	r3, [pc, #260]	; (8001f04 <robotInit+0x1bc>)
 8001dfe:	701a      	strb	r2, [r3, #0]
	backWrist = servoStart(&htim3, TIM_CHANNEL_4, -5);
 8001e00:	4a3c      	ldr	r2, [pc, #240]	; (8001ef4 <robotInit+0x1ac>)
 8001e02:	210c      	movs	r1, #12
 8001e04:	483c      	ldr	r0, [pc, #240]	; (8001ef8 <robotInit+0x1b0>)
 8001e06:	f000 fe2f 	bl	8002a68 <servoStart>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	4b3e      	ldr	r3, [pc, #248]	; (8001f08 <robotInit+0x1c0>)
 8001e10:	701a      	strb	r2, [r3, #0]

	leftElbow = servoStart(&htim4, TIM_CHANNEL_1, 0);
 8001e12:	f04f 0200 	mov.w	r2, #0
 8001e16:	2100      	movs	r1, #0
 8001e18:	483c      	ldr	r0, [pc, #240]	; (8001f0c <robotInit+0x1c4>)
 8001e1a:	f000 fe25 	bl	8002a68 <servoStart>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	461a      	mov	r2, r3
 8001e22:	4b3b      	ldr	r3, [pc, #236]	; (8001f10 <robotInit+0x1c8>)
 8001e24:	701a      	strb	r2, [r3, #0]
	frontElbow = servoStart(&htim4, TIM_CHANNEL_2, 0);
 8001e26:	f04f 0200 	mov.w	r2, #0
 8001e2a:	2104      	movs	r1, #4
 8001e2c:	4837      	ldr	r0, [pc, #220]	; (8001f0c <robotInit+0x1c4>)
 8001e2e:	f000 fe1b 	bl	8002a68 <servoStart>
 8001e32:	4603      	mov	r3, r0
 8001e34:	461a      	mov	r2, r3
 8001e36:	4b37      	ldr	r3, [pc, #220]	; (8001f14 <robotInit+0x1cc>)
 8001e38:	701a      	strb	r2, [r3, #0]
	rightElbow = servoStart(&htim4, TIM_CHANNEL_3, 0);
 8001e3a:	f04f 0200 	mov.w	r2, #0
 8001e3e:	2108      	movs	r1, #8
 8001e40:	4832      	ldr	r0, [pc, #200]	; (8001f0c <robotInit+0x1c4>)
 8001e42:	f000 fe11 	bl	8002a68 <servoStart>
 8001e46:	4603      	mov	r3, r0
 8001e48:	461a      	mov	r2, r3
 8001e4a:	4b33      	ldr	r3, [pc, #204]	; (8001f18 <robotInit+0x1d0>)
 8001e4c:	701a      	strb	r2, [r3, #0]
	backElbow = servoStart(&htim4, TIM_CHANNEL_4, 0);
 8001e4e:	f04f 0200 	mov.w	r2, #0
 8001e52:	210c      	movs	r1, #12
 8001e54:	482d      	ldr	r0, [pc, #180]	; (8001f0c <robotInit+0x1c4>)
 8001e56:	f000 fe07 	bl	8002a68 <servoStart>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	4b2f      	ldr	r3, [pc, #188]	; (8001f1c <robotInit+0x1d4>)
 8001e60:	701a      	strb	r2, [r3, #0]

	leftArm = armStart(leftGripper, leftWrist, leftElbow);
 8001e62:	4b1f      	ldr	r3, [pc, #124]	; (8001ee0 <robotInit+0x198>)
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	4a25      	ldr	r2, [pc, #148]	; (8001efc <robotInit+0x1b4>)
 8001e68:	7811      	ldrb	r1, [r2, #0]
 8001e6a:	4a29      	ldr	r2, [pc, #164]	; (8001f10 <robotInit+0x1c8>)
 8001e6c:	7812      	ldrb	r2, [r2, #0]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7ff f974 	bl	800115c <armStart>
 8001e74:	4603      	mov	r3, r0
 8001e76:	461a      	mov	r2, r3
 8001e78:	4b29      	ldr	r3, [pc, #164]	; (8001f20 <robotInit+0x1d8>)
 8001e7a:	701a      	strb	r2, [r3, #0]
	frontArm = armStart(frontGripper, frontWrist, frontElbow);
 8001e7c:	4b19      	ldr	r3, [pc, #100]	; (8001ee4 <robotInit+0x19c>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	4a1f      	ldr	r2, [pc, #124]	; (8001f00 <robotInit+0x1b8>)
 8001e82:	7811      	ldrb	r1, [r2, #0]
 8001e84:	4a23      	ldr	r2, [pc, #140]	; (8001f14 <robotInit+0x1cc>)
 8001e86:	7812      	ldrb	r2, [r2, #0]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7ff f967 	bl	800115c <armStart>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	461a      	mov	r2, r3
 8001e92:	4b24      	ldr	r3, [pc, #144]	; (8001f24 <robotInit+0x1dc>)
 8001e94:	701a      	strb	r2, [r3, #0]
	rightArm = armStart(rightGripper, rightWrist, rightElbow);
 8001e96:	4b14      	ldr	r3, [pc, #80]	; (8001ee8 <robotInit+0x1a0>)
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	4a1a      	ldr	r2, [pc, #104]	; (8001f04 <robotInit+0x1bc>)
 8001e9c:	7811      	ldrb	r1, [r2, #0]
 8001e9e:	4a1e      	ldr	r2, [pc, #120]	; (8001f18 <robotInit+0x1d0>)
 8001ea0:	7812      	ldrb	r2, [r2, #0]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7ff f95a 	bl	800115c <armStart>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	461a      	mov	r2, r3
 8001eac:	4b1e      	ldr	r3, [pc, #120]	; (8001f28 <robotInit+0x1e0>)
 8001eae:	701a      	strb	r2, [r3, #0]
	backArm = armStart(backGripper, backWrist, backElbow);
 8001eb0:	4b0f      	ldr	r3, [pc, #60]	; (8001ef0 <robotInit+0x1a8>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	4a14      	ldr	r2, [pc, #80]	; (8001f08 <robotInit+0x1c0>)
 8001eb6:	7811      	ldrb	r1, [r2, #0]
 8001eb8:	4a18      	ldr	r2, [pc, #96]	; (8001f1c <robotInit+0x1d4>)
 8001eba:	7812      	ldrb	r2, [r2, #0]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7ff f94d 	bl	800115c <armStart>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	4b19      	ldr	r3, [pc, #100]	; (8001f2c <robotInit+0x1e4>)
 8001ec8:	701a      	strb	r2, [r3, #0]
}
 8001eca:	bf00      	nop
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	20000204 	.word	0x20000204
 8001ed4:	20000208 	.word	0x20000208
 8001ed8:	2000020c 	.word	0x2000020c
 8001edc:	2000012c 	.word	0x2000012c
 8001ee0:	20000000 	.word	0x20000000
 8001ee4:	20000001 	.word	0x20000001
 8001ee8:	20000002 	.word	0x20000002
 8001eec:	c0e00000 	.word	0xc0e00000
 8001ef0:	20000003 	.word	0x20000003
 8001ef4:	c0a00000 	.word	0xc0a00000
 8001ef8:	20000174 	.word	0x20000174
 8001efc:	20000004 	.word	0x20000004
 8001f00:	20000005 	.word	0x20000005
 8001f04:	20000006 	.word	0x20000006
 8001f08:	20000007 	.word	0x20000007
 8001f0c:	200001bc 	.word	0x200001bc
 8001f10:	20000008 	.word	0x20000008
 8001f14:	20000009 	.word	0x20000009
 8001f18:	2000000a 	.word	0x2000000a
 8001f1c:	2000000b 	.word	0x2000000b
 8001f20:	2000000c 	.word	0x2000000c
 8001f24:	2000000d 	.word	0x2000000d
 8001f28:	2000000e 	.word	0x2000000e
 8001f2c:	2000000f 	.word	0x2000000f

08001f30 <robotBoot>:

void robotBoot(void *) {
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
	schedulerAddTask(servoRun, NULL, 1000, 0);
 8001f38:	2300      	movs	r3, #0
 8001f3a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f3e:	2100      	movs	r1, #0
 8001f40:	483b      	ldr	r0, [pc, #236]	; (8002030 <robotBoot+0x100>)
 8001f42:	f000 fa47 	bl	80023d4 <schedulerAddTask>
	schedulerAddTask(armRun, NULL, 2000, 0);
 8001f46:	2300      	movs	r3, #0
 8001f48:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	4839      	ldr	r0, [pc, #228]	; (8002034 <robotBoot+0x104>)
 8001f50:	f000 fa40 	bl	80023d4 <schedulerAddTask>
	schedulerAddTask(armRelease, &arms[rightArm], 5000, 0);
 8001f54:	4b38      	ldr	r3, [pc, #224]	; (8002038 <robotBoot+0x108>)
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	011b      	lsls	r3, r3, #4
 8001f5a:	4a38      	ldr	r2, [pc, #224]	; (800203c <robotBoot+0x10c>)
 8001f5c:	1899      	adds	r1, r3, r2
 8001f5e:	2300      	movs	r3, #0
 8001f60:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f64:	4836      	ldr	r0, [pc, #216]	; (8002040 <robotBoot+0x110>)
 8001f66:	f000 fa35 	bl	80023d4 <schedulerAddTask>
	schedulerAddTask(armHold, &arms[rightArm], 7000, 0);
 8001f6a:	4b33      	ldr	r3, [pc, #204]	; (8002038 <robotBoot+0x108>)
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	011b      	lsls	r3, r3, #4
 8001f70:	4a32      	ldr	r2, [pc, #200]	; (800203c <robotBoot+0x10c>)
 8001f72:	1899      	adds	r1, r3, r2
 8001f74:	2300      	movs	r3, #0
 8001f76:	f641 3258 	movw	r2, #7000	; 0x1b58
 8001f7a:	4832      	ldr	r0, [pc, #200]	; (8002044 <robotBoot+0x114>)
 8001f7c:	f000 fa2a 	bl	80023d4 <schedulerAddTask>
	schedulerAddTask(armForward, &arms[rightArm], 9000, 0);
 8001f80:	4b2d      	ldr	r3, [pc, #180]	; (8002038 <robotBoot+0x108>)
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	011b      	lsls	r3, r3, #4
 8001f86:	4a2d      	ldr	r2, [pc, #180]	; (800203c <robotBoot+0x10c>)
 8001f88:	1899      	adds	r1, r3, r2
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	f242 3228 	movw	r2, #9000	; 0x2328
 8001f90:	482d      	ldr	r0, [pc, #180]	; (8002048 <robotBoot+0x118>)
 8001f92:	f000 fa1f 	bl	80023d4 <schedulerAddTask>
	schedulerAddTask(armForward, &arms[leftArm], 11000, 0);
 8001f96:	4b2d      	ldr	r3, [pc, #180]	; (800204c <robotBoot+0x11c>)
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	011b      	lsls	r3, r3, #4
 8001f9c:	4a27      	ldr	r2, [pc, #156]	; (800203c <robotBoot+0x10c>)
 8001f9e:	1899      	adds	r1, r3, r2
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8001fa6:	4828      	ldr	r0, [pc, #160]	; (8002048 <robotBoot+0x118>)
 8001fa8:	f000 fa14 	bl	80023d4 <schedulerAddTask>
	schedulerAddTask(armForward, &arms[frontArm], 13000, 0);
 8001fac:	4b28      	ldr	r3, [pc, #160]	; (8002050 <robotBoot+0x120>)
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	011b      	lsls	r3, r3, #4
 8001fb2:	4a22      	ldr	r2, [pc, #136]	; (800203c <robotBoot+0x10c>)
 8001fb4:	1899      	adds	r1, r3, r2
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8001fbc:	4822      	ldr	r0, [pc, #136]	; (8002048 <robotBoot+0x118>)
 8001fbe:	f000 fa09 	bl	80023d4 <schedulerAddTask>
	schedulerAddTask(armForward, &arms[backArm], 13000, 0);
 8001fc2:	4b24      	ldr	r3, [pc, #144]	; (8002054 <robotBoot+0x124>)
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	011b      	lsls	r3, r3, #4
 8001fc8:	4a1c      	ldr	r2, [pc, #112]	; (800203c <robotBoot+0x10c>)
 8001fca:	1899      	adds	r1, r3, r2
 8001fcc:	2300      	movs	r3, #0
 8001fce:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8001fd2:	481d      	ldr	r0, [pc, #116]	; (8002048 <robotBoot+0x118>)
 8001fd4:	f000 f9fe 	bl	80023d4 <schedulerAddTask>
	schedulerAddTask(armHold, &arms[leftArm], 15000, 0);
 8001fd8:	4b1c      	ldr	r3, [pc, #112]	; (800204c <robotBoot+0x11c>)
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	011b      	lsls	r3, r3, #4
 8001fde:	4a17      	ldr	r2, [pc, #92]	; (800203c <robotBoot+0x10c>)
 8001fe0:	1899      	adds	r1, r3, r2
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	f643 2298 	movw	r2, #15000	; 0x3a98
 8001fe8:	4816      	ldr	r0, [pc, #88]	; (8002044 <robotBoot+0x114>)
 8001fea:	f000 f9f3 	bl	80023d4 <schedulerAddTask>
	schedulerAddTask(armHold, &arms[frontArm], 15000, 0);
 8001fee:	4b18      	ldr	r3, [pc, #96]	; (8002050 <robotBoot+0x120>)
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	011b      	lsls	r3, r3, #4
 8001ff4:	4a11      	ldr	r2, [pc, #68]	; (800203c <robotBoot+0x10c>)
 8001ff6:	1899      	adds	r1, r3, r2
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	f643 2298 	movw	r2, #15000	; 0x3a98
 8001ffe:	4811      	ldr	r0, [pc, #68]	; (8002044 <robotBoot+0x114>)
 8002000:	f000 f9e8 	bl	80023d4 <schedulerAddTask>
	schedulerAddTask(armHold, &arms[backArm], 15000, 0);
 8002004:	4b13      	ldr	r3, [pc, #76]	; (8002054 <robotBoot+0x124>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	011b      	lsls	r3, r3, #4
 800200a:	4a0c      	ldr	r2, [pc, #48]	; (800203c <robotBoot+0x10c>)
 800200c:	1899      	adds	r1, r3, r2
 800200e:	2300      	movs	r3, #0
 8002010:	f643 2298 	movw	r2, #15000	; 0x3a98
 8002014:	480b      	ldr	r0, [pc, #44]	; (8002044 <robotBoot+0x114>)
 8002016:	f000 f9dd 	bl	80023d4 <schedulerAddTask>
	schedulerAddTask(robotFree, NULL, 16000, 0);
 800201a:	2300      	movs	r3, #0
 800201c:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8002020:	2100      	movs	r1, #0
 8002022:	480d      	ldr	r0, [pc, #52]	; (8002058 <robotBoot+0x128>)
 8002024:	f000 f9d6 	bl	80023d4 <schedulerAddTask>
}
 8002028:	bf00      	nop
 800202a:	3708      	adds	r7, #8
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	08002b29 	.word	0x08002b29
 8002034:	08001221 	.word	0x08001221
 8002038:	2000000e 	.word	0x2000000e
 800203c:	200000a4 	.word	0x200000a4
 8002040:	08001609 	.word	0x08001609
 8002044:	080015e5 	.word	0x080015e5
 8002048:	08001699 	.word	0x08001699
 800204c:	2000000c 	.word	0x2000000c
 8002050:	2000000d 	.word	0x2000000d
 8002054:	2000000f 	.word	0x2000000f
 8002058:	08001d05 	.word	0x08001d05

0800205c <robotFlipXNormal>:
void robotMoveBackDouble(void *) {
	movingArm.armID = backArm;
	schedulerAddTask(robotMoveDouble, NULL, 1000, 0);
}

void robotFlipXNormal(void *) {
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
	if (state != FREE) return;
 8002064:	4b77      	ldr	r3, [pc, #476]	; (8002244 <robotFlipXNormal+0x1e8>)
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	2b01      	cmp	r3, #1
 800206a:	f040 80e7 	bne.w	800223c <robotFlipXNormal+0x1e0>
	state = BUSY;
 800206e:	4b75      	ldr	r3, [pc, #468]	; (8002244 <robotFlipXNormal+0x1e8>)
 8002070:	2202      	movs	r2, #2
 8002072:	701a      	strb	r2, [r3, #0]

	schedulerAddTask(armRelease, &arms[frontArm], 1000, 0);
 8002074:	4b74      	ldr	r3, [pc, #464]	; (8002248 <robotFlipXNormal+0x1ec>)
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	011b      	lsls	r3, r3, #4
 800207a:	4a74      	ldr	r2, [pc, #464]	; (800224c <robotFlipXNormal+0x1f0>)
 800207c:	1899      	adds	r1, r3, r2
 800207e:	2300      	movs	r3, #0
 8002080:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002084:	4872      	ldr	r0, [pc, #456]	; (8002250 <robotFlipXNormal+0x1f4>)
 8002086:	f000 f9a5 	bl	80023d4 <schedulerAddTask>
	schedulerAddTask(armRelease, &arms[backArm], 1010, 0);
 800208a:	4b72      	ldr	r3, [pc, #456]	; (8002254 <robotFlipXNormal+0x1f8>)
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	011b      	lsls	r3, r3, #4
 8002090:	4a6e      	ldr	r2, [pc, #440]	; (800224c <robotFlipXNormal+0x1f0>)
 8002092:	1899      	adds	r1, r3, r2
 8002094:	2300      	movs	r3, #0
 8002096:	f240 32f2 	movw	r2, #1010	; 0x3f2
 800209a:	486d      	ldr	r0, [pc, #436]	; (8002250 <robotFlipXNormal+0x1f4>)
 800209c:	f000 f99a 	bl	80023d4 <schedulerAddTask>
	schedulerAddTask(armBackward, &arms[frontArm], 2000, 0);
 80020a0:	4b69      	ldr	r3, [pc, #420]	; (8002248 <robotFlipXNormal+0x1ec>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	011b      	lsls	r3, r3, #4
 80020a6:	4a69      	ldr	r2, [pc, #420]	; (800224c <robotFlipXNormal+0x1f0>)
 80020a8:	1899      	adds	r1, r3, r2
 80020aa:	2300      	movs	r3, #0
 80020ac:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80020b0:	4869      	ldr	r0, [pc, #420]	; (8002258 <robotFlipXNormal+0x1fc>)
 80020b2:	f000 f98f 	bl	80023d4 <schedulerAddTask>
	schedulerAddTask(armBackward, &arms[backArm], 2010, 0);
 80020b6:	4b67      	ldr	r3, [pc, #412]	; (8002254 <robotFlipXNormal+0x1f8>)
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	011b      	lsls	r3, r3, #4
 80020bc:	4a63      	ldr	r2, [pc, #396]	; (800224c <robotFlipXNormal+0x1f0>)
 80020be:	1899      	adds	r1, r3, r2
 80020c0:	2300      	movs	r3, #0
 80020c2:	f240 72da 	movw	r2, #2010	; 0x7da
 80020c6:	4864      	ldr	r0, [pc, #400]	; (8002258 <robotFlipXNormal+0x1fc>)
 80020c8:	f000 f984 	bl	80023d4 <schedulerAddTask>

	schedulerAddTask(armEastward, &arms[leftArm], 3000, 0);
 80020cc:	4b63      	ldr	r3, [pc, #396]	; (800225c <robotFlipXNormal+0x200>)
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	011b      	lsls	r3, r3, #4
 80020d2:	4a5e      	ldr	r2, [pc, #376]	; (800224c <robotFlipXNormal+0x1f0>)
 80020d4:	1899      	adds	r1, r3, r2
 80020d6:	2300      	movs	r3, #0
 80020d8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80020dc:	4860      	ldr	r0, [pc, #384]	; (8002260 <robotFlipXNormal+0x204>)
 80020de:	f000 f979 	bl	80023d4 <schedulerAddTask>
	schedulerAddTask(armWestward, &arms[rightArm], 3010, 0);
 80020e2:	4b60      	ldr	r3, [pc, #384]	; (8002264 <robotFlipXNormal+0x208>)
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	011b      	lsls	r3, r3, #4
 80020e8:	4a58      	ldr	r2, [pc, #352]	; (800224c <robotFlipXNormal+0x1f0>)
 80020ea:	1899      	adds	r1, r3, r2
 80020ec:	2300      	movs	r3, #0
 80020ee:	f640 32c2 	movw	r2, #3010	; 0xbc2
 80020f2:	485d      	ldr	r0, [pc, #372]	; (8002268 <robotFlipXNormal+0x20c>)
 80020f4:	f000 f96e 	bl	80023d4 <schedulerAddTask>

	schedulerAddTask(armForward, &arms[frontArm], 4000, 0);
 80020f8:	4b53      	ldr	r3, [pc, #332]	; (8002248 <robotFlipXNormal+0x1ec>)
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	011b      	lsls	r3, r3, #4
 80020fe:	4a53      	ldr	r2, [pc, #332]	; (800224c <robotFlipXNormal+0x1f0>)
 8002100:	1899      	adds	r1, r3, r2
 8002102:	2300      	movs	r3, #0
 8002104:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8002108:	4858      	ldr	r0, [pc, #352]	; (800226c <robotFlipXNormal+0x210>)
 800210a:	f000 f963 	bl	80023d4 <schedulerAddTask>
	schedulerAddTask(armForward, &arms[backArm], 4010, 0);
 800210e:	4b51      	ldr	r3, [pc, #324]	; (8002254 <robotFlipXNormal+0x1f8>)
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	011b      	lsls	r3, r3, #4
 8002114:	4a4d      	ldr	r2, [pc, #308]	; (800224c <robotFlipXNormal+0x1f0>)
 8002116:	1899      	adds	r1, r3, r2
 8002118:	2300      	movs	r3, #0
 800211a:	f640 72aa 	movw	r2, #4010	; 0xfaa
 800211e:	4853      	ldr	r0, [pc, #332]	; (800226c <robotFlipXNormal+0x210>)
 8002120:	f000 f958 	bl	80023d4 <schedulerAddTask>
	schedulerAddTask(armHold, &arms[frontArm], 5000, 0);
 8002124:	4b48      	ldr	r3, [pc, #288]	; (8002248 <robotFlipXNormal+0x1ec>)
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	011b      	lsls	r3, r3, #4
 800212a:	4a48      	ldr	r2, [pc, #288]	; (800224c <robotFlipXNormal+0x1f0>)
 800212c:	1899      	adds	r1, r3, r2
 800212e:	2300      	movs	r3, #0
 8002130:	f241 3288 	movw	r2, #5000	; 0x1388
 8002134:	484e      	ldr	r0, [pc, #312]	; (8002270 <robotFlipXNormal+0x214>)
 8002136:	f000 f94d 	bl	80023d4 <schedulerAddTask>
	schedulerAddTask(armHold, &arms[backArm], 5010, 0);
 800213a:	4b46      	ldr	r3, [pc, #280]	; (8002254 <robotFlipXNormal+0x1f8>)
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	011b      	lsls	r3, r3, #4
 8002140:	4a42      	ldr	r2, [pc, #264]	; (800224c <robotFlipXNormal+0x1f0>)
 8002142:	1899      	adds	r1, r3, r2
 8002144:	2300      	movs	r3, #0
 8002146:	f241 3292 	movw	r2, #5010	; 0x1392
 800214a:	4849      	ldr	r0, [pc, #292]	; (8002270 <robotFlipXNormal+0x214>)
 800214c:	f000 f942 	bl	80023d4 <schedulerAddTask>

	schedulerAddTask(armRelease, &arms[leftArm], 6000, 0);
 8002150:	4b42      	ldr	r3, [pc, #264]	; (800225c <robotFlipXNormal+0x200>)
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	011b      	lsls	r3, r3, #4
 8002156:	4a3d      	ldr	r2, [pc, #244]	; (800224c <robotFlipXNormal+0x1f0>)
 8002158:	1899      	adds	r1, r3, r2
 800215a:	2300      	movs	r3, #0
 800215c:	f241 7270 	movw	r2, #6000	; 0x1770
 8002160:	483b      	ldr	r0, [pc, #236]	; (8002250 <robotFlipXNormal+0x1f4>)
 8002162:	f000 f937 	bl	80023d4 <schedulerAddTask>
	schedulerAddTask(armRelease, &arms[rightArm], 6010, 0);
 8002166:	4b3f      	ldr	r3, [pc, #252]	; (8002264 <robotFlipXNormal+0x208>)
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	011b      	lsls	r3, r3, #4
 800216c:	4a37      	ldr	r2, [pc, #220]	; (800224c <robotFlipXNormal+0x1f0>)
 800216e:	1899      	adds	r1, r3, r2
 8002170:	2300      	movs	r3, #0
 8002172:	f241 727a 	movw	r2, #6010	; 0x177a
 8002176:	4836      	ldr	r0, [pc, #216]	; (8002250 <robotFlipXNormal+0x1f4>)
 8002178:	f000 f92c 	bl	80023d4 <schedulerAddTask>
	schedulerAddTask(armBackward, &arms[leftArm], 7000, 0);
 800217c:	4b37      	ldr	r3, [pc, #220]	; (800225c <robotFlipXNormal+0x200>)
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	011b      	lsls	r3, r3, #4
 8002182:	4a32      	ldr	r2, [pc, #200]	; (800224c <robotFlipXNormal+0x1f0>)
 8002184:	1899      	adds	r1, r3, r2
 8002186:	2300      	movs	r3, #0
 8002188:	f641 3258 	movw	r2, #7000	; 0x1b58
 800218c:	4832      	ldr	r0, [pc, #200]	; (8002258 <robotFlipXNormal+0x1fc>)
 800218e:	f000 f921 	bl	80023d4 <schedulerAddTask>
	schedulerAddTask(armBackward, &arms[rightArm], 7010, 0);
 8002192:	4b34      	ldr	r3, [pc, #208]	; (8002264 <robotFlipXNormal+0x208>)
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	011b      	lsls	r3, r3, #4
 8002198:	4a2c      	ldr	r2, [pc, #176]	; (800224c <robotFlipXNormal+0x1f0>)
 800219a:	1899      	adds	r1, r3, r2
 800219c:	2300      	movs	r3, #0
 800219e:	f641 3262 	movw	r2, #7010	; 0x1b62
 80021a2:	482d      	ldr	r0, [pc, #180]	; (8002258 <robotFlipXNormal+0x1fc>)
 80021a4:	f000 f916 	bl	80023d4 <schedulerAddTask>

	schedulerAddTask(armNorthward, &arms[leftArm], 8000, 0);
 80021a8:	4b2c      	ldr	r3, [pc, #176]	; (800225c <robotFlipXNormal+0x200>)
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	011b      	lsls	r3, r3, #4
 80021ae:	4a27      	ldr	r2, [pc, #156]	; (800224c <robotFlipXNormal+0x1f0>)
 80021b0:	1899      	adds	r1, r3, r2
 80021b2:	2300      	movs	r3, #0
 80021b4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80021b8:	482e      	ldr	r0, [pc, #184]	; (8002274 <robotFlipXNormal+0x218>)
 80021ba:	f000 f90b 	bl	80023d4 <schedulerAddTask>
	schedulerAddTask(armNorthward, &arms[rightArm], 8010, 0);
 80021be:	4b29      	ldr	r3, [pc, #164]	; (8002264 <robotFlipXNormal+0x208>)
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	011b      	lsls	r3, r3, #4
 80021c4:	4a21      	ldr	r2, [pc, #132]	; (800224c <robotFlipXNormal+0x1f0>)
 80021c6:	1899      	adds	r1, r3, r2
 80021c8:	2300      	movs	r3, #0
 80021ca:	f641 724a 	movw	r2, #8010	; 0x1f4a
 80021ce:	4829      	ldr	r0, [pc, #164]	; (8002274 <robotFlipXNormal+0x218>)
 80021d0:	f000 f900 	bl	80023d4 <schedulerAddTask>

	schedulerAddTask(armForward, &arms[leftArm], 9000, 0);
 80021d4:	4b21      	ldr	r3, [pc, #132]	; (800225c <robotFlipXNormal+0x200>)
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	011b      	lsls	r3, r3, #4
 80021da:	4a1c      	ldr	r2, [pc, #112]	; (800224c <robotFlipXNormal+0x1f0>)
 80021dc:	1899      	adds	r1, r3, r2
 80021de:	2300      	movs	r3, #0
 80021e0:	f242 3228 	movw	r2, #9000	; 0x2328
 80021e4:	4821      	ldr	r0, [pc, #132]	; (800226c <robotFlipXNormal+0x210>)
 80021e6:	f000 f8f5 	bl	80023d4 <schedulerAddTask>
	schedulerAddTask(armForward, &arms[rightArm], 9010, 0);
 80021ea:	4b1e      	ldr	r3, [pc, #120]	; (8002264 <robotFlipXNormal+0x208>)
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	011b      	lsls	r3, r3, #4
 80021f0:	4a16      	ldr	r2, [pc, #88]	; (800224c <robotFlipXNormal+0x1f0>)
 80021f2:	1899      	adds	r1, r3, r2
 80021f4:	2300      	movs	r3, #0
 80021f6:	f242 3232 	movw	r2, #9010	; 0x2332
 80021fa:	481c      	ldr	r0, [pc, #112]	; (800226c <robotFlipXNormal+0x210>)
 80021fc:	f000 f8ea 	bl	80023d4 <schedulerAddTask>
	schedulerAddTask(armHold, &arms[leftArm], 10000, 0);
 8002200:	4b16      	ldr	r3, [pc, #88]	; (800225c <robotFlipXNormal+0x200>)
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	011b      	lsls	r3, r3, #4
 8002206:	4a11      	ldr	r2, [pc, #68]	; (800224c <robotFlipXNormal+0x1f0>)
 8002208:	1899      	adds	r1, r3, r2
 800220a:	2300      	movs	r3, #0
 800220c:	f242 7210 	movw	r2, #10000	; 0x2710
 8002210:	4817      	ldr	r0, [pc, #92]	; (8002270 <robotFlipXNormal+0x214>)
 8002212:	f000 f8df 	bl	80023d4 <schedulerAddTask>
	schedulerAddTask(armHold, &arms[rightArm], 10010, 0);
 8002216:	4b13      	ldr	r3, [pc, #76]	; (8002264 <robotFlipXNormal+0x208>)
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	011b      	lsls	r3, r3, #4
 800221c:	4a0b      	ldr	r2, [pc, #44]	; (800224c <robotFlipXNormal+0x1f0>)
 800221e:	1899      	adds	r1, r3, r2
 8002220:	2300      	movs	r3, #0
 8002222:	f242 721a 	movw	r2, #10010	; 0x271a
 8002226:	4812      	ldr	r0, [pc, #72]	; (8002270 <robotFlipXNormal+0x214>)
 8002228:	f000 f8d4 	bl	80023d4 <schedulerAddTask>

	schedulerAddTask(robotFree, NULL, 11000, 0);
 800222c:	2300      	movs	r3, #0
 800222e:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8002232:	2100      	movs	r1, #0
 8002234:	4810      	ldr	r0, [pc, #64]	; (8002278 <robotFlipXNormal+0x21c>)
 8002236:	f000 f8cd 	bl	80023d4 <schedulerAddTask>
 800223a:	e000      	b.n	800223e <robotFlipXNormal+0x1e2>
	if (state != FREE) return;
 800223c:	bf00      	nop
}
 800223e:	3708      	adds	r7, #8
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	20000204 	.word	0x20000204
 8002248:	2000000d 	.word	0x2000000d
 800224c:	200000a4 	.word	0x200000a4
 8002250:	08001609 	.word	0x08001609
 8002254:	2000000f 	.word	0x2000000f
 8002258:	080016bd 	.word	0x080016bd
 800225c:	2000000c 	.word	0x2000000c
 8002260:	08001675 	.word	0x08001675
 8002264:	2000000e 	.word	0x2000000e
 8002268:	0800162d 	.word	0x0800162d
 800226c:	08001699 	.word	0x08001699
 8002270:	080015e5 	.word	0x080015e5
 8002274:	08001651 	.word	0x08001651
 8002278:	08001d05 	.word	0x08001d05

0800227c <schedulerCheck>:

#include "scheduler.h"

static schedulerTask tasks[SCHEDULER_NUMBER];

void schedulerCheck(void *arguments) {
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(SCHEDULER_LED_GPIO_Port, SCHEDULER_LED_Pin);
 8002284:	2120      	movs	r1, #32
 8002286:	4803      	ldr	r0, [pc, #12]	; (8002294 <schedulerCheck+0x18>)
 8002288:	f001 f9ea 	bl	8003660 <HAL_GPIO_TogglePin>
}
 800228c:	bf00      	nop
 800228e:	3708      	adds	r7, #8
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	40010800 	.word	0x40010800

08002298 <schedulerInit>:

void schedulerInit(void) {
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < SCHEDULER_NUMBER; i ++) {
 800229e:	2300      	movs	r3, #0
 80022a0:	71fb      	strb	r3, [r7, #7]
 80022a2:	e041      	b.n	8002328 <schedulerInit+0x90>
        tasks[i].function = 0;
 80022a4:	79fa      	ldrb	r2, [r7, #7]
 80022a6:	4927      	ldr	r1, [pc, #156]	; (8002344 <schedulerInit+0xac>)
 80022a8:	4613      	mov	r3, r2
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	4413      	add	r3, r2
 80022ae:	00db      	lsls	r3, r3, #3
 80022b0:	440b      	add	r3, r1
 80022b2:	2200      	movs	r2, #0
 80022b4:	601a      	str	r2, [r3, #0]
        tasks[i].arguments = 0;
 80022b6:	79fa      	ldrb	r2, [r7, #7]
 80022b8:	4922      	ldr	r1, [pc, #136]	; (8002344 <schedulerInit+0xac>)
 80022ba:	4613      	mov	r3, r2
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	4413      	add	r3, r2
 80022c0:	00db      	lsls	r3, r3, #3
 80022c2:	440b      	add	r3, r1
 80022c4:	3304      	adds	r3, #4
 80022c6:	2200      	movs	r2, #0
 80022c8:	601a      	str	r2, [r3, #0]
        tasks[i].id = SCHEDULER_NUMBER - i;
 80022ca:	79fa      	ldrb	r2, [r7, #7]
 80022cc:	79fb      	ldrb	r3, [r7, #7]
 80022ce:	f1c3 0320 	rsb	r3, r3, #32
 80022d2:	b2d8      	uxtb	r0, r3
 80022d4:	491b      	ldr	r1, [pc, #108]	; (8002344 <schedulerInit+0xac>)
 80022d6:	4613      	mov	r3, r2
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	4413      	add	r3, r2
 80022dc:	00db      	lsls	r3, r3, #3
 80022de:	440b      	add	r3, r1
 80022e0:	3308      	adds	r3, #8
 80022e2:	4602      	mov	r2, r0
 80022e4:	701a      	strb	r2, [r3, #0]
        tasks[i].delay = 0;
 80022e6:	79fa      	ldrb	r2, [r7, #7]
 80022e8:	4916      	ldr	r1, [pc, #88]	; (8002344 <schedulerInit+0xac>)
 80022ea:	4613      	mov	r3, r2
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	4413      	add	r3, r2
 80022f0:	00db      	lsls	r3, r3, #3
 80022f2:	440b      	add	r3, r1
 80022f4:	330c      	adds	r3, #12
 80022f6:	2200      	movs	r2, #0
 80022f8:	601a      	str	r2, [r3, #0]
        tasks[i].period = 0;
 80022fa:	79fa      	ldrb	r2, [r7, #7]
 80022fc:	4911      	ldr	r1, [pc, #68]	; (8002344 <schedulerInit+0xac>)
 80022fe:	4613      	mov	r3, r2
 8002300:	005b      	lsls	r3, r3, #1
 8002302:	4413      	add	r3, r2
 8002304:	00db      	lsls	r3, r3, #3
 8002306:	440b      	add	r3, r1
 8002308:	3310      	adds	r3, #16
 800230a:	2200      	movs	r2, #0
 800230c:	601a      	str	r2, [r3, #0]
        tasks[i].flag = 0;
 800230e:	79fa      	ldrb	r2, [r7, #7]
 8002310:	490c      	ldr	r1, [pc, #48]	; (8002344 <schedulerInit+0xac>)
 8002312:	4613      	mov	r3, r2
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	4413      	add	r3, r2
 8002318:	00db      	lsls	r3, r3, #3
 800231a:	440b      	add	r3, r1
 800231c:	3314      	adds	r3, #20
 800231e:	2200      	movs	r2, #0
 8002320:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < SCHEDULER_NUMBER; i ++) {
 8002322:	79fb      	ldrb	r3, [r7, #7]
 8002324:	3301      	adds	r3, #1
 8002326:	71fb      	strb	r3, [r7, #7]
 8002328:	79fb      	ldrb	r3, [r7, #7]
 800232a:	2b1f      	cmp	r3, #31
 800232c:	d9ba      	bls.n	80022a4 <schedulerInit+0xc>
    }
    schedulerAddTask(schedulerCheck, NULL, 0, 1000);
 800232e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002332:	2200      	movs	r2, #0
 8002334:	2100      	movs	r1, #0
 8002336:	4804      	ldr	r0, [pc, #16]	; (8002348 <schedulerInit+0xb0>)
 8002338:	f000 f84c 	bl	80023d4 <schedulerAddTask>
}
 800233c:	bf00      	nop
 800233e:	3708      	adds	r7, #8
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	20000210 	.word	0x20000210
 8002348:	0800227d 	.word	0x0800227d

0800234c <schedulerUpdate>:

void schedulerUpdate(void) {
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
    if (tasks[0].function == 0) return;
 8002350:	4b10      	ldr	r3, [pc, #64]	; (8002394 <schedulerUpdate+0x48>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d018      	beq.n	800238a <schedulerUpdate+0x3e>
	if (tasks[0].delay > 0) {
 8002358:	4b0e      	ldr	r3, [pc, #56]	; (8002394 <schedulerUpdate+0x48>)
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d00c      	beq.n	800237a <schedulerUpdate+0x2e>
		if (tasks[0].delay > SCHEDULER_TICK) {
 8002360:	4b0c      	ldr	r3, [pc, #48]	; (8002394 <schedulerUpdate+0x48>)
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	2b01      	cmp	r3, #1
 8002366:	d905      	bls.n	8002374 <schedulerUpdate+0x28>
			tasks[0].delay -= SCHEDULER_TICK;
 8002368:	4b0a      	ldr	r3, [pc, #40]	; (8002394 <schedulerUpdate+0x48>)
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	3b01      	subs	r3, #1
 800236e:	4a09      	ldr	r2, [pc, #36]	; (8002394 <schedulerUpdate+0x48>)
 8002370:	60d3      	str	r3, [r2, #12]
 8002372:	e002      	b.n	800237a <schedulerUpdate+0x2e>
		}
		else {
			tasks[0].delay = 0;
 8002374:	4b07      	ldr	r3, [pc, #28]	; (8002394 <schedulerUpdate+0x48>)
 8002376:	2200      	movs	r2, #0
 8002378:	60da      	str	r2, [r3, #12]
		}
	}
	if (tasks[0].delay == 0) {
 800237a:	4b06      	ldr	r3, [pc, #24]	; (8002394 <schedulerUpdate+0x48>)
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d104      	bne.n	800238c <schedulerUpdate+0x40>
		tasks[0].flag = 1;
 8002382:	4b04      	ldr	r3, [pc, #16]	; (8002394 <schedulerUpdate+0x48>)
 8002384:	2201      	movs	r2, #1
 8002386:	751a      	strb	r2, [r3, #20]
 8002388:	e000      	b.n	800238c <schedulerUpdate+0x40>
    if (tasks[0].function == 0) return;
 800238a:	bf00      	nop
	}
}
 800238c:	46bd      	mov	sp, r7
 800238e:	bc80      	pop	{r7}
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	20000210 	.word	0x20000210

08002398 <schedulerDispatch>:

void schedulerDispatch(void) {
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
    if (tasks[0].flag == 0) return;
 800239c:	4b0c      	ldr	r3, [pc, #48]	; (80023d0 <schedulerDispatch+0x38>)
 800239e:	7d1b      	ldrb	r3, [r3, #20]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d012      	beq.n	80023ca <schedulerDispatch+0x32>
    (*tasks[0].function)(tasks[0].arguments);
 80023a4:	4b0a      	ldr	r3, [pc, #40]	; (80023d0 <schedulerDispatch+0x38>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a09      	ldr	r2, [pc, #36]	; (80023d0 <schedulerDispatch+0x38>)
 80023aa:	6852      	ldr	r2, [r2, #4]
 80023ac:	4610      	mov	r0, r2
 80023ae:	4798      	blx	r3
    if (tasks[0].period > 0) {
 80023b0:	4b07      	ldr	r3, [pc, #28]	; (80023d0 <schedulerDispatch+0x38>)
 80023b2:	691b      	ldr	r3, [r3, #16]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d002      	beq.n	80023be <schedulerDispatch+0x26>
    	schedulerRefreshTask();
 80023b8:	f000 f9bc 	bl	8002734 <schedulerRefreshTask>
 80023bc:	e006      	b.n	80023cc <schedulerDispatch+0x34>
    }
    else {
    	schedulerDeleteTask(tasks[0].id);
 80023be:	4b04      	ldr	r3, [pc, #16]	; (80023d0 <schedulerDispatch+0x38>)
 80023c0:	7a1b      	ldrb	r3, [r3, #8]
 80023c2:	4618      	mov	r0, r3
 80023c4:	f000 f91a 	bl	80025fc <schedulerDeleteTask>
 80023c8:	e000      	b.n	80023cc <schedulerDispatch+0x34>
    if (tasks[0].flag == 0) return;
 80023ca:	bf00      	nop
    }
}
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	20000210 	.word	0x20000210

080023d4 <schedulerAddTask>:

uint8_t schedulerAddTask(void (*function)(void*), void *arguments, uint32_t delay, uint32_t period) {
 80023d4:	b4b0      	push	{r4, r5, r7}
 80023d6:	b089      	sub	sp, #36	; 0x24
 80023d8:	af00      	add	r7, sp, #0
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	60b9      	str	r1, [r7, #8]
 80023de:	607a      	str	r2, [r7, #4]
 80023e0:	603b      	str	r3, [r7, #0]
    if (tasks[SCHEDULER_NUMBER - 1].function != 0) return 0;
 80023e2:	4b85      	ldr	r3, [pc, #532]	; (80025f8 <schedulerAddTask+0x224>)
 80023e4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d001      	beq.n	80023f0 <schedulerAddTask+0x1c>
 80023ec:	2300      	movs	r3, #0
 80023ee:	e0fd      	b.n	80025ec <schedulerAddTask+0x218>
    uint8_t currentID = tasks[SCHEDULER_NUMBER - 1].id;
 80023f0:	4b81      	ldr	r3, [pc, #516]	; (80025f8 <schedulerAddTask+0x224>)
 80023f2:	f893 32f0 	ldrb.w	r3, [r3, #752]	; 0x2f0
 80023f6:	767b      	strb	r3, [r7, #25]
    uint32_t currentDelay = 0;
 80023f8:	2300      	movs	r3, #0
 80023fa:	61fb      	str	r3, [r7, #28]
    for (uint8_t i = 0; i < SCHEDULER_NUMBER; i ++) {
 80023fc:	2300      	movs	r3, #0
 80023fe:	76fb      	strb	r3, [r7, #27]
 8002400:	e0ef      	b.n	80025e2 <schedulerAddTask+0x20e>
        currentDelay += tasks[i].delay;
 8002402:	7efa      	ldrb	r2, [r7, #27]
 8002404:	497c      	ldr	r1, [pc, #496]	; (80025f8 <schedulerAddTask+0x224>)
 8002406:	4613      	mov	r3, r2
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	4413      	add	r3, r2
 800240c:	00db      	lsls	r3, r3, #3
 800240e:	440b      	add	r3, r1
 8002410:	330c      	adds	r3, #12
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	69fa      	ldr	r2, [r7, #28]
 8002416:	4413      	add	r3, r2
 8002418:	61fb      	str	r3, [r7, #28]
        if (currentDelay > delay || tasks[i].function == 0) {
 800241a:	69fa      	ldr	r2, [r7, #28]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	429a      	cmp	r2, r3
 8002420:	d80a      	bhi.n	8002438 <schedulerAddTask+0x64>
 8002422:	7efa      	ldrb	r2, [r7, #27]
 8002424:	4974      	ldr	r1, [pc, #464]	; (80025f8 <schedulerAddTask+0x224>)
 8002426:	4613      	mov	r3, r2
 8002428:	005b      	lsls	r3, r3, #1
 800242a:	4413      	add	r3, r2
 800242c:	00db      	lsls	r3, r3, #3
 800242e:	440b      	add	r3, r1
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2b00      	cmp	r3, #0
 8002434:	f040 80d2 	bne.w	80025dc <schedulerAddTask+0x208>
            for (uint8_t j = SCHEDULER_NUMBER - 1; j > i; j --) {
 8002438:	231f      	movs	r3, #31
 800243a:	76bb      	strb	r3, [r7, #26]
 800243c:	e019      	b.n	8002472 <schedulerAddTask+0x9e>
                tasks[j] = tasks[j - 1];
 800243e:	7ebb      	ldrb	r3, [r7, #26]
 8002440:	1e5a      	subs	r2, r3, #1
 8002442:	7eb9      	ldrb	r1, [r7, #26]
 8002444:	486c      	ldr	r0, [pc, #432]	; (80025f8 <schedulerAddTask+0x224>)
 8002446:	460b      	mov	r3, r1
 8002448:	005b      	lsls	r3, r3, #1
 800244a:	440b      	add	r3, r1
 800244c:	00db      	lsls	r3, r3, #3
 800244e:	4418      	add	r0, r3
 8002450:	4969      	ldr	r1, [pc, #420]	; (80025f8 <schedulerAddTask+0x224>)
 8002452:	4613      	mov	r3, r2
 8002454:	005b      	lsls	r3, r3, #1
 8002456:	4413      	add	r3, r2
 8002458:	00db      	lsls	r3, r3, #3
 800245a:	440b      	add	r3, r1
 800245c:	4604      	mov	r4, r0
 800245e:	461d      	mov	r5, r3
 8002460:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002462:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002464:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002468:	e884 0003 	stmia.w	r4, {r0, r1}
            for (uint8_t j = SCHEDULER_NUMBER - 1; j > i; j --) {
 800246c:	7ebb      	ldrb	r3, [r7, #26]
 800246e:	3b01      	subs	r3, #1
 8002470:	76bb      	strb	r3, [r7, #26]
 8002472:	7eba      	ldrb	r2, [r7, #26]
 8002474:	7efb      	ldrb	r3, [r7, #27]
 8002476:	429a      	cmp	r2, r3
 8002478:	d8e1      	bhi.n	800243e <schedulerAddTask+0x6a>
            }
            tasks[i].function = function;
 800247a:	7efa      	ldrb	r2, [r7, #27]
 800247c:	495e      	ldr	r1, [pc, #376]	; (80025f8 <schedulerAddTask+0x224>)
 800247e:	4613      	mov	r3, r2
 8002480:	005b      	lsls	r3, r3, #1
 8002482:	4413      	add	r3, r2
 8002484:	00db      	lsls	r3, r3, #3
 8002486:	440b      	add	r3, r1
 8002488:	68fa      	ldr	r2, [r7, #12]
 800248a:	601a      	str	r2, [r3, #0]
            tasks[i].arguments = arguments;
 800248c:	7efa      	ldrb	r2, [r7, #27]
 800248e:	495a      	ldr	r1, [pc, #360]	; (80025f8 <schedulerAddTask+0x224>)
 8002490:	4613      	mov	r3, r2
 8002492:	005b      	lsls	r3, r3, #1
 8002494:	4413      	add	r3, r2
 8002496:	00db      	lsls	r3, r3, #3
 8002498:	440b      	add	r3, r1
 800249a:	3304      	adds	r3, #4
 800249c:	68ba      	ldr	r2, [r7, #8]
 800249e:	601a      	str	r2, [r3, #0]
            tasks[i].id = currentID;
 80024a0:	7efa      	ldrb	r2, [r7, #27]
 80024a2:	4955      	ldr	r1, [pc, #340]	; (80025f8 <schedulerAddTask+0x224>)
 80024a4:	4613      	mov	r3, r2
 80024a6:	005b      	lsls	r3, r3, #1
 80024a8:	4413      	add	r3, r2
 80024aa:	00db      	lsls	r3, r3, #3
 80024ac:	440b      	add	r3, r1
 80024ae:	3308      	adds	r3, #8
 80024b0:	7e7a      	ldrb	r2, [r7, #25]
 80024b2:	701a      	strb	r2, [r3, #0]
            tasks[i].period = period;
 80024b4:	7efa      	ldrb	r2, [r7, #27]
 80024b6:	4950      	ldr	r1, [pc, #320]	; (80025f8 <schedulerAddTask+0x224>)
 80024b8:	4613      	mov	r3, r2
 80024ba:	005b      	lsls	r3, r3, #1
 80024bc:	4413      	add	r3, r2
 80024be:	00db      	lsls	r3, r3, #3
 80024c0:	440b      	add	r3, r1
 80024c2:	3310      	adds	r3, #16
 80024c4:	683a      	ldr	r2, [r7, #0]
 80024c6:	601a      	str	r2, [r3, #0]
            tasks[i].flag = 0;
 80024c8:	7efa      	ldrb	r2, [r7, #27]
 80024ca:	494b      	ldr	r1, [pc, #300]	; (80025f8 <schedulerAddTask+0x224>)
 80024cc:	4613      	mov	r3, r2
 80024ce:	005b      	lsls	r3, r3, #1
 80024d0:	4413      	add	r3, r2
 80024d2:	00db      	lsls	r3, r3, #3
 80024d4:	440b      	add	r3, r1
 80024d6:	3314      	adds	r3, #20
 80024d8:	2200      	movs	r2, #0
 80024da:	701a      	strb	r2, [r3, #0]
            if (currentDelay > delay) {
 80024dc:	69fa      	ldr	r2, [r7, #28]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d950      	bls.n	8002586 <schedulerAddTask+0x1b2>
                int newDelay = currentDelay - delay;
 80024e4:	69fa      	ldr	r2, [r7, #28]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	617b      	str	r3, [r7, #20]
                tasks[i].delay = tasks[i + 1].delay - newDelay;
 80024ec:	7efb      	ldrb	r3, [r7, #27]
 80024ee:	1c5a      	adds	r2, r3, #1
 80024f0:	4941      	ldr	r1, [pc, #260]	; (80025f8 <schedulerAddTask+0x224>)
 80024f2:	4613      	mov	r3, r2
 80024f4:	005b      	lsls	r3, r3, #1
 80024f6:	4413      	add	r3, r2
 80024f8:	00db      	lsls	r3, r3, #3
 80024fa:	440b      	add	r3, r1
 80024fc:	330c      	adds	r3, #12
 80024fe:	6819      	ldr	r1, [r3, #0]
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	7efa      	ldrb	r2, [r7, #27]
 8002504:	1ac9      	subs	r1, r1, r3
 8002506:	483c      	ldr	r0, [pc, #240]	; (80025f8 <schedulerAddTask+0x224>)
 8002508:	4613      	mov	r3, r2
 800250a:	005b      	lsls	r3, r3, #1
 800250c:	4413      	add	r3, r2
 800250e:	00db      	lsls	r3, r3, #3
 8002510:	4403      	add	r3, r0
 8002512:	330c      	adds	r3, #12
 8002514:	6019      	str	r1, [r3, #0]
                if (tasks[i].delay == 0) {
 8002516:	7efa      	ldrb	r2, [r7, #27]
 8002518:	4937      	ldr	r1, [pc, #220]	; (80025f8 <schedulerAddTask+0x224>)
 800251a:	4613      	mov	r3, r2
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	4413      	add	r3, r2
 8002520:	00db      	lsls	r3, r3, #3
 8002522:	440b      	add	r3, r1
 8002524:	330c      	adds	r3, #12
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d109      	bne.n	8002540 <schedulerAddTask+0x16c>
                    tasks[i].flag = 1;
 800252c:	7efa      	ldrb	r2, [r7, #27]
 800252e:	4932      	ldr	r1, [pc, #200]	; (80025f8 <schedulerAddTask+0x224>)
 8002530:	4613      	mov	r3, r2
 8002532:	005b      	lsls	r3, r3, #1
 8002534:	4413      	add	r3, r2
 8002536:	00db      	lsls	r3, r3, #3
 8002538:	440b      	add	r3, r1
 800253a:	3314      	adds	r3, #20
 800253c:	2201      	movs	r2, #1
 800253e:	701a      	strb	r2, [r3, #0]
                }
                tasks[i + 1].delay = newDelay;
 8002540:	7efb      	ldrb	r3, [r7, #27]
 8002542:	1c5a      	adds	r2, r3, #1
 8002544:	6979      	ldr	r1, [r7, #20]
 8002546:	482c      	ldr	r0, [pc, #176]	; (80025f8 <schedulerAddTask+0x224>)
 8002548:	4613      	mov	r3, r2
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	4413      	add	r3, r2
 800254e:	00db      	lsls	r3, r3, #3
 8002550:	4403      	add	r3, r0
 8002552:	330c      	adds	r3, #12
 8002554:	6019      	str	r1, [r3, #0]
                if (tasks[i + 1].delay == 0) {
 8002556:	7efb      	ldrb	r3, [r7, #27]
 8002558:	1c5a      	adds	r2, r3, #1
 800255a:	4927      	ldr	r1, [pc, #156]	; (80025f8 <schedulerAddTask+0x224>)
 800255c:	4613      	mov	r3, r2
 800255e:	005b      	lsls	r3, r3, #1
 8002560:	4413      	add	r3, r2
 8002562:	00db      	lsls	r3, r3, #3
 8002564:	440b      	add	r3, r1
 8002566:	330c      	adds	r3, #12
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d12c      	bne.n	80025c8 <schedulerAddTask+0x1f4>
                    tasks[i + 1].flag = 1;
 800256e:	7efb      	ldrb	r3, [r7, #27]
 8002570:	1c5a      	adds	r2, r3, #1
 8002572:	4921      	ldr	r1, [pc, #132]	; (80025f8 <schedulerAddTask+0x224>)
 8002574:	4613      	mov	r3, r2
 8002576:	005b      	lsls	r3, r3, #1
 8002578:	4413      	add	r3, r2
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	440b      	add	r3, r1
 800257e:	3314      	adds	r3, #20
 8002580:	2201      	movs	r2, #1
 8002582:	701a      	strb	r2, [r3, #0]
 8002584:	e020      	b.n	80025c8 <schedulerAddTask+0x1f4>
                }
            }
            else {
                tasks[i].delay = delay - currentDelay;
 8002586:	7efa      	ldrb	r2, [r7, #27]
 8002588:	6879      	ldr	r1, [r7, #4]
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	1ac9      	subs	r1, r1, r3
 800258e:	481a      	ldr	r0, [pc, #104]	; (80025f8 <schedulerAddTask+0x224>)
 8002590:	4613      	mov	r3, r2
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	4413      	add	r3, r2
 8002596:	00db      	lsls	r3, r3, #3
 8002598:	4403      	add	r3, r0
 800259a:	330c      	adds	r3, #12
 800259c:	6019      	str	r1, [r3, #0]
                if (tasks[i].delay == 0) {
 800259e:	7efa      	ldrb	r2, [r7, #27]
 80025a0:	4915      	ldr	r1, [pc, #84]	; (80025f8 <schedulerAddTask+0x224>)
 80025a2:	4613      	mov	r3, r2
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	4413      	add	r3, r2
 80025a8:	00db      	lsls	r3, r3, #3
 80025aa:	440b      	add	r3, r1
 80025ac:	330c      	adds	r3, #12
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d109      	bne.n	80025c8 <schedulerAddTask+0x1f4>
                    tasks[i].flag = 1;
 80025b4:	7efa      	ldrb	r2, [r7, #27]
 80025b6:	4910      	ldr	r1, [pc, #64]	; (80025f8 <schedulerAddTask+0x224>)
 80025b8:	4613      	mov	r3, r2
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	4413      	add	r3, r2
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	440b      	add	r3, r1
 80025c2:	3314      	adds	r3, #20
 80025c4:	2201      	movs	r2, #1
 80025c6:	701a      	strb	r2, [r3, #0]
                }
            }
            return tasks[i].id;
 80025c8:	7efa      	ldrb	r2, [r7, #27]
 80025ca:	490b      	ldr	r1, [pc, #44]	; (80025f8 <schedulerAddTask+0x224>)
 80025cc:	4613      	mov	r3, r2
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	4413      	add	r3, r2
 80025d2:	00db      	lsls	r3, r3, #3
 80025d4:	440b      	add	r3, r1
 80025d6:	3308      	adds	r3, #8
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	e007      	b.n	80025ec <schedulerAddTask+0x218>
    for (uint8_t i = 0; i < SCHEDULER_NUMBER; i ++) {
 80025dc:	7efb      	ldrb	r3, [r7, #27]
 80025de:	3301      	adds	r3, #1
 80025e0:	76fb      	strb	r3, [r7, #27]
 80025e2:	7efb      	ldrb	r3, [r7, #27]
 80025e4:	2b1f      	cmp	r3, #31
 80025e6:	f67f af0c 	bls.w	8002402 <schedulerAddTask+0x2e>
        }
    }
    return 0;
 80025ea:	2300      	movs	r3, #0
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3724      	adds	r7, #36	; 0x24
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bcb0      	pop	{r4, r5, r7}
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	20000210 	.word	0x20000210

080025fc <schedulerDeleteTask>:

unsigned char schedulerDeleteTask(uint8_t id) {
 80025fc:	b4b0      	push	{r4, r5, r7}
 80025fe:	b085      	sub	sp, #20
 8002600:	af00      	add	r7, sp, #0
 8002602:	4603      	mov	r3, r0
 8002604:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < SCHEDULER_NUMBER; i ++) {
 8002606:	2300      	movs	r3, #0
 8002608:	73fb      	strb	r3, [r7, #15]
 800260a:	e087      	b.n	800271c <schedulerDeleteTask+0x120>
    	if (tasks[i].function == 0) return 0;
 800260c:	7bfa      	ldrb	r2, [r7, #15]
 800260e:	4948      	ldr	r1, [pc, #288]	; (8002730 <schedulerDeleteTask+0x134>)
 8002610:	4613      	mov	r3, r2
 8002612:	005b      	lsls	r3, r3, #1
 8002614:	4413      	add	r3, r2
 8002616:	00db      	lsls	r3, r3, #3
 8002618:	440b      	add	r3, r1
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d101      	bne.n	8002624 <schedulerDeleteTask+0x28>
 8002620:	2300      	movs	r3, #0
 8002622:	e080      	b.n	8002726 <schedulerDeleteTask+0x12a>
        if (tasks[i].id == id) {
 8002624:	7bfa      	ldrb	r2, [r7, #15]
 8002626:	4942      	ldr	r1, [pc, #264]	; (8002730 <schedulerDeleteTask+0x134>)
 8002628:	4613      	mov	r3, r2
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	4413      	add	r3, r2
 800262e:	00db      	lsls	r3, r3, #3
 8002630:	440b      	add	r3, r1
 8002632:	3308      	adds	r3, #8
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	79fa      	ldrb	r2, [r7, #7]
 8002638:	429a      	cmp	r2, r3
 800263a:	d16c      	bne.n	8002716 <schedulerDeleteTask+0x11a>
            uint8_t currentID = tasks[i].id;
 800263c:	7bfa      	ldrb	r2, [r7, #15]
 800263e:	493c      	ldr	r1, [pc, #240]	; (8002730 <schedulerDeleteTask+0x134>)
 8002640:	4613      	mov	r3, r2
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	4413      	add	r3, r2
 8002646:	00db      	lsls	r3, r3, #3
 8002648:	440b      	add	r3, r1
 800264a:	3308      	adds	r3, #8
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	737b      	strb	r3, [r7, #13]
            if (tasks[i + 1].function != 0) {
 8002650:	7bfb      	ldrb	r3, [r7, #15]
 8002652:	1c5a      	adds	r2, r3, #1
 8002654:	4936      	ldr	r1, [pc, #216]	; (8002730 <schedulerDeleteTask+0x134>)
 8002656:	4613      	mov	r3, r2
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	4413      	add	r3, r2
 800265c:	00db      	lsls	r3, r3, #3
 800265e:	440b      	add	r3, r1
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d01d      	beq.n	80026a2 <schedulerDeleteTask+0xa6>
                tasks[i + 1].delay += tasks[i].delay;
 8002666:	7bfb      	ldrb	r3, [r7, #15]
 8002668:	1c5a      	adds	r2, r3, #1
 800266a:	4931      	ldr	r1, [pc, #196]	; (8002730 <schedulerDeleteTask+0x134>)
 800266c:	4613      	mov	r3, r2
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	4413      	add	r3, r2
 8002672:	00db      	lsls	r3, r3, #3
 8002674:	440b      	add	r3, r1
 8002676:	330c      	adds	r3, #12
 8002678:	6819      	ldr	r1, [r3, #0]
 800267a:	7bfa      	ldrb	r2, [r7, #15]
 800267c:	482c      	ldr	r0, [pc, #176]	; (8002730 <schedulerDeleteTask+0x134>)
 800267e:	4613      	mov	r3, r2
 8002680:	005b      	lsls	r3, r3, #1
 8002682:	4413      	add	r3, r2
 8002684:	00db      	lsls	r3, r3, #3
 8002686:	4403      	add	r3, r0
 8002688:	330c      	adds	r3, #12
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	7bfa      	ldrb	r2, [r7, #15]
 800268e:	3201      	adds	r2, #1
 8002690:	4419      	add	r1, r3
 8002692:	4827      	ldr	r0, [pc, #156]	; (8002730 <schedulerDeleteTask+0x134>)
 8002694:	4613      	mov	r3, r2
 8002696:	005b      	lsls	r3, r3, #1
 8002698:	4413      	add	r3, r2
 800269a:	00db      	lsls	r3, r3, #3
 800269c:	4403      	add	r3, r0
 800269e:	330c      	adds	r3, #12
 80026a0:	6019      	str	r1, [r3, #0]
            }
            for (uint8_t j = i; j < SCHEDULER_NUMBER - 1; j ++) {
 80026a2:	7bfb      	ldrb	r3, [r7, #15]
 80026a4:	73bb      	strb	r3, [r7, #14]
 80026a6:	e019      	b.n	80026dc <schedulerDeleteTask+0xe0>
                tasks[j] = tasks[j + 1];
 80026a8:	7bbb      	ldrb	r3, [r7, #14]
 80026aa:	1c5a      	adds	r2, r3, #1
 80026ac:	7bb9      	ldrb	r1, [r7, #14]
 80026ae:	4820      	ldr	r0, [pc, #128]	; (8002730 <schedulerDeleteTask+0x134>)
 80026b0:	460b      	mov	r3, r1
 80026b2:	005b      	lsls	r3, r3, #1
 80026b4:	440b      	add	r3, r1
 80026b6:	00db      	lsls	r3, r3, #3
 80026b8:	4418      	add	r0, r3
 80026ba:	491d      	ldr	r1, [pc, #116]	; (8002730 <schedulerDeleteTask+0x134>)
 80026bc:	4613      	mov	r3, r2
 80026be:	005b      	lsls	r3, r3, #1
 80026c0:	4413      	add	r3, r2
 80026c2:	00db      	lsls	r3, r3, #3
 80026c4:	440b      	add	r3, r1
 80026c6:	4604      	mov	r4, r0
 80026c8:	461d      	mov	r5, r3
 80026ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026ce:	e895 0003 	ldmia.w	r5, {r0, r1}
 80026d2:	e884 0003 	stmia.w	r4, {r0, r1}
            for (uint8_t j = i; j < SCHEDULER_NUMBER - 1; j ++) {
 80026d6:	7bbb      	ldrb	r3, [r7, #14]
 80026d8:	3301      	adds	r3, #1
 80026da:	73bb      	strb	r3, [r7, #14]
 80026dc:	7bbb      	ldrb	r3, [r7, #14]
 80026de:	2b1e      	cmp	r3, #30
 80026e0:	d9e2      	bls.n	80026a8 <schedulerDeleteTask+0xac>
            }
            tasks[SCHEDULER_NUMBER - 1].function = 0;
 80026e2:	4b13      	ldr	r3, [pc, #76]	; (8002730 <schedulerDeleteTask+0x134>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
            tasks[SCHEDULER_NUMBER - 1].arguments = 0;
 80026ea:	4b11      	ldr	r3, [pc, #68]	; (8002730 <schedulerDeleteTask+0x134>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
            tasks[SCHEDULER_NUMBER - 1].id = currentID;
 80026f2:	4a0f      	ldr	r2, [pc, #60]	; (8002730 <schedulerDeleteTask+0x134>)
 80026f4:	7b7b      	ldrb	r3, [r7, #13]
 80026f6:	f882 32f0 	strb.w	r3, [r2, #752]	; 0x2f0
            tasks[SCHEDULER_NUMBER - 1].delay = 0;
 80026fa:	4b0d      	ldr	r3, [pc, #52]	; (8002730 <schedulerDeleteTask+0x134>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
            tasks[SCHEDULER_NUMBER - 1].period = 0;
 8002702:	4b0b      	ldr	r3, [pc, #44]	; (8002730 <schedulerDeleteTask+0x134>)
 8002704:	2200      	movs	r2, #0
 8002706:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
            tasks[SCHEDULER_NUMBER - 1].flag = 0;
 800270a:	4b09      	ldr	r3, [pc, #36]	; (8002730 <schedulerDeleteTask+0x134>)
 800270c:	2200      	movs	r2, #0
 800270e:	f883 22fc 	strb.w	r2, [r3, #764]	; 0x2fc
            return 1;
 8002712:	2301      	movs	r3, #1
 8002714:	e007      	b.n	8002726 <schedulerDeleteTask+0x12a>
    for (uint8_t i = 0; i < SCHEDULER_NUMBER; i ++) {
 8002716:	7bfb      	ldrb	r3, [r7, #15]
 8002718:	3301      	adds	r3, #1
 800271a:	73fb      	strb	r3, [r7, #15]
 800271c:	7bfb      	ldrb	r3, [r7, #15]
 800271e:	2b1f      	cmp	r3, #31
 8002720:	f67f af74 	bls.w	800260c <schedulerDeleteTask+0x10>
        }
    }
    return 0;
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	3714      	adds	r7, #20
 800272a:	46bd      	mov	sp, r7
 800272c:	bcb0      	pop	{r4, r5, r7}
 800272e:	4770      	bx	lr
 8002730:	20000210 	.word	0x20000210

08002734 <schedulerRefreshTask>:

unsigned char schedulerRefreshTask(void) {
 8002734:	b4b0      	push	{r4, r5, r7}
 8002736:	b08b      	sub	sp, #44	; 0x2c
 8002738:	af00      	add	r7, sp, #0
    if (tasks[0].function == 0) return 0;
 800273a:	4bb1      	ldr	r3, [pc, #708]	; (8002a00 <schedulerRefreshTask+0x2cc>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <schedulerRefreshTask+0x12>
 8002742:	2300      	movs	r3, #0
 8002744:	e157      	b.n	80029f6 <schedulerRefreshTask+0x2c2>
    schedulerTask currentTask = tasks[0];
 8002746:	4bae      	ldr	r3, [pc, #696]	; (8002a00 <schedulerRefreshTask+0x2cc>)
 8002748:	1d3c      	adds	r4, r7, #4
 800274a:	461d      	mov	r5, r3
 800274c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800274e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002750:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002754:	e884 0003 	stmia.w	r4, {r0, r1}
    uint32_t currentDelay = 0;
 8002758:	2300      	movs	r3, #0
 800275a:	627b      	str	r3, [r7, #36]	; 0x24
    for (uint8_t i = 0; i < SCHEDULER_NUMBER; i ++) {
 800275c:	2300      	movs	r3, #0
 800275e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002762:	e142      	b.n	80029ea <schedulerRefreshTask+0x2b6>
        if (i + 1 == SCHEDULER_NUMBER || tasks[i + 1].function == NULL) {
 8002764:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002768:	2b1f      	cmp	r3, #31
 800276a:	d00b      	beq.n	8002784 <schedulerRefreshTask+0x50>
 800276c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002770:	1c5a      	adds	r2, r3, #1
 8002772:	49a3      	ldr	r1, [pc, #652]	; (8002a00 <schedulerRefreshTask+0x2cc>)
 8002774:	4613      	mov	r3, r2
 8002776:	005b      	lsls	r3, r3, #1
 8002778:	4413      	add	r3, r2
 800277a:	00db      	lsls	r3, r3, #3
 800277c:	440b      	add	r3, r1
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d15c      	bne.n	800283e <schedulerRefreshTask+0x10a>
            tasks[i].function = currentTask.function;
 8002784:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002788:	6879      	ldr	r1, [r7, #4]
 800278a:	489d      	ldr	r0, [pc, #628]	; (8002a00 <schedulerRefreshTask+0x2cc>)
 800278c:	4613      	mov	r3, r2
 800278e:	005b      	lsls	r3, r3, #1
 8002790:	4413      	add	r3, r2
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	4403      	add	r3, r0
 8002796:	6019      	str	r1, [r3, #0]
            tasks[i].arguments = currentTask.arguments;
 8002798:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800279c:	68b9      	ldr	r1, [r7, #8]
 800279e:	4898      	ldr	r0, [pc, #608]	; (8002a00 <schedulerRefreshTask+0x2cc>)
 80027a0:	4613      	mov	r3, r2
 80027a2:	005b      	lsls	r3, r3, #1
 80027a4:	4413      	add	r3, r2
 80027a6:	00db      	lsls	r3, r3, #3
 80027a8:	4403      	add	r3, r0
 80027aa:	3304      	adds	r3, #4
 80027ac:	6019      	str	r1, [r3, #0]
            tasks[i].id = currentTask.id;
 80027ae:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80027b2:	7b38      	ldrb	r0, [r7, #12]
 80027b4:	4992      	ldr	r1, [pc, #584]	; (8002a00 <schedulerRefreshTask+0x2cc>)
 80027b6:	4613      	mov	r3, r2
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	4413      	add	r3, r2
 80027bc:	00db      	lsls	r3, r3, #3
 80027be:	440b      	add	r3, r1
 80027c0:	3308      	adds	r3, #8
 80027c2:	4602      	mov	r2, r0
 80027c4:	701a      	strb	r2, [r3, #0]
            tasks[i].period = currentTask.period;
 80027c6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80027ca:	6979      	ldr	r1, [r7, #20]
 80027cc:	488c      	ldr	r0, [pc, #560]	; (8002a00 <schedulerRefreshTask+0x2cc>)
 80027ce:	4613      	mov	r3, r2
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	4413      	add	r3, r2
 80027d4:	00db      	lsls	r3, r3, #3
 80027d6:	4403      	add	r3, r0
 80027d8:	3310      	adds	r3, #16
 80027da:	6019      	str	r1, [r3, #0]
            tasks[i].flag = 0;
 80027dc:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80027e0:	4987      	ldr	r1, [pc, #540]	; (8002a00 <schedulerRefreshTask+0x2cc>)
 80027e2:	4613      	mov	r3, r2
 80027e4:	005b      	lsls	r3, r3, #1
 80027e6:	4413      	add	r3, r2
 80027e8:	00db      	lsls	r3, r3, #3
 80027ea:	440b      	add	r3, r1
 80027ec:	3314      	adds	r3, #20
 80027ee:	2200      	movs	r2, #0
 80027f0:	701a      	strb	r2, [r3, #0]
            tasks[i].delay = currentTask.period - currentDelay;
 80027f2:	6979      	ldr	r1, [r7, #20]
 80027f4:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80027f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fa:	1ac9      	subs	r1, r1, r3
 80027fc:	4880      	ldr	r0, [pc, #512]	; (8002a00 <schedulerRefreshTask+0x2cc>)
 80027fe:	4613      	mov	r3, r2
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	4413      	add	r3, r2
 8002804:	00db      	lsls	r3, r3, #3
 8002806:	4403      	add	r3, r0
 8002808:	330c      	adds	r3, #12
 800280a:	6019      	str	r1, [r3, #0]
            if (tasks[i].delay == 0) {
 800280c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002810:	497b      	ldr	r1, [pc, #492]	; (8002a00 <schedulerRefreshTask+0x2cc>)
 8002812:	4613      	mov	r3, r2
 8002814:	005b      	lsls	r3, r3, #1
 8002816:	4413      	add	r3, r2
 8002818:	00db      	lsls	r3, r3, #3
 800281a:	440b      	add	r3, r1
 800281c:	330c      	adds	r3, #12
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d10a      	bne.n	800283a <schedulerRefreshTask+0x106>
                tasks[i].flag = 1;
 8002824:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002828:	4975      	ldr	r1, [pc, #468]	; (8002a00 <schedulerRefreshTask+0x2cc>)
 800282a:	4613      	mov	r3, r2
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	4413      	add	r3, r2
 8002830:	00db      	lsls	r3, r3, #3
 8002832:	440b      	add	r3, r1
 8002834:	3314      	adds	r3, #20
 8002836:	2201      	movs	r2, #1
 8002838:	701a      	strb	r2, [r3, #0]
            }
            return 1;
 800283a:	2301      	movs	r3, #1
 800283c:	e0db      	b.n	80029f6 <schedulerRefreshTask+0x2c2>
        }
        currentDelay += tasks[i + 1].delay;
 800283e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002842:	1c5a      	adds	r2, r3, #1
 8002844:	496e      	ldr	r1, [pc, #440]	; (8002a00 <schedulerRefreshTask+0x2cc>)
 8002846:	4613      	mov	r3, r2
 8002848:	005b      	lsls	r3, r3, #1
 800284a:	4413      	add	r3, r2
 800284c:	00db      	lsls	r3, r3, #3
 800284e:	440b      	add	r3, r1
 8002850:	330c      	adds	r3, #12
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002856:	4413      	add	r3, r2
 8002858:	627b      	str	r3, [r7, #36]	; 0x24
        if (currentDelay > currentTask.period) {
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800285e:	429a      	cmp	r2, r3
 8002860:	f240 80a5 	bls.w	80029ae <schedulerRefreshTask+0x27a>
            tasks[i].function = currentTask.function;
 8002864:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002868:	6879      	ldr	r1, [r7, #4]
 800286a:	4865      	ldr	r0, [pc, #404]	; (8002a00 <schedulerRefreshTask+0x2cc>)
 800286c:	4613      	mov	r3, r2
 800286e:	005b      	lsls	r3, r3, #1
 8002870:	4413      	add	r3, r2
 8002872:	00db      	lsls	r3, r3, #3
 8002874:	4403      	add	r3, r0
 8002876:	6019      	str	r1, [r3, #0]
            tasks[i].arguments = currentTask.arguments;
 8002878:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800287c:	68b9      	ldr	r1, [r7, #8]
 800287e:	4860      	ldr	r0, [pc, #384]	; (8002a00 <schedulerRefreshTask+0x2cc>)
 8002880:	4613      	mov	r3, r2
 8002882:	005b      	lsls	r3, r3, #1
 8002884:	4413      	add	r3, r2
 8002886:	00db      	lsls	r3, r3, #3
 8002888:	4403      	add	r3, r0
 800288a:	3304      	adds	r3, #4
 800288c:	6019      	str	r1, [r3, #0]
            tasks[i].id = currentTask.id;
 800288e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002892:	7b38      	ldrb	r0, [r7, #12]
 8002894:	495a      	ldr	r1, [pc, #360]	; (8002a00 <schedulerRefreshTask+0x2cc>)
 8002896:	4613      	mov	r3, r2
 8002898:	005b      	lsls	r3, r3, #1
 800289a:	4413      	add	r3, r2
 800289c:	00db      	lsls	r3, r3, #3
 800289e:	440b      	add	r3, r1
 80028a0:	3308      	adds	r3, #8
 80028a2:	4602      	mov	r2, r0
 80028a4:	701a      	strb	r2, [r3, #0]
            tasks[i].period = currentTask.period;
 80028a6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80028aa:	6979      	ldr	r1, [r7, #20]
 80028ac:	4854      	ldr	r0, [pc, #336]	; (8002a00 <schedulerRefreshTask+0x2cc>)
 80028ae:	4613      	mov	r3, r2
 80028b0:	005b      	lsls	r3, r3, #1
 80028b2:	4413      	add	r3, r2
 80028b4:	00db      	lsls	r3, r3, #3
 80028b6:	4403      	add	r3, r0
 80028b8:	3310      	adds	r3, #16
 80028ba:	6019      	str	r1, [r3, #0]
            tasks[i].flag = 0;
 80028bc:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80028c0:	494f      	ldr	r1, [pc, #316]	; (8002a00 <schedulerRefreshTask+0x2cc>)
 80028c2:	4613      	mov	r3, r2
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	4413      	add	r3, r2
 80028c8:	00db      	lsls	r3, r3, #3
 80028ca:	440b      	add	r3, r1
 80028cc:	3314      	adds	r3, #20
 80028ce:	2200      	movs	r2, #0
 80028d0:	701a      	strb	r2, [r3, #0]
            int newDelay = currentDelay - currentTask.period;
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	61fb      	str	r3, [r7, #28]
            tasks[i].delay = tasks[i + 1].delay - newDelay;
 80028da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80028de:	1c5a      	adds	r2, r3, #1
 80028e0:	4947      	ldr	r1, [pc, #284]	; (8002a00 <schedulerRefreshTask+0x2cc>)
 80028e2:	4613      	mov	r3, r2
 80028e4:	005b      	lsls	r3, r3, #1
 80028e6:	4413      	add	r3, r2
 80028e8:	00db      	lsls	r3, r3, #3
 80028ea:	440b      	add	r3, r1
 80028ec:	330c      	adds	r3, #12
 80028ee:	6819      	ldr	r1, [r3, #0]
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80028f6:	1ac9      	subs	r1, r1, r3
 80028f8:	4841      	ldr	r0, [pc, #260]	; (8002a00 <schedulerRefreshTask+0x2cc>)
 80028fa:	4613      	mov	r3, r2
 80028fc:	005b      	lsls	r3, r3, #1
 80028fe:	4413      	add	r3, r2
 8002900:	00db      	lsls	r3, r3, #3
 8002902:	4403      	add	r3, r0
 8002904:	330c      	adds	r3, #12
 8002906:	6019      	str	r1, [r3, #0]
            if (tasks[i].delay == 0) {
 8002908:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800290c:	493c      	ldr	r1, [pc, #240]	; (8002a00 <schedulerRefreshTask+0x2cc>)
 800290e:	4613      	mov	r3, r2
 8002910:	005b      	lsls	r3, r3, #1
 8002912:	4413      	add	r3, r2
 8002914:	00db      	lsls	r3, r3, #3
 8002916:	440b      	add	r3, r1
 8002918:	330c      	adds	r3, #12
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d10a      	bne.n	8002936 <schedulerRefreshTask+0x202>
                tasks[i].flag = 1;
 8002920:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002924:	4936      	ldr	r1, [pc, #216]	; (8002a00 <schedulerRefreshTask+0x2cc>)
 8002926:	4613      	mov	r3, r2
 8002928:	005b      	lsls	r3, r3, #1
 800292a:	4413      	add	r3, r2
 800292c:	00db      	lsls	r3, r3, #3
 800292e:	440b      	add	r3, r1
 8002930:	3314      	adds	r3, #20
 8002932:	2201      	movs	r2, #1
 8002934:	701a      	strb	r2, [r3, #0]
            }
            tasks[i + 1].delay -= tasks[i].delay;
 8002936:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800293a:	1c5a      	adds	r2, r3, #1
 800293c:	4930      	ldr	r1, [pc, #192]	; (8002a00 <schedulerRefreshTask+0x2cc>)
 800293e:	4613      	mov	r3, r2
 8002940:	005b      	lsls	r3, r3, #1
 8002942:	4413      	add	r3, r2
 8002944:	00db      	lsls	r3, r3, #3
 8002946:	440b      	add	r3, r1
 8002948:	330c      	adds	r3, #12
 800294a:	6819      	ldr	r1, [r3, #0]
 800294c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002950:	482b      	ldr	r0, [pc, #172]	; (8002a00 <schedulerRefreshTask+0x2cc>)
 8002952:	4613      	mov	r3, r2
 8002954:	005b      	lsls	r3, r3, #1
 8002956:	4413      	add	r3, r2
 8002958:	00db      	lsls	r3, r3, #3
 800295a:	4403      	add	r3, r0
 800295c:	330c      	adds	r3, #12
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002964:	3201      	adds	r2, #1
 8002966:	1ac9      	subs	r1, r1, r3
 8002968:	4825      	ldr	r0, [pc, #148]	; (8002a00 <schedulerRefreshTask+0x2cc>)
 800296a:	4613      	mov	r3, r2
 800296c:	005b      	lsls	r3, r3, #1
 800296e:	4413      	add	r3, r2
 8002970:	00db      	lsls	r3, r3, #3
 8002972:	4403      	add	r3, r0
 8002974:	330c      	adds	r3, #12
 8002976:	6019      	str	r1, [r3, #0]
            if (tasks[i + 1].delay == 0) {
 8002978:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800297c:	1c5a      	adds	r2, r3, #1
 800297e:	4920      	ldr	r1, [pc, #128]	; (8002a00 <schedulerRefreshTask+0x2cc>)
 8002980:	4613      	mov	r3, r2
 8002982:	005b      	lsls	r3, r3, #1
 8002984:	4413      	add	r3, r2
 8002986:	00db      	lsls	r3, r3, #3
 8002988:	440b      	add	r3, r1
 800298a:	330c      	adds	r3, #12
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d10b      	bne.n	80029aa <schedulerRefreshTask+0x276>
                tasks[i + 1].flag = 1;
 8002992:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002996:	1c5a      	adds	r2, r3, #1
 8002998:	4919      	ldr	r1, [pc, #100]	; (8002a00 <schedulerRefreshTask+0x2cc>)
 800299a:	4613      	mov	r3, r2
 800299c:	005b      	lsls	r3, r3, #1
 800299e:	4413      	add	r3, r2
 80029a0:	00db      	lsls	r3, r3, #3
 80029a2:	440b      	add	r3, r1
 80029a4:	3314      	adds	r3, #20
 80029a6:	2201      	movs	r2, #1
 80029a8:	701a      	strb	r2, [r3, #0]
            }
            return 1;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e023      	b.n	80029f6 <schedulerRefreshTask+0x2c2>
        }
        else {
            tasks[i] = tasks[i + 1];
 80029ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80029b2:	1c5a      	adds	r2, r3, #1
 80029b4:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 80029b8:	4811      	ldr	r0, [pc, #68]	; (8002a00 <schedulerRefreshTask+0x2cc>)
 80029ba:	460b      	mov	r3, r1
 80029bc:	005b      	lsls	r3, r3, #1
 80029be:	440b      	add	r3, r1
 80029c0:	00db      	lsls	r3, r3, #3
 80029c2:	4418      	add	r0, r3
 80029c4:	490e      	ldr	r1, [pc, #56]	; (8002a00 <schedulerRefreshTask+0x2cc>)
 80029c6:	4613      	mov	r3, r2
 80029c8:	005b      	lsls	r3, r3, #1
 80029ca:	4413      	add	r3, r2
 80029cc:	00db      	lsls	r3, r3, #3
 80029ce:	440b      	add	r3, r1
 80029d0:	4604      	mov	r4, r0
 80029d2:	461d      	mov	r5, r3
 80029d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029d8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80029dc:	e884 0003 	stmia.w	r4, {r0, r1}
    for (uint8_t i = 0; i < SCHEDULER_NUMBER; i ++) {
 80029e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80029e4:	3301      	adds	r3, #1
 80029e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80029ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80029ee:	2b1f      	cmp	r3, #31
 80029f0:	f67f aeb8 	bls.w	8002764 <schedulerRefreshTask+0x30>
        }
    }
    return 0;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	372c      	adds	r7, #44	; 0x2c
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bcb0      	pop	{r4, r5, r7}
 80029fe:	4770      	bx	lr
 8002a00:	20000210 	.word	0x20000210

08002a04 <servoInit>:
#include "servo.h"
#include "scheduler.h"

servo servos[SERVO_NUMBER];

void servoInit(void) {
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < SERVO_NUMBER; i ++) {
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	71fb      	strb	r3, [r7, #7]
 8002a0e:	e01f      	b.n	8002a50 <servoInit+0x4c>
		servos[i].timer = NULL;
 8002a10:	79fb      	ldrb	r3, [r7, #7]
 8002a12:	4a14      	ldr	r2, [pc, #80]	; (8002a64 <servoInit+0x60>)
 8002a14:	011b      	lsls	r3, r3, #4
 8002a16:	4413      	add	r3, r2
 8002a18:	2200      	movs	r2, #0
 8002a1a:	601a      	str	r2, [r3, #0]
		servos[i].channel = 0;
 8002a1c:	79fb      	ldrb	r3, [r7, #7]
 8002a1e:	4a11      	ldr	r2, [pc, #68]	; (8002a64 <servoInit+0x60>)
 8002a20:	011b      	lsls	r3, r3, #4
 8002a22:	4413      	add	r3, r2
 8002a24:	3304      	adds	r3, #4
 8002a26:	2200      	movs	r2, #0
 8002a28:	601a      	str	r2, [r3, #0]
		servos[i].offset = 0;
 8002a2a:	79fb      	ldrb	r3, [r7, #7]
 8002a2c:	4a0d      	ldr	r2, [pc, #52]	; (8002a64 <servoInit+0x60>)
 8002a2e:	011b      	lsls	r3, r3, #4
 8002a30:	4413      	add	r3, r2
 8002a32:	3308      	adds	r3, #8
 8002a34:	f04f 0200 	mov.w	r2, #0
 8002a38:	601a      	str	r2, [r3, #0]
		servos[i].target = 0;
 8002a3a:	79fb      	ldrb	r3, [r7, #7]
 8002a3c:	4a09      	ldr	r2, [pc, #36]	; (8002a64 <servoInit+0x60>)
 8002a3e:	011b      	lsls	r3, r3, #4
 8002a40:	4413      	add	r3, r2
 8002a42:	330c      	adds	r3, #12
 8002a44:	f04f 0200 	mov.w	r2, #0
 8002a48:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < SERVO_NUMBER; i ++) {
 8002a4a:	79fb      	ldrb	r3, [r7, #7]
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	71fb      	strb	r3, [r7, #7]
 8002a50:	79fb      	ldrb	r3, [r7, #7]
 8002a52:	2b0b      	cmp	r3, #11
 8002a54:	d9dc      	bls.n	8002a10 <servoInit+0xc>
	}
}
 8002a56:	bf00      	nop
 8002a58:	bf00      	nop
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bc80      	pop	{r7}
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	20000510 	.word	0x20000510

08002a68 <servoStart>:

uint8_t servoStart(TIM_HandleTypeDef *timer, uint32_t channel, float offset) {
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b086      	sub	sp, #24
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	60b9      	str	r1, [r7, #8]
 8002a72:	607a      	str	r2, [r7, #4]
	for (uint8_t i = 0; i < SERVO_NUMBER; i ++) {
 8002a74:	2300      	movs	r3, #0
 8002a76:	75fb      	strb	r3, [r7, #23]
 8002a78:	e045      	b.n	8002b06 <servoStart+0x9e>
		if (servos[i].timer != NULL) continue;
 8002a7a:	7dfb      	ldrb	r3, [r7, #23]
 8002a7c:	4a26      	ldr	r2, [pc, #152]	; (8002b18 <servoStart+0xb0>)
 8002a7e:	011b      	lsls	r3, r3, #4
 8002a80:	4413      	add	r3, r2
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d13a      	bne.n	8002afe <servoStart+0x96>
		servos[i].timer = timer;
 8002a88:	7dfb      	ldrb	r3, [r7, #23]
 8002a8a:	4a23      	ldr	r2, [pc, #140]	; (8002b18 <servoStart+0xb0>)
 8002a8c:	011b      	lsls	r3, r3, #4
 8002a8e:	4413      	add	r3, r2
 8002a90:	68fa      	ldr	r2, [r7, #12]
 8002a92:	601a      	str	r2, [r3, #0]
		servos[i].channel = channel;
 8002a94:	7dfb      	ldrb	r3, [r7, #23]
 8002a96:	4a20      	ldr	r2, [pc, #128]	; (8002b18 <servoStart+0xb0>)
 8002a98:	011b      	lsls	r3, r3, #4
 8002a9a:	4413      	add	r3, r2
 8002a9c:	3304      	adds	r3, #4
 8002a9e:	68ba      	ldr	r2, [r7, #8]
 8002aa0:	601a      	str	r2, [r3, #0]
		if (offset < -SERVO_OFFSET) servos[i].offset = -SERVO_OFFSET;
 8002aa2:	491e      	ldr	r1, [pc, #120]	; (8002b1c <servoStart+0xb4>)
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f7fe fabb 	bl	8001020 <__aeabi_fcmplt>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d007      	beq.n	8002ac0 <servoStart+0x58>
 8002ab0:	7dfb      	ldrb	r3, [r7, #23]
 8002ab2:	4a19      	ldr	r2, [pc, #100]	; (8002b18 <servoStart+0xb0>)
 8002ab4:	011b      	lsls	r3, r3, #4
 8002ab6:	4413      	add	r3, r2
 8002ab8:	3308      	adds	r3, #8
 8002aba:	4a18      	ldr	r2, [pc, #96]	; (8002b1c <servoStart+0xb4>)
 8002abc:	601a      	str	r2, [r3, #0]
 8002abe:	e015      	b.n	8002aec <servoStart+0x84>
		else if (offset > SERVO_OFFSET) servos[i].offset = SERVO_OFFSET;
 8002ac0:	4917      	ldr	r1, [pc, #92]	; (8002b20 <servoStart+0xb8>)
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f7fe faca 	bl	800105c <__aeabi_fcmpgt>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d007      	beq.n	8002ade <servoStart+0x76>
 8002ace:	7dfb      	ldrb	r3, [r7, #23]
 8002ad0:	4a11      	ldr	r2, [pc, #68]	; (8002b18 <servoStart+0xb0>)
 8002ad2:	011b      	lsls	r3, r3, #4
 8002ad4:	4413      	add	r3, r2
 8002ad6:	3308      	adds	r3, #8
 8002ad8:	4a11      	ldr	r2, [pc, #68]	; (8002b20 <servoStart+0xb8>)
 8002ada:	601a      	str	r2, [r3, #0]
 8002adc:	e006      	b.n	8002aec <servoStart+0x84>
		else servos[i].offset = offset;
 8002ade:	7dfb      	ldrb	r3, [r7, #23]
 8002ae0:	4a0d      	ldr	r2, [pc, #52]	; (8002b18 <servoStart+0xb0>)
 8002ae2:	011b      	lsls	r3, r3, #4
 8002ae4:	4413      	add	r3, r2
 8002ae6:	3308      	adds	r3, #8
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	601a      	str	r2, [r3, #0]
		servos[i].target = 90;
 8002aec:	7dfb      	ldrb	r3, [r7, #23]
 8002aee:	4a0a      	ldr	r2, [pc, #40]	; (8002b18 <servoStart+0xb0>)
 8002af0:	011b      	lsls	r3, r3, #4
 8002af2:	4413      	add	r3, r2
 8002af4:	330c      	adds	r3, #12
 8002af6:	4a0b      	ldr	r2, [pc, #44]	; (8002b24 <servoStart+0xbc>)
 8002af8:	601a      	str	r2, [r3, #0]
		return i;
 8002afa:	7dfb      	ldrb	r3, [r7, #23]
 8002afc:	e007      	b.n	8002b0e <servoStart+0xa6>
		if (servos[i].timer != NULL) continue;
 8002afe:	bf00      	nop
	for (uint8_t i = 0; i < SERVO_NUMBER; i ++) {
 8002b00:	7dfb      	ldrb	r3, [r7, #23]
 8002b02:	3301      	adds	r3, #1
 8002b04:	75fb      	strb	r3, [r7, #23]
 8002b06:	7dfb      	ldrb	r3, [r7, #23]
 8002b08:	2b0b      	cmp	r3, #11
 8002b0a:	d9b6      	bls.n	8002a7a <servoStart+0x12>
	}
	return SERVO_UNDEFINED;
 8002b0c:	230c      	movs	r3, #12
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3718      	adds	r7, #24
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	20000510 	.word	0x20000510
 8002b1c:	c1580000 	.word	0xc1580000
 8002b20:	41580000 	.word	0x41580000
 8002b24:	42b40000 	.word	0x42b40000

08002b28 <servoRun>:

void servoRun(void *) {
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < SERVO_NUMBER; i ++) {
 8002b30:	2300      	movs	r3, #0
 8002b32:	73fb      	strb	r3, [r7, #15]
 8002b34:	e012      	b.n	8002b5c <servoRun+0x34>
		if (servos[i].timer == NULL) continue;
 8002b36:	7bfb      	ldrb	r3, [r7, #15]
 8002b38:	4a0c      	ldr	r2, [pc, #48]	; (8002b6c <servoRun+0x44>)
 8002b3a:	011b      	lsls	r3, r3, #4
 8002b3c:	4413      	add	r3, r2
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d007      	beq.n	8002b54 <servoRun+0x2c>
		servoRotate(&servos[i]);
 8002b44:	7bfb      	ldrb	r3, [r7, #15]
 8002b46:	011b      	lsls	r3, r3, #4
 8002b48:	4a08      	ldr	r2, [pc, #32]	; (8002b6c <servoRun+0x44>)
 8002b4a:	4413      	add	r3, r2
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f000 f80f 	bl	8002b70 <servoRotate>
 8002b52:	e000      	b.n	8002b56 <servoRun+0x2e>
		if (servos[i].timer == NULL) continue;
 8002b54:	bf00      	nop
	for (uint8_t i = 0; i < SERVO_NUMBER; i ++) {
 8002b56:	7bfb      	ldrb	r3, [r7, #15]
 8002b58:	3301      	adds	r3, #1
 8002b5a:	73fb      	strb	r3, [r7, #15]
 8002b5c:	7bfb      	ldrb	r3, [r7, #15]
 8002b5e:	2b0b      	cmp	r3, #11
 8002b60:	d9e9      	bls.n	8002b36 <servoRun+0xe>
	}
}
 8002b62:	bf00      	nop
 8002b64:	bf00      	nop
 8002b66:	3710      	adds	r7, #16
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	20000510 	.word	0x20000510

08002b70 <servoRotate>:

void servoRotate(void *servoPointer) {
 8002b70:	b590      	push	{r4, r7, lr}
 8002b72:	b085      	sub	sp, #20
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
	servo *newServoPointer = (servo *)servoPointer;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	60fb      	str	r3, [r7, #12]
	if (newServoPointer->timer == NULL) return;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d06d      	beq.n	8002c60 <servoRotate+0xf0>
	if (newServoPointer->target < 0) newServoPointer->target = 0;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	f04f 0100 	mov.w	r1, #0
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7fe fa47 	bl	8001020 <__aeabi_fcmplt>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d004      	beq.n	8002ba2 <servoRotate+0x32>
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f04f 0200 	mov.w	r2, #0
 8002b9e:	60da      	str	r2, [r3, #12]
 8002ba0:	e00b      	b.n	8002bba <servoRotate+0x4a>
	else if (newServoPointer->target > 180) newServoPointer->target = 180;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	4930      	ldr	r1, [pc, #192]	; (8002c68 <servoRotate+0xf8>)
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f7fe fa57 	bl	800105c <__aeabi_fcmpgt>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d002      	beq.n	8002bba <servoRotate+0x4a>
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	4a2c      	ldr	r2, [pc, #176]	; (8002c68 <servoRotate+0xf8>)
 8002bb8:	60da      	str	r2, [r3, #12]
	uint32_t newValue = (newServoPointer->timer->Instance->ARR + 1) / SERVO_PERIOD * (SERVO_MINIMUM + (SERVO_MAXIMUM - SERVO_MINIMUM) * (newServoPointer->target + newServoPointer->offset) / 180);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	4a29      	ldr	r2, [pc, #164]	; (8002c6c <servoRotate+0xfc>)
 8002bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bca:	0b9b      	lsrs	r3, r3, #14
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7fe f831 	bl	8000c34 <__aeabi_ui2f>
 8002bd2:	4604      	mov	r4, r0
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	68da      	ldr	r2, [r3, #12]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	4619      	mov	r1, r3
 8002bde:	4610      	mov	r0, r2
 8002be0:	f7fd ff78 	bl	8000ad4 <__addsf3>
 8002be4:	4603      	mov	r3, r0
 8002be6:	4922      	ldr	r1, [pc, #136]	; (8002c70 <servoRotate+0x100>)
 8002be8:	4618      	mov	r0, r3
 8002bea:	f7fe f87b 	bl	8000ce4 <__aeabi_fmul>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	491d      	ldr	r1, [pc, #116]	; (8002c68 <servoRotate+0xf8>)
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7fe f92a 	bl	8000e4c <__aeabi_fdiv>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	491e      	ldr	r1, [pc, #120]	; (8002c74 <servoRotate+0x104>)
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7fd ff69 	bl	8000ad4 <__addsf3>
 8002c02:	4603      	mov	r3, r0
 8002c04:	4619      	mov	r1, r3
 8002c06:	4620      	mov	r0, r4
 8002c08:	f7fe f86c 	bl	8000ce4 <__aeabi_fmul>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f7fe fa44 	bl	800109c <__aeabi_f2uiz>
 8002c14:	4603      	mov	r3, r0
 8002c16:	60bb      	str	r3, [r7, #8]
//	newValue = newServoPointer->timer->Instance->ARR - newValue;
	__HAL_TIM_SET_COMPARE(newServoPointer->timer, newServoPointer->channel, newValue);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d105      	bne.n	8002c2c <servoRotate+0xbc>
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68ba      	ldr	r2, [r7, #8]
 8002c28:	635a      	str	r2, [r3, #52]	; 0x34
 8002c2a:	e01a      	b.n	8002c62 <servoRotate+0xf2>
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	2b04      	cmp	r3, #4
 8002c32:	d105      	bne.n	8002c40 <servoRotate+0xd0>
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	6393      	str	r3, [r2, #56]	; 0x38
 8002c3e:	e010      	b.n	8002c62 <servoRotate+0xf2>
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	2b08      	cmp	r3, #8
 8002c46:	d105      	bne.n	8002c54 <servoRotate+0xe4>
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	63d3      	str	r3, [r2, #60]	; 0x3c
 8002c52:	e006      	b.n	8002c62 <servoRotate+0xf2>
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c5e:	e000      	b.n	8002c62 <servoRotate+0xf2>
	if (newServoPointer->timer == NULL) return;
 8002c60:	bf00      	nop
}
 8002c62:	3714      	adds	r7, #20
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd90      	pop	{r4, r7, pc}
 8002c68:	43340000 	.word	0x43340000
 8002c6c:	d1b71759 	.word	0xd1b71759
 8002c70:	44fa0000 	.word	0x44fa0000
 8002c74:	43fa0000 	.word	0x43fa0000

08002c78 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b085      	sub	sp, #20
 8002c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002c7e:	4b15      	ldr	r3, [pc, #84]	; (8002cd4 <HAL_MspInit+0x5c>)
 8002c80:	699b      	ldr	r3, [r3, #24]
 8002c82:	4a14      	ldr	r2, [pc, #80]	; (8002cd4 <HAL_MspInit+0x5c>)
 8002c84:	f043 0301 	orr.w	r3, r3, #1
 8002c88:	6193      	str	r3, [r2, #24]
 8002c8a:	4b12      	ldr	r3, [pc, #72]	; (8002cd4 <HAL_MspInit+0x5c>)
 8002c8c:	699b      	ldr	r3, [r3, #24]
 8002c8e:	f003 0301 	and.w	r3, r3, #1
 8002c92:	60bb      	str	r3, [r7, #8]
 8002c94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c96:	4b0f      	ldr	r3, [pc, #60]	; (8002cd4 <HAL_MspInit+0x5c>)
 8002c98:	69db      	ldr	r3, [r3, #28]
 8002c9a:	4a0e      	ldr	r2, [pc, #56]	; (8002cd4 <HAL_MspInit+0x5c>)
 8002c9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ca0:	61d3      	str	r3, [r2, #28]
 8002ca2:	4b0c      	ldr	r3, [pc, #48]	; (8002cd4 <HAL_MspInit+0x5c>)
 8002ca4:	69db      	ldr	r3, [r3, #28]
 8002ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002caa:	607b      	str	r3, [r7, #4]
 8002cac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002cae:	4b0a      	ldr	r3, [pc, #40]	; (8002cd8 <HAL_MspInit+0x60>)
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	60fb      	str	r3, [r7, #12]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002cba:	60fb      	str	r3, [r7, #12]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002cc2:	60fb      	str	r3, [r7, #12]
 8002cc4:	4a04      	ldr	r2, [pc, #16]	; (8002cd8 <HAL_MspInit+0x60>)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cca:	bf00      	nop
 8002ccc:	3714      	adds	r7, #20
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bc80      	pop	{r7}
 8002cd2:	4770      	bx	lr
 8002cd4:	40021000 	.word	0x40021000
 8002cd8:	40010000 	.word	0x40010000

08002cdc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b086      	sub	sp, #24
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a40      	ldr	r2, [pc, #256]	; (8002dec <HAL_TIM_Base_MspInit+0x110>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d12c      	bne.n	8002d48 <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002cee:	4b40      	ldr	r3, [pc, #256]	; (8002df0 <HAL_TIM_Base_MspInit+0x114>)
 8002cf0:	699b      	ldr	r3, [r3, #24]
 8002cf2:	4a3f      	ldr	r2, [pc, #252]	; (8002df0 <HAL_TIM_Base_MspInit+0x114>)
 8002cf4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002cf8:	6193      	str	r3, [r2, #24]
 8002cfa:	4b3d      	ldr	r3, [pc, #244]	; (8002df0 <HAL_TIM_Base_MspInit+0x114>)
 8002cfc:	699b      	ldr	r3, [r3, #24]
 8002cfe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d02:	617b      	str	r3, [r7, #20]
 8002d04:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8002d06:	2200      	movs	r2, #0
 8002d08:	2100      	movs	r1, #0
 8002d0a:	2018      	movs	r0, #24
 8002d0c:	f000 fad5 	bl	80032ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8002d10:	2018      	movs	r0, #24
 8002d12:	f000 faee 	bl	80032f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8002d16:	2200      	movs	r2, #0
 8002d18:	2100      	movs	r1, #0
 8002d1a:	2019      	movs	r0, #25
 8002d1c:	f000 facd 	bl	80032ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002d20:	2019      	movs	r0, #25
 8002d22:	f000 fae6 	bl	80032f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8002d26:	2200      	movs	r2, #0
 8002d28:	2100      	movs	r1, #0
 8002d2a:	201a      	movs	r0, #26
 8002d2c:	f000 fac5 	bl	80032ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8002d30:	201a      	movs	r0, #26
 8002d32:	f000 fade 	bl	80032f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002d36:	2200      	movs	r2, #0
 8002d38:	2100      	movs	r1, #0
 8002d3a:	201b      	movs	r0, #27
 8002d3c:	f000 fabd 	bl	80032ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002d40:	201b      	movs	r0, #27
 8002d42:	f000 fad6 	bl	80032f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002d46:	e04c      	b.n	8002de2 <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM2)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d50:	d114      	bne.n	8002d7c <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d52:	4b27      	ldr	r3, [pc, #156]	; (8002df0 <HAL_TIM_Base_MspInit+0x114>)
 8002d54:	69db      	ldr	r3, [r3, #28]
 8002d56:	4a26      	ldr	r2, [pc, #152]	; (8002df0 <HAL_TIM_Base_MspInit+0x114>)
 8002d58:	f043 0301 	orr.w	r3, r3, #1
 8002d5c:	61d3      	str	r3, [r2, #28]
 8002d5e:	4b24      	ldr	r3, [pc, #144]	; (8002df0 <HAL_TIM_Base_MspInit+0x114>)
 8002d60:	69db      	ldr	r3, [r3, #28]
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	613b      	str	r3, [r7, #16]
 8002d68:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	2100      	movs	r1, #0
 8002d6e:	201c      	movs	r0, #28
 8002d70:	f000 faa3 	bl	80032ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002d74:	201c      	movs	r0, #28
 8002d76:	f000 fabc 	bl	80032f2 <HAL_NVIC_EnableIRQ>
}
 8002d7a:	e032      	b.n	8002de2 <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM3)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a1c      	ldr	r2, [pc, #112]	; (8002df4 <HAL_TIM_Base_MspInit+0x118>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d114      	bne.n	8002db0 <HAL_TIM_Base_MspInit+0xd4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d86:	4b1a      	ldr	r3, [pc, #104]	; (8002df0 <HAL_TIM_Base_MspInit+0x114>)
 8002d88:	69db      	ldr	r3, [r3, #28]
 8002d8a:	4a19      	ldr	r2, [pc, #100]	; (8002df0 <HAL_TIM_Base_MspInit+0x114>)
 8002d8c:	f043 0302 	orr.w	r3, r3, #2
 8002d90:	61d3      	str	r3, [r2, #28]
 8002d92:	4b17      	ldr	r3, [pc, #92]	; (8002df0 <HAL_TIM_Base_MspInit+0x114>)
 8002d94:	69db      	ldr	r3, [r3, #28]
 8002d96:	f003 0302 	and.w	r3, r3, #2
 8002d9a:	60fb      	str	r3, [r7, #12]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002d9e:	2200      	movs	r2, #0
 8002da0:	2100      	movs	r1, #0
 8002da2:	201d      	movs	r0, #29
 8002da4:	f000 fa89 	bl	80032ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002da8:	201d      	movs	r0, #29
 8002daa:	f000 faa2 	bl	80032f2 <HAL_NVIC_EnableIRQ>
}
 8002dae:	e018      	b.n	8002de2 <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM4)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a10      	ldr	r2, [pc, #64]	; (8002df8 <HAL_TIM_Base_MspInit+0x11c>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d113      	bne.n	8002de2 <HAL_TIM_Base_MspInit+0x106>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002dba:	4b0d      	ldr	r3, [pc, #52]	; (8002df0 <HAL_TIM_Base_MspInit+0x114>)
 8002dbc:	69db      	ldr	r3, [r3, #28]
 8002dbe:	4a0c      	ldr	r2, [pc, #48]	; (8002df0 <HAL_TIM_Base_MspInit+0x114>)
 8002dc0:	f043 0304 	orr.w	r3, r3, #4
 8002dc4:	61d3      	str	r3, [r2, #28]
 8002dc6:	4b0a      	ldr	r3, [pc, #40]	; (8002df0 <HAL_TIM_Base_MspInit+0x114>)
 8002dc8:	69db      	ldr	r3, [r3, #28]
 8002dca:	f003 0304 	and.w	r3, r3, #4
 8002dce:	60bb      	str	r3, [r7, #8]
 8002dd0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	2100      	movs	r1, #0
 8002dd6:	201e      	movs	r0, #30
 8002dd8:	f000 fa6f 	bl	80032ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002ddc:	201e      	movs	r0, #30
 8002dde:	f000 fa88 	bl	80032f2 <HAL_NVIC_EnableIRQ>
}
 8002de2:	bf00      	nop
 8002de4:	3718      	adds	r7, #24
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	40012c00 	.word	0x40012c00
 8002df0:	40021000 	.word	0x40021000
 8002df4:	40000400 	.word	0x40000400
 8002df8:	40000800 	.word	0x40000800

08002dfc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b08a      	sub	sp, #40	; 0x28
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e04:	f107 0318 	add.w	r3, r7, #24
 8002e08:	2200      	movs	r2, #0
 8002e0a:	601a      	str	r2, [r3, #0]
 8002e0c:	605a      	str	r2, [r3, #4]
 8002e0e:	609a      	str	r2, [r3, #8]
 8002e10:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e1a:	d118      	bne.n	8002e4e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e1c:	4b38      	ldr	r3, [pc, #224]	; (8002f00 <HAL_TIM_MspPostInit+0x104>)
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	4a37      	ldr	r2, [pc, #220]	; (8002f00 <HAL_TIM_MspPostInit+0x104>)
 8002e22:	f043 0304 	orr.w	r3, r3, #4
 8002e26:	6193      	str	r3, [r2, #24]
 8002e28:	4b35      	ldr	r3, [pc, #212]	; (8002f00 <HAL_TIM_MspPostInit+0x104>)
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	f003 0304 	and.w	r3, r3, #4
 8002e30:	617b      	str	r3, [r7, #20]
 8002e32:	697b      	ldr	r3, [r7, #20]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002e34:	230f      	movs	r3, #15
 8002e36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e38:	2302      	movs	r3, #2
 8002e3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e3c:	2302      	movs	r3, #2
 8002e3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e40:	f107 0318 	add.w	r3, r7, #24
 8002e44:	4619      	mov	r1, r3
 8002e46:	482f      	ldr	r0, [pc, #188]	; (8002f04 <HAL_TIM_MspPostInit+0x108>)
 8002e48:	f000 fa6e 	bl	8003328 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002e4c:	e053      	b.n	8002ef6 <HAL_TIM_MspPostInit+0xfa>
  else if(htim->Instance==TIM3)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a2d      	ldr	r2, [pc, #180]	; (8002f08 <HAL_TIM_MspPostInit+0x10c>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d130      	bne.n	8002eba <HAL_TIM_MspPostInit+0xbe>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e58:	4b29      	ldr	r3, [pc, #164]	; (8002f00 <HAL_TIM_MspPostInit+0x104>)
 8002e5a:	699b      	ldr	r3, [r3, #24]
 8002e5c:	4a28      	ldr	r2, [pc, #160]	; (8002f00 <HAL_TIM_MspPostInit+0x104>)
 8002e5e:	f043 0304 	orr.w	r3, r3, #4
 8002e62:	6193      	str	r3, [r2, #24]
 8002e64:	4b26      	ldr	r3, [pc, #152]	; (8002f00 <HAL_TIM_MspPostInit+0x104>)
 8002e66:	699b      	ldr	r3, [r3, #24]
 8002e68:	f003 0304 	and.w	r3, r3, #4
 8002e6c:	613b      	str	r3, [r7, #16]
 8002e6e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e70:	4b23      	ldr	r3, [pc, #140]	; (8002f00 <HAL_TIM_MspPostInit+0x104>)
 8002e72:	699b      	ldr	r3, [r3, #24]
 8002e74:	4a22      	ldr	r2, [pc, #136]	; (8002f00 <HAL_TIM_MspPostInit+0x104>)
 8002e76:	f043 0308 	orr.w	r3, r3, #8
 8002e7a:	6193      	str	r3, [r2, #24]
 8002e7c:	4b20      	ldr	r3, [pc, #128]	; (8002f00 <HAL_TIM_MspPostInit+0x104>)
 8002e7e:	699b      	ldr	r3, [r3, #24]
 8002e80:	f003 0308 	and.w	r3, r3, #8
 8002e84:	60fb      	str	r3, [r7, #12]
 8002e86:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002e88:	23c0      	movs	r3, #192	; 0xc0
 8002e8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e8c:	2302      	movs	r3, #2
 8002e8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e90:	2302      	movs	r3, #2
 8002e92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e94:	f107 0318 	add.w	r3, r7, #24
 8002e98:	4619      	mov	r1, r3
 8002e9a:	481a      	ldr	r0, [pc, #104]	; (8002f04 <HAL_TIM_MspPostInit+0x108>)
 8002e9c:	f000 fa44 	bl	8003328 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ea4:	2302      	movs	r3, #2
 8002ea6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eac:	f107 0318 	add.w	r3, r7, #24
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	4816      	ldr	r0, [pc, #88]	; (8002f0c <HAL_TIM_MspPostInit+0x110>)
 8002eb4:	f000 fa38 	bl	8003328 <HAL_GPIO_Init>
}
 8002eb8:	e01d      	b.n	8002ef6 <HAL_TIM_MspPostInit+0xfa>
  else if(htim->Instance==TIM4)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a14      	ldr	r2, [pc, #80]	; (8002f10 <HAL_TIM_MspPostInit+0x114>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d118      	bne.n	8002ef6 <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ec4:	4b0e      	ldr	r3, [pc, #56]	; (8002f00 <HAL_TIM_MspPostInit+0x104>)
 8002ec6:	699b      	ldr	r3, [r3, #24]
 8002ec8:	4a0d      	ldr	r2, [pc, #52]	; (8002f00 <HAL_TIM_MspPostInit+0x104>)
 8002eca:	f043 0308 	orr.w	r3, r3, #8
 8002ece:	6193      	str	r3, [r2, #24]
 8002ed0:	4b0b      	ldr	r3, [pc, #44]	; (8002f00 <HAL_TIM_MspPostInit+0x104>)
 8002ed2:	699b      	ldr	r3, [r3, #24]
 8002ed4:	f003 0308 	and.w	r3, r3, #8
 8002ed8:	60bb      	str	r3, [r7, #8]
 8002eda:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002edc:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002ee0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ee2:	2302      	movs	r3, #2
 8002ee4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ee6:	2302      	movs	r3, #2
 8002ee8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eea:	f107 0318 	add.w	r3, r7, #24
 8002eee:	4619      	mov	r1, r3
 8002ef0:	4806      	ldr	r0, [pc, #24]	; (8002f0c <HAL_TIM_MspPostInit+0x110>)
 8002ef2:	f000 fa19 	bl	8003328 <HAL_GPIO_Init>
}
 8002ef6:	bf00      	nop
 8002ef8:	3728      	adds	r7, #40	; 0x28
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	40021000 	.word	0x40021000
 8002f04:	40010800 	.word	0x40010800
 8002f08:	40000400 	.word	0x40000400
 8002f0c:	40010c00 	.word	0x40010c00
 8002f10:	40000800 	.word	0x40000800

08002f14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f18:	e7fe      	b.n	8002f18 <NMI_Handler+0x4>

08002f1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f1a:	b480      	push	{r7}
 8002f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f1e:	e7fe      	b.n	8002f1e <HardFault_Handler+0x4>

08002f20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f24:	e7fe      	b.n	8002f24 <MemManage_Handler+0x4>

08002f26 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f26:	b480      	push	{r7}
 8002f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f2a:	e7fe      	b.n	8002f2a <BusFault_Handler+0x4>

08002f2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f30:	e7fe      	b.n	8002f30 <UsageFault_Handler+0x4>

08002f32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f32:	b480      	push	{r7}
 8002f34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f36:	bf00      	nop
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bc80      	pop	{r7}
 8002f3c:	4770      	bx	lr

08002f3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f3e:	b480      	push	{r7}
 8002f40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f42:	bf00      	nop
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bc80      	pop	{r7}
 8002f48:	4770      	bx	lr

08002f4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f4a:	b480      	push	{r7}
 8002f4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f4e:	bf00      	nop
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bc80      	pop	{r7}
 8002f54:	4770      	bx	lr

08002f56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f56:	b580      	push	{r7, lr}
 8002f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f5a:	f000 f8bb 	bl	80030d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f5e:	bf00      	nop
 8002f60:	bd80      	pop	{r7, pc}
	...

08002f64 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002f68:	4802      	ldr	r0, [pc, #8]	; (8002f74 <TIM1_BRK_IRQHandler+0x10>)
 8002f6a:	f001 f90d 	bl	8004188 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8002f6e:	bf00      	nop
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	200000e4 	.word	0x200000e4

08002f78 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002f7c:	4802      	ldr	r0, [pc, #8]	; (8002f88 <TIM1_UP_IRQHandler+0x10>)
 8002f7e:	f001 f903 	bl	8004188 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002f82:	bf00      	nop
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	200000e4 	.word	0x200000e4

08002f8c <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002f90:	4802      	ldr	r0, [pc, #8]	; (8002f9c <TIM1_TRG_COM_IRQHandler+0x10>)
 8002f92:	f001 f8f9 	bl	8004188 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8002f96:	bf00      	nop
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	200000e4 	.word	0x200000e4

08002fa0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002fa4:	4802      	ldr	r0, [pc, #8]	; (8002fb0 <TIM1_CC_IRQHandler+0x10>)
 8002fa6:	f001 f8ef 	bl	8004188 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002faa:	bf00      	nop
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	200000e4 	.word	0x200000e4

08002fb4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002fb8:	4802      	ldr	r0, [pc, #8]	; (8002fc4 <TIM2_IRQHandler+0x10>)
 8002fba:	f001 f8e5 	bl	8004188 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002fbe:	bf00      	nop
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	2000012c 	.word	0x2000012c

08002fc8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002fcc:	4802      	ldr	r0, [pc, #8]	; (8002fd8 <TIM3_IRQHandler+0x10>)
 8002fce:	f001 f8db 	bl	8004188 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002fd2:	bf00      	nop
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	20000174 	.word	0x20000174

08002fdc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002fe0:	4802      	ldr	r0, [pc, #8]	; (8002fec <TIM4_IRQHandler+0x10>)
 8002fe2:	f001 f8d1 	bl	8004188 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002fe6:	bf00      	nop
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	200001bc 	.word	0x200001bc

08002ff0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ff4:	bf00      	nop
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bc80      	pop	{r7}
 8002ffa:	4770      	bx	lr

08002ffc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002ffc:	f7ff fff8 	bl	8002ff0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003000:	480b      	ldr	r0, [pc, #44]	; (8003030 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003002:	490c      	ldr	r1, [pc, #48]	; (8003034 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003004:	4a0c      	ldr	r2, [pc, #48]	; (8003038 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003006:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003008:	e002      	b.n	8003010 <LoopCopyDataInit>

0800300a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800300a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800300c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800300e:	3304      	adds	r3, #4

08003010 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003010:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003012:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003014:	d3f9      	bcc.n	800300a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003016:	4a09      	ldr	r2, [pc, #36]	; (800303c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003018:	4c09      	ldr	r4, [pc, #36]	; (8003040 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800301a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800301c:	e001      	b.n	8003022 <LoopFillZerobss>

0800301e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800301e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003020:	3204      	adds	r2, #4

08003022 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003022:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003024:	d3fb      	bcc.n	800301e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003026:	f001 fe87 	bl	8004d38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800302a:	f7fe fb59 	bl	80016e0 <main>
  bx lr
 800302e:	4770      	bx	lr
  ldr r0, =_sdata
 8003030:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003034:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8003038:	08006ad0 	.word	0x08006ad0
  ldr r2, =_sbss
 800303c:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8003040:	2000070c 	.word	0x2000070c

08003044 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003044:	e7fe      	b.n	8003044 <ADC1_2_IRQHandler>
	...

08003048 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800304c:	4b08      	ldr	r3, [pc, #32]	; (8003070 <HAL_Init+0x28>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a07      	ldr	r2, [pc, #28]	; (8003070 <HAL_Init+0x28>)
 8003052:	f043 0310 	orr.w	r3, r3, #16
 8003056:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003058:	2003      	movs	r0, #3
 800305a:	f000 f923 	bl	80032a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800305e:	200f      	movs	r0, #15
 8003060:	f000 f808 	bl	8003074 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003064:	f7ff fe08 	bl	8002c78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	40022000 	.word	0x40022000

08003074 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b082      	sub	sp, #8
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800307c:	4b12      	ldr	r3, [pc, #72]	; (80030c8 <HAL_InitTick+0x54>)
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	4b12      	ldr	r3, [pc, #72]	; (80030cc <HAL_InitTick+0x58>)
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	4619      	mov	r1, r3
 8003086:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800308a:	fbb3 f3f1 	udiv	r3, r3, r1
 800308e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003092:	4618      	mov	r0, r3
 8003094:	f000 f93b 	bl	800330e <HAL_SYSTICK_Config>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d001      	beq.n	80030a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e00e      	b.n	80030c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2b0f      	cmp	r3, #15
 80030a6:	d80a      	bhi.n	80030be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030a8:	2200      	movs	r2, #0
 80030aa:	6879      	ldr	r1, [r7, #4]
 80030ac:	f04f 30ff 	mov.w	r0, #4294967295
 80030b0:	f000 f903 	bl	80032ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80030b4:	4a06      	ldr	r2, [pc, #24]	; (80030d0 <HAL_InitTick+0x5c>)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80030ba:	2300      	movs	r3, #0
 80030bc:	e000      	b.n	80030c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3708      	adds	r7, #8
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	20000010 	.word	0x20000010
 80030cc:	20000018 	.word	0x20000018
 80030d0:	20000014 	.word	0x20000014

080030d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030d4:	b480      	push	{r7}
 80030d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030d8:	4b05      	ldr	r3, [pc, #20]	; (80030f0 <HAL_IncTick+0x1c>)
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	461a      	mov	r2, r3
 80030de:	4b05      	ldr	r3, [pc, #20]	; (80030f4 <HAL_IncTick+0x20>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4413      	add	r3, r2
 80030e4:	4a03      	ldr	r2, [pc, #12]	; (80030f4 <HAL_IncTick+0x20>)
 80030e6:	6013      	str	r3, [r2, #0]
}
 80030e8:	bf00      	nop
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bc80      	pop	{r7}
 80030ee:	4770      	bx	lr
 80030f0:	20000018 	.word	0x20000018
 80030f4:	200005d0 	.word	0x200005d0

080030f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030f8:	b480      	push	{r7}
 80030fa:	af00      	add	r7, sp, #0
  return uwTick;
 80030fc:	4b02      	ldr	r3, [pc, #8]	; (8003108 <HAL_GetTick+0x10>)
 80030fe:	681b      	ldr	r3, [r3, #0]
}
 8003100:	4618      	mov	r0, r3
 8003102:	46bd      	mov	sp, r7
 8003104:	bc80      	pop	{r7}
 8003106:	4770      	bx	lr
 8003108:	200005d0 	.word	0x200005d0

0800310c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800310c:	b480      	push	{r7}
 800310e:	b085      	sub	sp, #20
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f003 0307 	and.w	r3, r3, #7
 800311a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800311c:	4b0c      	ldr	r3, [pc, #48]	; (8003150 <__NVIC_SetPriorityGrouping+0x44>)
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003122:	68ba      	ldr	r2, [r7, #8]
 8003124:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003128:	4013      	ands	r3, r2
 800312a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003134:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003138:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800313c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800313e:	4a04      	ldr	r2, [pc, #16]	; (8003150 <__NVIC_SetPriorityGrouping+0x44>)
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	60d3      	str	r3, [r2, #12]
}
 8003144:	bf00      	nop
 8003146:	3714      	adds	r7, #20
 8003148:	46bd      	mov	sp, r7
 800314a:	bc80      	pop	{r7}
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	e000ed00 	.word	0xe000ed00

08003154 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003154:	b480      	push	{r7}
 8003156:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003158:	4b04      	ldr	r3, [pc, #16]	; (800316c <__NVIC_GetPriorityGrouping+0x18>)
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	0a1b      	lsrs	r3, r3, #8
 800315e:	f003 0307 	and.w	r3, r3, #7
}
 8003162:	4618      	mov	r0, r3
 8003164:	46bd      	mov	sp, r7
 8003166:	bc80      	pop	{r7}
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	e000ed00 	.word	0xe000ed00

08003170 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	4603      	mov	r3, r0
 8003178:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800317a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800317e:	2b00      	cmp	r3, #0
 8003180:	db0b      	blt.n	800319a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003182:	79fb      	ldrb	r3, [r7, #7]
 8003184:	f003 021f 	and.w	r2, r3, #31
 8003188:	4906      	ldr	r1, [pc, #24]	; (80031a4 <__NVIC_EnableIRQ+0x34>)
 800318a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800318e:	095b      	lsrs	r3, r3, #5
 8003190:	2001      	movs	r0, #1
 8003192:	fa00 f202 	lsl.w	r2, r0, r2
 8003196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800319a:	bf00      	nop
 800319c:	370c      	adds	r7, #12
 800319e:	46bd      	mov	sp, r7
 80031a0:	bc80      	pop	{r7}
 80031a2:	4770      	bx	lr
 80031a4:	e000e100 	.word	0xe000e100

080031a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	4603      	mov	r3, r0
 80031b0:	6039      	str	r1, [r7, #0]
 80031b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	db0a      	blt.n	80031d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	b2da      	uxtb	r2, r3
 80031c0:	490c      	ldr	r1, [pc, #48]	; (80031f4 <__NVIC_SetPriority+0x4c>)
 80031c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031c6:	0112      	lsls	r2, r2, #4
 80031c8:	b2d2      	uxtb	r2, r2
 80031ca:	440b      	add	r3, r1
 80031cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031d0:	e00a      	b.n	80031e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	b2da      	uxtb	r2, r3
 80031d6:	4908      	ldr	r1, [pc, #32]	; (80031f8 <__NVIC_SetPriority+0x50>)
 80031d8:	79fb      	ldrb	r3, [r7, #7]
 80031da:	f003 030f 	and.w	r3, r3, #15
 80031de:	3b04      	subs	r3, #4
 80031e0:	0112      	lsls	r2, r2, #4
 80031e2:	b2d2      	uxtb	r2, r2
 80031e4:	440b      	add	r3, r1
 80031e6:	761a      	strb	r2, [r3, #24]
}
 80031e8:	bf00      	nop
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bc80      	pop	{r7}
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	e000e100 	.word	0xe000e100
 80031f8:	e000ed00 	.word	0xe000ed00

080031fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b089      	sub	sp, #36	; 0x24
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f003 0307 	and.w	r3, r3, #7
 800320e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	f1c3 0307 	rsb	r3, r3, #7
 8003216:	2b04      	cmp	r3, #4
 8003218:	bf28      	it	cs
 800321a:	2304      	movcs	r3, #4
 800321c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	3304      	adds	r3, #4
 8003222:	2b06      	cmp	r3, #6
 8003224:	d902      	bls.n	800322c <NVIC_EncodePriority+0x30>
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	3b03      	subs	r3, #3
 800322a:	e000      	b.n	800322e <NVIC_EncodePriority+0x32>
 800322c:	2300      	movs	r3, #0
 800322e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003230:	f04f 32ff 	mov.w	r2, #4294967295
 8003234:	69bb      	ldr	r3, [r7, #24]
 8003236:	fa02 f303 	lsl.w	r3, r2, r3
 800323a:	43da      	mvns	r2, r3
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	401a      	ands	r2, r3
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003244:	f04f 31ff 	mov.w	r1, #4294967295
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	fa01 f303 	lsl.w	r3, r1, r3
 800324e:	43d9      	mvns	r1, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003254:	4313      	orrs	r3, r2
         );
}
 8003256:	4618      	mov	r0, r3
 8003258:	3724      	adds	r7, #36	; 0x24
 800325a:	46bd      	mov	sp, r7
 800325c:	bc80      	pop	{r7}
 800325e:	4770      	bx	lr

08003260 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	3b01      	subs	r3, #1
 800326c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003270:	d301      	bcc.n	8003276 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003272:	2301      	movs	r3, #1
 8003274:	e00f      	b.n	8003296 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003276:	4a0a      	ldr	r2, [pc, #40]	; (80032a0 <SysTick_Config+0x40>)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	3b01      	subs	r3, #1
 800327c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800327e:	210f      	movs	r1, #15
 8003280:	f04f 30ff 	mov.w	r0, #4294967295
 8003284:	f7ff ff90 	bl	80031a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003288:	4b05      	ldr	r3, [pc, #20]	; (80032a0 <SysTick_Config+0x40>)
 800328a:	2200      	movs	r2, #0
 800328c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800328e:	4b04      	ldr	r3, [pc, #16]	; (80032a0 <SysTick_Config+0x40>)
 8003290:	2207      	movs	r2, #7
 8003292:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3708      	adds	r7, #8
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	e000e010 	.word	0xe000e010

080032a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f7ff ff2d 	bl	800310c <__NVIC_SetPriorityGrouping>
}
 80032b2:	bf00      	nop
 80032b4:	3708      	adds	r7, #8
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}

080032ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032ba:	b580      	push	{r7, lr}
 80032bc:	b086      	sub	sp, #24
 80032be:	af00      	add	r7, sp, #0
 80032c0:	4603      	mov	r3, r0
 80032c2:	60b9      	str	r1, [r7, #8]
 80032c4:	607a      	str	r2, [r7, #4]
 80032c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032c8:	2300      	movs	r3, #0
 80032ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032cc:	f7ff ff42 	bl	8003154 <__NVIC_GetPriorityGrouping>
 80032d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	68b9      	ldr	r1, [r7, #8]
 80032d6:	6978      	ldr	r0, [r7, #20]
 80032d8:	f7ff ff90 	bl	80031fc <NVIC_EncodePriority>
 80032dc:	4602      	mov	r2, r0
 80032de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032e2:	4611      	mov	r1, r2
 80032e4:	4618      	mov	r0, r3
 80032e6:	f7ff ff5f 	bl	80031a8 <__NVIC_SetPriority>
}
 80032ea:	bf00      	nop
 80032ec:	3718      	adds	r7, #24
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}

080032f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032f2:	b580      	push	{r7, lr}
 80032f4:	b082      	sub	sp, #8
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	4603      	mov	r3, r0
 80032fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003300:	4618      	mov	r0, r3
 8003302:	f7ff ff35 	bl	8003170 <__NVIC_EnableIRQ>
}
 8003306:	bf00      	nop
 8003308:	3708      	adds	r7, #8
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}

0800330e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800330e:	b580      	push	{r7, lr}
 8003310:	b082      	sub	sp, #8
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f7ff ffa2 	bl	8003260 <SysTick_Config>
 800331c:	4603      	mov	r3, r0
}
 800331e:	4618      	mov	r0, r3
 8003320:	3708      	adds	r7, #8
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
	...

08003328 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003328:	b480      	push	{r7}
 800332a:	b08b      	sub	sp, #44	; 0x2c
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003332:	2300      	movs	r3, #0
 8003334:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003336:	2300      	movs	r3, #0
 8003338:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800333a:	e169      	b.n	8003610 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800333c:	2201      	movs	r2, #1
 800333e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003340:	fa02 f303 	lsl.w	r3, r2, r3
 8003344:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	69fa      	ldr	r2, [r7, #28]
 800334c:	4013      	ands	r3, r2
 800334e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003350:	69ba      	ldr	r2, [r7, #24]
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	429a      	cmp	r2, r3
 8003356:	f040 8158 	bne.w	800360a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	4a9a      	ldr	r2, [pc, #616]	; (80035c8 <HAL_GPIO_Init+0x2a0>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d05e      	beq.n	8003422 <HAL_GPIO_Init+0xfa>
 8003364:	4a98      	ldr	r2, [pc, #608]	; (80035c8 <HAL_GPIO_Init+0x2a0>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d875      	bhi.n	8003456 <HAL_GPIO_Init+0x12e>
 800336a:	4a98      	ldr	r2, [pc, #608]	; (80035cc <HAL_GPIO_Init+0x2a4>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d058      	beq.n	8003422 <HAL_GPIO_Init+0xfa>
 8003370:	4a96      	ldr	r2, [pc, #600]	; (80035cc <HAL_GPIO_Init+0x2a4>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d86f      	bhi.n	8003456 <HAL_GPIO_Init+0x12e>
 8003376:	4a96      	ldr	r2, [pc, #600]	; (80035d0 <HAL_GPIO_Init+0x2a8>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d052      	beq.n	8003422 <HAL_GPIO_Init+0xfa>
 800337c:	4a94      	ldr	r2, [pc, #592]	; (80035d0 <HAL_GPIO_Init+0x2a8>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d869      	bhi.n	8003456 <HAL_GPIO_Init+0x12e>
 8003382:	4a94      	ldr	r2, [pc, #592]	; (80035d4 <HAL_GPIO_Init+0x2ac>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d04c      	beq.n	8003422 <HAL_GPIO_Init+0xfa>
 8003388:	4a92      	ldr	r2, [pc, #584]	; (80035d4 <HAL_GPIO_Init+0x2ac>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d863      	bhi.n	8003456 <HAL_GPIO_Init+0x12e>
 800338e:	4a92      	ldr	r2, [pc, #584]	; (80035d8 <HAL_GPIO_Init+0x2b0>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d046      	beq.n	8003422 <HAL_GPIO_Init+0xfa>
 8003394:	4a90      	ldr	r2, [pc, #576]	; (80035d8 <HAL_GPIO_Init+0x2b0>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d85d      	bhi.n	8003456 <HAL_GPIO_Init+0x12e>
 800339a:	2b12      	cmp	r3, #18
 800339c:	d82a      	bhi.n	80033f4 <HAL_GPIO_Init+0xcc>
 800339e:	2b12      	cmp	r3, #18
 80033a0:	d859      	bhi.n	8003456 <HAL_GPIO_Init+0x12e>
 80033a2:	a201      	add	r2, pc, #4	; (adr r2, 80033a8 <HAL_GPIO_Init+0x80>)
 80033a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033a8:	08003423 	.word	0x08003423
 80033ac:	080033fd 	.word	0x080033fd
 80033b0:	0800340f 	.word	0x0800340f
 80033b4:	08003451 	.word	0x08003451
 80033b8:	08003457 	.word	0x08003457
 80033bc:	08003457 	.word	0x08003457
 80033c0:	08003457 	.word	0x08003457
 80033c4:	08003457 	.word	0x08003457
 80033c8:	08003457 	.word	0x08003457
 80033cc:	08003457 	.word	0x08003457
 80033d0:	08003457 	.word	0x08003457
 80033d4:	08003457 	.word	0x08003457
 80033d8:	08003457 	.word	0x08003457
 80033dc:	08003457 	.word	0x08003457
 80033e0:	08003457 	.word	0x08003457
 80033e4:	08003457 	.word	0x08003457
 80033e8:	08003457 	.word	0x08003457
 80033ec:	08003405 	.word	0x08003405
 80033f0:	08003419 	.word	0x08003419
 80033f4:	4a79      	ldr	r2, [pc, #484]	; (80035dc <HAL_GPIO_Init+0x2b4>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d013      	beq.n	8003422 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80033fa:	e02c      	b.n	8003456 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	623b      	str	r3, [r7, #32]
          break;
 8003402:	e029      	b.n	8003458 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	3304      	adds	r3, #4
 800340a:	623b      	str	r3, [r7, #32]
          break;
 800340c:	e024      	b.n	8003458 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	3308      	adds	r3, #8
 8003414:	623b      	str	r3, [r7, #32]
          break;
 8003416:	e01f      	b.n	8003458 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	330c      	adds	r3, #12
 800341e:	623b      	str	r3, [r7, #32]
          break;
 8003420:	e01a      	b.n	8003458 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d102      	bne.n	8003430 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800342a:	2304      	movs	r3, #4
 800342c:	623b      	str	r3, [r7, #32]
          break;
 800342e:	e013      	b.n	8003458 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	2b01      	cmp	r3, #1
 8003436:	d105      	bne.n	8003444 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003438:	2308      	movs	r3, #8
 800343a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	69fa      	ldr	r2, [r7, #28]
 8003440:	611a      	str	r2, [r3, #16]
          break;
 8003442:	e009      	b.n	8003458 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003444:	2308      	movs	r3, #8
 8003446:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	69fa      	ldr	r2, [r7, #28]
 800344c:	615a      	str	r2, [r3, #20]
          break;
 800344e:	e003      	b.n	8003458 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003450:	2300      	movs	r3, #0
 8003452:	623b      	str	r3, [r7, #32]
          break;
 8003454:	e000      	b.n	8003458 <HAL_GPIO_Init+0x130>
          break;
 8003456:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	2bff      	cmp	r3, #255	; 0xff
 800345c:	d801      	bhi.n	8003462 <HAL_GPIO_Init+0x13a>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	e001      	b.n	8003466 <HAL_GPIO_Init+0x13e>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	3304      	adds	r3, #4
 8003466:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	2bff      	cmp	r3, #255	; 0xff
 800346c:	d802      	bhi.n	8003474 <HAL_GPIO_Init+0x14c>
 800346e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	e002      	b.n	800347a <HAL_GPIO_Init+0x152>
 8003474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003476:	3b08      	subs	r3, #8
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	210f      	movs	r1, #15
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	fa01 f303 	lsl.w	r3, r1, r3
 8003488:	43db      	mvns	r3, r3
 800348a:	401a      	ands	r2, r3
 800348c:	6a39      	ldr	r1, [r7, #32]
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	fa01 f303 	lsl.w	r3, r1, r3
 8003494:	431a      	orrs	r2, r3
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	f000 80b1 	beq.w	800360a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80034a8:	4b4d      	ldr	r3, [pc, #308]	; (80035e0 <HAL_GPIO_Init+0x2b8>)
 80034aa:	699b      	ldr	r3, [r3, #24]
 80034ac:	4a4c      	ldr	r2, [pc, #304]	; (80035e0 <HAL_GPIO_Init+0x2b8>)
 80034ae:	f043 0301 	orr.w	r3, r3, #1
 80034b2:	6193      	str	r3, [r2, #24]
 80034b4:	4b4a      	ldr	r3, [pc, #296]	; (80035e0 <HAL_GPIO_Init+0x2b8>)
 80034b6:	699b      	ldr	r3, [r3, #24]
 80034b8:	f003 0301 	and.w	r3, r3, #1
 80034bc:	60bb      	str	r3, [r7, #8]
 80034be:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80034c0:	4a48      	ldr	r2, [pc, #288]	; (80035e4 <HAL_GPIO_Init+0x2bc>)
 80034c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c4:	089b      	lsrs	r3, r3, #2
 80034c6:	3302      	adds	r3, #2
 80034c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034cc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80034ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d0:	f003 0303 	and.w	r3, r3, #3
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	220f      	movs	r2, #15
 80034d8:	fa02 f303 	lsl.w	r3, r2, r3
 80034dc:	43db      	mvns	r3, r3
 80034de:	68fa      	ldr	r2, [r7, #12]
 80034e0:	4013      	ands	r3, r2
 80034e2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	4a40      	ldr	r2, [pc, #256]	; (80035e8 <HAL_GPIO_Init+0x2c0>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d013      	beq.n	8003514 <HAL_GPIO_Init+0x1ec>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	4a3f      	ldr	r2, [pc, #252]	; (80035ec <HAL_GPIO_Init+0x2c4>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d00d      	beq.n	8003510 <HAL_GPIO_Init+0x1e8>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	4a3e      	ldr	r2, [pc, #248]	; (80035f0 <HAL_GPIO_Init+0x2c8>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d007      	beq.n	800350c <HAL_GPIO_Init+0x1e4>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	4a3d      	ldr	r2, [pc, #244]	; (80035f4 <HAL_GPIO_Init+0x2cc>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d101      	bne.n	8003508 <HAL_GPIO_Init+0x1e0>
 8003504:	2303      	movs	r3, #3
 8003506:	e006      	b.n	8003516 <HAL_GPIO_Init+0x1ee>
 8003508:	2304      	movs	r3, #4
 800350a:	e004      	b.n	8003516 <HAL_GPIO_Init+0x1ee>
 800350c:	2302      	movs	r3, #2
 800350e:	e002      	b.n	8003516 <HAL_GPIO_Init+0x1ee>
 8003510:	2301      	movs	r3, #1
 8003512:	e000      	b.n	8003516 <HAL_GPIO_Init+0x1ee>
 8003514:	2300      	movs	r3, #0
 8003516:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003518:	f002 0203 	and.w	r2, r2, #3
 800351c:	0092      	lsls	r2, r2, #2
 800351e:	4093      	lsls	r3, r2
 8003520:	68fa      	ldr	r2, [r7, #12]
 8003522:	4313      	orrs	r3, r2
 8003524:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003526:	492f      	ldr	r1, [pc, #188]	; (80035e4 <HAL_GPIO_Init+0x2bc>)
 8003528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352a:	089b      	lsrs	r3, r3, #2
 800352c:	3302      	adds	r3, #2
 800352e:	68fa      	ldr	r2, [r7, #12]
 8003530:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800353c:	2b00      	cmp	r3, #0
 800353e:	d006      	beq.n	800354e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003540:	4b2d      	ldr	r3, [pc, #180]	; (80035f8 <HAL_GPIO_Init+0x2d0>)
 8003542:	689a      	ldr	r2, [r3, #8]
 8003544:	492c      	ldr	r1, [pc, #176]	; (80035f8 <HAL_GPIO_Init+0x2d0>)
 8003546:	69bb      	ldr	r3, [r7, #24]
 8003548:	4313      	orrs	r3, r2
 800354a:	608b      	str	r3, [r1, #8]
 800354c:	e006      	b.n	800355c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800354e:	4b2a      	ldr	r3, [pc, #168]	; (80035f8 <HAL_GPIO_Init+0x2d0>)
 8003550:	689a      	ldr	r2, [r3, #8]
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	43db      	mvns	r3, r3
 8003556:	4928      	ldr	r1, [pc, #160]	; (80035f8 <HAL_GPIO_Init+0x2d0>)
 8003558:	4013      	ands	r3, r2
 800355a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d006      	beq.n	8003576 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003568:	4b23      	ldr	r3, [pc, #140]	; (80035f8 <HAL_GPIO_Init+0x2d0>)
 800356a:	68da      	ldr	r2, [r3, #12]
 800356c:	4922      	ldr	r1, [pc, #136]	; (80035f8 <HAL_GPIO_Init+0x2d0>)
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	4313      	orrs	r3, r2
 8003572:	60cb      	str	r3, [r1, #12]
 8003574:	e006      	b.n	8003584 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003576:	4b20      	ldr	r3, [pc, #128]	; (80035f8 <HAL_GPIO_Init+0x2d0>)
 8003578:	68da      	ldr	r2, [r3, #12]
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	43db      	mvns	r3, r3
 800357e:	491e      	ldr	r1, [pc, #120]	; (80035f8 <HAL_GPIO_Init+0x2d0>)
 8003580:	4013      	ands	r3, r2
 8003582:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d006      	beq.n	800359e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003590:	4b19      	ldr	r3, [pc, #100]	; (80035f8 <HAL_GPIO_Init+0x2d0>)
 8003592:	685a      	ldr	r2, [r3, #4]
 8003594:	4918      	ldr	r1, [pc, #96]	; (80035f8 <HAL_GPIO_Init+0x2d0>)
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	4313      	orrs	r3, r2
 800359a:	604b      	str	r3, [r1, #4]
 800359c:	e006      	b.n	80035ac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800359e:	4b16      	ldr	r3, [pc, #88]	; (80035f8 <HAL_GPIO_Init+0x2d0>)
 80035a0:	685a      	ldr	r2, [r3, #4]
 80035a2:	69bb      	ldr	r3, [r7, #24]
 80035a4:	43db      	mvns	r3, r3
 80035a6:	4914      	ldr	r1, [pc, #80]	; (80035f8 <HAL_GPIO_Init+0x2d0>)
 80035a8:	4013      	ands	r3, r2
 80035aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d021      	beq.n	80035fc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80035b8:	4b0f      	ldr	r3, [pc, #60]	; (80035f8 <HAL_GPIO_Init+0x2d0>)
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	490e      	ldr	r1, [pc, #56]	; (80035f8 <HAL_GPIO_Init+0x2d0>)
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	600b      	str	r3, [r1, #0]
 80035c4:	e021      	b.n	800360a <HAL_GPIO_Init+0x2e2>
 80035c6:	bf00      	nop
 80035c8:	10320000 	.word	0x10320000
 80035cc:	10310000 	.word	0x10310000
 80035d0:	10220000 	.word	0x10220000
 80035d4:	10210000 	.word	0x10210000
 80035d8:	10120000 	.word	0x10120000
 80035dc:	10110000 	.word	0x10110000
 80035e0:	40021000 	.word	0x40021000
 80035e4:	40010000 	.word	0x40010000
 80035e8:	40010800 	.word	0x40010800
 80035ec:	40010c00 	.word	0x40010c00
 80035f0:	40011000 	.word	0x40011000
 80035f4:	40011400 	.word	0x40011400
 80035f8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80035fc:	4b0b      	ldr	r3, [pc, #44]	; (800362c <HAL_GPIO_Init+0x304>)
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	69bb      	ldr	r3, [r7, #24]
 8003602:	43db      	mvns	r3, r3
 8003604:	4909      	ldr	r1, [pc, #36]	; (800362c <HAL_GPIO_Init+0x304>)
 8003606:	4013      	ands	r3, r2
 8003608:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800360a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360c:	3301      	adds	r3, #1
 800360e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003616:	fa22 f303 	lsr.w	r3, r2, r3
 800361a:	2b00      	cmp	r3, #0
 800361c:	f47f ae8e 	bne.w	800333c <HAL_GPIO_Init+0x14>
  }
}
 8003620:	bf00      	nop
 8003622:	bf00      	nop
 8003624:	372c      	adds	r7, #44	; 0x2c
 8003626:	46bd      	mov	sp, r7
 8003628:	bc80      	pop	{r7}
 800362a:	4770      	bx	lr
 800362c:	40010400 	.word	0x40010400

08003630 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	460b      	mov	r3, r1
 800363a:	807b      	strh	r3, [r7, #2]
 800363c:	4613      	mov	r3, r2
 800363e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003640:	787b      	ldrb	r3, [r7, #1]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d003      	beq.n	800364e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003646:	887a      	ldrh	r2, [r7, #2]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800364c:	e003      	b.n	8003656 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800364e:	887b      	ldrh	r3, [r7, #2]
 8003650:	041a      	lsls	r2, r3, #16
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	611a      	str	r2, [r3, #16]
}
 8003656:	bf00      	nop
 8003658:	370c      	adds	r7, #12
 800365a:	46bd      	mov	sp, r7
 800365c:	bc80      	pop	{r7}
 800365e:	4770      	bx	lr

08003660 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003660:	b480      	push	{r7}
 8003662:	b085      	sub	sp, #20
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	460b      	mov	r3, r1
 800366a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003672:	887a      	ldrh	r2, [r7, #2]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	4013      	ands	r3, r2
 8003678:	041a      	lsls	r2, r3, #16
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	43d9      	mvns	r1, r3
 800367e:	887b      	ldrh	r3, [r7, #2]
 8003680:	400b      	ands	r3, r1
 8003682:	431a      	orrs	r2, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	611a      	str	r2, [r3, #16]
}
 8003688:	bf00      	nop
 800368a:	3714      	adds	r7, #20
 800368c:	46bd      	mov	sp, r7
 800368e:	bc80      	pop	{r7}
 8003690:	4770      	bx	lr
	...

08003694 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b086      	sub	sp, #24
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d101      	bne.n	80036a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e272      	b.n	8003b8c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0301 	and.w	r3, r3, #1
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	f000 8087 	beq.w	80037c2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80036b4:	4b92      	ldr	r3, [pc, #584]	; (8003900 <HAL_RCC_OscConfig+0x26c>)
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f003 030c 	and.w	r3, r3, #12
 80036bc:	2b04      	cmp	r3, #4
 80036be:	d00c      	beq.n	80036da <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80036c0:	4b8f      	ldr	r3, [pc, #572]	; (8003900 <HAL_RCC_OscConfig+0x26c>)
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f003 030c 	and.w	r3, r3, #12
 80036c8:	2b08      	cmp	r3, #8
 80036ca:	d112      	bne.n	80036f2 <HAL_RCC_OscConfig+0x5e>
 80036cc:	4b8c      	ldr	r3, [pc, #560]	; (8003900 <HAL_RCC_OscConfig+0x26c>)
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036d8:	d10b      	bne.n	80036f2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036da:	4b89      	ldr	r3, [pc, #548]	; (8003900 <HAL_RCC_OscConfig+0x26c>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d06c      	beq.n	80037c0 <HAL_RCC_OscConfig+0x12c>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d168      	bne.n	80037c0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e24c      	b.n	8003b8c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036fa:	d106      	bne.n	800370a <HAL_RCC_OscConfig+0x76>
 80036fc:	4b80      	ldr	r3, [pc, #512]	; (8003900 <HAL_RCC_OscConfig+0x26c>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a7f      	ldr	r2, [pc, #508]	; (8003900 <HAL_RCC_OscConfig+0x26c>)
 8003702:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003706:	6013      	str	r3, [r2, #0]
 8003708:	e02e      	b.n	8003768 <HAL_RCC_OscConfig+0xd4>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d10c      	bne.n	800372c <HAL_RCC_OscConfig+0x98>
 8003712:	4b7b      	ldr	r3, [pc, #492]	; (8003900 <HAL_RCC_OscConfig+0x26c>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a7a      	ldr	r2, [pc, #488]	; (8003900 <HAL_RCC_OscConfig+0x26c>)
 8003718:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800371c:	6013      	str	r3, [r2, #0]
 800371e:	4b78      	ldr	r3, [pc, #480]	; (8003900 <HAL_RCC_OscConfig+0x26c>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a77      	ldr	r2, [pc, #476]	; (8003900 <HAL_RCC_OscConfig+0x26c>)
 8003724:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003728:	6013      	str	r3, [r2, #0]
 800372a:	e01d      	b.n	8003768 <HAL_RCC_OscConfig+0xd4>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003734:	d10c      	bne.n	8003750 <HAL_RCC_OscConfig+0xbc>
 8003736:	4b72      	ldr	r3, [pc, #456]	; (8003900 <HAL_RCC_OscConfig+0x26c>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a71      	ldr	r2, [pc, #452]	; (8003900 <HAL_RCC_OscConfig+0x26c>)
 800373c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003740:	6013      	str	r3, [r2, #0]
 8003742:	4b6f      	ldr	r3, [pc, #444]	; (8003900 <HAL_RCC_OscConfig+0x26c>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a6e      	ldr	r2, [pc, #440]	; (8003900 <HAL_RCC_OscConfig+0x26c>)
 8003748:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800374c:	6013      	str	r3, [r2, #0]
 800374e:	e00b      	b.n	8003768 <HAL_RCC_OscConfig+0xd4>
 8003750:	4b6b      	ldr	r3, [pc, #428]	; (8003900 <HAL_RCC_OscConfig+0x26c>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a6a      	ldr	r2, [pc, #424]	; (8003900 <HAL_RCC_OscConfig+0x26c>)
 8003756:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800375a:	6013      	str	r3, [r2, #0]
 800375c:	4b68      	ldr	r3, [pc, #416]	; (8003900 <HAL_RCC_OscConfig+0x26c>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a67      	ldr	r2, [pc, #412]	; (8003900 <HAL_RCC_OscConfig+0x26c>)
 8003762:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003766:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d013      	beq.n	8003798 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003770:	f7ff fcc2 	bl	80030f8 <HAL_GetTick>
 8003774:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003776:	e008      	b.n	800378a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003778:	f7ff fcbe 	bl	80030f8 <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	2b64      	cmp	r3, #100	; 0x64
 8003784:	d901      	bls.n	800378a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e200      	b.n	8003b8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800378a:	4b5d      	ldr	r3, [pc, #372]	; (8003900 <HAL_RCC_OscConfig+0x26c>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d0f0      	beq.n	8003778 <HAL_RCC_OscConfig+0xe4>
 8003796:	e014      	b.n	80037c2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003798:	f7ff fcae 	bl	80030f8 <HAL_GetTick>
 800379c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800379e:	e008      	b.n	80037b2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037a0:	f7ff fcaa 	bl	80030f8 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	2b64      	cmp	r3, #100	; 0x64
 80037ac:	d901      	bls.n	80037b2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e1ec      	b.n	8003b8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037b2:	4b53      	ldr	r3, [pc, #332]	; (8003900 <HAL_RCC_OscConfig+0x26c>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d1f0      	bne.n	80037a0 <HAL_RCC_OscConfig+0x10c>
 80037be:	e000      	b.n	80037c2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0302 	and.w	r3, r3, #2
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d063      	beq.n	8003896 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80037ce:	4b4c      	ldr	r3, [pc, #304]	; (8003900 <HAL_RCC_OscConfig+0x26c>)
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	f003 030c 	and.w	r3, r3, #12
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d00b      	beq.n	80037f2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80037da:	4b49      	ldr	r3, [pc, #292]	; (8003900 <HAL_RCC_OscConfig+0x26c>)
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f003 030c 	and.w	r3, r3, #12
 80037e2:	2b08      	cmp	r3, #8
 80037e4:	d11c      	bne.n	8003820 <HAL_RCC_OscConfig+0x18c>
 80037e6:	4b46      	ldr	r3, [pc, #280]	; (8003900 <HAL_RCC_OscConfig+0x26c>)
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d116      	bne.n	8003820 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037f2:	4b43      	ldr	r3, [pc, #268]	; (8003900 <HAL_RCC_OscConfig+0x26c>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0302 	and.w	r3, r3, #2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d005      	beq.n	800380a <HAL_RCC_OscConfig+0x176>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	2b01      	cmp	r3, #1
 8003804:	d001      	beq.n	800380a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e1c0      	b.n	8003b8c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800380a:	4b3d      	ldr	r3, [pc, #244]	; (8003900 <HAL_RCC_OscConfig+0x26c>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	695b      	ldr	r3, [r3, #20]
 8003816:	00db      	lsls	r3, r3, #3
 8003818:	4939      	ldr	r1, [pc, #228]	; (8003900 <HAL_RCC_OscConfig+0x26c>)
 800381a:	4313      	orrs	r3, r2
 800381c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800381e:	e03a      	b.n	8003896 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	691b      	ldr	r3, [r3, #16]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d020      	beq.n	800386a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003828:	4b36      	ldr	r3, [pc, #216]	; (8003904 <HAL_RCC_OscConfig+0x270>)
 800382a:	2201      	movs	r2, #1
 800382c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800382e:	f7ff fc63 	bl	80030f8 <HAL_GetTick>
 8003832:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003834:	e008      	b.n	8003848 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003836:	f7ff fc5f 	bl	80030f8 <HAL_GetTick>
 800383a:	4602      	mov	r2, r0
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	2b02      	cmp	r3, #2
 8003842:	d901      	bls.n	8003848 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003844:	2303      	movs	r3, #3
 8003846:	e1a1      	b.n	8003b8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003848:	4b2d      	ldr	r3, [pc, #180]	; (8003900 <HAL_RCC_OscConfig+0x26c>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0302 	and.w	r3, r3, #2
 8003850:	2b00      	cmp	r3, #0
 8003852:	d0f0      	beq.n	8003836 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003854:	4b2a      	ldr	r3, [pc, #168]	; (8003900 <HAL_RCC_OscConfig+0x26c>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	695b      	ldr	r3, [r3, #20]
 8003860:	00db      	lsls	r3, r3, #3
 8003862:	4927      	ldr	r1, [pc, #156]	; (8003900 <HAL_RCC_OscConfig+0x26c>)
 8003864:	4313      	orrs	r3, r2
 8003866:	600b      	str	r3, [r1, #0]
 8003868:	e015      	b.n	8003896 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800386a:	4b26      	ldr	r3, [pc, #152]	; (8003904 <HAL_RCC_OscConfig+0x270>)
 800386c:	2200      	movs	r2, #0
 800386e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003870:	f7ff fc42 	bl	80030f8 <HAL_GetTick>
 8003874:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003876:	e008      	b.n	800388a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003878:	f7ff fc3e 	bl	80030f8 <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	2b02      	cmp	r3, #2
 8003884:	d901      	bls.n	800388a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e180      	b.n	8003b8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800388a:	4b1d      	ldr	r3, [pc, #116]	; (8003900 <HAL_RCC_OscConfig+0x26c>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d1f0      	bne.n	8003878 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0308 	and.w	r3, r3, #8
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d03a      	beq.n	8003918 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	699b      	ldr	r3, [r3, #24]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d019      	beq.n	80038de <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038aa:	4b17      	ldr	r3, [pc, #92]	; (8003908 <HAL_RCC_OscConfig+0x274>)
 80038ac:	2201      	movs	r2, #1
 80038ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038b0:	f7ff fc22 	bl	80030f8 <HAL_GetTick>
 80038b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038b6:	e008      	b.n	80038ca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038b8:	f7ff fc1e 	bl	80030f8 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d901      	bls.n	80038ca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e160      	b.n	8003b8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038ca:	4b0d      	ldr	r3, [pc, #52]	; (8003900 <HAL_RCC_OscConfig+0x26c>)
 80038cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ce:	f003 0302 	and.w	r3, r3, #2
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d0f0      	beq.n	80038b8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80038d6:	2001      	movs	r0, #1
 80038d8:	f000 fa9c 	bl	8003e14 <RCC_Delay>
 80038dc:	e01c      	b.n	8003918 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038de:	4b0a      	ldr	r3, [pc, #40]	; (8003908 <HAL_RCC_OscConfig+0x274>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038e4:	f7ff fc08 	bl	80030f8 <HAL_GetTick>
 80038e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038ea:	e00f      	b.n	800390c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038ec:	f7ff fc04 	bl	80030f8 <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d908      	bls.n	800390c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e146      	b.n	8003b8c <HAL_RCC_OscConfig+0x4f8>
 80038fe:	bf00      	nop
 8003900:	40021000 	.word	0x40021000
 8003904:	42420000 	.word	0x42420000
 8003908:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800390c:	4b92      	ldr	r3, [pc, #584]	; (8003b58 <HAL_RCC_OscConfig+0x4c4>)
 800390e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003910:	f003 0302 	and.w	r3, r3, #2
 8003914:	2b00      	cmp	r3, #0
 8003916:	d1e9      	bne.n	80038ec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0304 	and.w	r3, r3, #4
 8003920:	2b00      	cmp	r3, #0
 8003922:	f000 80a6 	beq.w	8003a72 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003926:	2300      	movs	r3, #0
 8003928:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800392a:	4b8b      	ldr	r3, [pc, #556]	; (8003b58 <HAL_RCC_OscConfig+0x4c4>)
 800392c:	69db      	ldr	r3, [r3, #28]
 800392e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d10d      	bne.n	8003952 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003936:	4b88      	ldr	r3, [pc, #544]	; (8003b58 <HAL_RCC_OscConfig+0x4c4>)
 8003938:	69db      	ldr	r3, [r3, #28]
 800393a:	4a87      	ldr	r2, [pc, #540]	; (8003b58 <HAL_RCC_OscConfig+0x4c4>)
 800393c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003940:	61d3      	str	r3, [r2, #28]
 8003942:	4b85      	ldr	r3, [pc, #532]	; (8003b58 <HAL_RCC_OscConfig+0x4c4>)
 8003944:	69db      	ldr	r3, [r3, #28]
 8003946:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800394a:	60bb      	str	r3, [r7, #8]
 800394c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800394e:	2301      	movs	r3, #1
 8003950:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003952:	4b82      	ldr	r3, [pc, #520]	; (8003b5c <HAL_RCC_OscConfig+0x4c8>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800395a:	2b00      	cmp	r3, #0
 800395c:	d118      	bne.n	8003990 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800395e:	4b7f      	ldr	r3, [pc, #508]	; (8003b5c <HAL_RCC_OscConfig+0x4c8>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a7e      	ldr	r2, [pc, #504]	; (8003b5c <HAL_RCC_OscConfig+0x4c8>)
 8003964:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003968:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800396a:	f7ff fbc5 	bl	80030f8 <HAL_GetTick>
 800396e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003970:	e008      	b.n	8003984 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003972:	f7ff fbc1 	bl	80030f8 <HAL_GetTick>
 8003976:	4602      	mov	r2, r0
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	2b64      	cmp	r3, #100	; 0x64
 800397e:	d901      	bls.n	8003984 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003980:	2303      	movs	r3, #3
 8003982:	e103      	b.n	8003b8c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003984:	4b75      	ldr	r3, [pc, #468]	; (8003b5c <HAL_RCC_OscConfig+0x4c8>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800398c:	2b00      	cmp	r3, #0
 800398e:	d0f0      	beq.n	8003972 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	2b01      	cmp	r3, #1
 8003996:	d106      	bne.n	80039a6 <HAL_RCC_OscConfig+0x312>
 8003998:	4b6f      	ldr	r3, [pc, #444]	; (8003b58 <HAL_RCC_OscConfig+0x4c4>)
 800399a:	6a1b      	ldr	r3, [r3, #32]
 800399c:	4a6e      	ldr	r2, [pc, #440]	; (8003b58 <HAL_RCC_OscConfig+0x4c4>)
 800399e:	f043 0301 	orr.w	r3, r3, #1
 80039a2:	6213      	str	r3, [r2, #32]
 80039a4:	e02d      	b.n	8003a02 <HAL_RCC_OscConfig+0x36e>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d10c      	bne.n	80039c8 <HAL_RCC_OscConfig+0x334>
 80039ae:	4b6a      	ldr	r3, [pc, #424]	; (8003b58 <HAL_RCC_OscConfig+0x4c4>)
 80039b0:	6a1b      	ldr	r3, [r3, #32]
 80039b2:	4a69      	ldr	r2, [pc, #420]	; (8003b58 <HAL_RCC_OscConfig+0x4c4>)
 80039b4:	f023 0301 	bic.w	r3, r3, #1
 80039b8:	6213      	str	r3, [r2, #32]
 80039ba:	4b67      	ldr	r3, [pc, #412]	; (8003b58 <HAL_RCC_OscConfig+0x4c4>)
 80039bc:	6a1b      	ldr	r3, [r3, #32]
 80039be:	4a66      	ldr	r2, [pc, #408]	; (8003b58 <HAL_RCC_OscConfig+0x4c4>)
 80039c0:	f023 0304 	bic.w	r3, r3, #4
 80039c4:	6213      	str	r3, [r2, #32]
 80039c6:	e01c      	b.n	8003a02 <HAL_RCC_OscConfig+0x36e>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	2b05      	cmp	r3, #5
 80039ce:	d10c      	bne.n	80039ea <HAL_RCC_OscConfig+0x356>
 80039d0:	4b61      	ldr	r3, [pc, #388]	; (8003b58 <HAL_RCC_OscConfig+0x4c4>)
 80039d2:	6a1b      	ldr	r3, [r3, #32]
 80039d4:	4a60      	ldr	r2, [pc, #384]	; (8003b58 <HAL_RCC_OscConfig+0x4c4>)
 80039d6:	f043 0304 	orr.w	r3, r3, #4
 80039da:	6213      	str	r3, [r2, #32]
 80039dc:	4b5e      	ldr	r3, [pc, #376]	; (8003b58 <HAL_RCC_OscConfig+0x4c4>)
 80039de:	6a1b      	ldr	r3, [r3, #32]
 80039e0:	4a5d      	ldr	r2, [pc, #372]	; (8003b58 <HAL_RCC_OscConfig+0x4c4>)
 80039e2:	f043 0301 	orr.w	r3, r3, #1
 80039e6:	6213      	str	r3, [r2, #32]
 80039e8:	e00b      	b.n	8003a02 <HAL_RCC_OscConfig+0x36e>
 80039ea:	4b5b      	ldr	r3, [pc, #364]	; (8003b58 <HAL_RCC_OscConfig+0x4c4>)
 80039ec:	6a1b      	ldr	r3, [r3, #32]
 80039ee:	4a5a      	ldr	r2, [pc, #360]	; (8003b58 <HAL_RCC_OscConfig+0x4c4>)
 80039f0:	f023 0301 	bic.w	r3, r3, #1
 80039f4:	6213      	str	r3, [r2, #32]
 80039f6:	4b58      	ldr	r3, [pc, #352]	; (8003b58 <HAL_RCC_OscConfig+0x4c4>)
 80039f8:	6a1b      	ldr	r3, [r3, #32]
 80039fa:	4a57      	ldr	r2, [pc, #348]	; (8003b58 <HAL_RCC_OscConfig+0x4c4>)
 80039fc:	f023 0304 	bic.w	r3, r3, #4
 8003a00:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d015      	beq.n	8003a36 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a0a:	f7ff fb75 	bl	80030f8 <HAL_GetTick>
 8003a0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a10:	e00a      	b.n	8003a28 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a12:	f7ff fb71 	bl	80030f8 <HAL_GetTick>
 8003a16:	4602      	mov	r2, r0
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	1ad3      	subs	r3, r2, r3
 8003a1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d901      	bls.n	8003a28 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003a24:	2303      	movs	r3, #3
 8003a26:	e0b1      	b.n	8003b8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a28:	4b4b      	ldr	r3, [pc, #300]	; (8003b58 <HAL_RCC_OscConfig+0x4c4>)
 8003a2a:	6a1b      	ldr	r3, [r3, #32]
 8003a2c:	f003 0302 	and.w	r3, r3, #2
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d0ee      	beq.n	8003a12 <HAL_RCC_OscConfig+0x37e>
 8003a34:	e014      	b.n	8003a60 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a36:	f7ff fb5f 	bl	80030f8 <HAL_GetTick>
 8003a3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a3c:	e00a      	b.n	8003a54 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a3e:	f7ff fb5b 	bl	80030f8 <HAL_GetTick>
 8003a42:	4602      	mov	r2, r0
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d901      	bls.n	8003a54 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	e09b      	b.n	8003b8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a54:	4b40      	ldr	r3, [pc, #256]	; (8003b58 <HAL_RCC_OscConfig+0x4c4>)
 8003a56:	6a1b      	ldr	r3, [r3, #32]
 8003a58:	f003 0302 	and.w	r3, r3, #2
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d1ee      	bne.n	8003a3e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003a60:	7dfb      	ldrb	r3, [r7, #23]
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d105      	bne.n	8003a72 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a66:	4b3c      	ldr	r3, [pc, #240]	; (8003b58 <HAL_RCC_OscConfig+0x4c4>)
 8003a68:	69db      	ldr	r3, [r3, #28]
 8003a6a:	4a3b      	ldr	r2, [pc, #236]	; (8003b58 <HAL_RCC_OscConfig+0x4c4>)
 8003a6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a70:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	69db      	ldr	r3, [r3, #28]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	f000 8087 	beq.w	8003b8a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a7c:	4b36      	ldr	r3, [pc, #216]	; (8003b58 <HAL_RCC_OscConfig+0x4c4>)
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	f003 030c 	and.w	r3, r3, #12
 8003a84:	2b08      	cmp	r3, #8
 8003a86:	d061      	beq.n	8003b4c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	69db      	ldr	r3, [r3, #28]
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d146      	bne.n	8003b1e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a90:	4b33      	ldr	r3, [pc, #204]	; (8003b60 <HAL_RCC_OscConfig+0x4cc>)
 8003a92:	2200      	movs	r2, #0
 8003a94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a96:	f7ff fb2f 	bl	80030f8 <HAL_GetTick>
 8003a9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a9c:	e008      	b.n	8003ab0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a9e:	f7ff fb2b 	bl	80030f8 <HAL_GetTick>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	2b02      	cmp	r3, #2
 8003aaa:	d901      	bls.n	8003ab0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003aac:	2303      	movs	r3, #3
 8003aae:	e06d      	b.n	8003b8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ab0:	4b29      	ldr	r3, [pc, #164]	; (8003b58 <HAL_RCC_OscConfig+0x4c4>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d1f0      	bne.n	8003a9e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a1b      	ldr	r3, [r3, #32]
 8003ac0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ac4:	d108      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003ac6:	4b24      	ldr	r3, [pc, #144]	; (8003b58 <HAL_RCC_OscConfig+0x4c4>)
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	4921      	ldr	r1, [pc, #132]	; (8003b58 <HAL_RCC_OscConfig+0x4c4>)
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ad8:	4b1f      	ldr	r3, [pc, #124]	; (8003b58 <HAL_RCC_OscConfig+0x4c4>)
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6a19      	ldr	r1, [r3, #32]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae8:	430b      	orrs	r3, r1
 8003aea:	491b      	ldr	r1, [pc, #108]	; (8003b58 <HAL_RCC_OscConfig+0x4c4>)
 8003aec:	4313      	orrs	r3, r2
 8003aee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003af0:	4b1b      	ldr	r3, [pc, #108]	; (8003b60 <HAL_RCC_OscConfig+0x4cc>)
 8003af2:	2201      	movs	r2, #1
 8003af4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003af6:	f7ff faff 	bl	80030f8 <HAL_GetTick>
 8003afa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003afc:	e008      	b.n	8003b10 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003afe:	f7ff fafb 	bl	80030f8 <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d901      	bls.n	8003b10 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	e03d      	b.n	8003b8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b10:	4b11      	ldr	r3, [pc, #68]	; (8003b58 <HAL_RCC_OscConfig+0x4c4>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d0f0      	beq.n	8003afe <HAL_RCC_OscConfig+0x46a>
 8003b1c:	e035      	b.n	8003b8a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b1e:	4b10      	ldr	r3, [pc, #64]	; (8003b60 <HAL_RCC_OscConfig+0x4cc>)
 8003b20:	2200      	movs	r2, #0
 8003b22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b24:	f7ff fae8 	bl	80030f8 <HAL_GetTick>
 8003b28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b2a:	e008      	b.n	8003b3e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b2c:	f7ff fae4 	bl	80030f8 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d901      	bls.n	8003b3e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e026      	b.n	8003b8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b3e:	4b06      	ldr	r3, [pc, #24]	; (8003b58 <HAL_RCC_OscConfig+0x4c4>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1f0      	bne.n	8003b2c <HAL_RCC_OscConfig+0x498>
 8003b4a:	e01e      	b.n	8003b8a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	69db      	ldr	r3, [r3, #28]
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d107      	bne.n	8003b64 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e019      	b.n	8003b8c <HAL_RCC_OscConfig+0x4f8>
 8003b58:	40021000 	.word	0x40021000
 8003b5c:	40007000 	.word	0x40007000
 8003b60:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003b64:	4b0b      	ldr	r3, [pc, #44]	; (8003b94 <HAL_RCC_OscConfig+0x500>)
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a1b      	ldr	r3, [r3, #32]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d106      	bne.n	8003b86 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d001      	beq.n	8003b8a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e000      	b.n	8003b8c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003b8a:	2300      	movs	r3, #0
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3718      	adds	r7, #24
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	40021000 	.word	0x40021000

08003b98 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d101      	bne.n	8003bac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e0d0      	b.n	8003d4e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003bac:	4b6a      	ldr	r3, [pc, #424]	; (8003d58 <HAL_RCC_ClockConfig+0x1c0>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0307 	and.w	r3, r3, #7
 8003bb4:	683a      	ldr	r2, [r7, #0]
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d910      	bls.n	8003bdc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bba:	4b67      	ldr	r3, [pc, #412]	; (8003d58 <HAL_RCC_ClockConfig+0x1c0>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f023 0207 	bic.w	r2, r3, #7
 8003bc2:	4965      	ldr	r1, [pc, #404]	; (8003d58 <HAL_RCC_ClockConfig+0x1c0>)
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bca:	4b63      	ldr	r3, [pc, #396]	; (8003d58 <HAL_RCC_ClockConfig+0x1c0>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0307 	and.w	r3, r3, #7
 8003bd2:	683a      	ldr	r2, [r7, #0]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d001      	beq.n	8003bdc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e0b8      	b.n	8003d4e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0302 	and.w	r3, r3, #2
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d020      	beq.n	8003c2a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0304 	and.w	r3, r3, #4
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d005      	beq.n	8003c00 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bf4:	4b59      	ldr	r3, [pc, #356]	; (8003d5c <HAL_RCC_ClockConfig+0x1c4>)
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	4a58      	ldr	r2, [pc, #352]	; (8003d5c <HAL_RCC_ClockConfig+0x1c4>)
 8003bfa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003bfe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0308 	and.w	r3, r3, #8
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d005      	beq.n	8003c18 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c0c:	4b53      	ldr	r3, [pc, #332]	; (8003d5c <HAL_RCC_ClockConfig+0x1c4>)
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	4a52      	ldr	r2, [pc, #328]	; (8003d5c <HAL_RCC_ClockConfig+0x1c4>)
 8003c12:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003c16:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c18:	4b50      	ldr	r3, [pc, #320]	; (8003d5c <HAL_RCC_ClockConfig+0x1c4>)
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	494d      	ldr	r1, [pc, #308]	; (8003d5c <HAL_RCC_ClockConfig+0x1c4>)
 8003c26:	4313      	orrs	r3, r2
 8003c28:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0301 	and.w	r3, r3, #1
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d040      	beq.n	8003cb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d107      	bne.n	8003c4e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c3e:	4b47      	ldr	r3, [pc, #284]	; (8003d5c <HAL_RCC_ClockConfig+0x1c4>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d115      	bne.n	8003c76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e07f      	b.n	8003d4e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d107      	bne.n	8003c66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c56:	4b41      	ldr	r3, [pc, #260]	; (8003d5c <HAL_RCC_ClockConfig+0x1c4>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d109      	bne.n	8003c76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e073      	b.n	8003d4e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c66:	4b3d      	ldr	r3, [pc, #244]	; (8003d5c <HAL_RCC_ClockConfig+0x1c4>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0302 	and.w	r3, r3, #2
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d101      	bne.n	8003c76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e06b      	b.n	8003d4e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c76:	4b39      	ldr	r3, [pc, #228]	; (8003d5c <HAL_RCC_ClockConfig+0x1c4>)
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f023 0203 	bic.w	r2, r3, #3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	4936      	ldr	r1, [pc, #216]	; (8003d5c <HAL_RCC_ClockConfig+0x1c4>)
 8003c84:	4313      	orrs	r3, r2
 8003c86:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c88:	f7ff fa36 	bl	80030f8 <HAL_GetTick>
 8003c8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c8e:	e00a      	b.n	8003ca6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c90:	f7ff fa32 	bl	80030f8 <HAL_GetTick>
 8003c94:	4602      	mov	r2, r0
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d901      	bls.n	8003ca6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e053      	b.n	8003d4e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ca6:	4b2d      	ldr	r3, [pc, #180]	; (8003d5c <HAL_RCC_ClockConfig+0x1c4>)
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f003 020c 	and.w	r2, r3, #12
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d1eb      	bne.n	8003c90 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003cb8:	4b27      	ldr	r3, [pc, #156]	; (8003d58 <HAL_RCC_ClockConfig+0x1c0>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0307 	and.w	r3, r3, #7
 8003cc0:	683a      	ldr	r2, [r7, #0]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d210      	bcs.n	8003ce8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cc6:	4b24      	ldr	r3, [pc, #144]	; (8003d58 <HAL_RCC_ClockConfig+0x1c0>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f023 0207 	bic.w	r2, r3, #7
 8003cce:	4922      	ldr	r1, [pc, #136]	; (8003d58 <HAL_RCC_ClockConfig+0x1c0>)
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cd6:	4b20      	ldr	r3, [pc, #128]	; (8003d58 <HAL_RCC_ClockConfig+0x1c0>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0307 	and.w	r3, r3, #7
 8003cde:	683a      	ldr	r2, [r7, #0]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d001      	beq.n	8003ce8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e032      	b.n	8003d4e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0304 	and.w	r3, r3, #4
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d008      	beq.n	8003d06 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cf4:	4b19      	ldr	r3, [pc, #100]	; (8003d5c <HAL_RCC_ClockConfig+0x1c4>)
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	4916      	ldr	r1, [pc, #88]	; (8003d5c <HAL_RCC_ClockConfig+0x1c4>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0308 	and.w	r3, r3, #8
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d009      	beq.n	8003d26 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003d12:	4b12      	ldr	r3, [pc, #72]	; (8003d5c <HAL_RCC_ClockConfig+0x1c4>)
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	00db      	lsls	r3, r3, #3
 8003d20:	490e      	ldr	r1, [pc, #56]	; (8003d5c <HAL_RCC_ClockConfig+0x1c4>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d26:	f000 f821 	bl	8003d6c <HAL_RCC_GetSysClockFreq>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	4b0b      	ldr	r3, [pc, #44]	; (8003d5c <HAL_RCC_ClockConfig+0x1c4>)
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	091b      	lsrs	r3, r3, #4
 8003d32:	f003 030f 	and.w	r3, r3, #15
 8003d36:	490a      	ldr	r1, [pc, #40]	; (8003d60 <HAL_RCC_ClockConfig+0x1c8>)
 8003d38:	5ccb      	ldrb	r3, [r1, r3]
 8003d3a:	fa22 f303 	lsr.w	r3, r2, r3
 8003d3e:	4a09      	ldr	r2, [pc, #36]	; (8003d64 <HAL_RCC_ClockConfig+0x1cc>)
 8003d40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003d42:	4b09      	ldr	r3, [pc, #36]	; (8003d68 <HAL_RCC_ClockConfig+0x1d0>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4618      	mov	r0, r3
 8003d48:	f7ff f994 	bl	8003074 <HAL_InitTick>

  return HAL_OK;
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3710      	adds	r7, #16
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	40022000 	.word	0x40022000
 8003d5c:	40021000 	.word	0x40021000
 8003d60:	08006a38 	.word	0x08006a38
 8003d64:	20000010 	.word	0x20000010
 8003d68:	20000014 	.word	0x20000014

08003d6c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b087      	sub	sp, #28
 8003d70:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003d72:	2300      	movs	r3, #0
 8003d74:	60fb      	str	r3, [r7, #12]
 8003d76:	2300      	movs	r3, #0
 8003d78:	60bb      	str	r3, [r7, #8]
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	617b      	str	r3, [r7, #20]
 8003d7e:	2300      	movs	r3, #0
 8003d80:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003d82:	2300      	movs	r3, #0
 8003d84:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003d86:	4b1e      	ldr	r3, [pc, #120]	; (8003e00 <HAL_RCC_GetSysClockFreq+0x94>)
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f003 030c 	and.w	r3, r3, #12
 8003d92:	2b04      	cmp	r3, #4
 8003d94:	d002      	beq.n	8003d9c <HAL_RCC_GetSysClockFreq+0x30>
 8003d96:	2b08      	cmp	r3, #8
 8003d98:	d003      	beq.n	8003da2 <HAL_RCC_GetSysClockFreq+0x36>
 8003d9a:	e027      	b.n	8003dec <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003d9c:	4b19      	ldr	r3, [pc, #100]	; (8003e04 <HAL_RCC_GetSysClockFreq+0x98>)
 8003d9e:	613b      	str	r3, [r7, #16]
      break;
 8003da0:	e027      	b.n	8003df2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	0c9b      	lsrs	r3, r3, #18
 8003da6:	f003 030f 	and.w	r3, r3, #15
 8003daa:	4a17      	ldr	r2, [pc, #92]	; (8003e08 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003dac:	5cd3      	ldrb	r3, [r2, r3]
 8003dae:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d010      	beq.n	8003ddc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003dba:	4b11      	ldr	r3, [pc, #68]	; (8003e00 <HAL_RCC_GetSysClockFreq+0x94>)
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	0c5b      	lsrs	r3, r3, #17
 8003dc0:	f003 0301 	and.w	r3, r3, #1
 8003dc4:	4a11      	ldr	r2, [pc, #68]	; (8003e0c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003dc6:	5cd3      	ldrb	r3, [r2, r3]
 8003dc8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a0d      	ldr	r2, [pc, #52]	; (8003e04 <HAL_RCC_GetSysClockFreq+0x98>)
 8003dce:	fb03 f202 	mul.w	r2, r3, r2
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dd8:	617b      	str	r3, [r7, #20]
 8003dda:	e004      	b.n	8003de6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4a0c      	ldr	r2, [pc, #48]	; (8003e10 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003de0:	fb02 f303 	mul.w	r3, r2, r3
 8003de4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	613b      	str	r3, [r7, #16]
      break;
 8003dea:	e002      	b.n	8003df2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003dec:	4b05      	ldr	r3, [pc, #20]	; (8003e04 <HAL_RCC_GetSysClockFreq+0x98>)
 8003dee:	613b      	str	r3, [r7, #16]
      break;
 8003df0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003df2:	693b      	ldr	r3, [r7, #16]
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	371c      	adds	r7, #28
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bc80      	pop	{r7}
 8003dfc:	4770      	bx	lr
 8003dfe:	bf00      	nop
 8003e00:	40021000 	.word	0x40021000
 8003e04:	007a1200 	.word	0x007a1200
 8003e08:	08006a48 	.word	0x08006a48
 8003e0c:	08006a58 	.word	0x08006a58
 8003e10:	003d0900 	.word	0x003d0900

08003e14 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b085      	sub	sp, #20
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003e1c:	4b0a      	ldr	r3, [pc, #40]	; (8003e48 <RCC_Delay+0x34>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a0a      	ldr	r2, [pc, #40]	; (8003e4c <RCC_Delay+0x38>)
 8003e22:	fba2 2303 	umull	r2, r3, r2, r3
 8003e26:	0a5b      	lsrs	r3, r3, #9
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	fb02 f303 	mul.w	r3, r2, r3
 8003e2e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003e30:	bf00      	nop
  }
  while (Delay --);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	1e5a      	subs	r2, r3, #1
 8003e36:	60fa      	str	r2, [r7, #12]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d1f9      	bne.n	8003e30 <RCC_Delay+0x1c>
}
 8003e3c:	bf00      	nop
 8003e3e:	bf00      	nop
 8003e40:	3714      	adds	r7, #20
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bc80      	pop	{r7}
 8003e46:	4770      	bx	lr
 8003e48:	20000010 	.word	0x20000010
 8003e4c:	10624dd3 	.word	0x10624dd3

08003e50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b082      	sub	sp, #8
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d101      	bne.n	8003e62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e041      	b.n	8003ee6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d106      	bne.n	8003e7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f7fe ff30 	bl	8002cdc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2202      	movs	r2, #2
 8003e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	3304      	adds	r3, #4
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	4610      	mov	r0, r2
 8003e90:	f000 fc30 	bl	80046f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ee4:	2300      	movs	r3, #0
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3708      	adds	r7, #8
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
	...

08003ef0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b085      	sub	sp, #20
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d001      	beq.n	8003f08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e03a      	b.n	8003f7e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2202      	movs	r2, #2
 8003f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	68da      	ldr	r2, [r3, #12]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f042 0201 	orr.w	r2, r2, #1
 8003f1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a18      	ldr	r2, [pc, #96]	; (8003f88 <HAL_TIM_Base_Start_IT+0x98>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d00e      	beq.n	8003f48 <HAL_TIM_Base_Start_IT+0x58>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f32:	d009      	beq.n	8003f48 <HAL_TIM_Base_Start_IT+0x58>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a14      	ldr	r2, [pc, #80]	; (8003f8c <HAL_TIM_Base_Start_IT+0x9c>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d004      	beq.n	8003f48 <HAL_TIM_Base_Start_IT+0x58>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a13      	ldr	r2, [pc, #76]	; (8003f90 <HAL_TIM_Base_Start_IT+0xa0>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d111      	bne.n	8003f6c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	f003 0307 	and.w	r3, r3, #7
 8003f52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2b06      	cmp	r3, #6
 8003f58:	d010      	beq.n	8003f7c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f042 0201 	orr.w	r2, r2, #1
 8003f68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f6a:	e007      	b.n	8003f7c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f042 0201 	orr.w	r2, r2, #1
 8003f7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3714      	adds	r7, #20
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bc80      	pop	{r7}
 8003f86:	4770      	bx	lr
 8003f88:	40012c00 	.word	0x40012c00
 8003f8c:	40000400 	.word	0x40000400
 8003f90:	40000800 	.word	0x40000800

08003f94 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d101      	bne.n	8003fa6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e041      	b.n	800402a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d106      	bne.n	8003fc0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f000 f839 	bl	8004032 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2202      	movs	r2, #2
 8003fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	3304      	adds	r3, #4
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	4610      	mov	r0, r2
 8003fd4:	f000 fb8e 	bl	80046f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3708      	adds	r7, #8
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}

08004032 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004032:	b480      	push	{r7}
 8004034:	b083      	sub	sp, #12
 8004036:	af00      	add	r7, sp, #0
 8004038:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800403a:	bf00      	nop
 800403c:	370c      	adds	r7, #12
 800403e:	46bd      	mov	sp, r7
 8004040:	bc80      	pop	{r7}
 8004042:	4770      	bx	lr

08004044 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d109      	bne.n	8004068 <HAL_TIM_PWM_Start+0x24>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800405a:	b2db      	uxtb	r3, r3
 800405c:	2b01      	cmp	r3, #1
 800405e:	bf14      	ite	ne
 8004060:	2301      	movne	r3, #1
 8004062:	2300      	moveq	r3, #0
 8004064:	b2db      	uxtb	r3, r3
 8004066:	e022      	b.n	80040ae <HAL_TIM_PWM_Start+0x6a>
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	2b04      	cmp	r3, #4
 800406c:	d109      	bne.n	8004082 <HAL_TIM_PWM_Start+0x3e>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2b01      	cmp	r3, #1
 8004078:	bf14      	ite	ne
 800407a:	2301      	movne	r3, #1
 800407c:	2300      	moveq	r3, #0
 800407e:	b2db      	uxtb	r3, r3
 8004080:	e015      	b.n	80040ae <HAL_TIM_PWM_Start+0x6a>
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	2b08      	cmp	r3, #8
 8004086:	d109      	bne.n	800409c <HAL_TIM_PWM_Start+0x58>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800408e:	b2db      	uxtb	r3, r3
 8004090:	2b01      	cmp	r3, #1
 8004092:	bf14      	ite	ne
 8004094:	2301      	movne	r3, #1
 8004096:	2300      	moveq	r3, #0
 8004098:	b2db      	uxtb	r3, r3
 800409a:	e008      	b.n	80040ae <HAL_TIM_PWM_Start+0x6a>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	bf14      	ite	ne
 80040a8:	2301      	movne	r3, #1
 80040aa:	2300      	moveq	r3, #0
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d001      	beq.n	80040b6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e05e      	b.n	8004174 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d104      	bne.n	80040c6 <HAL_TIM_PWM_Start+0x82>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2202      	movs	r2, #2
 80040c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040c4:	e013      	b.n	80040ee <HAL_TIM_PWM_Start+0xaa>
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	2b04      	cmp	r3, #4
 80040ca:	d104      	bne.n	80040d6 <HAL_TIM_PWM_Start+0x92>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2202      	movs	r2, #2
 80040d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040d4:	e00b      	b.n	80040ee <HAL_TIM_PWM_Start+0xaa>
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	2b08      	cmp	r3, #8
 80040da:	d104      	bne.n	80040e6 <HAL_TIM_PWM_Start+0xa2>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2202      	movs	r2, #2
 80040e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040e4:	e003      	b.n	80040ee <HAL_TIM_PWM_Start+0xaa>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2202      	movs	r2, #2
 80040ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	2201      	movs	r2, #1
 80040f4:	6839      	ldr	r1, [r7, #0]
 80040f6:	4618      	mov	r0, r3
 80040f8:	f000 fd7c 	bl	8004bf4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a1e      	ldr	r2, [pc, #120]	; (800417c <HAL_TIM_PWM_Start+0x138>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d107      	bne.n	8004116 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004114:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a18      	ldr	r2, [pc, #96]	; (800417c <HAL_TIM_PWM_Start+0x138>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d00e      	beq.n	800413e <HAL_TIM_PWM_Start+0xfa>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004128:	d009      	beq.n	800413e <HAL_TIM_PWM_Start+0xfa>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a14      	ldr	r2, [pc, #80]	; (8004180 <HAL_TIM_PWM_Start+0x13c>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d004      	beq.n	800413e <HAL_TIM_PWM_Start+0xfa>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a12      	ldr	r2, [pc, #72]	; (8004184 <HAL_TIM_PWM_Start+0x140>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d111      	bne.n	8004162 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	f003 0307 	and.w	r3, r3, #7
 8004148:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2b06      	cmp	r3, #6
 800414e:	d010      	beq.n	8004172 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f042 0201 	orr.w	r2, r2, #1
 800415e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004160:	e007      	b.n	8004172 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f042 0201 	orr.w	r2, r2, #1
 8004170:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004172:	2300      	movs	r3, #0
}
 8004174:	4618      	mov	r0, r3
 8004176:	3710      	adds	r7, #16
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}
 800417c:	40012c00 	.word	0x40012c00
 8004180:	40000400 	.word	0x40000400
 8004184:	40000800 	.word	0x40000800

08004188 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b082      	sub	sp, #8
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	691b      	ldr	r3, [r3, #16]
 8004196:	f003 0302 	and.w	r3, r3, #2
 800419a:	2b02      	cmp	r3, #2
 800419c:	d122      	bne.n	80041e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	f003 0302 	and.w	r3, r3, #2
 80041a8:	2b02      	cmp	r3, #2
 80041aa:	d11b      	bne.n	80041e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f06f 0202 	mvn.w	r2, #2
 80041b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2201      	movs	r2, #1
 80041ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	699b      	ldr	r3, [r3, #24]
 80041c2:	f003 0303 	and.w	r3, r3, #3
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d003      	beq.n	80041d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f000 fa76 	bl	80046bc <HAL_TIM_IC_CaptureCallback>
 80041d0:	e005      	b.n	80041de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f000 fa69 	bl	80046aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f000 fa78 	bl	80046ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2200      	movs	r2, #0
 80041e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	691b      	ldr	r3, [r3, #16]
 80041ea:	f003 0304 	and.w	r3, r3, #4
 80041ee:	2b04      	cmp	r3, #4
 80041f0:	d122      	bne.n	8004238 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	f003 0304 	and.w	r3, r3, #4
 80041fc:	2b04      	cmp	r3, #4
 80041fe:	d11b      	bne.n	8004238 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f06f 0204 	mvn.w	r2, #4
 8004208:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2202      	movs	r2, #2
 800420e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	699b      	ldr	r3, [r3, #24]
 8004216:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800421a:	2b00      	cmp	r3, #0
 800421c:	d003      	beq.n	8004226 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f000 fa4c 	bl	80046bc <HAL_TIM_IC_CaptureCallback>
 8004224:	e005      	b.n	8004232 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 fa3f 	bl	80046aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f000 fa4e 	bl	80046ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	691b      	ldr	r3, [r3, #16]
 800423e:	f003 0308 	and.w	r3, r3, #8
 8004242:	2b08      	cmp	r3, #8
 8004244:	d122      	bne.n	800428c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	f003 0308 	and.w	r3, r3, #8
 8004250:	2b08      	cmp	r3, #8
 8004252:	d11b      	bne.n	800428c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f06f 0208 	mvn.w	r2, #8
 800425c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2204      	movs	r2, #4
 8004262:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	69db      	ldr	r3, [r3, #28]
 800426a:	f003 0303 	and.w	r3, r3, #3
 800426e:	2b00      	cmp	r3, #0
 8004270:	d003      	beq.n	800427a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f000 fa22 	bl	80046bc <HAL_TIM_IC_CaptureCallback>
 8004278:	e005      	b.n	8004286 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f000 fa15 	bl	80046aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f000 fa24 	bl	80046ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	691b      	ldr	r3, [r3, #16]
 8004292:	f003 0310 	and.w	r3, r3, #16
 8004296:	2b10      	cmp	r3, #16
 8004298:	d122      	bne.n	80042e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	f003 0310 	and.w	r3, r3, #16
 80042a4:	2b10      	cmp	r3, #16
 80042a6:	d11b      	bne.n	80042e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f06f 0210 	mvn.w	r2, #16
 80042b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2208      	movs	r2, #8
 80042b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	69db      	ldr	r3, [r3, #28]
 80042be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d003      	beq.n	80042ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f000 f9f8 	bl	80046bc <HAL_TIM_IC_CaptureCallback>
 80042cc:	e005      	b.n	80042da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 f9eb 	bl	80046aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f000 f9fa 	bl	80046ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2200      	movs	r2, #0
 80042de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	f003 0301 	and.w	r3, r3, #1
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d10e      	bne.n	800430c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	f003 0301 	and.w	r3, r3, #1
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d107      	bne.n	800430c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f06f 0201 	mvn.w	r2, #1
 8004304:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f7fd fce4 	bl	8001cd4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	691b      	ldr	r3, [r3, #16]
 8004312:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004316:	2b80      	cmp	r3, #128	; 0x80
 8004318:	d10e      	bne.n	8004338 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004324:	2b80      	cmp	r3, #128	; 0x80
 8004326:	d107      	bne.n	8004338 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004330:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f000 fce9 	bl	8004d0a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004342:	2b40      	cmp	r3, #64	; 0x40
 8004344:	d10e      	bne.n	8004364 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004350:	2b40      	cmp	r3, #64	; 0x40
 8004352:	d107      	bne.n	8004364 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800435c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f000 f9be 	bl	80046e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	691b      	ldr	r3, [r3, #16]
 800436a:	f003 0320 	and.w	r3, r3, #32
 800436e:	2b20      	cmp	r3, #32
 8004370:	d10e      	bne.n	8004390 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	f003 0320 	and.w	r3, r3, #32
 800437c:	2b20      	cmp	r3, #32
 800437e:	d107      	bne.n	8004390 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f06f 0220 	mvn.w	r2, #32
 8004388:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 fcb4 	bl	8004cf8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004390:	bf00      	nop
 8004392:	3708      	adds	r7, #8
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}

08004398 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b086      	sub	sp, #24
 800439c:	af00      	add	r7, sp, #0
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043a4:	2300      	movs	r3, #0
 80043a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d101      	bne.n	80043b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80043b2:	2302      	movs	r3, #2
 80043b4:	e0ae      	b.n	8004514 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2201      	movs	r2, #1
 80043ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2b0c      	cmp	r3, #12
 80043c2:	f200 809f 	bhi.w	8004504 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80043c6:	a201      	add	r2, pc, #4	; (adr r2, 80043cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80043c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043cc:	08004401 	.word	0x08004401
 80043d0:	08004505 	.word	0x08004505
 80043d4:	08004505 	.word	0x08004505
 80043d8:	08004505 	.word	0x08004505
 80043dc:	08004441 	.word	0x08004441
 80043e0:	08004505 	.word	0x08004505
 80043e4:	08004505 	.word	0x08004505
 80043e8:	08004505 	.word	0x08004505
 80043ec:	08004483 	.word	0x08004483
 80043f0:	08004505 	.word	0x08004505
 80043f4:	08004505 	.word	0x08004505
 80043f8:	08004505 	.word	0x08004505
 80043fc:	080044c3 	.word	0x080044c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	68b9      	ldr	r1, [r7, #8]
 8004406:	4618      	mov	r0, r3
 8004408:	f000 f9d6 	bl	80047b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	699a      	ldr	r2, [r3, #24]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f042 0208 	orr.w	r2, r2, #8
 800441a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	699a      	ldr	r2, [r3, #24]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f022 0204 	bic.w	r2, r2, #4
 800442a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	6999      	ldr	r1, [r3, #24]
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	691a      	ldr	r2, [r3, #16]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	430a      	orrs	r2, r1
 800443c:	619a      	str	r2, [r3, #24]
      break;
 800443e:	e064      	b.n	800450a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	68b9      	ldr	r1, [r7, #8]
 8004446:	4618      	mov	r0, r3
 8004448:	f000 fa1c 	bl	8004884 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	699a      	ldr	r2, [r3, #24]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800445a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	699a      	ldr	r2, [r3, #24]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800446a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	6999      	ldr	r1, [r3, #24]
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	021a      	lsls	r2, r3, #8
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	430a      	orrs	r2, r1
 800447e:	619a      	str	r2, [r3, #24]
      break;
 8004480:	e043      	b.n	800450a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	68b9      	ldr	r1, [r7, #8]
 8004488:	4618      	mov	r0, r3
 800448a:	f000 fa65 	bl	8004958 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	69da      	ldr	r2, [r3, #28]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f042 0208 	orr.w	r2, r2, #8
 800449c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	69da      	ldr	r2, [r3, #28]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f022 0204 	bic.w	r2, r2, #4
 80044ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	69d9      	ldr	r1, [r3, #28]
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	691a      	ldr	r2, [r3, #16]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	430a      	orrs	r2, r1
 80044be:	61da      	str	r2, [r3, #28]
      break;
 80044c0:	e023      	b.n	800450a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	68b9      	ldr	r1, [r7, #8]
 80044c8:	4618      	mov	r0, r3
 80044ca:	f000 faaf 	bl	8004a2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	69da      	ldr	r2, [r3, #28]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	69da      	ldr	r2, [r3, #28]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	69d9      	ldr	r1, [r3, #28]
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	691b      	ldr	r3, [r3, #16]
 80044f8:	021a      	lsls	r2, r3, #8
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	430a      	orrs	r2, r1
 8004500:	61da      	str	r2, [r3, #28]
      break;
 8004502:	e002      	b.n	800450a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	75fb      	strb	r3, [r7, #23]
      break;
 8004508:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004512:	7dfb      	ldrb	r3, [r7, #23]
}
 8004514:	4618      	mov	r0, r3
 8004516:	3718      	adds	r7, #24
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}

0800451c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004526:	2300      	movs	r3, #0
 8004528:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004530:	2b01      	cmp	r3, #1
 8004532:	d101      	bne.n	8004538 <HAL_TIM_ConfigClockSource+0x1c>
 8004534:	2302      	movs	r3, #2
 8004536:	e0b4      	b.n	80046a2 <HAL_TIM_ConfigClockSource+0x186>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2202      	movs	r2, #2
 8004544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004556:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800455e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	68ba      	ldr	r2, [r7, #8]
 8004566:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004570:	d03e      	beq.n	80045f0 <HAL_TIM_ConfigClockSource+0xd4>
 8004572:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004576:	f200 8087 	bhi.w	8004688 <HAL_TIM_ConfigClockSource+0x16c>
 800457a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800457e:	f000 8086 	beq.w	800468e <HAL_TIM_ConfigClockSource+0x172>
 8004582:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004586:	d87f      	bhi.n	8004688 <HAL_TIM_ConfigClockSource+0x16c>
 8004588:	2b70      	cmp	r3, #112	; 0x70
 800458a:	d01a      	beq.n	80045c2 <HAL_TIM_ConfigClockSource+0xa6>
 800458c:	2b70      	cmp	r3, #112	; 0x70
 800458e:	d87b      	bhi.n	8004688 <HAL_TIM_ConfigClockSource+0x16c>
 8004590:	2b60      	cmp	r3, #96	; 0x60
 8004592:	d050      	beq.n	8004636 <HAL_TIM_ConfigClockSource+0x11a>
 8004594:	2b60      	cmp	r3, #96	; 0x60
 8004596:	d877      	bhi.n	8004688 <HAL_TIM_ConfigClockSource+0x16c>
 8004598:	2b50      	cmp	r3, #80	; 0x50
 800459a:	d03c      	beq.n	8004616 <HAL_TIM_ConfigClockSource+0xfa>
 800459c:	2b50      	cmp	r3, #80	; 0x50
 800459e:	d873      	bhi.n	8004688 <HAL_TIM_ConfigClockSource+0x16c>
 80045a0:	2b40      	cmp	r3, #64	; 0x40
 80045a2:	d058      	beq.n	8004656 <HAL_TIM_ConfigClockSource+0x13a>
 80045a4:	2b40      	cmp	r3, #64	; 0x40
 80045a6:	d86f      	bhi.n	8004688 <HAL_TIM_ConfigClockSource+0x16c>
 80045a8:	2b30      	cmp	r3, #48	; 0x30
 80045aa:	d064      	beq.n	8004676 <HAL_TIM_ConfigClockSource+0x15a>
 80045ac:	2b30      	cmp	r3, #48	; 0x30
 80045ae:	d86b      	bhi.n	8004688 <HAL_TIM_ConfigClockSource+0x16c>
 80045b0:	2b20      	cmp	r3, #32
 80045b2:	d060      	beq.n	8004676 <HAL_TIM_ConfigClockSource+0x15a>
 80045b4:	2b20      	cmp	r3, #32
 80045b6:	d867      	bhi.n	8004688 <HAL_TIM_ConfigClockSource+0x16c>
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d05c      	beq.n	8004676 <HAL_TIM_ConfigClockSource+0x15a>
 80045bc:	2b10      	cmp	r3, #16
 80045be:	d05a      	beq.n	8004676 <HAL_TIM_ConfigClockSource+0x15a>
 80045c0:	e062      	b.n	8004688 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80045d2:	f000 faf0 	bl	8004bb6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80045e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	68ba      	ldr	r2, [r7, #8]
 80045ec:	609a      	str	r2, [r3, #8]
      break;
 80045ee:	e04f      	b.n	8004690 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004600:	f000 fad9 	bl	8004bb6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	689a      	ldr	r2, [r3, #8]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004612:	609a      	str	r2, [r3, #8]
      break;
 8004614:	e03c      	b.n	8004690 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004622:	461a      	mov	r2, r3
 8004624:	f000 fa50 	bl	8004ac8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2150      	movs	r1, #80	; 0x50
 800462e:	4618      	mov	r0, r3
 8004630:	f000 faa7 	bl	8004b82 <TIM_ITRx_SetConfig>
      break;
 8004634:	e02c      	b.n	8004690 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004642:	461a      	mov	r2, r3
 8004644:	f000 fa6e 	bl	8004b24 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2160      	movs	r1, #96	; 0x60
 800464e:	4618      	mov	r0, r3
 8004650:	f000 fa97 	bl	8004b82 <TIM_ITRx_SetConfig>
      break;
 8004654:	e01c      	b.n	8004690 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004662:	461a      	mov	r2, r3
 8004664:	f000 fa30 	bl	8004ac8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2140      	movs	r1, #64	; 0x40
 800466e:	4618      	mov	r0, r3
 8004670:	f000 fa87 	bl	8004b82 <TIM_ITRx_SetConfig>
      break;
 8004674:	e00c      	b.n	8004690 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4619      	mov	r1, r3
 8004680:	4610      	mov	r0, r2
 8004682:	f000 fa7e 	bl	8004b82 <TIM_ITRx_SetConfig>
      break;
 8004686:	e003      	b.n	8004690 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	73fb      	strb	r3, [r7, #15]
      break;
 800468c:	e000      	b.n	8004690 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800468e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80046a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3710      	adds	r7, #16
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}

080046aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046aa:	b480      	push	{r7}
 80046ac:	b083      	sub	sp, #12
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046b2:	bf00      	nop
 80046b4:	370c      	adds	r7, #12
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bc80      	pop	{r7}
 80046ba:	4770      	bx	lr

080046bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80046bc:	b480      	push	{r7}
 80046be:	b083      	sub	sp, #12
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80046c4:	bf00      	nop
 80046c6:	370c      	adds	r7, #12
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bc80      	pop	{r7}
 80046cc:	4770      	bx	lr

080046ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80046ce:	b480      	push	{r7}
 80046d0:	b083      	sub	sp, #12
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80046d6:	bf00      	nop
 80046d8:	370c      	adds	r7, #12
 80046da:	46bd      	mov	sp, r7
 80046dc:	bc80      	pop	{r7}
 80046de:	4770      	bx	lr

080046e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b083      	sub	sp, #12
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80046e8:	bf00      	nop
 80046ea:	370c      	adds	r7, #12
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bc80      	pop	{r7}
 80046f0:	4770      	bx	lr
	...

080046f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b085      	sub	sp, #20
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4a29      	ldr	r2, [pc, #164]	; (80047ac <TIM_Base_SetConfig+0xb8>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d00b      	beq.n	8004724 <TIM_Base_SetConfig+0x30>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004712:	d007      	beq.n	8004724 <TIM_Base_SetConfig+0x30>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	4a26      	ldr	r2, [pc, #152]	; (80047b0 <TIM_Base_SetConfig+0xbc>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d003      	beq.n	8004724 <TIM_Base_SetConfig+0x30>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	4a25      	ldr	r2, [pc, #148]	; (80047b4 <TIM_Base_SetConfig+0xc0>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d108      	bne.n	8004736 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800472a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	68fa      	ldr	r2, [r7, #12]
 8004732:	4313      	orrs	r3, r2
 8004734:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a1c      	ldr	r2, [pc, #112]	; (80047ac <TIM_Base_SetConfig+0xb8>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d00b      	beq.n	8004756 <TIM_Base_SetConfig+0x62>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004744:	d007      	beq.n	8004756 <TIM_Base_SetConfig+0x62>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a19      	ldr	r2, [pc, #100]	; (80047b0 <TIM_Base_SetConfig+0xbc>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d003      	beq.n	8004756 <TIM_Base_SetConfig+0x62>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a18      	ldr	r2, [pc, #96]	; (80047b4 <TIM_Base_SetConfig+0xc0>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d108      	bne.n	8004768 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800475c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	68fa      	ldr	r2, [r7, #12]
 8004764:	4313      	orrs	r3, r2
 8004766:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	695b      	ldr	r3, [r3, #20]
 8004772:	4313      	orrs	r3, r2
 8004774:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	68fa      	ldr	r2, [r7, #12]
 800477a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	689a      	ldr	r2, [r3, #8]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	4a07      	ldr	r2, [pc, #28]	; (80047ac <TIM_Base_SetConfig+0xb8>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d103      	bne.n	800479c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	691a      	ldr	r2, [r3, #16]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	615a      	str	r2, [r3, #20]
}
 80047a2:	bf00      	nop
 80047a4:	3714      	adds	r7, #20
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bc80      	pop	{r7}
 80047aa:	4770      	bx	lr
 80047ac:	40012c00 	.word	0x40012c00
 80047b0:	40000400 	.word	0x40000400
 80047b4:	40000800 	.word	0x40000800

080047b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b087      	sub	sp, #28
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a1b      	ldr	r3, [r3, #32]
 80047c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6a1b      	ldr	r3, [r3, #32]
 80047cc:	f023 0201 	bic.w	r2, r3, #1
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	699b      	ldr	r3, [r3, #24]
 80047de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f023 0303 	bic.w	r3, r3, #3
 80047ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	68fa      	ldr	r2, [r7, #12]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	f023 0302 	bic.w	r3, r3, #2
 8004800:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	697a      	ldr	r2, [r7, #20]
 8004808:	4313      	orrs	r3, r2
 800480a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	4a1c      	ldr	r2, [pc, #112]	; (8004880 <TIM_OC1_SetConfig+0xc8>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d10c      	bne.n	800482e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	f023 0308 	bic.w	r3, r3, #8
 800481a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	697a      	ldr	r2, [r7, #20]
 8004822:	4313      	orrs	r3, r2
 8004824:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	f023 0304 	bic.w	r3, r3, #4
 800482c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a13      	ldr	r2, [pc, #76]	; (8004880 <TIM_OC1_SetConfig+0xc8>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d111      	bne.n	800485a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800483c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004844:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	695b      	ldr	r3, [r3, #20]
 800484a:	693a      	ldr	r2, [r7, #16]
 800484c:	4313      	orrs	r3, r2
 800484e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	699b      	ldr	r3, [r3, #24]
 8004854:	693a      	ldr	r2, [r7, #16]
 8004856:	4313      	orrs	r3, r2
 8004858:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	693a      	ldr	r2, [r7, #16]
 800485e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	68fa      	ldr	r2, [r7, #12]
 8004864:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	685a      	ldr	r2, [r3, #4]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	697a      	ldr	r2, [r7, #20]
 8004872:	621a      	str	r2, [r3, #32]
}
 8004874:	bf00      	nop
 8004876:	371c      	adds	r7, #28
 8004878:	46bd      	mov	sp, r7
 800487a:	bc80      	pop	{r7}
 800487c:	4770      	bx	lr
 800487e:	bf00      	nop
 8004880:	40012c00 	.word	0x40012c00

08004884 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004884:	b480      	push	{r7}
 8004886:	b087      	sub	sp, #28
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a1b      	ldr	r3, [r3, #32]
 8004892:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6a1b      	ldr	r3, [r3, #32]
 8004898:	f023 0210 	bic.w	r2, r3, #16
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	699b      	ldr	r3, [r3, #24]
 80048aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	021b      	lsls	r3, r3, #8
 80048c2:	68fa      	ldr	r2, [r7, #12]
 80048c4:	4313      	orrs	r3, r2
 80048c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	f023 0320 	bic.w	r3, r3, #32
 80048ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	011b      	lsls	r3, r3, #4
 80048d6:	697a      	ldr	r2, [r7, #20]
 80048d8:	4313      	orrs	r3, r2
 80048da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	4a1d      	ldr	r2, [pc, #116]	; (8004954 <TIM_OC2_SetConfig+0xd0>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d10d      	bne.n	8004900 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	011b      	lsls	r3, r3, #4
 80048f2:	697a      	ldr	r2, [r7, #20]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048fe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	4a14      	ldr	r2, [pc, #80]	; (8004954 <TIM_OC2_SetConfig+0xd0>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d113      	bne.n	8004930 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800490e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004916:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	695b      	ldr	r3, [r3, #20]
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	693a      	ldr	r2, [r7, #16]
 8004920:	4313      	orrs	r3, r2
 8004922:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	699b      	ldr	r3, [r3, #24]
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	693a      	ldr	r2, [r7, #16]
 800492c:	4313      	orrs	r3, r2
 800492e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	693a      	ldr	r2, [r7, #16]
 8004934:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	68fa      	ldr	r2, [r7, #12]
 800493a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	685a      	ldr	r2, [r3, #4]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	697a      	ldr	r2, [r7, #20]
 8004948:	621a      	str	r2, [r3, #32]
}
 800494a:	bf00      	nop
 800494c:	371c      	adds	r7, #28
 800494e:	46bd      	mov	sp, r7
 8004950:	bc80      	pop	{r7}
 8004952:	4770      	bx	lr
 8004954:	40012c00 	.word	0x40012c00

08004958 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004958:	b480      	push	{r7}
 800495a:	b087      	sub	sp, #28
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a1b      	ldr	r3, [r3, #32]
 8004966:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6a1b      	ldr	r3, [r3, #32]
 800496c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	69db      	ldr	r3, [r3, #28]
 800497e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004986:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f023 0303 	bic.w	r3, r3, #3
 800498e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	68fa      	ldr	r2, [r7, #12]
 8004996:	4313      	orrs	r3, r2
 8004998:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	021b      	lsls	r3, r3, #8
 80049a8:	697a      	ldr	r2, [r7, #20]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a1d      	ldr	r2, [pc, #116]	; (8004a28 <TIM_OC3_SetConfig+0xd0>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d10d      	bne.n	80049d2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80049bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	021b      	lsls	r3, r3, #8
 80049c4:	697a      	ldr	r2, [r7, #20]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80049d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a14      	ldr	r2, [pc, #80]	; (8004a28 <TIM_OC3_SetConfig+0xd0>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d113      	bne.n	8004a02 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80049e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80049e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	695b      	ldr	r3, [r3, #20]
 80049ee:	011b      	lsls	r3, r3, #4
 80049f0:	693a      	ldr	r2, [r7, #16]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	699b      	ldr	r3, [r3, #24]
 80049fa:	011b      	lsls	r3, r3, #4
 80049fc:	693a      	ldr	r2, [r7, #16]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	693a      	ldr	r2, [r7, #16]
 8004a06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	68fa      	ldr	r2, [r7, #12]
 8004a0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	685a      	ldr	r2, [r3, #4]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	697a      	ldr	r2, [r7, #20]
 8004a1a:	621a      	str	r2, [r3, #32]
}
 8004a1c:	bf00      	nop
 8004a1e:	371c      	adds	r7, #28
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bc80      	pop	{r7}
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop
 8004a28:	40012c00 	.word	0x40012c00

08004a2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b087      	sub	sp, #28
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a1b      	ldr	r3, [r3, #32]
 8004a3a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6a1b      	ldr	r3, [r3, #32]
 8004a40:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	69db      	ldr	r3, [r3, #28]
 8004a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	021b      	lsls	r3, r3, #8
 8004a6a:	68fa      	ldr	r2, [r7, #12]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	031b      	lsls	r3, r3, #12
 8004a7e:	693a      	ldr	r2, [r7, #16]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	4a0f      	ldr	r2, [pc, #60]	; (8004ac4 <TIM_OC4_SetConfig+0x98>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d109      	bne.n	8004aa0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a92:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	695b      	ldr	r3, [r3, #20]
 8004a98:	019b      	lsls	r3, r3, #6
 8004a9a:	697a      	ldr	r2, [r7, #20]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	697a      	ldr	r2, [r7, #20]
 8004aa4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	68fa      	ldr	r2, [r7, #12]
 8004aaa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	685a      	ldr	r2, [r3, #4]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	693a      	ldr	r2, [r7, #16]
 8004ab8:	621a      	str	r2, [r3, #32]
}
 8004aba:	bf00      	nop
 8004abc:	371c      	adds	r7, #28
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bc80      	pop	{r7}
 8004ac2:	4770      	bx	lr
 8004ac4:	40012c00 	.word	0x40012c00

08004ac8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b087      	sub	sp, #28
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	60f8      	str	r0, [r7, #12]
 8004ad0:	60b9      	str	r1, [r7, #8]
 8004ad2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6a1b      	ldr	r3, [r3, #32]
 8004ad8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6a1b      	ldr	r3, [r3, #32]
 8004ade:	f023 0201 	bic.w	r2, r3, #1
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	699b      	ldr	r3, [r3, #24]
 8004aea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004af2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	011b      	lsls	r3, r3, #4
 8004af8:	693a      	ldr	r2, [r7, #16]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	f023 030a 	bic.w	r3, r3, #10
 8004b04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b06:	697a      	ldr	r2, [r7, #20]
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	693a      	ldr	r2, [r7, #16]
 8004b12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	697a      	ldr	r2, [r7, #20]
 8004b18:	621a      	str	r2, [r3, #32]
}
 8004b1a:	bf00      	nop
 8004b1c:	371c      	adds	r7, #28
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bc80      	pop	{r7}
 8004b22:	4770      	bx	lr

08004b24 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b087      	sub	sp, #28
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6a1b      	ldr	r3, [r3, #32]
 8004b34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	6a1b      	ldr	r3, [r3, #32]
 8004b3a:	f023 0210 	bic.w	r2, r3, #16
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	699b      	ldr	r3, [r3, #24]
 8004b46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	031b      	lsls	r3, r3, #12
 8004b54:	693a      	ldr	r2, [r7, #16]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004b60:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	011b      	lsls	r3, r3, #4
 8004b66:	697a      	ldr	r2, [r7, #20]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	693a      	ldr	r2, [r7, #16]
 8004b70:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	697a      	ldr	r2, [r7, #20]
 8004b76:	621a      	str	r2, [r3, #32]
}
 8004b78:	bf00      	nop
 8004b7a:	371c      	adds	r7, #28
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bc80      	pop	{r7}
 8004b80:	4770      	bx	lr

08004b82 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b82:	b480      	push	{r7}
 8004b84:	b085      	sub	sp, #20
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	6078      	str	r0, [r7, #4]
 8004b8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b9a:	683a      	ldr	r2, [r7, #0]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	f043 0307 	orr.w	r3, r3, #7
 8004ba4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	68fa      	ldr	r2, [r7, #12]
 8004baa:	609a      	str	r2, [r3, #8]
}
 8004bac:	bf00      	nop
 8004bae:	3714      	adds	r7, #20
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bc80      	pop	{r7}
 8004bb4:	4770      	bx	lr

08004bb6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004bb6:	b480      	push	{r7}
 8004bb8:	b087      	sub	sp, #28
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	60f8      	str	r0, [r7, #12]
 8004bbe:	60b9      	str	r1, [r7, #8]
 8004bc0:	607a      	str	r2, [r7, #4]
 8004bc2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004bd0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	021a      	lsls	r2, r3, #8
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	431a      	orrs	r2, r3
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	697a      	ldr	r2, [r7, #20]
 8004be0:	4313      	orrs	r3, r2
 8004be2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	697a      	ldr	r2, [r7, #20]
 8004be8:	609a      	str	r2, [r3, #8]
}
 8004bea:	bf00      	nop
 8004bec:	371c      	adds	r7, #28
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bc80      	pop	{r7}
 8004bf2:	4770      	bx	lr

08004bf4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b087      	sub	sp, #28
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	f003 031f 	and.w	r3, r3, #31
 8004c06:	2201      	movs	r2, #1
 8004c08:	fa02 f303 	lsl.w	r3, r2, r3
 8004c0c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	6a1a      	ldr	r2, [r3, #32]
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	43db      	mvns	r3, r3
 8004c16:	401a      	ands	r2, r3
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	6a1a      	ldr	r2, [r3, #32]
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	f003 031f 	and.w	r3, r3, #31
 8004c26:	6879      	ldr	r1, [r7, #4]
 8004c28:	fa01 f303 	lsl.w	r3, r1, r3
 8004c2c:	431a      	orrs	r2, r3
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	621a      	str	r2, [r3, #32]
}
 8004c32:	bf00      	nop
 8004c34:	371c      	adds	r7, #28
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bc80      	pop	{r7}
 8004c3a:	4770      	bx	lr

08004c3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b085      	sub	sp, #20
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d101      	bne.n	8004c54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c50:	2302      	movs	r3, #2
 8004c52:	e046      	b.n	8004ce2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2202      	movs	r2, #2
 8004c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	68fa      	ldr	r2, [r7, #12]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	68fa      	ldr	r2, [r7, #12]
 8004c8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a16      	ldr	r2, [pc, #88]	; (8004cec <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d00e      	beq.n	8004cb6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ca0:	d009      	beq.n	8004cb6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a12      	ldr	r2, [pc, #72]	; (8004cf0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d004      	beq.n	8004cb6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a10      	ldr	r2, [pc, #64]	; (8004cf4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d10c      	bne.n	8004cd0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cbc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	68ba      	ldr	r2, [r7, #8]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	68ba      	ldr	r2, [r7, #8]
 8004cce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ce0:	2300      	movs	r3, #0
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3714      	adds	r7, #20
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bc80      	pop	{r7}
 8004cea:	4770      	bx	lr
 8004cec:	40012c00 	.word	0x40012c00
 8004cf0:	40000400 	.word	0x40000400
 8004cf4:	40000800 	.word	0x40000800

08004cf8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b083      	sub	sp, #12
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d00:	bf00      	nop
 8004d02:	370c      	adds	r7, #12
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bc80      	pop	{r7}
 8004d08:	4770      	bx	lr

08004d0a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d0a:	b480      	push	{r7}
 8004d0c:	b083      	sub	sp, #12
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d12:	bf00      	nop
 8004d14:	370c      	adds	r7, #12
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bc80      	pop	{r7}
 8004d1a:	4770      	bx	lr

08004d1c <memset>:
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	4402      	add	r2, r0
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d100      	bne.n	8004d26 <memset+0xa>
 8004d24:	4770      	bx	lr
 8004d26:	f803 1b01 	strb.w	r1, [r3], #1
 8004d2a:	e7f9      	b.n	8004d20 <memset+0x4>

08004d2c <__errno>:
 8004d2c:	4b01      	ldr	r3, [pc, #4]	; (8004d34 <__errno+0x8>)
 8004d2e:	6818      	ldr	r0, [r3, #0]
 8004d30:	4770      	bx	lr
 8004d32:	bf00      	nop
 8004d34:	20000068 	.word	0x20000068

08004d38 <__libc_init_array>:
 8004d38:	b570      	push	{r4, r5, r6, lr}
 8004d3a:	2600      	movs	r6, #0
 8004d3c:	4d0c      	ldr	r5, [pc, #48]	; (8004d70 <__libc_init_array+0x38>)
 8004d3e:	4c0d      	ldr	r4, [pc, #52]	; (8004d74 <__libc_init_array+0x3c>)
 8004d40:	1b64      	subs	r4, r4, r5
 8004d42:	10a4      	asrs	r4, r4, #2
 8004d44:	42a6      	cmp	r6, r4
 8004d46:	d109      	bne.n	8004d5c <__libc_init_array+0x24>
 8004d48:	f001 fe6a 	bl	8006a20 <_init>
 8004d4c:	2600      	movs	r6, #0
 8004d4e:	4d0a      	ldr	r5, [pc, #40]	; (8004d78 <__libc_init_array+0x40>)
 8004d50:	4c0a      	ldr	r4, [pc, #40]	; (8004d7c <__libc_init_array+0x44>)
 8004d52:	1b64      	subs	r4, r4, r5
 8004d54:	10a4      	asrs	r4, r4, #2
 8004d56:	42a6      	cmp	r6, r4
 8004d58:	d105      	bne.n	8004d66 <__libc_init_array+0x2e>
 8004d5a:	bd70      	pop	{r4, r5, r6, pc}
 8004d5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d60:	4798      	blx	r3
 8004d62:	3601      	adds	r6, #1
 8004d64:	e7ee      	b.n	8004d44 <__libc_init_array+0xc>
 8004d66:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d6a:	4798      	blx	r3
 8004d6c:	3601      	adds	r6, #1
 8004d6e:	e7f2      	b.n	8004d56 <__libc_init_array+0x1e>
 8004d70:	08006ac8 	.word	0x08006ac8
 8004d74:	08006ac8 	.word	0x08006ac8
 8004d78:	08006ac8 	.word	0x08006ac8
 8004d7c:	08006acc 	.word	0x08006acc

08004d80 <pow>:
 8004d80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d84:	4614      	mov	r4, r2
 8004d86:	461d      	mov	r5, r3
 8004d88:	4680      	mov	r8, r0
 8004d8a:	4689      	mov	r9, r1
 8004d8c:	f000 fa7c 	bl	8005288 <__ieee754_pow>
 8004d90:	4622      	mov	r2, r4
 8004d92:	4606      	mov	r6, r0
 8004d94:	460f      	mov	r7, r1
 8004d96:	462b      	mov	r3, r5
 8004d98:	4620      	mov	r0, r4
 8004d9a:	4629      	mov	r1, r5
 8004d9c:	f7fb fe2e 	bl	80009fc <__aeabi_dcmpun>
 8004da0:	bbc8      	cbnz	r0, 8004e16 <pow+0x96>
 8004da2:	2200      	movs	r2, #0
 8004da4:	2300      	movs	r3, #0
 8004da6:	4640      	mov	r0, r8
 8004da8:	4649      	mov	r1, r9
 8004daa:	f7fb fdf5 	bl	8000998 <__aeabi_dcmpeq>
 8004dae:	b1b8      	cbz	r0, 8004de0 <pow+0x60>
 8004db0:	2200      	movs	r2, #0
 8004db2:	2300      	movs	r3, #0
 8004db4:	4620      	mov	r0, r4
 8004db6:	4629      	mov	r1, r5
 8004db8:	f7fb fdee 	bl	8000998 <__aeabi_dcmpeq>
 8004dbc:	2800      	cmp	r0, #0
 8004dbe:	d141      	bne.n	8004e44 <pow+0xc4>
 8004dc0:	4620      	mov	r0, r4
 8004dc2:	4629      	mov	r1, r5
 8004dc4:	f000 f9db 	bl	800517e <finite>
 8004dc8:	b328      	cbz	r0, 8004e16 <pow+0x96>
 8004dca:	2200      	movs	r2, #0
 8004dcc:	2300      	movs	r3, #0
 8004dce:	4620      	mov	r0, r4
 8004dd0:	4629      	mov	r1, r5
 8004dd2:	f7fb fdeb 	bl	80009ac <__aeabi_dcmplt>
 8004dd6:	b1f0      	cbz	r0, 8004e16 <pow+0x96>
 8004dd8:	f7ff ffa8 	bl	8004d2c <__errno>
 8004ddc:	2322      	movs	r3, #34	; 0x22
 8004dde:	e019      	b.n	8004e14 <pow+0x94>
 8004de0:	4630      	mov	r0, r6
 8004de2:	4639      	mov	r1, r7
 8004de4:	f000 f9cb 	bl	800517e <finite>
 8004de8:	b9c8      	cbnz	r0, 8004e1e <pow+0x9e>
 8004dea:	4640      	mov	r0, r8
 8004dec:	4649      	mov	r1, r9
 8004dee:	f000 f9c6 	bl	800517e <finite>
 8004df2:	b1a0      	cbz	r0, 8004e1e <pow+0x9e>
 8004df4:	4620      	mov	r0, r4
 8004df6:	4629      	mov	r1, r5
 8004df8:	f000 f9c1 	bl	800517e <finite>
 8004dfc:	b178      	cbz	r0, 8004e1e <pow+0x9e>
 8004dfe:	4632      	mov	r2, r6
 8004e00:	463b      	mov	r3, r7
 8004e02:	4630      	mov	r0, r6
 8004e04:	4639      	mov	r1, r7
 8004e06:	f7fb fdf9 	bl	80009fc <__aeabi_dcmpun>
 8004e0a:	2800      	cmp	r0, #0
 8004e0c:	d0e4      	beq.n	8004dd8 <pow+0x58>
 8004e0e:	f7ff ff8d 	bl	8004d2c <__errno>
 8004e12:	2321      	movs	r3, #33	; 0x21
 8004e14:	6003      	str	r3, [r0, #0]
 8004e16:	4630      	mov	r0, r6
 8004e18:	4639      	mov	r1, r7
 8004e1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e1e:	2200      	movs	r2, #0
 8004e20:	2300      	movs	r3, #0
 8004e22:	4630      	mov	r0, r6
 8004e24:	4639      	mov	r1, r7
 8004e26:	f7fb fdb7 	bl	8000998 <__aeabi_dcmpeq>
 8004e2a:	2800      	cmp	r0, #0
 8004e2c:	d0f3      	beq.n	8004e16 <pow+0x96>
 8004e2e:	4640      	mov	r0, r8
 8004e30:	4649      	mov	r1, r9
 8004e32:	f000 f9a4 	bl	800517e <finite>
 8004e36:	2800      	cmp	r0, #0
 8004e38:	d0ed      	beq.n	8004e16 <pow+0x96>
 8004e3a:	4620      	mov	r0, r4
 8004e3c:	4629      	mov	r1, r5
 8004e3e:	f000 f99e 	bl	800517e <finite>
 8004e42:	e7c8      	b.n	8004dd6 <pow+0x56>
 8004e44:	2600      	movs	r6, #0
 8004e46:	4f01      	ldr	r7, [pc, #4]	; (8004e4c <pow+0xcc>)
 8004e48:	e7e5      	b.n	8004e16 <pow+0x96>
 8004e4a:	bf00      	nop
 8004e4c:	3ff00000 	.word	0x3ff00000

08004e50 <acosf>:
 8004e50:	b538      	push	{r3, r4, r5, lr}
 8004e52:	4604      	mov	r4, r0
 8004e54:	f000 ff32 	bl	8005cbc <__ieee754_acosf>
 8004e58:	4621      	mov	r1, r4
 8004e5a:	4605      	mov	r5, r0
 8004e5c:	4620      	mov	r0, r4
 8004e5e:	f7fc f907 	bl	8001070 <__aeabi_fcmpun>
 8004e62:	b980      	cbnz	r0, 8004e86 <acosf+0x36>
 8004e64:	4620      	mov	r0, r4
 8004e66:	f000 f987 	bl	8005178 <fabsf>
 8004e6a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8004e6e:	f7fc f8f5 	bl	800105c <__aeabi_fcmpgt>
 8004e72:	b140      	cbz	r0, 8004e86 <acosf+0x36>
 8004e74:	f7ff ff5a 	bl	8004d2c <__errno>
 8004e78:	2321      	movs	r3, #33	; 0x21
 8004e7a:	6003      	str	r3, [r0, #0]
 8004e7c:	4803      	ldr	r0, [pc, #12]	; (8004e8c <acosf+0x3c>)
 8004e7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e82:	f000 b98b 	b.w	800519c <nanf>
 8004e86:	4628      	mov	r0, r5
 8004e88:	bd38      	pop	{r3, r4, r5, pc}
 8004e8a:	bf00      	nop
 8004e8c:	08006a5a 	.word	0x08006a5a

08004e90 <powf>:
 8004e90:	b570      	push	{r4, r5, r6, lr}
 8004e92:	460c      	mov	r4, r1
 8004e94:	4606      	mov	r6, r0
 8004e96:	f001 f873 	bl	8005f80 <__ieee754_powf>
 8004e9a:	4621      	mov	r1, r4
 8004e9c:	4605      	mov	r5, r0
 8004e9e:	4620      	mov	r0, r4
 8004ea0:	f7fc f8e6 	bl	8001070 <__aeabi_fcmpun>
 8004ea4:	bb68      	cbnz	r0, 8004f02 <powf+0x72>
 8004ea6:	2100      	movs	r1, #0
 8004ea8:	4630      	mov	r0, r6
 8004eaa:	f7fc f8af 	bl	800100c <__aeabi_fcmpeq>
 8004eae:	b190      	cbz	r0, 8004ed6 <powf+0x46>
 8004eb0:	2100      	movs	r1, #0
 8004eb2:	4620      	mov	r0, r4
 8004eb4:	f7fc f8aa 	bl	800100c <__aeabi_fcmpeq>
 8004eb8:	2800      	cmp	r0, #0
 8004eba:	d133      	bne.n	8004f24 <powf+0x94>
 8004ebc:	4620      	mov	r0, r4
 8004ebe:	f000 f964 	bl	800518a <finitef>
 8004ec2:	b1f0      	cbz	r0, 8004f02 <powf+0x72>
 8004ec4:	2100      	movs	r1, #0
 8004ec6:	4620      	mov	r0, r4
 8004ec8:	f7fc f8aa 	bl	8001020 <__aeabi_fcmplt>
 8004ecc:	b1c8      	cbz	r0, 8004f02 <powf+0x72>
 8004ece:	f7ff ff2d 	bl	8004d2c <__errno>
 8004ed2:	2322      	movs	r3, #34	; 0x22
 8004ed4:	e014      	b.n	8004f00 <powf+0x70>
 8004ed6:	4628      	mov	r0, r5
 8004ed8:	f000 f957 	bl	800518a <finitef>
 8004edc:	b998      	cbnz	r0, 8004f06 <powf+0x76>
 8004ede:	4630      	mov	r0, r6
 8004ee0:	f000 f953 	bl	800518a <finitef>
 8004ee4:	b178      	cbz	r0, 8004f06 <powf+0x76>
 8004ee6:	4620      	mov	r0, r4
 8004ee8:	f000 f94f 	bl	800518a <finitef>
 8004eec:	b158      	cbz	r0, 8004f06 <powf+0x76>
 8004eee:	4629      	mov	r1, r5
 8004ef0:	4628      	mov	r0, r5
 8004ef2:	f7fc f8bd 	bl	8001070 <__aeabi_fcmpun>
 8004ef6:	2800      	cmp	r0, #0
 8004ef8:	d0e9      	beq.n	8004ece <powf+0x3e>
 8004efa:	f7ff ff17 	bl	8004d2c <__errno>
 8004efe:	2321      	movs	r3, #33	; 0x21
 8004f00:	6003      	str	r3, [r0, #0]
 8004f02:	4628      	mov	r0, r5
 8004f04:	bd70      	pop	{r4, r5, r6, pc}
 8004f06:	2100      	movs	r1, #0
 8004f08:	4628      	mov	r0, r5
 8004f0a:	f7fc f87f 	bl	800100c <__aeabi_fcmpeq>
 8004f0e:	2800      	cmp	r0, #0
 8004f10:	d0f7      	beq.n	8004f02 <powf+0x72>
 8004f12:	4630      	mov	r0, r6
 8004f14:	f000 f939 	bl	800518a <finitef>
 8004f18:	2800      	cmp	r0, #0
 8004f1a:	d0f2      	beq.n	8004f02 <powf+0x72>
 8004f1c:	4620      	mov	r0, r4
 8004f1e:	f000 f934 	bl	800518a <finitef>
 8004f22:	e7d3      	b.n	8004ecc <powf+0x3c>
 8004f24:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
 8004f28:	e7eb      	b.n	8004f02 <powf+0x72>

08004f2a <sqrtf>:
 8004f2a:	b538      	push	{r3, r4, r5, lr}
 8004f2c:	4605      	mov	r5, r0
 8004f2e:	f000 f939 	bl	80051a4 <__ieee754_sqrtf>
 8004f32:	4629      	mov	r1, r5
 8004f34:	4604      	mov	r4, r0
 8004f36:	4628      	mov	r0, r5
 8004f38:	f7fc f89a 	bl	8001070 <__aeabi_fcmpun>
 8004f3c:	b968      	cbnz	r0, 8004f5a <sqrtf+0x30>
 8004f3e:	2100      	movs	r1, #0
 8004f40:	4628      	mov	r0, r5
 8004f42:	f7fc f86d 	bl	8001020 <__aeabi_fcmplt>
 8004f46:	b140      	cbz	r0, 8004f5a <sqrtf+0x30>
 8004f48:	f7ff fef0 	bl	8004d2c <__errno>
 8004f4c:	2321      	movs	r3, #33	; 0x21
 8004f4e:	2100      	movs	r1, #0
 8004f50:	6003      	str	r3, [r0, #0]
 8004f52:	4608      	mov	r0, r1
 8004f54:	f7fb ff7a 	bl	8000e4c <__aeabi_fdiv>
 8004f58:	4604      	mov	r4, r0
 8004f5a:	4620      	mov	r0, r4
 8004f5c:	bd38      	pop	{r3, r4, r5, pc}
	...

08004f60 <atanf>:
 8004f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f64:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 8004f68:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 8004f6c:	4604      	mov	r4, r0
 8004f6e:	4680      	mov	r8, r0
 8004f70:	db0e      	blt.n	8004f90 <atanf+0x30>
 8004f72:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8004f76:	dd04      	ble.n	8004f82 <atanf+0x22>
 8004f78:	4601      	mov	r1, r0
 8004f7a:	f7fb fdab 	bl	8000ad4 <__addsf3>
 8004f7e:	4604      	mov	r4, r0
 8004f80:	e003      	b.n	8004f8a <atanf+0x2a>
 8004f82:	2800      	cmp	r0, #0
 8004f84:	f300 80ce 	bgt.w	8005124 <atanf+0x1c4>
 8004f88:	4c67      	ldr	r4, [pc, #412]	; (8005128 <atanf+0x1c8>)
 8004f8a:	4620      	mov	r0, r4
 8004f8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f90:	4b66      	ldr	r3, [pc, #408]	; (800512c <atanf+0x1cc>)
 8004f92:	429d      	cmp	r5, r3
 8004f94:	dc0e      	bgt.n	8004fb4 <atanf+0x54>
 8004f96:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 8004f9a:	da08      	bge.n	8004fae <atanf+0x4e>
 8004f9c:	4964      	ldr	r1, [pc, #400]	; (8005130 <atanf+0x1d0>)
 8004f9e:	f7fb fd99 	bl	8000ad4 <__addsf3>
 8004fa2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8004fa6:	f7fc f859 	bl	800105c <__aeabi_fcmpgt>
 8004faa:	2800      	cmp	r0, #0
 8004fac:	d1ed      	bne.n	8004f8a <atanf+0x2a>
 8004fae:	f04f 36ff 	mov.w	r6, #4294967295
 8004fb2:	e01c      	b.n	8004fee <atanf+0x8e>
 8004fb4:	f000 f8e0 	bl	8005178 <fabsf>
 8004fb8:	4b5e      	ldr	r3, [pc, #376]	; (8005134 <atanf+0x1d4>)
 8004fba:	4604      	mov	r4, r0
 8004fbc:	429d      	cmp	r5, r3
 8004fbe:	dc7c      	bgt.n	80050ba <atanf+0x15a>
 8004fc0:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8004fc4:	429d      	cmp	r5, r3
 8004fc6:	dc67      	bgt.n	8005098 <atanf+0x138>
 8004fc8:	4601      	mov	r1, r0
 8004fca:	f7fb fd83 	bl	8000ad4 <__addsf3>
 8004fce:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8004fd2:	f7fb fd7d 	bl	8000ad0 <__aeabi_fsub>
 8004fd6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004fda:	4605      	mov	r5, r0
 8004fdc:	4620      	mov	r0, r4
 8004fde:	f7fb fd79 	bl	8000ad4 <__addsf3>
 8004fe2:	4601      	mov	r1, r0
 8004fe4:	4628      	mov	r0, r5
 8004fe6:	f7fb ff31 	bl	8000e4c <__aeabi_fdiv>
 8004fea:	2600      	movs	r6, #0
 8004fec:	4604      	mov	r4, r0
 8004fee:	4621      	mov	r1, r4
 8004ff0:	4620      	mov	r0, r4
 8004ff2:	f7fb fe77 	bl	8000ce4 <__aeabi_fmul>
 8004ff6:	4601      	mov	r1, r0
 8004ff8:	4607      	mov	r7, r0
 8004ffa:	f7fb fe73 	bl	8000ce4 <__aeabi_fmul>
 8004ffe:	4605      	mov	r5, r0
 8005000:	494d      	ldr	r1, [pc, #308]	; (8005138 <atanf+0x1d8>)
 8005002:	f7fb fe6f 	bl	8000ce4 <__aeabi_fmul>
 8005006:	494d      	ldr	r1, [pc, #308]	; (800513c <atanf+0x1dc>)
 8005008:	f7fb fd64 	bl	8000ad4 <__addsf3>
 800500c:	4629      	mov	r1, r5
 800500e:	f7fb fe69 	bl	8000ce4 <__aeabi_fmul>
 8005012:	494b      	ldr	r1, [pc, #300]	; (8005140 <atanf+0x1e0>)
 8005014:	f7fb fd5e 	bl	8000ad4 <__addsf3>
 8005018:	4629      	mov	r1, r5
 800501a:	f7fb fe63 	bl	8000ce4 <__aeabi_fmul>
 800501e:	4949      	ldr	r1, [pc, #292]	; (8005144 <atanf+0x1e4>)
 8005020:	f7fb fd58 	bl	8000ad4 <__addsf3>
 8005024:	4629      	mov	r1, r5
 8005026:	f7fb fe5d 	bl	8000ce4 <__aeabi_fmul>
 800502a:	4947      	ldr	r1, [pc, #284]	; (8005148 <atanf+0x1e8>)
 800502c:	f7fb fd52 	bl	8000ad4 <__addsf3>
 8005030:	4629      	mov	r1, r5
 8005032:	f7fb fe57 	bl	8000ce4 <__aeabi_fmul>
 8005036:	4945      	ldr	r1, [pc, #276]	; (800514c <atanf+0x1ec>)
 8005038:	f7fb fd4c 	bl	8000ad4 <__addsf3>
 800503c:	4639      	mov	r1, r7
 800503e:	f7fb fe51 	bl	8000ce4 <__aeabi_fmul>
 8005042:	4943      	ldr	r1, [pc, #268]	; (8005150 <atanf+0x1f0>)
 8005044:	4607      	mov	r7, r0
 8005046:	4628      	mov	r0, r5
 8005048:	f7fb fe4c 	bl	8000ce4 <__aeabi_fmul>
 800504c:	4941      	ldr	r1, [pc, #260]	; (8005154 <atanf+0x1f4>)
 800504e:	f7fb fd3f 	bl	8000ad0 <__aeabi_fsub>
 8005052:	4629      	mov	r1, r5
 8005054:	f7fb fe46 	bl	8000ce4 <__aeabi_fmul>
 8005058:	493f      	ldr	r1, [pc, #252]	; (8005158 <atanf+0x1f8>)
 800505a:	f7fb fd39 	bl	8000ad0 <__aeabi_fsub>
 800505e:	4629      	mov	r1, r5
 8005060:	f7fb fe40 	bl	8000ce4 <__aeabi_fmul>
 8005064:	493d      	ldr	r1, [pc, #244]	; (800515c <atanf+0x1fc>)
 8005066:	f7fb fd33 	bl	8000ad0 <__aeabi_fsub>
 800506a:	4629      	mov	r1, r5
 800506c:	f7fb fe3a 	bl	8000ce4 <__aeabi_fmul>
 8005070:	493b      	ldr	r1, [pc, #236]	; (8005160 <atanf+0x200>)
 8005072:	f7fb fd2d 	bl	8000ad0 <__aeabi_fsub>
 8005076:	4629      	mov	r1, r5
 8005078:	f7fb fe34 	bl	8000ce4 <__aeabi_fmul>
 800507c:	4601      	mov	r1, r0
 800507e:	4638      	mov	r0, r7
 8005080:	f7fb fd28 	bl	8000ad4 <__addsf3>
 8005084:	4621      	mov	r1, r4
 8005086:	f7fb fe2d 	bl	8000ce4 <__aeabi_fmul>
 800508a:	1c73      	adds	r3, r6, #1
 800508c:	4601      	mov	r1, r0
 800508e:	d133      	bne.n	80050f8 <atanf+0x198>
 8005090:	4620      	mov	r0, r4
 8005092:	f7fb fd1d 	bl	8000ad0 <__aeabi_fsub>
 8005096:	e772      	b.n	8004f7e <atanf+0x1e>
 8005098:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800509c:	f7fb fd18 	bl	8000ad0 <__aeabi_fsub>
 80050a0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80050a4:	4605      	mov	r5, r0
 80050a6:	4620      	mov	r0, r4
 80050a8:	f7fb fd14 	bl	8000ad4 <__addsf3>
 80050ac:	4601      	mov	r1, r0
 80050ae:	4628      	mov	r0, r5
 80050b0:	f7fb fecc 	bl	8000e4c <__aeabi_fdiv>
 80050b4:	2601      	movs	r6, #1
 80050b6:	4604      	mov	r4, r0
 80050b8:	e799      	b.n	8004fee <atanf+0x8e>
 80050ba:	4b2a      	ldr	r3, [pc, #168]	; (8005164 <atanf+0x204>)
 80050bc:	429d      	cmp	r5, r3
 80050be:	dc14      	bgt.n	80050ea <atanf+0x18a>
 80050c0:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 80050c4:	f7fb fd04 	bl	8000ad0 <__aeabi_fsub>
 80050c8:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 80050cc:	4605      	mov	r5, r0
 80050ce:	4620      	mov	r0, r4
 80050d0:	f7fb fe08 	bl	8000ce4 <__aeabi_fmul>
 80050d4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80050d8:	f7fb fcfc 	bl	8000ad4 <__addsf3>
 80050dc:	4601      	mov	r1, r0
 80050de:	4628      	mov	r0, r5
 80050e0:	f7fb feb4 	bl	8000e4c <__aeabi_fdiv>
 80050e4:	2602      	movs	r6, #2
 80050e6:	4604      	mov	r4, r0
 80050e8:	e781      	b.n	8004fee <atanf+0x8e>
 80050ea:	4601      	mov	r1, r0
 80050ec:	481e      	ldr	r0, [pc, #120]	; (8005168 <atanf+0x208>)
 80050ee:	f7fb fead 	bl	8000e4c <__aeabi_fdiv>
 80050f2:	2603      	movs	r6, #3
 80050f4:	4604      	mov	r4, r0
 80050f6:	e77a      	b.n	8004fee <atanf+0x8e>
 80050f8:	4b1c      	ldr	r3, [pc, #112]	; (800516c <atanf+0x20c>)
 80050fa:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 80050fe:	f7fb fce7 	bl	8000ad0 <__aeabi_fsub>
 8005102:	4621      	mov	r1, r4
 8005104:	f7fb fce4 	bl	8000ad0 <__aeabi_fsub>
 8005108:	4b19      	ldr	r3, [pc, #100]	; (8005170 <atanf+0x210>)
 800510a:	4601      	mov	r1, r0
 800510c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005110:	f7fb fcde 	bl	8000ad0 <__aeabi_fsub>
 8005114:	f1b8 0f00 	cmp.w	r8, #0
 8005118:	4604      	mov	r4, r0
 800511a:	f6bf af36 	bge.w	8004f8a <atanf+0x2a>
 800511e:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
 8005122:	e732      	b.n	8004f8a <atanf+0x2a>
 8005124:	4c13      	ldr	r4, [pc, #76]	; (8005174 <atanf+0x214>)
 8005126:	e730      	b.n	8004f8a <atanf+0x2a>
 8005128:	bfc90fdb 	.word	0xbfc90fdb
 800512c:	3edfffff 	.word	0x3edfffff
 8005130:	7149f2ca 	.word	0x7149f2ca
 8005134:	3f97ffff 	.word	0x3f97ffff
 8005138:	3c8569d7 	.word	0x3c8569d7
 800513c:	3d4bda59 	.word	0x3d4bda59
 8005140:	3d886b35 	.word	0x3d886b35
 8005144:	3dba2e6e 	.word	0x3dba2e6e
 8005148:	3e124925 	.word	0x3e124925
 800514c:	3eaaaaab 	.word	0x3eaaaaab
 8005150:	bd15a221 	.word	0xbd15a221
 8005154:	3d6ef16b 	.word	0x3d6ef16b
 8005158:	3d9d8795 	.word	0x3d9d8795
 800515c:	3de38e38 	.word	0x3de38e38
 8005160:	3e4ccccd 	.word	0x3e4ccccd
 8005164:	401bffff 	.word	0x401bffff
 8005168:	bf800000 	.word	0xbf800000
 800516c:	08006a6c 	.word	0x08006a6c
 8005170:	08006a5c 	.word	0x08006a5c
 8005174:	3fc90fdb 	.word	0x3fc90fdb

08005178 <fabsf>:
 8005178:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800517c:	4770      	bx	lr

0800517e <finite>:
 800517e:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8005182:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8005186:	0fc0      	lsrs	r0, r0, #31
 8005188:	4770      	bx	lr

0800518a <finitef>:
 800518a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800518e:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8005192:	bfac      	ite	ge
 8005194:	2000      	movge	r0, #0
 8005196:	2001      	movlt	r0, #1
 8005198:	4770      	bx	lr
	...

0800519c <nanf>:
 800519c:	4800      	ldr	r0, [pc, #0]	; (80051a0 <nanf+0x4>)
 800519e:	4770      	bx	lr
 80051a0:	7fc00000 	.word	0x7fc00000

080051a4 <__ieee754_sqrtf>:
 80051a4:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 80051a8:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80051ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051b0:	4603      	mov	r3, r0
 80051b2:	4604      	mov	r4, r0
 80051b4:	d30a      	bcc.n	80051cc <__ieee754_sqrtf+0x28>
 80051b6:	4601      	mov	r1, r0
 80051b8:	f7fb fd94 	bl	8000ce4 <__aeabi_fmul>
 80051bc:	4601      	mov	r1, r0
 80051be:	4620      	mov	r0, r4
 80051c0:	f7fb fc88 	bl	8000ad4 <__addsf3>
 80051c4:	4604      	mov	r4, r0
 80051c6:	4620      	mov	r0, r4
 80051c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051cc:	2a00      	cmp	r2, #0
 80051ce:	d0fa      	beq.n	80051c6 <__ieee754_sqrtf+0x22>
 80051d0:	2800      	cmp	r0, #0
 80051d2:	da06      	bge.n	80051e2 <__ieee754_sqrtf+0x3e>
 80051d4:	4601      	mov	r1, r0
 80051d6:	f7fb fc7b 	bl	8000ad0 <__aeabi_fsub>
 80051da:	4601      	mov	r1, r0
 80051dc:	f7fb fe36 	bl	8000e4c <__aeabi_fdiv>
 80051e0:	e7f0      	b.n	80051c4 <__ieee754_sqrtf+0x20>
 80051e2:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 80051e6:	ea4f 51e0 	mov.w	r1, r0, asr #23
 80051ea:	d03e      	beq.n	800526a <__ieee754_sqrtf+0xc6>
 80051ec:	2400      	movs	r4, #0
 80051ee:	f1a1 057f 	sub.w	r5, r1, #127	; 0x7f
 80051f2:	07ca      	lsls	r2, r1, #31
 80051f4:	f04f 0019 	mov.w	r0, #25
 80051f8:	4626      	mov	r6, r4
 80051fa:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 80051fe:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8005202:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005206:	bf58      	it	pl
 8005208:	005b      	lslpl	r3, r3, #1
 800520a:	106d      	asrs	r5, r5, #1
 800520c:	005b      	lsls	r3, r3, #1
 800520e:	1872      	adds	r2, r6, r1
 8005210:	429a      	cmp	r2, r3
 8005212:	bfcf      	iteee	gt
 8005214:	461a      	movgt	r2, r3
 8005216:	1856      	addle	r6, r2, r1
 8005218:	1864      	addle	r4, r4, r1
 800521a:	1a9a      	suble	r2, r3, r2
 800521c:	3801      	subs	r0, #1
 800521e:	ea4f 0342 	mov.w	r3, r2, lsl #1
 8005222:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8005226:	d1f2      	bne.n	800520e <__ieee754_sqrtf+0x6a>
 8005228:	b1ba      	cbz	r2, 800525a <__ieee754_sqrtf+0xb6>
 800522a:	4e14      	ldr	r6, [pc, #80]	; (800527c <__ieee754_sqrtf+0xd8>)
 800522c:	4f14      	ldr	r7, [pc, #80]	; (8005280 <__ieee754_sqrtf+0xdc>)
 800522e:	6830      	ldr	r0, [r6, #0]
 8005230:	6839      	ldr	r1, [r7, #0]
 8005232:	f7fb fc4d 	bl	8000ad0 <__aeabi_fsub>
 8005236:	f8d6 8000 	ldr.w	r8, [r6]
 800523a:	4601      	mov	r1, r0
 800523c:	4640      	mov	r0, r8
 800523e:	f7fb fef9 	bl	8001034 <__aeabi_fcmple>
 8005242:	b150      	cbz	r0, 800525a <__ieee754_sqrtf+0xb6>
 8005244:	6830      	ldr	r0, [r6, #0]
 8005246:	6839      	ldr	r1, [r7, #0]
 8005248:	f7fb fc44 	bl	8000ad4 <__addsf3>
 800524c:	6836      	ldr	r6, [r6, #0]
 800524e:	4601      	mov	r1, r0
 8005250:	4630      	mov	r0, r6
 8005252:	f7fb fee5 	bl	8001020 <__aeabi_fcmplt>
 8005256:	b168      	cbz	r0, 8005274 <__ieee754_sqrtf+0xd0>
 8005258:	3402      	adds	r4, #2
 800525a:	1064      	asrs	r4, r4, #1
 800525c:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 8005260:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 8005264:	e7af      	b.n	80051c6 <__ieee754_sqrtf+0x22>
 8005266:	005b      	lsls	r3, r3, #1
 8005268:	3201      	adds	r2, #1
 800526a:	0218      	lsls	r0, r3, #8
 800526c:	d5fb      	bpl.n	8005266 <__ieee754_sqrtf+0xc2>
 800526e:	3a01      	subs	r2, #1
 8005270:	1a89      	subs	r1, r1, r2
 8005272:	e7bb      	b.n	80051ec <__ieee754_sqrtf+0x48>
 8005274:	3401      	adds	r4, #1
 8005276:	f024 0401 	bic.w	r4, r4, #1
 800527a:	e7ee      	b.n	800525a <__ieee754_sqrtf+0xb6>
 800527c:	2000006c 	.word	0x2000006c
 8005280:	20000070 	.word	0x20000070
 8005284:	00000000 	.word	0x00000000

08005288 <__ieee754_pow>:
 8005288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800528c:	b093      	sub	sp, #76	; 0x4c
 800528e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005292:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 8005296:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800529a:	4689      	mov	r9, r1
 800529c:	ea56 0102 	orrs.w	r1, r6, r2
 80052a0:	4680      	mov	r8, r0
 80052a2:	d111      	bne.n	80052c8 <__ieee754_pow+0x40>
 80052a4:	1803      	adds	r3, r0, r0
 80052a6:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 80052aa:	4152      	adcs	r2, r2
 80052ac:	4299      	cmp	r1, r3
 80052ae:	4b82      	ldr	r3, [pc, #520]	; (80054b8 <__ieee754_pow+0x230>)
 80052b0:	4193      	sbcs	r3, r2
 80052b2:	f080 84ba 	bcs.w	8005c2a <__ieee754_pow+0x9a2>
 80052b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80052ba:	4640      	mov	r0, r8
 80052bc:	4649      	mov	r1, r9
 80052be:	f7fa ff4d 	bl	800015c <__adddf3>
 80052c2:	4683      	mov	fp, r0
 80052c4:	468c      	mov	ip, r1
 80052c6:	e06f      	b.n	80053a8 <__ieee754_pow+0x120>
 80052c8:	4b7c      	ldr	r3, [pc, #496]	; (80054bc <__ieee754_pow+0x234>)
 80052ca:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 80052ce:	429c      	cmp	r4, r3
 80052d0:	464d      	mov	r5, r9
 80052d2:	4682      	mov	sl, r0
 80052d4:	dc06      	bgt.n	80052e4 <__ieee754_pow+0x5c>
 80052d6:	d101      	bne.n	80052dc <__ieee754_pow+0x54>
 80052d8:	2800      	cmp	r0, #0
 80052da:	d1ec      	bne.n	80052b6 <__ieee754_pow+0x2e>
 80052dc:	429e      	cmp	r6, r3
 80052de:	dc01      	bgt.n	80052e4 <__ieee754_pow+0x5c>
 80052e0:	d10f      	bne.n	8005302 <__ieee754_pow+0x7a>
 80052e2:	b172      	cbz	r2, 8005302 <__ieee754_pow+0x7a>
 80052e4:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80052e8:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80052ec:	ea55 050a 	orrs.w	r5, r5, sl
 80052f0:	d1e1      	bne.n	80052b6 <__ieee754_pow+0x2e>
 80052f2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80052f6:	18db      	adds	r3, r3, r3
 80052f8:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80052fc:	4152      	adcs	r2, r2
 80052fe:	429d      	cmp	r5, r3
 8005300:	e7d5      	b.n	80052ae <__ieee754_pow+0x26>
 8005302:	2d00      	cmp	r5, #0
 8005304:	da39      	bge.n	800537a <__ieee754_pow+0xf2>
 8005306:	4b6e      	ldr	r3, [pc, #440]	; (80054c0 <__ieee754_pow+0x238>)
 8005308:	429e      	cmp	r6, r3
 800530a:	dc52      	bgt.n	80053b2 <__ieee754_pow+0x12a>
 800530c:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8005310:	429e      	cmp	r6, r3
 8005312:	f340 849d 	ble.w	8005c50 <__ieee754_pow+0x9c8>
 8005316:	1533      	asrs	r3, r6, #20
 8005318:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800531c:	2b14      	cmp	r3, #20
 800531e:	dd0f      	ble.n	8005340 <__ieee754_pow+0xb8>
 8005320:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8005324:	fa22 f103 	lsr.w	r1, r2, r3
 8005328:	fa01 f303 	lsl.w	r3, r1, r3
 800532c:	4293      	cmp	r3, r2
 800532e:	f040 848f 	bne.w	8005c50 <__ieee754_pow+0x9c8>
 8005332:	f001 0101 	and.w	r1, r1, #1
 8005336:	f1c1 0302 	rsb	r3, r1, #2
 800533a:	9300      	str	r3, [sp, #0]
 800533c:	b182      	cbz	r2, 8005360 <__ieee754_pow+0xd8>
 800533e:	e05d      	b.n	80053fc <__ieee754_pow+0x174>
 8005340:	2a00      	cmp	r2, #0
 8005342:	d159      	bne.n	80053f8 <__ieee754_pow+0x170>
 8005344:	f1c3 0314 	rsb	r3, r3, #20
 8005348:	fa46 f103 	asr.w	r1, r6, r3
 800534c:	fa01 f303 	lsl.w	r3, r1, r3
 8005350:	42b3      	cmp	r3, r6
 8005352:	f040 847a 	bne.w	8005c4a <__ieee754_pow+0x9c2>
 8005356:	f001 0101 	and.w	r1, r1, #1
 800535a:	f1c1 0302 	rsb	r3, r1, #2
 800535e:	9300      	str	r3, [sp, #0]
 8005360:	4b58      	ldr	r3, [pc, #352]	; (80054c4 <__ieee754_pow+0x23c>)
 8005362:	429e      	cmp	r6, r3
 8005364:	d132      	bne.n	80053cc <__ieee754_pow+0x144>
 8005366:	2f00      	cmp	r7, #0
 8005368:	f280 846b 	bge.w	8005c42 <__ieee754_pow+0x9ba>
 800536c:	4642      	mov	r2, r8
 800536e:	464b      	mov	r3, r9
 8005370:	2000      	movs	r0, #0
 8005372:	4954      	ldr	r1, [pc, #336]	; (80054c4 <__ieee754_pow+0x23c>)
 8005374:	f7fb f9d2 	bl	800071c <__aeabi_ddiv>
 8005378:	e7a3      	b.n	80052c2 <__ieee754_pow+0x3a>
 800537a:	2300      	movs	r3, #0
 800537c:	9300      	str	r3, [sp, #0]
 800537e:	2a00      	cmp	r2, #0
 8005380:	d13c      	bne.n	80053fc <__ieee754_pow+0x174>
 8005382:	4b4e      	ldr	r3, [pc, #312]	; (80054bc <__ieee754_pow+0x234>)
 8005384:	429e      	cmp	r6, r3
 8005386:	d1eb      	bne.n	8005360 <__ieee754_pow+0xd8>
 8005388:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800538c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8005390:	ea53 030a 	orrs.w	r3, r3, sl
 8005394:	f000 8449 	beq.w	8005c2a <__ieee754_pow+0x9a2>
 8005398:	4b4b      	ldr	r3, [pc, #300]	; (80054c8 <__ieee754_pow+0x240>)
 800539a:	429c      	cmp	r4, r3
 800539c:	dd0b      	ble.n	80053b6 <__ieee754_pow+0x12e>
 800539e:	2f00      	cmp	r7, #0
 80053a0:	f2c0 8449 	blt.w	8005c36 <__ieee754_pow+0x9ae>
 80053a4:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 80053a8:	4658      	mov	r0, fp
 80053aa:	4661      	mov	r1, ip
 80053ac:	b013      	add	sp, #76	; 0x4c
 80053ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053b2:	2302      	movs	r3, #2
 80053b4:	e7e2      	b.n	800537c <__ieee754_pow+0xf4>
 80053b6:	2f00      	cmp	r7, #0
 80053b8:	f04f 0b00 	mov.w	fp, #0
 80053bc:	f04f 0c00 	mov.w	ip, #0
 80053c0:	daf2      	bge.n	80053a8 <__ieee754_pow+0x120>
 80053c2:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 80053c6:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 80053ca:	e7ed      	b.n	80053a8 <__ieee754_pow+0x120>
 80053cc:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 80053d0:	d106      	bne.n	80053e0 <__ieee754_pow+0x158>
 80053d2:	4642      	mov	r2, r8
 80053d4:	464b      	mov	r3, r9
 80053d6:	4640      	mov	r0, r8
 80053d8:	4649      	mov	r1, r9
 80053da:	f7fb f875 	bl	80004c8 <__aeabi_dmul>
 80053de:	e770      	b.n	80052c2 <__ieee754_pow+0x3a>
 80053e0:	4b3a      	ldr	r3, [pc, #232]	; (80054cc <__ieee754_pow+0x244>)
 80053e2:	429f      	cmp	r7, r3
 80053e4:	d10a      	bne.n	80053fc <__ieee754_pow+0x174>
 80053e6:	2d00      	cmp	r5, #0
 80053e8:	db08      	blt.n	80053fc <__ieee754_pow+0x174>
 80053ea:	4640      	mov	r0, r8
 80053ec:	4649      	mov	r1, r9
 80053ee:	b013      	add	sp, #76	; 0x4c
 80053f0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053f4:	f001 ba3c 	b.w	8006870 <__ieee754_sqrt>
 80053f8:	2300      	movs	r3, #0
 80053fa:	9300      	str	r3, [sp, #0]
 80053fc:	4640      	mov	r0, r8
 80053fe:	4649      	mov	r1, r9
 8005400:	f000 fc58 	bl	8005cb4 <fabs>
 8005404:	4683      	mov	fp, r0
 8005406:	468c      	mov	ip, r1
 8005408:	f1ba 0f00 	cmp.w	sl, #0
 800540c:	d128      	bne.n	8005460 <__ieee754_pow+0x1d8>
 800540e:	b124      	cbz	r4, 800541a <__ieee754_pow+0x192>
 8005410:	4b2c      	ldr	r3, [pc, #176]	; (80054c4 <__ieee754_pow+0x23c>)
 8005412:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8005416:	429a      	cmp	r2, r3
 8005418:	d122      	bne.n	8005460 <__ieee754_pow+0x1d8>
 800541a:	2f00      	cmp	r7, #0
 800541c:	da07      	bge.n	800542e <__ieee754_pow+0x1a6>
 800541e:	465a      	mov	r2, fp
 8005420:	4663      	mov	r3, ip
 8005422:	2000      	movs	r0, #0
 8005424:	4927      	ldr	r1, [pc, #156]	; (80054c4 <__ieee754_pow+0x23c>)
 8005426:	f7fb f979 	bl	800071c <__aeabi_ddiv>
 800542a:	4683      	mov	fp, r0
 800542c:	468c      	mov	ip, r1
 800542e:	2d00      	cmp	r5, #0
 8005430:	daba      	bge.n	80053a8 <__ieee754_pow+0x120>
 8005432:	9b00      	ldr	r3, [sp, #0]
 8005434:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005438:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800543c:	431c      	orrs	r4, r3
 800543e:	d108      	bne.n	8005452 <__ieee754_pow+0x1ca>
 8005440:	465a      	mov	r2, fp
 8005442:	4663      	mov	r3, ip
 8005444:	4658      	mov	r0, fp
 8005446:	4661      	mov	r1, ip
 8005448:	f7fa fe86 	bl	8000158 <__aeabi_dsub>
 800544c:	4602      	mov	r2, r0
 800544e:	460b      	mov	r3, r1
 8005450:	e790      	b.n	8005374 <__ieee754_pow+0xec>
 8005452:	9b00      	ldr	r3, [sp, #0]
 8005454:	2b01      	cmp	r3, #1
 8005456:	d1a7      	bne.n	80053a8 <__ieee754_pow+0x120>
 8005458:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800545c:	469c      	mov	ip, r3
 800545e:	e7a3      	b.n	80053a8 <__ieee754_pow+0x120>
 8005460:	0feb      	lsrs	r3, r5, #31
 8005462:	3b01      	subs	r3, #1
 8005464:	930c      	str	r3, [sp, #48]	; 0x30
 8005466:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005468:	9b00      	ldr	r3, [sp, #0]
 800546a:	4313      	orrs	r3, r2
 800546c:	d104      	bne.n	8005478 <__ieee754_pow+0x1f0>
 800546e:	4642      	mov	r2, r8
 8005470:	464b      	mov	r3, r9
 8005472:	4640      	mov	r0, r8
 8005474:	4649      	mov	r1, r9
 8005476:	e7e7      	b.n	8005448 <__ieee754_pow+0x1c0>
 8005478:	4b15      	ldr	r3, [pc, #84]	; (80054d0 <__ieee754_pow+0x248>)
 800547a:	429e      	cmp	r6, r3
 800547c:	f340 80f6 	ble.w	800566c <__ieee754_pow+0x3e4>
 8005480:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8005484:	429e      	cmp	r6, r3
 8005486:	4b10      	ldr	r3, [pc, #64]	; (80054c8 <__ieee754_pow+0x240>)
 8005488:	dd09      	ble.n	800549e <__ieee754_pow+0x216>
 800548a:	429c      	cmp	r4, r3
 800548c:	dc0c      	bgt.n	80054a8 <__ieee754_pow+0x220>
 800548e:	2f00      	cmp	r7, #0
 8005490:	da0c      	bge.n	80054ac <__ieee754_pow+0x224>
 8005492:	2000      	movs	r0, #0
 8005494:	b013      	add	sp, #76	; 0x4c
 8005496:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800549a:	f001 b97a 	b.w	8006792 <__math_oflow>
 800549e:	429c      	cmp	r4, r3
 80054a0:	dbf5      	blt.n	800548e <__ieee754_pow+0x206>
 80054a2:	4b08      	ldr	r3, [pc, #32]	; (80054c4 <__ieee754_pow+0x23c>)
 80054a4:	429c      	cmp	r4, r3
 80054a6:	dd15      	ble.n	80054d4 <__ieee754_pow+0x24c>
 80054a8:	2f00      	cmp	r7, #0
 80054aa:	dcf2      	bgt.n	8005492 <__ieee754_pow+0x20a>
 80054ac:	2000      	movs	r0, #0
 80054ae:	b013      	add	sp, #76	; 0x4c
 80054b0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054b4:	f001 b968 	b.w	8006788 <__math_uflow>
 80054b8:	fff00000 	.word	0xfff00000
 80054bc:	7ff00000 	.word	0x7ff00000
 80054c0:	433fffff 	.word	0x433fffff
 80054c4:	3ff00000 	.word	0x3ff00000
 80054c8:	3fefffff 	.word	0x3fefffff
 80054cc:	3fe00000 	.word	0x3fe00000
 80054d0:	41e00000 	.word	0x41e00000
 80054d4:	4661      	mov	r1, ip
 80054d6:	2200      	movs	r2, #0
 80054d8:	4658      	mov	r0, fp
 80054da:	4b5f      	ldr	r3, [pc, #380]	; (8005658 <__ieee754_pow+0x3d0>)
 80054dc:	f7fa fe3c 	bl	8000158 <__aeabi_dsub>
 80054e0:	a355      	add	r3, pc, #340	; (adr r3, 8005638 <__ieee754_pow+0x3b0>)
 80054e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e6:	4604      	mov	r4, r0
 80054e8:	460d      	mov	r5, r1
 80054ea:	f7fa ffed 	bl	80004c8 <__aeabi_dmul>
 80054ee:	a354      	add	r3, pc, #336	; (adr r3, 8005640 <__ieee754_pow+0x3b8>)
 80054f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f4:	4606      	mov	r6, r0
 80054f6:	460f      	mov	r7, r1
 80054f8:	4620      	mov	r0, r4
 80054fa:	4629      	mov	r1, r5
 80054fc:	f7fa ffe4 	bl	80004c8 <__aeabi_dmul>
 8005500:	2200      	movs	r2, #0
 8005502:	4682      	mov	sl, r0
 8005504:	468b      	mov	fp, r1
 8005506:	4620      	mov	r0, r4
 8005508:	4629      	mov	r1, r5
 800550a:	4b54      	ldr	r3, [pc, #336]	; (800565c <__ieee754_pow+0x3d4>)
 800550c:	f7fa ffdc 	bl	80004c8 <__aeabi_dmul>
 8005510:	4602      	mov	r2, r0
 8005512:	460b      	mov	r3, r1
 8005514:	a14c      	add	r1, pc, #304	; (adr r1, 8005648 <__ieee754_pow+0x3c0>)
 8005516:	e9d1 0100 	ldrd	r0, r1, [r1]
 800551a:	f7fa fe1d 	bl	8000158 <__aeabi_dsub>
 800551e:	4622      	mov	r2, r4
 8005520:	462b      	mov	r3, r5
 8005522:	f7fa ffd1 	bl	80004c8 <__aeabi_dmul>
 8005526:	4602      	mov	r2, r0
 8005528:	460b      	mov	r3, r1
 800552a:	2000      	movs	r0, #0
 800552c:	494c      	ldr	r1, [pc, #304]	; (8005660 <__ieee754_pow+0x3d8>)
 800552e:	f7fa fe13 	bl	8000158 <__aeabi_dsub>
 8005532:	4622      	mov	r2, r4
 8005534:	462b      	mov	r3, r5
 8005536:	4680      	mov	r8, r0
 8005538:	4689      	mov	r9, r1
 800553a:	4620      	mov	r0, r4
 800553c:	4629      	mov	r1, r5
 800553e:	f7fa ffc3 	bl	80004c8 <__aeabi_dmul>
 8005542:	4602      	mov	r2, r0
 8005544:	460b      	mov	r3, r1
 8005546:	4640      	mov	r0, r8
 8005548:	4649      	mov	r1, r9
 800554a:	f7fa ffbd 	bl	80004c8 <__aeabi_dmul>
 800554e:	a340      	add	r3, pc, #256	; (adr r3, 8005650 <__ieee754_pow+0x3c8>)
 8005550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005554:	f7fa ffb8 	bl	80004c8 <__aeabi_dmul>
 8005558:	4602      	mov	r2, r0
 800555a:	460b      	mov	r3, r1
 800555c:	4650      	mov	r0, sl
 800555e:	4659      	mov	r1, fp
 8005560:	f7fa fdfa 	bl	8000158 <__aeabi_dsub>
 8005564:	4602      	mov	r2, r0
 8005566:	460b      	mov	r3, r1
 8005568:	4604      	mov	r4, r0
 800556a:	460d      	mov	r5, r1
 800556c:	4630      	mov	r0, r6
 800556e:	4639      	mov	r1, r7
 8005570:	f7fa fdf4 	bl	800015c <__adddf3>
 8005574:	2000      	movs	r0, #0
 8005576:	4632      	mov	r2, r6
 8005578:	463b      	mov	r3, r7
 800557a:	4682      	mov	sl, r0
 800557c:	468b      	mov	fp, r1
 800557e:	f7fa fdeb 	bl	8000158 <__aeabi_dsub>
 8005582:	4602      	mov	r2, r0
 8005584:	460b      	mov	r3, r1
 8005586:	4620      	mov	r0, r4
 8005588:	4629      	mov	r1, r5
 800558a:	f7fa fde5 	bl	8000158 <__aeabi_dsub>
 800558e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005592:	9b00      	ldr	r3, [sp, #0]
 8005594:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005596:	3b01      	subs	r3, #1
 8005598:	4313      	orrs	r3, r2
 800559a:	f04f 0600 	mov.w	r6, #0
 800559e:	f04f 0200 	mov.w	r2, #0
 80055a2:	bf0c      	ite	eq
 80055a4:	4b2f      	ldreq	r3, [pc, #188]	; (8005664 <__ieee754_pow+0x3dc>)
 80055a6:	4b2c      	ldrne	r3, [pc, #176]	; (8005658 <__ieee754_pow+0x3d0>)
 80055a8:	4604      	mov	r4, r0
 80055aa:	460d      	mov	r5, r1
 80055ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80055b0:	e9cd 2300 	strd	r2, r3, [sp]
 80055b4:	4632      	mov	r2, r6
 80055b6:	463b      	mov	r3, r7
 80055b8:	f7fa fdce 	bl	8000158 <__aeabi_dsub>
 80055bc:	4652      	mov	r2, sl
 80055be:	465b      	mov	r3, fp
 80055c0:	f7fa ff82 	bl	80004c8 <__aeabi_dmul>
 80055c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80055c8:	4680      	mov	r8, r0
 80055ca:	4689      	mov	r9, r1
 80055cc:	4620      	mov	r0, r4
 80055ce:	4629      	mov	r1, r5
 80055d0:	f7fa ff7a 	bl	80004c8 <__aeabi_dmul>
 80055d4:	4602      	mov	r2, r0
 80055d6:	460b      	mov	r3, r1
 80055d8:	4640      	mov	r0, r8
 80055da:	4649      	mov	r1, r9
 80055dc:	f7fa fdbe 	bl	800015c <__adddf3>
 80055e0:	4632      	mov	r2, r6
 80055e2:	463b      	mov	r3, r7
 80055e4:	4680      	mov	r8, r0
 80055e6:	4689      	mov	r9, r1
 80055e8:	4650      	mov	r0, sl
 80055ea:	4659      	mov	r1, fp
 80055ec:	f7fa ff6c 	bl	80004c8 <__aeabi_dmul>
 80055f0:	4604      	mov	r4, r0
 80055f2:	460d      	mov	r5, r1
 80055f4:	460b      	mov	r3, r1
 80055f6:	4602      	mov	r2, r0
 80055f8:	4649      	mov	r1, r9
 80055fa:	4640      	mov	r0, r8
 80055fc:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005600:	f7fa fdac 	bl	800015c <__adddf3>
 8005604:	4b18      	ldr	r3, [pc, #96]	; (8005668 <__ieee754_pow+0x3e0>)
 8005606:	4682      	mov	sl, r0
 8005608:	4299      	cmp	r1, r3
 800560a:	460f      	mov	r7, r1
 800560c:	460e      	mov	r6, r1
 800560e:	f340 82e7 	ble.w	8005be0 <__ieee754_pow+0x958>
 8005612:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8005616:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800561a:	4303      	orrs	r3, r0
 800561c:	f000 81e2 	beq.w	80059e4 <__ieee754_pow+0x75c>
 8005620:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005624:	2200      	movs	r2, #0
 8005626:	2300      	movs	r3, #0
 8005628:	f7fb f9c0 	bl	80009ac <__aeabi_dcmplt>
 800562c:	3800      	subs	r0, #0
 800562e:	bf18      	it	ne
 8005630:	2001      	movne	r0, #1
 8005632:	e72f      	b.n	8005494 <__ieee754_pow+0x20c>
 8005634:	f3af 8000 	nop.w
 8005638:	60000000 	.word	0x60000000
 800563c:	3ff71547 	.word	0x3ff71547
 8005640:	f85ddf44 	.word	0xf85ddf44
 8005644:	3e54ae0b 	.word	0x3e54ae0b
 8005648:	55555555 	.word	0x55555555
 800564c:	3fd55555 	.word	0x3fd55555
 8005650:	652b82fe 	.word	0x652b82fe
 8005654:	3ff71547 	.word	0x3ff71547
 8005658:	3ff00000 	.word	0x3ff00000
 800565c:	3fd00000 	.word	0x3fd00000
 8005660:	3fe00000 	.word	0x3fe00000
 8005664:	bff00000 	.word	0xbff00000
 8005668:	408fffff 	.word	0x408fffff
 800566c:	4bd4      	ldr	r3, [pc, #848]	; (80059c0 <__ieee754_pow+0x738>)
 800566e:	2200      	movs	r2, #0
 8005670:	402b      	ands	r3, r5
 8005672:	b943      	cbnz	r3, 8005686 <__ieee754_pow+0x3fe>
 8005674:	4658      	mov	r0, fp
 8005676:	4661      	mov	r1, ip
 8005678:	4bd2      	ldr	r3, [pc, #840]	; (80059c4 <__ieee754_pow+0x73c>)
 800567a:	f7fa ff25 	bl	80004c8 <__aeabi_dmul>
 800567e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8005682:	4683      	mov	fp, r0
 8005684:	460c      	mov	r4, r1
 8005686:	1523      	asrs	r3, r4, #20
 8005688:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800568c:	4413      	add	r3, r2
 800568e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005690:	4bcd      	ldr	r3, [pc, #820]	; (80059c8 <__ieee754_pow+0x740>)
 8005692:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8005696:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800569a:	429c      	cmp	r4, r3
 800569c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80056a0:	dd08      	ble.n	80056b4 <__ieee754_pow+0x42c>
 80056a2:	4bca      	ldr	r3, [pc, #808]	; (80059cc <__ieee754_pow+0x744>)
 80056a4:	429c      	cmp	r4, r3
 80056a6:	f340 8164 	ble.w	8005972 <__ieee754_pow+0x6ea>
 80056aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056ac:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80056b0:	3301      	adds	r3, #1
 80056b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80056b4:	2600      	movs	r6, #0
 80056b6:	00f3      	lsls	r3, r6, #3
 80056b8:	930d      	str	r3, [sp, #52]	; 0x34
 80056ba:	4bc5      	ldr	r3, [pc, #788]	; (80059d0 <__ieee754_pow+0x748>)
 80056bc:	4658      	mov	r0, fp
 80056be:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80056c2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80056c6:	4629      	mov	r1, r5
 80056c8:	461a      	mov	r2, r3
 80056ca:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80056ce:	4623      	mov	r3, r4
 80056d0:	f7fa fd42 	bl	8000158 <__aeabi_dsub>
 80056d4:	46da      	mov	sl, fp
 80056d6:	462b      	mov	r3, r5
 80056d8:	4652      	mov	r2, sl
 80056da:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80056de:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80056e2:	f7fa fd3b 	bl	800015c <__adddf3>
 80056e6:	4602      	mov	r2, r0
 80056e8:	460b      	mov	r3, r1
 80056ea:	2000      	movs	r0, #0
 80056ec:	49b9      	ldr	r1, [pc, #740]	; (80059d4 <__ieee754_pow+0x74c>)
 80056ee:	f7fb f815 	bl	800071c <__aeabi_ddiv>
 80056f2:	4602      	mov	r2, r0
 80056f4:	460b      	mov	r3, r1
 80056f6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80056fa:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80056fe:	f7fa fee3 	bl	80004c8 <__aeabi_dmul>
 8005702:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005706:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800570a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800570e:	2300      	movs	r3, #0
 8005710:	2200      	movs	r2, #0
 8005712:	46ab      	mov	fp, r5
 8005714:	106d      	asrs	r5, r5, #1
 8005716:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800571a:	9304      	str	r3, [sp, #16]
 800571c:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8005720:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005724:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8005728:	4640      	mov	r0, r8
 800572a:	4649      	mov	r1, r9
 800572c:	4614      	mov	r4, r2
 800572e:	461d      	mov	r5, r3
 8005730:	f7fa feca 	bl	80004c8 <__aeabi_dmul>
 8005734:	4602      	mov	r2, r0
 8005736:	460b      	mov	r3, r1
 8005738:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800573c:	f7fa fd0c 	bl	8000158 <__aeabi_dsub>
 8005740:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005744:	4606      	mov	r6, r0
 8005746:	460f      	mov	r7, r1
 8005748:	4620      	mov	r0, r4
 800574a:	4629      	mov	r1, r5
 800574c:	f7fa fd04 	bl	8000158 <__aeabi_dsub>
 8005750:	4602      	mov	r2, r0
 8005752:	460b      	mov	r3, r1
 8005754:	4650      	mov	r0, sl
 8005756:	4659      	mov	r1, fp
 8005758:	f7fa fcfe 	bl	8000158 <__aeabi_dsub>
 800575c:	4642      	mov	r2, r8
 800575e:	464b      	mov	r3, r9
 8005760:	f7fa feb2 	bl	80004c8 <__aeabi_dmul>
 8005764:	4602      	mov	r2, r0
 8005766:	460b      	mov	r3, r1
 8005768:	4630      	mov	r0, r6
 800576a:	4639      	mov	r1, r7
 800576c:	f7fa fcf4 	bl	8000158 <__aeabi_dsub>
 8005770:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005774:	f7fa fea8 	bl	80004c8 <__aeabi_dmul>
 8005778:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800577c:	4682      	mov	sl, r0
 800577e:	468b      	mov	fp, r1
 8005780:	4610      	mov	r0, r2
 8005782:	4619      	mov	r1, r3
 8005784:	f7fa fea0 	bl	80004c8 <__aeabi_dmul>
 8005788:	a37b      	add	r3, pc, #492	; (adr r3, 8005978 <__ieee754_pow+0x6f0>)
 800578a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800578e:	4604      	mov	r4, r0
 8005790:	460d      	mov	r5, r1
 8005792:	f7fa fe99 	bl	80004c8 <__aeabi_dmul>
 8005796:	a37a      	add	r3, pc, #488	; (adr r3, 8005980 <__ieee754_pow+0x6f8>)
 8005798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800579c:	f7fa fcde 	bl	800015c <__adddf3>
 80057a0:	4622      	mov	r2, r4
 80057a2:	462b      	mov	r3, r5
 80057a4:	f7fa fe90 	bl	80004c8 <__aeabi_dmul>
 80057a8:	a377      	add	r3, pc, #476	; (adr r3, 8005988 <__ieee754_pow+0x700>)
 80057aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ae:	f7fa fcd5 	bl	800015c <__adddf3>
 80057b2:	4622      	mov	r2, r4
 80057b4:	462b      	mov	r3, r5
 80057b6:	f7fa fe87 	bl	80004c8 <__aeabi_dmul>
 80057ba:	a375      	add	r3, pc, #468	; (adr r3, 8005990 <__ieee754_pow+0x708>)
 80057bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057c0:	f7fa fccc 	bl	800015c <__adddf3>
 80057c4:	4622      	mov	r2, r4
 80057c6:	462b      	mov	r3, r5
 80057c8:	f7fa fe7e 	bl	80004c8 <__aeabi_dmul>
 80057cc:	a372      	add	r3, pc, #456	; (adr r3, 8005998 <__ieee754_pow+0x710>)
 80057ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057d2:	f7fa fcc3 	bl	800015c <__adddf3>
 80057d6:	4622      	mov	r2, r4
 80057d8:	462b      	mov	r3, r5
 80057da:	f7fa fe75 	bl	80004c8 <__aeabi_dmul>
 80057de:	a370      	add	r3, pc, #448	; (adr r3, 80059a0 <__ieee754_pow+0x718>)
 80057e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057e4:	f7fa fcba 	bl	800015c <__adddf3>
 80057e8:	4622      	mov	r2, r4
 80057ea:	4606      	mov	r6, r0
 80057ec:	460f      	mov	r7, r1
 80057ee:	462b      	mov	r3, r5
 80057f0:	4620      	mov	r0, r4
 80057f2:	4629      	mov	r1, r5
 80057f4:	f7fa fe68 	bl	80004c8 <__aeabi_dmul>
 80057f8:	4602      	mov	r2, r0
 80057fa:	460b      	mov	r3, r1
 80057fc:	4630      	mov	r0, r6
 80057fe:	4639      	mov	r1, r7
 8005800:	f7fa fe62 	bl	80004c8 <__aeabi_dmul>
 8005804:	4604      	mov	r4, r0
 8005806:	460d      	mov	r5, r1
 8005808:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800580c:	4642      	mov	r2, r8
 800580e:	464b      	mov	r3, r9
 8005810:	f7fa fca4 	bl	800015c <__adddf3>
 8005814:	4652      	mov	r2, sl
 8005816:	465b      	mov	r3, fp
 8005818:	f7fa fe56 	bl	80004c8 <__aeabi_dmul>
 800581c:	4622      	mov	r2, r4
 800581e:	462b      	mov	r3, r5
 8005820:	f7fa fc9c 	bl	800015c <__adddf3>
 8005824:	4642      	mov	r2, r8
 8005826:	4606      	mov	r6, r0
 8005828:	460f      	mov	r7, r1
 800582a:	464b      	mov	r3, r9
 800582c:	4640      	mov	r0, r8
 800582e:	4649      	mov	r1, r9
 8005830:	f7fa fe4a 	bl	80004c8 <__aeabi_dmul>
 8005834:	4602      	mov	r2, r0
 8005836:	460b      	mov	r3, r1
 8005838:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800583c:	2200      	movs	r2, #0
 800583e:	4b66      	ldr	r3, [pc, #408]	; (80059d8 <__ieee754_pow+0x750>)
 8005840:	f7fa fc8c 	bl	800015c <__adddf3>
 8005844:	4632      	mov	r2, r6
 8005846:	463b      	mov	r3, r7
 8005848:	f7fa fc88 	bl	800015c <__adddf3>
 800584c:	2400      	movs	r4, #0
 800584e:	460d      	mov	r5, r1
 8005850:	4622      	mov	r2, r4
 8005852:	460b      	mov	r3, r1
 8005854:	4640      	mov	r0, r8
 8005856:	4649      	mov	r1, r9
 8005858:	f7fa fe36 	bl	80004c8 <__aeabi_dmul>
 800585c:	2200      	movs	r2, #0
 800585e:	4680      	mov	r8, r0
 8005860:	4689      	mov	r9, r1
 8005862:	4620      	mov	r0, r4
 8005864:	4629      	mov	r1, r5
 8005866:	4b5c      	ldr	r3, [pc, #368]	; (80059d8 <__ieee754_pow+0x750>)
 8005868:	f7fa fc76 	bl	8000158 <__aeabi_dsub>
 800586c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005870:	f7fa fc72 	bl	8000158 <__aeabi_dsub>
 8005874:	4602      	mov	r2, r0
 8005876:	460b      	mov	r3, r1
 8005878:	4630      	mov	r0, r6
 800587a:	4639      	mov	r1, r7
 800587c:	f7fa fc6c 	bl	8000158 <__aeabi_dsub>
 8005880:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005884:	f7fa fe20 	bl	80004c8 <__aeabi_dmul>
 8005888:	4622      	mov	r2, r4
 800588a:	4606      	mov	r6, r0
 800588c:	460f      	mov	r7, r1
 800588e:	462b      	mov	r3, r5
 8005890:	4650      	mov	r0, sl
 8005892:	4659      	mov	r1, fp
 8005894:	f7fa fe18 	bl	80004c8 <__aeabi_dmul>
 8005898:	4602      	mov	r2, r0
 800589a:	460b      	mov	r3, r1
 800589c:	4630      	mov	r0, r6
 800589e:	4639      	mov	r1, r7
 80058a0:	f7fa fc5c 	bl	800015c <__adddf3>
 80058a4:	2400      	movs	r4, #0
 80058a6:	4606      	mov	r6, r0
 80058a8:	460f      	mov	r7, r1
 80058aa:	4602      	mov	r2, r0
 80058ac:	460b      	mov	r3, r1
 80058ae:	4640      	mov	r0, r8
 80058b0:	4649      	mov	r1, r9
 80058b2:	f7fa fc53 	bl	800015c <__adddf3>
 80058b6:	a33c      	add	r3, pc, #240	; (adr r3, 80059a8 <__ieee754_pow+0x720>)
 80058b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058bc:	4620      	mov	r0, r4
 80058be:	460d      	mov	r5, r1
 80058c0:	f7fa fe02 	bl	80004c8 <__aeabi_dmul>
 80058c4:	4642      	mov	r2, r8
 80058c6:	464b      	mov	r3, r9
 80058c8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80058cc:	4620      	mov	r0, r4
 80058ce:	4629      	mov	r1, r5
 80058d0:	f7fa fc42 	bl	8000158 <__aeabi_dsub>
 80058d4:	4602      	mov	r2, r0
 80058d6:	460b      	mov	r3, r1
 80058d8:	4630      	mov	r0, r6
 80058da:	4639      	mov	r1, r7
 80058dc:	f7fa fc3c 	bl	8000158 <__aeabi_dsub>
 80058e0:	a333      	add	r3, pc, #204	; (adr r3, 80059b0 <__ieee754_pow+0x728>)
 80058e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058e6:	f7fa fdef 	bl	80004c8 <__aeabi_dmul>
 80058ea:	a333      	add	r3, pc, #204	; (adr r3, 80059b8 <__ieee754_pow+0x730>)
 80058ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f0:	4606      	mov	r6, r0
 80058f2:	460f      	mov	r7, r1
 80058f4:	4620      	mov	r0, r4
 80058f6:	4629      	mov	r1, r5
 80058f8:	f7fa fde6 	bl	80004c8 <__aeabi_dmul>
 80058fc:	4602      	mov	r2, r0
 80058fe:	460b      	mov	r3, r1
 8005900:	4630      	mov	r0, r6
 8005902:	4639      	mov	r1, r7
 8005904:	f7fa fc2a 	bl	800015c <__adddf3>
 8005908:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800590a:	4b34      	ldr	r3, [pc, #208]	; (80059dc <__ieee754_pow+0x754>)
 800590c:	4413      	add	r3, r2
 800590e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005912:	f7fa fc23 	bl	800015c <__adddf3>
 8005916:	4680      	mov	r8, r0
 8005918:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800591a:	4689      	mov	r9, r1
 800591c:	f7fa fd6a 	bl	80003f4 <__aeabi_i2d>
 8005920:	4604      	mov	r4, r0
 8005922:	460d      	mov	r5, r1
 8005924:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005928:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800592a:	4b2d      	ldr	r3, [pc, #180]	; (80059e0 <__ieee754_pow+0x758>)
 800592c:	4413      	add	r3, r2
 800592e:	e9d3 6700 	ldrd	r6, r7, [r3]
 8005932:	4642      	mov	r2, r8
 8005934:	464b      	mov	r3, r9
 8005936:	f7fa fc11 	bl	800015c <__adddf3>
 800593a:	4632      	mov	r2, r6
 800593c:	463b      	mov	r3, r7
 800593e:	f7fa fc0d 	bl	800015c <__adddf3>
 8005942:	4622      	mov	r2, r4
 8005944:	462b      	mov	r3, r5
 8005946:	f7fa fc09 	bl	800015c <__adddf3>
 800594a:	2000      	movs	r0, #0
 800594c:	4622      	mov	r2, r4
 800594e:	462b      	mov	r3, r5
 8005950:	4682      	mov	sl, r0
 8005952:	468b      	mov	fp, r1
 8005954:	f7fa fc00 	bl	8000158 <__aeabi_dsub>
 8005958:	4632      	mov	r2, r6
 800595a:	463b      	mov	r3, r7
 800595c:	f7fa fbfc 	bl	8000158 <__aeabi_dsub>
 8005960:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005964:	f7fa fbf8 	bl	8000158 <__aeabi_dsub>
 8005968:	4602      	mov	r2, r0
 800596a:	460b      	mov	r3, r1
 800596c:	4640      	mov	r0, r8
 800596e:	4649      	mov	r1, r9
 8005970:	e60b      	b.n	800558a <__ieee754_pow+0x302>
 8005972:	2601      	movs	r6, #1
 8005974:	e69f      	b.n	80056b6 <__ieee754_pow+0x42e>
 8005976:	bf00      	nop
 8005978:	4a454eef 	.word	0x4a454eef
 800597c:	3fca7e28 	.word	0x3fca7e28
 8005980:	93c9db65 	.word	0x93c9db65
 8005984:	3fcd864a 	.word	0x3fcd864a
 8005988:	a91d4101 	.word	0xa91d4101
 800598c:	3fd17460 	.word	0x3fd17460
 8005990:	518f264d 	.word	0x518f264d
 8005994:	3fd55555 	.word	0x3fd55555
 8005998:	db6fabff 	.word	0xdb6fabff
 800599c:	3fdb6db6 	.word	0x3fdb6db6
 80059a0:	33333303 	.word	0x33333303
 80059a4:	3fe33333 	.word	0x3fe33333
 80059a8:	e0000000 	.word	0xe0000000
 80059ac:	3feec709 	.word	0x3feec709
 80059b0:	dc3a03fd 	.word	0xdc3a03fd
 80059b4:	3feec709 	.word	0x3feec709
 80059b8:	145b01f5 	.word	0x145b01f5
 80059bc:	be3e2fe0 	.word	0xbe3e2fe0
 80059c0:	7ff00000 	.word	0x7ff00000
 80059c4:	43400000 	.word	0x43400000
 80059c8:	0003988e 	.word	0x0003988e
 80059cc:	000bb679 	.word	0x000bb679
 80059d0:	08006a80 	.word	0x08006a80
 80059d4:	3ff00000 	.word	0x3ff00000
 80059d8:	40080000 	.word	0x40080000
 80059dc:	08006aa0 	.word	0x08006aa0
 80059e0:	08006a90 	.word	0x08006a90
 80059e4:	a39c      	add	r3, pc, #624	; (adr r3, 8005c58 <__ieee754_pow+0x9d0>)
 80059e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ea:	4640      	mov	r0, r8
 80059ec:	4649      	mov	r1, r9
 80059ee:	f7fa fbb5 	bl	800015c <__adddf3>
 80059f2:	4622      	mov	r2, r4
 80059f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80059f8:	462b      	mov	r3, r5
 80059fa:	4650      	mov	r0, sl
 80059fc:	4639      	mov	r1, r7
 80059fe:	f7fa fbab 	bl	8000158 <__aeabi_dsub>
 8005a02:	4602      	mov	r2, r0
 8005a04:	460b      	mov	r3, r1
 8005a06:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a0a:	f7fa ffed 	bl	80009e8 <__aeabi_dcmpgt>
 8005a0e:	2800      	cmp	r0, #0
 8005a10:	f47f ae06 	bne.w	8005620 <__ieee754_pow+0x398>
 8005a14:	4aa2      	ldr	r2, [pc, #648]	; (8005ca0 <__ieee754_pow+0xa18>)
 8005a16:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	f340 8100 	ble.w	8005c20 <__ieee754_pow+0x998>
 8005a20:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8005a24:	151b      	asrs	r3, r3, #20
 8005a26:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8005a2a:	fa4a fa03 	asr.w	sl, sl, r3
 8005a2e:	44b2      	add	sl, r6
 8005a30:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8005a34:	489b      	ldr	r0, [pc, #620]	; (8005ca4 <__ieee754_pow+0xa1c>)
 8005a36:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8005a3a:	4108      	asrs	r0, r1
 8005a3c:	ea00 030a 	and.w	r3, r0, sl
 8005a40:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8005a44:	f1c1 0114 	rsb	r1, r1, #20
 8005a48:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8005a4c:	fa4a fa01 	asr.w	sl, sl, r1
 8005a50:	2e00      	cmp	r6, #0
 8005a52:	f04f 0200 	mov.w	r2, #0
 8005a56:	4620      	mov	r0, r4
 8005a58:	4629      	mov	r1, r5
 8005a5a:	bfb8      	it	lt
 8005a5c:	f1ca 0a00 	rsblt	sl, sl, #0
 8005a60:	f7fa fb7a 	bl	8000158 <__aeabi_dsub>
 8005a64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a6c:	2400      	movs	r4, #0
 8005a6e:	4642      	mov	r2, r8
 8005a70:	464b      	mov	r3, r9
 8005a72:	f7fa fb73 	bl	800015c <__adddf3>
 8005a76:	a37a      	add	r3, pc, #488	; (adr r3, 8005c60 <__ieee754_pow+0x9d8>)
 8005a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a7c:	4620      	mov	r0, r4
 8005a7e:	460d      	mov	r5, r1
 8005a80:	f7fa fd22 	bl	80004c8 <__aeabi_dmul>
 8005a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005a88:	4606      	mov	r6, r0
 8005a8a:	460f      	mov	r7, r1
 8005a8c:	4620      	mov	r0, r4
 8005a8e:	4629      	mov	r1, r5
 8005a90:	f7fa fb62 	bl	8000158 <__aeabi_dsub>
 8005a94:	4602      	mov	r2, r0
 8005a96:	460b      	mov	r3, r1
 8005a98:	4640      	mov	r0, r8
 8005a9a:	4649      	mov	r1, r9
 8005a9c:	f7fa fb5c 	bl	8000158 <__aeabi_dsub>
 8005aa0:	a371      	add	r3, pc, #452	; (adr r3, 8005c68 <__ieee754_pow+0x9e0>)
 8005aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aa6:	f7fa fd0f 	bl	80004c8 <__aeabi_dmul>
 8005aaa:	a371      	add	r3, pc, #452	; (adr r3, 8005c70 <__ieee754_pow+0x9e8>)
 8005aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab0:	4680      	mov	r8, r0
 8005ab2:	4689      	mov	r9, r1
 8005ab4:	4620      	mov	r0, r4
 8005ab6:	4629      	mov	r1, r5
 8005ab8:	f7fa fd06 	bl	80004c8 <__aeabi_dmul>
 8005abc:	4602      	mov	r2, r0
 8005abe:	460b      	mov	r3, r1
 8005ac0:	4640      	mov	r0, r8
 8005ac2:	4649      	mov	r1, r9
 8005ac4:	f7fa fb4a 	bl	800015c <__adddf3>
 8005ac8:	4604      	mov	r4, r0
 8005aca:	460d      	mov	r5, r1
 8005acc:	4602      	mov	r2, r0
 8005ace:	460b      	mov	r3, r1
 8005ad0:	4630      	mov	r0, r6
 8005ad2:	4639      	mov	r1, r7
 8005ad4:	f7fa fb42 	bl	800015c <__adddf3>
 8005ad8:	4632      	mov	r2, r6
 8005ada:	463b      	mov	r3, r7
 8005adc:	4680      	mov	r8, r0
 8005ade:	4689      	mov	r9, r1
 8005ae0:	f7fa fb3a 	bl	8000158 <__aeabi_dsub>
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	460b      	mov	r3, r1
 8005ae8:	4620      	mov	r0, r4
 8005aea:	4629      	mov	r1, r5
 8005aec:	f7fa fb34 	bl	8000158 <__aeabi_dsub>
 8005af0:	4642      	mov	r2, r8
 8005af2:	4606      	mov	r6, r0
 8005af4:	460f      	mov	r7, r1
 8005af6:	464b      	mov	r3, r9
 8005af8:	4640      	mov	r0, r8
 8005afa:	4649      	mov	r1, r9
 8005afc:	f7fa fce4 	bl	80004c8 <__aeabi_dmul>
 8005b00:	a35d      	add	r3, pc, #372	; (adr r3, 8005c78 <__ieee754_pow+0x9f0>)
 8005b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b06:	4604      	mov	r4, r0
 8005b08:	460d      	mov	r5, r1
 8005b0a:	f7fa fcdd 	bl	80004c8 <__aeabi_dmul>
 8005b0e:	a35c      	add	r3, pc, #368	; (adr r3, 8005c80 <__ieee754_pow+0x9f8>)
 8005b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b14:	f7fa fb20 	bl	8000158 <__aeabi_dsub>
 8005b18:	4622      	mov	r2, r4
 8005b1a:	462b      	mov	r3, r5
 8005b1c:	f7fa fcd4 	bl	80004c8 <__aeabi_dmul>
 8005b20:	a359      	add	r3, pc, #356	; (adr r3, 8005c88 <__ieee754_pow+0xa00>)
 8005b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b26:	f7fa fb19 	bl	800015c <__adddf3>
 8005b2a:	4622      	mov	r2, r4
 8005b2c:	462b      	mov	r3, r5
 8005b2e:	f7fa fccb 	bl	80004c8 <__aeabi_dmul>
 8005b32:	a357      	add	r3, pc, #348	; (adr r3, 8005c90 <__ieee754_pow+0xa08>)
 8005b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b38:	f7fa fb0e 	bl	8000158 <__aeabi_dsub>
 8005b3c:	4622      	mov	r2, r4
 8005b3e:	462b      	mov	r3, r5
 8005b40:	f7fa fcc2 	bl	80004c8 <__aeabi_dmul>
 8005b44:	a354      	add	r3, pc, #336	; (adr r3, 8005c98 <__ieee754_pow+0xa10>)
 8005b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b4a:	f7fa fb07 	bl	800015c <__adddf3>
 8005b4e:	4622      	mov	r2, r4
 8005b50:	462b      	mov	r3, r5
 8005b52:	f7fa fcb9 	bl	80004c8 <__aeabi_dmul>
 8005b56:	4602      	mov	r2, r0
 8005b58:	460b      	mov	r3, r1
 8005b5a:	4640      	mov	r0, r8
 8005b5c:	4649      	mov	r1, r9
 8005b5e:	f7fa fafb 	bl	8000158 <__aeabi_dsub>
 8005b62:	4604      	mov	r4, r0
 8005b64:	460d      	mov	r5, r1
 8005b66:	4602      	mov	r2, r0
 8005b68:	460b      	mov	r3, r1
 8005b6a:	4640      	mov	r0, r8
 8005b6c:	4649      	mov	r1, r9
 8005b6e:	f7fa fcab 	bl	80004c8 <__aeabi_dmul>
 8005b72:	2200      	movs	r2, #0
 8005b74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005b7c:	4620      	mov	r0, r4
 8005b7e:	4629      	mov	r1, r5
 8005b80:	f7fa faea 	bl	8000158 <__aeabi_dsub>
 8005b84:	4602      	mov	r2, r0
 8005b86:	460b      	mov	r3, r1
 8005b88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b8c:	f7fa fdc6 	bl	800071c <__aeabi_ddiv>
 8005b90:	4632      	mov	r2, r6
 8005b92:	4604      	mov	r4, r0
 8005b94:	460d      	mov	r5, r1
 8005b96:	463b      	mov	r3, r7
 8005b98:	4640      	mov	r0, r8
 8005b9a:	4649      	mov	r1, r9
 8005b9c:	f7fa fc94 	bl	80004c8 <__aeabi_dmul>
 8005ba0:	4632      	mov	r2, r6
 8005ba2:	463b      	mov	r3, r7
 8005ba4:	f7fa fada 	bl	800015c <__adddf3>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	460b      	mov	r3, r1
 8005bac:	4620      	mov	r0, r4
 8005bae:	4629      	mov	r1, r5
 8005bb0:	f7fa fad2 	bl	8000158 <__aeabi_dsub>
 8005bb4:	4642      	mov	r2, r8
 8005bb6:	464b      	mov	r3, r9
 8005bb8:	f7fa face 	bl	8000158 <__aeabi_dsub>
 8005bbc:	4602      	mov	r2, r0
 8005bbe:	460b      	mov	r3, r1
 8005bc0:	2000      	movs	r0, #0
 8005bc2:	4939      	ldr	r1, [pc, #228]	; (8005ca8 <__ieee754_pow+0xa20>)
 8005bc4:	f7fa fac8 	bl	8000158 <__aeabi_dsub>
 8005bc8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8005bcc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8005bd0:	da29      	bge.n	8005c26 <__ieee754_pow+0x99e>
 8005bd2:	4652      	mov	r2, sl
 8005bd4:	f000 fd3c 	bl	8006650 <scalbn>
 8005bd8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005bdc:	f7ff bbfd 	b.w	80053da <__ieee754_pow+0x152>
 8005be0:	4b32      	ldr	r3, [pc, #200]	; (8005cac <__ieee754_pow+0xa24>)
 8005be2:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8005be6:	429f      	cmp	r7, r3
 8005be8:	f77f af14 	ble.w	8005a14 <__ieee754_pow+0x78c>
 8005bec:	4b30      	ldr	r3, [pc, #192]	; (8005cb0 <__ieee754_pow+0xa28>)
 8005bee:	440b      	add	r3, r1
 8005bf0:	4303      	orrs	r3, r0
 8005bf2:	d009      	beq.n	8005c08 <__ieee754_pow+0x980>
 8005bf4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	f7fa fed6 	bl	80009ac <__aeabi_dcmplt>
 8005c00:	3800      	subs	r0, #0
 8005c02:	bf18      	it	ne
 8005c04:	2001      	movne	r0, #1
 8005c06:	e452      	b.n	80054ae <__ieee754_pow+0x226>
 8005c08:	4622      	mov	r2, r4
 8005c0a:	462b      	mov	r3, r5
 8005c0c:	f7fa faa4 	bl	8000158 <__aeabi_dsub>
 8005c10:	4642      	mov	r2, r8
 8005c12:	464b      	mov	r3, r9
 8005c14:	f7fa fede 	bl	80009d4 <__aeabi_dcmpge>
 8005c18:	2800      	cmp	r0, #0
 8005c1a:	f43f aefb 	beq.w	8005a14 <__ieee754_pow+0x78c>
 8005c1e:	e7e9      	b.n	8005bf4 <__ieee754_pow+0x96c>
 8005c20:	f04f 0a00 	mov.w	sl, #0
 8005c24:	e720      	b.n	8005a68 <__ieee754_pow+0x7e0>
 8005c26:	4621      	mov	r1, r4
 8005c28:	e7d6      	b.n	8005bd8 <__ieee754_pow+0x950>
 8005c2a:	f04f 0b00 	mov.w	fp, #0
 8005c2e:	f8df c078 	ldr.w	ip, [pc, #120]	; 8005ca8 <__ieee754_pow+0xa20>
 8005c32:	f7ff bbb9 	b.w	80053a8 <__ieee754_pow+0x120>
 8005c36:	f04f 0b00 	mov.w	fp, #0
 8005c3a:	f04f 0c00 	mov.w	ip, #0
 8005c3e:	f7ff bbb3 	b.w	80053a8 <__ieee754_pow+0x120>
 8005c42:	4640      	mov	r0, r8
 8005c44:	4649      	mov	r1, r9
 8005c46:	f7ff bb3c 	b.w	80052c2 <__ieee754_pow+0x3a>
 8005c4a:	9200      	str	r2, [sp, #0]
 8005c4c:	f7ff bb88 	b.w	8005360 <__ieee754_pow+0xd8>
 8005c50:	2300      	movs	r3, #0
 8005c52:	f7ff bb72 	b.w	800533a <__ieee754_pow+0xb2>
 8005c56:	bf00      	nop
 8005c58:	652b82fe 	.word	0x652b82fe
 8005c5c:	3c971547 	.word	0x3c971547
 8005c60:	00000000 	.word	0x00000000
 8005c64:	3fe62e43 	.word	0x3fe62e43
 8005c68:	fefa39ef 	.word	0xfefa39ef
 8005c6c:	3fe62e42 	.word	0x3fe62e42
 8005c70:	0ca86c39 	.word	0x0ca86c39
 8005c74:	be205c61 	.word	0xbe205c61
 8005c78:	72bea4d0 	.word	0x72bea4d0
 8005c7c:	3e663769 	.word	0x3e663769
 8005c80:	c5d26bf1 	.word	0xc5d26bf1
 8005c84:	3ebbbd41 	.word	0x3ebbbd41
 8005c88:	af25de2c 	.word	0xaf25de2c
 8005c8c:	3f11566a 	.word	0x3f11566a
 8005c90:	16bebd93 	.word	0x16bebd93
 8005c94:	3f66c16c 	.word	0x3f66c16c
 8005c98:	5555553e 	.word	0x5555553e
 8005c9c:	3fc55555 	.word	0x3fc55555
 8005ca0:	3fe00000 	.word	0x3fe00000
 8005ca4:	fff00000 	.word	0xfff00000
 8005ca8:	3ff00000 	.word	0x3ff00000
 8005cac:	4090cbff 	.word	0x4090cbff
 8005cb0:	3f6f3400 	.word	0x3f6f3400

08005cb4 <fabs>:
 8005cb4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005cb8:	4619      	mov	r1, r3
 8005cba:	4770      	bx	lr

08005cbc <__ieee754_acosf>:
 8005cbc:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8005cc0:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8005cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cc6:	4605      	mov	r5, r0
 8005cc8:	d104      	bne.n	8005cd4 <__ieee754_acosf+0x18>
 8005cca:	2800      	cmp	r0, #0
 8005ccc:	f300 8135 	bgt.w	8005f3a <__ieee754_acosf+0x27e>
 8005cd0:	489c      	ldr	r0, [pc, #624]	; (8005f44 <__ieee754_acosf+0x288>)
 8005cd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cd4:	dd06      	ble.n	8005ce4 <__ieee754_acosf+0x28>
 8005cd6:	4601      	mov	r1, r0
 8005cd8:	f7fa fefa 	bl	8000ad0 <__aeabi_fsub>
 8005cdc:	4601      	mov	r1, r0
 8005cde:	f7fb f8b5 	bl	8000e4c <__aeabi_fdiv>
 8005ce2:	e7f6      	b.n	8005cd2 <__ieee754_acosf+0x16>
 8005ce4:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 8005ce8:	da57      	bge.n	8005d9a <__ieee754_acosf+0xde>
 8005cea:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 8005cee:	f340 8126 	ble.w	8005f3e <__ieee754_acosf+0x282>
 8005cf2:	4601      	mov	r1, r0
 8005cf4:	f7fa fff6 	bl	8000ce4 <__aeabi_fmul>
 8005cf8:	4604      	mov	r4, r0
 8005cfa:	4993      	ldr	r1, [pc, #588]	; (8005f48 <__ieee754_acosf+0x28c>)
 8005cfc:	f7fa fff2 	bl	8000ce4 <__aeabi_fmul>
 8005d00:	4992      	ldr	r1, [pc, #584]	; (8005f4c <__ieee754_acosf+0x290>)
 8005d02:	f7fa fee7 	bl	8000ad4 <__addsf3>
 8005d06:	4621      	mov	r1, r4
 8005d08:	f7fa ffec 	bl	8000ce4 <__aeabi_fmul>
 8005d0c:	4990      	ldr	r1, [pc, #576]	; (8005f50 <__ieee754_acosf+0x294>)
 8005d0e:	f7fa fedf 	bl	8000ad0 <__aeabi_fsub>
 8005d12:	4621      	mov	r1, r4
 8005d14:	f7fa ffe6 	bl	8000ce4 <__aeabi_fmul>
 8005d18:	498e      	ldr	r1, [pc, #568]	; (8005f54 <__ieee754_acosf+0x298>)
 8005d1a:	f7fa fedb 	bl	8000ad4 <__addsf3>
 8005d1e:	4621      	mov	r1, r4
 8005d20:	f7fa ffe0 	bl	8000ce4 <__aeabi_fmul>
 8005d24:	498c      	ldr	r1, [pc, #560]	; (8005f58 <__ieee754_acosf+0x29c>)
 8005d26:	f7fa fed3 	bl	8000ad0 <__aeabi_fsub>
 8005d2a:	4621      	mov	r1, r4
 8005d2c:	f7fa ffda 	bl	8000ce4 <__aeabi_fmul>
 8005d30:	498a      	ldr	r1, [pc, #552]	; (8005f5c <__ieee754_acosf+0x2a0>)
 8005d32:	f7fa fecf 	bl	8000ad4 <__addsf3>
 8005d36:	4621      	mov	r1, r4
 8005d38:	f7fa ffd4 	bl	8000ce4 <__aeabi_fmul>
 8005d3c:	4988      	ldr	r1, [pc, #544]	; (8005f60 <__ieee754_acosf+0x2a4>)
 8005d3e:	4606      	mov	r6, r0
 8005d40:	4620      	mov	r0, r4
 8005d42:	f7fa ffcf 	bl	8000ce4 <__aeabi_fmul>
 8005d46:	4987      	ldr	r1, [pc, #540]	; (8005f64 <__ieee754_acosf+0x2a8>)
 8005d48:	f7fa fec2 	bl	8000ad0 <__aeabi_fsub>
 8005d4c:	4621      	mov	r1, r4
 8005d4e:	f7fa ffc9 	bl	8000ce4 <__aeabi_fmul>
 8005d52:	4985      	ldr	r1, [pc, #532]	; (8005f68 <__ieee754_acosf+0x2ac>)
 8005d54:	f7fa febe 	bl	8000ad4 <__addsf3>
 8005d58:	4621      	mov	r1, r4
 8005d5a:	f7fa ffc3 	bl	8000ce4 <__aeabi_fmul>
 8005d5e:	4983      	ldr	r1, [pc, #524]	; (8005f6c <__ieee754_acosf+0x2b0>)
 8005d60:	f7fa feb6 	bl	8000ad0 <__aeabi_fsub>
 8005d64:	4621      	mov	r1, r4
 8005d66:	f7fa ffbd 	bl	8000ce4 <__aeabi_fmul>
 8005d6a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005d6e:	f7fa feb1 	bl	8000ad4 <__addsf3>
 8005d72:	4601      	mov	r1, r0
 8005d74:	4630      	mov	r0, r6
 8005d76:	f7fb f869 	bl	8000e4c <__aeabi_fdiv>
 8005d7a:	4629      	mov	r1, r5
 8005d7c:	f7fa ffb2 	bl	8000ce4 <__aeabi_fmul>
 8005d80:	4601      	mov	r1, r0
 8005d82:	487b      	ldr	r0, [pc, #492]	; (8005f70 <__ieee754_acosf+0x2b4>)
 8005d84:	f7fa fea4 	bl	8000ad0 <__aeabi_fsub>
 8005d88:	4601      	mov	r1, r0
 8005d8a:	4628      	mov	r0, r5
 8005d8c:	f7fa fea0 	bl	8000ad0 <__aeabi_fsub>
 8005d90:	4601      	mov	r1, r0
 8005d92:	4878      	ldr	r0, [pc, #480]	; (8005f74 <__ieee754_acosf+0x2b8>)
 8005d94:	f7fa fe9c 	bl	8000ad0 <__aeabi_fsub>
 8005d98:	e79b      	b.n	8005cd2 <__ieee754_acosf+0x16>
 8005d9a:	2800      	cmp	r0, #0
 8005d9c:	da5b      	bge.n	8005e56 <__ieee754_acosf+0x19a>
 8005d9e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005da2:	f7fa fe97 	bl	8000ad4 <__addsf3>
 8005da6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8005daa:	f7fa ff9b 	bl	8000ce4 <__aeabi_fmul>
 8005dae:	4604      	mov	r4, r0
 8005db0:	4965      	ldr	r1, [pc, #404]	; (8005f48 <__ieee754_acosf+0x28c>)
 8005db2:	f7fa ff97 	bl	8000ce4 <__aeabi_fmul>
 8005db6:	4965      	ldr	r1, [pc, #404]	; (8005f4c <__ieee754_acosf+0x290>)
 8005db8:	f7fa fe8c 	bl	8000ad4 <__addsf3>
 8005dbc:	4621      	mov	r1, r4
 8005dbe:	f7fa ff91 	bl	8000ce4 <__aeabi_fmul>
 8005dc2:	4963      	ldr	r1, [pc, #396]	; (8005f50 <__ieee754_acosf+0x294>)
 8005dc4:	f7fa fe84 	bl	8000ad0 <__aeabi_fsub>
 8005dc8:	4621      	mov	r1, r4
 8005dca:	f7fa ff8b 	bl	8000ce4 <__aeabi_fmul>
 8005dce:	4961      	ldr	r1, [pc, #388]	; (8005f54 <__ieee754_acosf+0x298>)
 8005dd0:	f7fa fe80 	bl	8000ad4 <__addsf3>
 8005dd4:	4621      	mov	r1, r4
 8005dd6:	f7fa ff85 	bl	8000ce4 <__aeabi_fmul>
 8005dda:	495f      	ldr	r1, [pc, #380]	; (8005f58 <__ieee754_acosf+0x29c>)
 8005ddc:	f7fa fe78 	bl	8000ad0 <__aeabi_fsub>
 8005de0:	4621      	mov	r1, r4
 8005de2:	f7fa ff7f 	bl	8000ce4 <__aeabi_fmul>
 8005de6:	495d      	ldr	r1, [pc, #372]	; (8005f5c <__ieee754_acosf+0x2a0>)
 8005de8:	f7fa fe74 	bl	8000ad4 <__addsf3>
 8005dec:	4621      	mov	r1, r4
 8005dee:	f7fa ff79 	bl	8000ce4 <__aeabi_fmul>
 8005df2:	4606      	mov	r6, r0
 8005df4:	4620      	mov	r0, r4
 8005df6:	f7ff f9d5 	bl	80051a4 <__ieee754_sqrtf>
 8005dfa:	4959      	ldr	r1, [pc, #356]	; (8005f60 <__ieee754_acosf+0x2a4>)
 8005dfc:	4605      	mov	r5, r0
 8005dfe:	4620      	mov	r0, r4
 8005e00:	f7fa ff70 	bl	8000ce4 <__aeabi_fmul>
 8005e04:	4957      	ldr	r1, [pc, #348]	; (8005f64 <__ieee754_acosf+0x2a8>)
 8005e06:	f7fa fe63 	bl	8000ad0 <__aeabi_fsub>
 8005e0a:	4621      	mov	r1, r4
 8005e0c:	f7fa ff6a 	bl	8000ce4 <__aeabi_fmul>
 8005e10:	4955      	ldr	r1, [pc, #340]	; (8005f68 <__ieee754_acosf+0x2ac>)
 8005e12:	f7fa fe5f 	bl	8000ad4 <__addsf3>
 8005e16:	4621      	mov	r1, r4
 8005e18:	f7fa ff64 	bl	8000ce4 <__aeabi_fmul>
 8005e1c:	4953      	ldr	r1, [pc, #332]	; (8005f6c <__ieee754_acosf+0x2b0>)
 8005e1e:	f7fa fe57 	bl	8000ad0 <__aeabi_fsub>
 8005e22:	4621      	mov	r1, r4
 8005e24:	f7fa ff5e 	bl	8000ce4 <__aeabi_fmul>
 8005e28:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005e2c:	f7fa fe52 	bl	8000ad4 <__addsf3>
 8005e30:	4601      	mov	r1, r0
 8005e32:	4630      	mov	r0, r6
 8005e34:	f7fb f80a 	bl	8000e4c <__aeabi_fdiv>
 8005e38:	4629      	mov	r1, r5
 8005e3a:	f7fa ff53 	bl	8000ce4 <__aeabi_fmul>
 8005e3e:	494c      	ldr	r1, [pc, #304]	; (8005f70 <__ieee754_acosf+0x2b4>)
 8005e40:	f7fa fe46 	bl	8000ad0 <__aeabi_fsub>
 8005e44:	4629      	mov	r1, r5
 8005e46:	f7fa fe45 	bl	8000ad4 <__addsf3>
 8005e4a:	4601      	mov	r1, r0
 8005e4c:	f7fa fe42 	bl	8000ad4 <__addsf3>
 8005e50:	4601      	mov	r1, r0
 8005e52:	4849      	ldr	r0, [pc, #292]	; (8005f78 <__ieee754_acosf+0x2bc>)
 8005e54:	e79e      	b.n	8005d94 <__ieee754_acosf+0xd8>
 8005e56:	4601      	mov	r1, r0
 8005e58:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8005e5c:	f7fa fe38 	bl	8000ad0 <__aeabi_fsub>
 8005e60:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8005e64:	f7fa ff3e 	bl	8000ce4 <__aeabi_fmul>
 8005e68:	4604      	mov	r4, r0
 8005e6a:	f7ff f99b 	bl	80051a4 <__ieee754_sqrtf>
 8005e6e:	4936      	ldr	r1, [pc, #216]	; (8005f48 <__ieee754_acosf+0x28c>)
 8005e70:	4606      	mov	r6, r0
 8005e72:	f420 657f 	bic.w	r5, r0, #4080	; 0xff0
 8005e76:	4620      	mov	r0, r4
 8005e78:	f7fa ff34 	bl	8000ce4 <__aeabi_fmul>
 8005e7c:	4933      	ldr	r1, [pc, #204]	; (8005f4c <__ieee754_acosf+0x290>)
 8005e7e:	f7fa fe29 	bl	8000ad4 <__addsf3>
 8005e82:	4621      	mov	r1, r4
 8005e84:	f7fa ff2e 	bl	8000ce4 <__aeabi_fmul>
 8005e88:	4931      	ldr	r1, [pc, #196]	; (8005f50 <__ieee754_acosf+0x294>)
 8005e8a:	f7fa fe21 	bl	8000ad0 <__aeabi_fsub>
 8005e8e:	4621      	mov	r1, r4
 8005e90:	f7fa ff28 	bl	8000ce4 <__aeabi_fmul>
 8005e94:	492f      	ldr	r1, [pc, #188]	; (8005f54 <__ieee754_acosf+0x298>)
 8005e96:	f7fa fe1d 	bl	8000ad4 <__addsf3>
 8005e9a:	4621      	mov	r1, r4
 8005e9c:	f7fa ff22 	bl	8000ce4 <__aeabi_fmul>
 8005ea0:	492d      	ldr	r1, [pc, #180]	; (8005f58 <__ieee754_acosf+0x29c>)
 8005ea2:	f7fa fe15 	bl	8000ad0 <__aeabi_fsub>
 8005ea6:	4621      	mov	r1, r4
 8005ea8:	f7fa ff1c 	bl	8000ce4 <__aeabi_fmul>
 8005eac:	492b      	ldr	r1, [pc, #172]	; (8005f5c <__ieee754_acosf+0x2a0>)
 8005eae:	f7fa fe11 	bl	8000ad4 <__addsf3>
 8005eb2:	4621      	mov	r1, r4
 8005eb4:	f7fa ff16 	bl	8000ce4 <__aeabi_fmul>
 8005eb8:	4929      	ldr	r1, [pc, #164]	; (8005f60 <__ieee754_acosf+0x2a4>)
 8005eba:	4607      	mov	r7, r0
 8005ebc:	4620      	mov	r0, r4
 8005ebe:	f7fa ff11 	bl	8000ce4 <__aeabi_fmul>
 8005ec2:	4928      	ldr	r1, [pc, #160]	; (8005f64 <__ieee754_acosf+0x2a8>)
 8005ec4:	f7fa fe04 	bl	8000ad0 <__aeabi_fsub>
 8005ec8:	4621      	mov	r1, r4
 8005eca:	f7fa ff0b 	bl	8000ce4 <__aeabi_fmul>
 8005ece:	4926      	ldr	r1, [pc, #152]	; (8005f68 <__ieee754_acosf+0x2ac>)
 8005ed0:	f7fa fe00 	bl	8000ad4 <__addsf3>
 8005ed4:	4621      	mov	r1, r4
 8005ed6:	f7fa ff05 	bl	8000ce4 <__aeabi_fmul>
 8005eda:	4924      	ldr	r1, [pc, #144]	; (8005f6c <__ieee754_acosf+0x2b0>)
 8005edc:	f7fa fdf8 	bl	8000ad0 <__aeabi_fsub>
 8005ee0:	4621      	mov	r1, r4
 8005ee2:	f7fa feff 	bl	8000ce4 <__aeabi_fmul>
 8005ee6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005eea:	f7fa fdf3 	bl	8000ad4 <__addsf3>
 8005eee:	4601      	mov	r1, r0
 8005ef0:	4638      	mov	r0, r7
 8005ef2:	f7fa ffab 	bl	8000e4c <__aeabi_fdiv>
 8005ef6:	4631      	mov	r1, r6
 8005ef8:	f7fa fef4 	bl	8000ce4 <__aeabi_fmul>
 8005efc:	f025 050f 	bic.w	r5, r5, #15
 8005f00:	4607      	mov	r7, r0
 8005f02:	4629      	mov	r1, r5
 8005f04:	4628      	mov	r0, r5
 8005f06:	f7fa feed 	bl	8000ce4 <__aeabi_fmul>
 8005f0a:	4601      	mov	r1, r0
 8005f0c:	4620      	mov	r0, r4
 8005f0e:	f7fa fddf 	bl	8000ad0 <__aeabi_fsub>
 8005f12:	4629      	mov	r1, r5
 8005f14:	4604      	mov	r4, r0
 8005f16:	4630      	mov	r0, r6
 8005f18:	f7fa fddc 	bl	8000ad4 <__addsf3>
 8005f1c:	4601      	mov	r1, r0
 8005f1e:	4620      	mov	r0, r4
 8005f20:	f7fa ff94 	bl	8000e4c <__aeabi_fdiv>
 8005f24:	4601      	mov	r1, r0
 8005f26:	4638      	mov	r0, r7
 8005f28:	f7fa fdd4 	bl	8000ad4 <__addsf3>
 8005f2c:	4629      	mov	r1, r5
 8005f2e:	f7fa fdd1 	bl	8000ad4 <__addsf3>
 8005f32:	4601      	mov	r1, r0
 8005f34:	f7fa fdce 	bl	8000ad4 <__addsf3>
 8005f38:	e6cb      	b.n	8005cd2 <__ieee754_acosf+0x16>
 8005f3a:	2000      	movs	r0, #0
 8005f3c:	e6c9      	b.n	8005cd2 <__ieee754_acosf+0x16>
 8005f3e:	480f      	ldr	r0, [pc, #60]	; (8005f7c <__ieee754_acosf+0x2c0>)
 8005f40:	e6c7      	b.n	8005cd2 <__ieee754_acosf+0x16>
 8005f42:	bf00      	nop
 8005f44:	40490fdb 	.word	0x40490fdb
 8005f48:	3811ef08 	.word	0x3811ef08
 8005f4c:	3a4f7f04 	.word	0x3a4f7f04
 8005f50:	3d241146 	.word	0x3d241146
 8005f54:	3e4e0aa8 	.word	0x3e4e0aa8
 8005f58:	3ea6b090 	.word	0x3ea6b090
 8005f5c:	3e2aaaab 	.word	0x3e2aaaab
 8005f60:	3d9dc62e 	.word	0x3d9dc62e
 8005f64:	3f303361 	.word	0x3f303361
 8005f68:	4001572d 	.word	0x4001572d
 8005f6c:	4019d139 	.word	0x4019d139
 8005f70:	33a22168 	.word	0x33a22168
 8005f74:	3fc90fda 	.word	0x3fc90fda
 8005f78:	40490fda 	.word	0x40490fda
 8005f7c:	3fc90fdb 	.word	0x3fc90fdb

08005f80 <__ieee754_powf>:
 8005f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f84:	f031 4a00 	bics.w	sl, r1, #2147483648	; 0x80000000
 8005f88:	4681      	mov	r9, r0
 8005f8a:	460f      	mov	r7, r1
 8005f8c:	4680      	mov	r8, r0
 8005f8e:	460c      	mov	r4, r1
 8005f90:	b087      	sub	sp, #28
 8005f92:	d10d      	bne.n	8005fb0 <__ieee754_powf+0x30>
 8005f94:	f480 0880 	eor.w	r8, r0, #4194304	; 0x400000
 8005f98:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8005f9c:	f518 0f00 	cmn.w	r8, #8388608	; 0x800000
 8005fa0:	f240 8336 	bls.w	8006610 <__ieee754_powf+0x690>
 8005fa4:	4639      	mov	r1, r7
 8005fa6:	4648      	mov	r0, r9
 8005fa8:	f7fa fd94 	bl	8000ad4 <__addsf3>
 8005fac:	4601      	mov	r1, r0
 8005fae:	e040      	b.n	8006032 <__ieee754_powf+0xb2>
 8005fb0:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8005fb4:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8005fb8:	dcf4      	bgt.n	8005fa4 <__ieee754_powf+0x24>
 8005fba:	f1ba 4fff 	cmp.w	sl, #2139095040	; 0x7f800000
 8005fbe:	dd08      	ble.n	8005fd2 <__ieee754_powf+0x52>
 8005fc0:	f1b0 5f7e 	cmp.w	r0, #1065353216	; 0x3f800000
 8005fc4:	d1ee      	bne.n	8005fa4 <__ieee754_powf+0x24>
 8005fc6:	f481 0480 	eor.w	r4, r1, #4194304	; 0x400000
 8005fca:	0064      	lsls	r4, r4, #1
 8005fcc:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8005fd0:	e7e6      	b.n	8005fa0 <__ieee754_powf+0x20>
 8005fd2:	2800      	cmp	r0, #0
 8005fd4:	da20      	bge.n	8006018 <__ieee754_powf+0x98>
 8005fd6:	f1ba 4f97 	cmp.w	sl, #1266679808	; 0x4b800000
 8005fda:	da2e      	bge.n	800603a <__ieee754_powf+0xba>
 8005fdc:	f1ba 5f7e 	cmp.w	sl, #1065353216	; 0x3f800000
 8005fe0:	f2c0 831b 	blt.w	800661a <__ieee754_powf+0x69a>
 8005fe4:	ea4f 53ea 	mov.w	r3, sl, asr #23
 8005fe8:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8005fec:	fa4a f503 	asr.w	r5, sl, r3
 8005ff0:	fa05 f303 	lsl.w	r3, r5, r3
 8005ff4:	4553      	cmp	r3, sl
 8005ff6:	f040 8310 	bne.w	800661a <__ieee754_powf+0x69a>
 8005ffa:	f005 0501 	and.w	r5, r5, #1
 8005ffe:	f1c5 0502 	rsb	r5, r5, #2
 8006002:	f1ba 5f7e 	cmp.w	sl, #1065353216	; 0x3f800000
 8006006:	d120      	bne.n	800604a <__ieee754_powf+0xca>
 8006008:	2c00      	cmp	r4, #0
 800600a:	4649      	mov	r1, r9
 800600c:	da11      	bge.n	8006032 <__ieee754_powf+0xb2>
 800600e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8006012:	f7fa ff1b 	bl	8000e4c <__aeabi_fdiv>
 8006016:	e7c9      	b.n	8005fac <__ieee754_powf+0x2c>
 8006018:	2500      	movs	r5, #0
 800601a:	f1ba 4fff 	cmp.w	sl, #2139095040	; 0x7f800000
 800601e:	d1f0      	bne.n	8006002 <__ieee754_powf+0x82>
 8006020:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 8006024:	f000 82f4 	beq.w	8006610 <__ieee754_powf+0x690>
 8006028:	dd09      	ble.n	800603e <__ieee754_powf+0xbe>
 800602a:	2c00      	cmp	r4, #0
 800602c:	f2c0 82f3 	blt.w	8006616 <__ieee754_powf+0x696>
 8006030:	4639      	mov	r1, r7
 8006032:	4608      	mov	r0, r1
 8006034:	b007      	add	sp, #28
 8006036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800603a:	2502      	movs	r5, #2
 800603c:	e7ed      	b.n	800601a <__ieee754_powf+0x9a>
 800603e:	2c00      	cmp	r4, #0
 8006040:	f280 82e9 	bge.w	8006616 <__ieee754_powf+0x696>
 8006044:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
 8006048:	e7f3      	b.n	8006032 <__ieee754_powf+0xb2>
 800604a:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800604e:	d104      	bne.n	800605a <__ieee754_powf+0xda>
 8006050:	4649      	mov	r1, r9
 8006052:	4648      	mov	r0, r9
 8006054:	f7fa fe46 	bl	8000ce4 <__aeabi_fmul>
 8006058:	e7a8      	b.n	8005fac <__ieee754_powf+0x2c>
 800605a:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800605e:	4648      	mov	r0, r9
 8006060:	d107      	bne.n	8006072 <__ieee754_powf+0xf2>
 8006062:	f1b8 0f00 	cmp.w	r8, #0
 8006066:	db04      	blt.n	8006072 <__ieee754_powf+0xf2>
 8006068:	b007      	add	sp, #28
 800606a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800606e:	f7ff b899 	b.w	80051a4 <__ieee754_sqrtf>
 8006072:	f7ff f881 	bl	8005178 <fabsf>
 8006076:	4601      	mov	r1, r0
 8006078:	b126      	cbz	r6, 8006084 <__ieee754_powf+0x104>
 800607a:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 800607e:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8006082:	d117      	bne.n	80060b4 <__ieee754_powf+0x134>
 8006084:	2c00      	cmp	r4, #0
 8006086:	da04      	bge.n	8006092 <__ieee754_powf+0x112>
 8006088:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800608c:	f7fa fede 	bl	8000e4c <__aeabi_fdiv>
 8006090:	4601      	mov	r1, r0
 8006092:	f1b8 0f00 	cmp.w	r8, #0
 8006096:	dacc      	bge.n	8006032 <__ieee754_powf+0xb2>
 8006098:	f1a6 567e 	sub.w	r6, r6, #1065353216	; 0x3f800000
 800609c:	432e      	orrs	r6, r5
 800609e:	d104      	bne.n	80060aa <__ieee754_powf+0x12a>
 80060a0:	4608      	mov	r0, r1
 80060a2:	f7fa fd15 	bl	8000ad0 <__aeabi_fsub>
 80060a6:	4601      	mov	r1, r0
 80060a8:	e7b3      	b.n	8006012 <__ieee754_powf+0x92>
 80060aa:	2d01      	cmp	r5, #1
 80060ac:	d1c1      	bne.n	8006032 <__ieee754_powf+0xb2>
 80060ae:	f101 4000 	add.w	r0, r1, #2147483648	; 0x80000000
 80060b2:	e77b      	b.n	8005fac <__ieee754_powf+0x2c>
 80060b4:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 80060b8:	3b01      	subs	r3, #1
 80060ba:	9302      	str	r3, [sp, #8]
 80060bc:	432b      	orrs	r3, r5
 80060be:	d101      	bne.n	80060c4 <__ieee754_powf+0x144>
 80060c0:	4649      	mov	r1, r9
 80060c2:	e7ed      	b.n	80060a0 <__ieee754_powf+0x120>
 80060c4:	f1ba 4f9a 	cmp.w	sl, #1291845632	; 0x4d000000
 80060c8:	f340 809e 	ble.w	8006208 <__ieee754_powf+0x288>
 80060cc:	4b47      	ldr	r3, [pc, #284]	; (80061ec <__ieee754_powf+0x26c>)
 80060ce:	429e      	cmp	r6, r3
 80060d0:	dc07      	bgt.n	80060e2 <__ieee754_powf+0x162>
 80060d2:	2c00      	cmp	r4, #0
 80060d4:	da0a      	bge.n	80060ec <__ieee754_powf+0x16c>
 80060d6:	2000      	movs	r0, #0
 80060d8:	b007      	add	sp, #28
 80060da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060de:	f000 bbc2 	b.w	8006866 <__math_oflowf>
 80060e2:	4b43      	ldr	r3, [pc, #268]	; (80061f0 <__ieee754_powf+0x270>)
 80060e4:	429e      	cmp	r6, r3
 80060e6:	dd07      	ble.n	80060f8 <__ieee754_powf+0x178>
 80060e8:	2c00      	cmp	r4, #0
 80060ea:	dcf4      	bgt.n	80060d6 <__ieee754_powf+0x156>
 80060ec:	2000      	movs	r0, #0
 80060ee:	b007      	add	sp, #28
 80060f0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060f4:	f000 bbb3 	b.w	800685e <__math_uflowf>
 80060f8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80060fc:	f7fa fce8 	bl	8000ad0 <__aeabi_fsub>
 8006100:	493c      	ldr	r1, [pc, #240]	; (80061f4 <__ieee754_powf+0x274>)
 8006102:	4606      	mov	r6, r0
 8006104:	f7fa fdee 	bl	8000ce4 <__aeabi_fmul>
 8006108:	493b      	ldr	r1, [pc, #236]	; (80061f8 <__ieee754_powf+0x278>)
 800610a:	4680      	mov	r8, r0
 800610c:	4630      	mov	r0, r6
 800610e:	f7fa fde9 	bl	8000ce4 <__aeabi_fmul>
 8006112:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 8006116:	4681      	mov	r9, r0
 8006118:	4630      	mov	r0, r6
 800611a:	f7fa fde3 	bl	8000ce4 <__aeabi_fmul>
 800611e:	4601      	mov	r1, r0
 8006120:	4836      	ldr	r0, [pc, #216]	; (80061fc <__ieee754_powf+0x27c>)
 8006122:	f7fa fcd5 	bl	8000ad0 <__aeabi_fsub>
 8006126:	4631      	mov	r1, r6
 8006128:	f7fa fddc 	bl	8000ce4 <__aeabi_fmul>
 800612c:	4601      	mov	r1, r0
 800612e:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8006132:	f7fa fccd 	bl	8000ad0 <__aeabi_fsub>
 8006136:	4631      	mov	r1, r6
 8006138:	4682      	mov	sl, r0
 800613a:	4630      	mov	r0, r6
 800613c:	f7fa fdd2 	bl	8000ce4 <__aeabi_fmul>
 8006140:	4601      	mov	r1, r0
 8006142:	4650      	mov	r0, sl
 8006144:	f7fa fdce 	bl	8000ce4 <__aeabi_fmul>
 8006148:	492d      	ldr	r1, [pc, #180]	; (8006200 <__ieee754_powf+0x280>)
 800614a:	f7fa fdcb 	bl	8000ce4 <__aeabi_fmul>
 800614e:	4601      	mov	r1, r0
 8006150:	4648      	mov	r0, r9
 8006152:	f7fa fcbd 	bl	8000ad0 <__aeabi_fsub>
 8006156:	4601      	mov	r1, r0
 8006158:	4606      	mov	r6, r0
 800615a:	4640      	mov	r0, r8
 800615c:	f7fa fcba 	bl	8000ad4 <__addsf3>
 8006160:	f420 697f 	bic.w	r9, r0, #4080	; 0xff0
 8006164:	f029 090f 	bic.w	r9, r9, #15
 8006168:	4641      	mov	r1, r8
 800616a:	4648      	mov	r0, r9
 800616c:	f7fa fcb0 	bl	8000ad0 <__aeabi_fsub>
 8006170:	4601      	mov	r1, r0
 8006172:	4630      	mov	r0, r6
 8006174:	f7fa fcac 	bl	8000ad0 <__aeabi_fsub>
 8006178:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 800617c:	9b02      	ldr	r3, [sp, #8]
 800617e:	3d01      	subs	r5, #1
 8006180:	f024 040f 	bic.w	r4, r4, #15
 8006184:	431d      	orrs	r5, r3
 8006186:	4606      	mov	r6, r0
 8006188:	4621      	mov	r1, r4
 800618a:	4638      	mov	r0, r7
 800618c:	bf14      	ite	ne
 800618e:	f04f 557e 	movne.w	r5, #1065353216	; 0x3f800000
 8006192:	4d1c      	ldreq	r5, [pc, #112]	; (8006204 <__ieee754_powf+0x284>)
 8006194:	f7fa fc9c 	bl	8000ad0 <__aeabi_fsub>
 8006198:	4649      	mov	r1, r9
 800619a:	f7fa fda3 	bl	8000ce4 <__aeabi_fmul>
 800619e:	4639      	mov	r1, r7
 80061a0:	4680      	mov	r8, r0
 80061a2:	4630      	mov	r0, r6
 80061a4:	f7fa fd9e 	bl	8000ce4 <__aeabi_fmul>
 80061a8:	4601      	mov	r1, r0
 80061aa:	4640      	mov	r0, r8
 80061ac:	f7fa fc92 	bl	8000ad4 <__addsf3>
 80061b0:	4621      	mov	r1, r4
 80061b2:	4606      	mov	r6, r0
 80061b4:	4648      	mov	r0, r9
 80061b6:	f7fa fd95 	bl	8000ce4 <__aeabi_fmul>
 80061ba:	4601      	mov	r1, r0
 80061bc:	4607      	mov	r7, r0
 80061be:	4681      	mov	r9, r0
 80061c0:	4630      	mov	r0, r6
 80061c2:	f7fa fc87 	bl	8000ad4 <__addsf3>
 80061c6:	2800      	cmp	r0, #0
 80061c8:	4682      	mov	sl, r0
 80061ca:	4680      	mov	r8, r0
 80061cc:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 80061d0:	f340 8200 	ble.w	80065d4 <__ieee754_powf+0x654>
 80061d4:	f1b4 4f86 	cmp.w	r4, #1124073472	; 0x43000000
 80061d8:	f340 814e 	ble.w	8006478 <__ieee754_powf+0x4f8>
 80061dc:	2100      	movs	r1, #0
 80061de:	4628      	mov	r0, r5
 80061e0:	f7fa ff1e 	bl	8001020 <__aeabi_fcmplt>
 80061e4:	3800      	subs	r0, #0
 80061e6:	bf18      	it	ne
 80061e8:	2001      	movne	r0, #1
 80061ea:	e775      	b.n	80060d8 <__ieee754_powf+0x158>
 80061ec:	3f7ffff3 	.word	0x3f7ffff3
 80061f0:	3f800007 	.word	0x3f800007
 80061f4:	3fb8aa00 	.word	0x3fb8aa00
 80061f8:	36eca570 	.word	0x36eca570
 80061fc:	3eaaaaab 	.word	0x3eaaaaab
 8006200:	3fb8aa3b 	.word	0x3fb8aa3b
 8006204:	bf800000 	.word	0xbf800000
 8006208:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 800620c:	f040 8111 	bne.w	8006432 <__ieee754_powf+0x4b2>
 8006210:	f04f 4197 	mov.w	r1, #1266679808	; 0x4b800000
 8006214:	f7fa fd66 	bl	8000ce4 <__aeabi_fmul>
 8006218:	f06f 0217 	mvn.w	r2, #23
 800621c:	4606      	mov	r6, r0
 800621e:	15f3      	asrs	r3, r6, #23
 8006220:	3b7f      	subs	r3, #127	; 0x7f
 8006222:	4413      	add	r3, r2
 8006224:	4a85      	ldr	r2, [pc, #532]	; (800643c <__ieee754_powf+0x4bc>)
 8006226:	9301      	str	r3, [sp, #4]
 8006228:	f3c6 0316 	ubfx	r3, r6, #0, #23
 800622c:	4293      	cmp	r3, r2
 800622e:	f043 567e 	orr.w	r6, r3, #1065353216	; 0x3f800000
 8006232:	dd08      	ble.n	8006246 <__ieee754_powf+0x2c6>
 8006234:	4a82      	ldr	r2, [pc, #520]	; (8006440 <__ieee754_powf+0x4c0>)
 8006236:	4293      	cmp	r3, r2
 8006238:	f340 80fd 	ble.w	8006436 <__ieee754_powf+0x4b6>
 800623c:	9b01      	ldr	r3, [sp, #4]
 800623e:	f5a6 0600 	sub.w	r6, r6, #8388608	; 0x800000
 8006242:	3301      	adds	r3, #1
 8006244:	9301      	str	r3, [sp, #4]
 8006246:	2300      	movs	r3, #0
 8006248:	9300      	str	r3, [sp, #0]
 800624a:	9900      	ldr	r1, [sp, #0]
 800624c:	4a7d      	ldr	r2, [pc, #500]	; (8006444 <__ieee754_powf+0x4c4>)
 800624e:	4630      	mov	r0, r6
 8006250:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8006254:	9603      	str	r6, [sp, #12]
 8006256:	4611      	mov	r1, r2
 8006258:	9205      	str	r2, [sp, #20]
 800625a:	f7fa fc39 	bl	8000ad0 <__aeabi_fsub>
 800625e:	9a05      	ldr	r2, [sp, #20]
 8006260:	9b03      	ldr	r3, [sp, #12]
 8006262:	4683      	mov	fp, r0
 8006264:	4619      	mov	r1, r3
 8006266:	4610      	mov	r0, r2
 8006268:	9203      	str	r2, [sp, #12]
 800626a:	9304      	str	r3, [sp, #16]
 800626c:	f7fa fc32 	bl	8000ad4 <__addsf3>
 8006270:	4601      	mov	r1, r0
 8006272:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8006276:	f7fa fde9 	bl	8000e4c <__aeabi_fdiv>
 800627a:	4682      	mov	sl, r0
 800627c:	4601      	mov	r1, r0
 800627e:	4658      	mov	r0, fp
 8006280:	f7fa fd30 	bl	8000ce4 <__aeabi_fmul>
 8006284:	1076      	asrs	r6, r6, #1
 8006286:	9b00      	ldr	r3, [sp, #0]
 8006288:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 800628c:	f420 697f 	bic.w	r9, r0, #4080	; 0xff0
 8006290:	f506 2680 	add.w	r6, r6, #262144	; 0x40000
 8006294:	f029 090f 	bic.w	r9, r9, #15
 8006298:	eb06 5643 	add.w	r6, r6, r3, lsl #21
 800629c:	4680      	mov	r8, r0
 800629e:	4631      	mov	r1, r6
 80062a0:	4648      	mov	r0, r9
 80062a2:	f7fa fd1f 	bl	8000ce4 <__aeabi_fmul>
 80062a6:	4601      	mov	r1, r0
 80062a8:	4658      	mov	r0, fp
 80062aa:	f7fa fc11 	bl	8000ad0 <__aeabi_fsub>
 80062ae:	9a03      	ldr	r2, [sp, #12]
 80062b0:	4683      	mov	fp, r0
 80062b2:	4611      	mov	r1, r2
 80062b4:	4630      	mov	r0, r6
 80062b6:	f7fa fc0b 	bl	8000ad0 <__aeabi_fsub>
 80062ba:	9b04      	ldr	r3, [sp, #16]
 80062bc:	4601      	mov	r1, r0
 80062be:	4618      	mov	r0, r3
 80062c0:	f7fa fc06 	bl	8000ad0 <__aeabi_fsub>
 80062c4:	4649      	mov	r1, r9
 80062c6:	f7fa fd0d 	bl	8000ce4 <__aeabi_fmul>
 80062ca:	4601      	mov	r1, r0
 80062cc:	4658      	mov	r0, fp
 80062ce:	f7fa fbff 	bl	8000ad0 <__aeabi_fsub>
 80062d2:	4651      	mov	r1, sl
 80062d4:	f7fa fd06 	bl	8000ce4 <__aeabi_fmul>
 80062d8:	4641      	mov	r1, r8
 80062da:	4682      	mov	sl, r0
 80062dc:	4640      	mov	r0, r8
 80062de:	f7fa fd01 	bl	8000ce4 <__aeabi_fmul>
 80062e2:	4606      	mov	r6, r0
 80062e4:	4958      	ldr	r1, [pc, #352]	; (8006448 <__ieee754_powf+0x4c8>)
 80062e6:	f7fa fcfd 	bl	8000ce4 <__aeabi_fmul>
 80062ea:	4958      	ldr	r1, [pc, #352]	; (800644c <__ieee754_powf+0x4cc>)
 80062ec:	f7fa fbf2 	bl	8000ad4 <__addsf3>
 80062f0:	4631      	mov	r1, r6
 80062f2:	f7fa fcf7 	bl	8000ce4 <__aeabi_fmul>
 80062f6:	4956      	ldr	r1, [pc, #344]	; (8006450 <__ieee754_powf+0x4d0>)
 80062f8:	f7fa fbec 	bl	8000ad4 <__addsf3>
 80062fc:	4631      	mov	r1, r6
 80062fe:	f7fa fcf1 	bl	8000ce4 <__aeabi_fmul>
 8006302:	4954      	ldr	r1, [pc, #336]	; (8006454 <__ieee754_powf+0x4d4>)
 8006304:	f7fa fbe6 	bl	8000ad4 <__addsf3>
 8006308:	4631      	mov	r1, r6
 800630a:	f7fa fceb 	bl	8000ce4 <__aeabi_fmul>
 800630e:	4952      	ldr	r1, [pc, #328]	; (8006458 <__ieee754_powf+0x4d8>)
 8006310:	f7fa fbe0 	bl	8000ad4 <__addsf3>
 8006314:	4631      	mov	r1, r6
 8006316:	f7fa fce5 	bl	8000ce4 <__aeabi_fmul>
 800631a:	4950      	ldr	r1, [pc, #320]	; (800645c <__ieee754_powf+0x4dc>)
 800631c:	f7fa fbda 	bl	8000ad4 <__addsf3>
 8006320:	4631      	mov	r1, r6
 8006322:	4683      	mov	fp, r0
 8006324:	4630      	mov	r0, r6
 8006326:	f7fa fcdd 	bl	8000ce4 <__aeabi_fmul>
 800632a:	4601      	mov	r1, r0
 800632c:	4658      	mov	r0, fp
 800632e:	f7fa fcd9 	bl	8000ce4 <__aeabi_fmul>
 8006332:	4606      	mov	r6, r0
 8006334:	4649      	mov	r1, r9
 8006336:	4640      	mov	r0, r8
 8006338:	f7fa fbcc 	bl	8000ad4 <__addsf3>
 800633c:	4651      	mov	r1, sl
 800633e:	f7fa fcd1 	bl	8000ce4 <__aeabi_fmul>
 8006342:	4631      	mov	r1, r6
 8006344:	f7fa fbc6 	bl	8000ad4 <__addsf3>
 8006348:	4649      	mov	r1, r9
 800634a:	4683      	mov	fp, r0
 800634c:	4648      	mov	r0, r9
 800634e:	f7fa fcc9 	bl	8000ce4 <__aeabi_fmul>
 8006352:	4943      	ldr	r1, [pc, #268]	; (8006460 <__ieee754_powf+0x4e0>)
 8006354:	9003      	str	r0, [sp, #12]
 8006356:	f7fa fbbd 	bl	8000ad4 <__addsf3>
 800635a:	4659      	mov	r1, fp
 800635c:	f7fa fbba 	bl	8000ad4 <__addsf3>
 8006360:	f420 667f 	bic.w	r6, r0, #4080	; 0xff0
 8006364:	f026 060f 	bic.w	r6, r6, #15
 8006368:	4631      	mov	r1, r6
 800636a:	4648      	mov	r0, r9
 800636c:	f7fa fcba 	bl	8000ce4 <__aeabi_fmul>
 8006370:	493b      	ldr	r1, [pc, #236]	; (8006460 <__ieee754_powf+0x4e0>)
 8006372:	4681      	mov	r9, r0
 8006374:	4630      	mov	r0, r6
 8006376:	f7fa fbab 	bl	8000ad0 <__aeabi_fsub>
 800637a:	9b03      	ldr	r3, [sp, #12]
 800637c:	4619      	mov	r1, r3
 800637e:	f7fa fba7 	bl	8000ad0 <__aeabi_fsub>
 8006382:	4601      	mov	r1, r0
 8006384:	4658      	mov	r0, fp
 8006386:	f7fa fba3 	bl	8000ad0 <__aeabi_fsub>
 800638a:	4641      	mov	r1, r8
 800638c:	f7fa fcaa 	bl	8000ce4 <__aeabi_fmul>
 8006390:	4631      	mov	r1, r6
 8006392:	4680      	mov	r8, r0
 8006394:	4650      	mov	r0, sl
 8006396:	f7fa fca5 	bl	8000ce4 <__aeabi_fmul>
 800639a:	4601      	mov	r1, r0
 800639c:	4640      	mov	r0, r8
 800639e:	f7fa fb99 	bl	8000ad4 <__addsf3>
 80063a2:	4682      	mov	sl, r0
 80063a4:	4601      	mov	r1, r0
 80063a6:	4648      	mov	r0, r9
 80063a8:	f7fa fb94 	bl	8000ad4 <__addsf3>
 80063ac:	f420 667f 	bic.w	r6, r0, #4080	; 0xff0
 80063b0:	f026 060f 	bic.w	r6, r6, #15
 80063b4:	4630      	mov	r0, r6
 80063b6:	492b      	ldr	r1, [pc, #172]	; (8006464 <__ieee754_powf+0x4e4>)
 80063b8:	f7fa fc94 	bl	8000ce4 <__aeabi_fmul>
 80063bc:	4649      	mov	r1, r9
 80063be:	4680      	mov	r8, r0
 80063c0:	4630      	mov	r0, r6
 80063c2:	f7fa fb85 	bl	8000ad0 <__aeabi_fsub>
 80063c6:	4601      	mov	r1, r0
 80063c8:	4650      	mov	r0, sl
 80063ca:	f7fa fb81 	bl	8000ad0 <__aeabi_fsub>
 80063ce:	4926      	ldr	r1, [pc, #152]	; (8006468 <__ieee754_powf+0x4e8>)
 80063d0:	f7fa fc88 	bl	8000ce4 <__aeabi_fmul>
 80063d4:	4925      	ldr	r1, [pc, #148]	; (800646c <__ieee754_powf+0x4ec>)
 80063d6:	4681      	mov	r9, r0
 80063d8:	4630      	mov	r0, r6
 80063da:	f7fa fc83 	bl	8000ce4 <__aeabi_fmul>
 80063de:	4601      	mov	r1, r0
 80063e0:	4648      	mov	r0, r9
 80063e2:	f7fa fb77 	bl	8000ad4 <__addsf3>
 80063e6:	4b22      	ldr	r3, [pc, #136]	; (8006470 <__ieee754_powf+0x4f0>)
 80063e8:	9a00      	ldr	r2, [sp, #0]
 80063ea:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80063ee:	f7fa fb71 	bl	8000ad4 <__addsf3>
 80063f2:	4606      	mov	r6, r0
 80063f4:	9801      	ldr	r0, [sp, #4]
 80063f6:	f7fa fc21 	bl	8000c3c <__aeabi_i2f>
 80063fa:	4682      	mov	sl, r0
 80063fc:	4b1d      	ldr	r3, [pc, #116]	; (8006474 <__ieee754_powf+0x4f4>)
 80063fe:	9a00      	ldr	r2, [sp, #0]
 8006400:	4631      	mov	r1, r6
 8006402:	f853 b022 	ldr.w	fp, [r3, r2, lsl #2]
 8006406:	4640      	mov	r0, r8
 8006408:	f7fa fb64 	bl	8000ad4 <__addsf3>
 800640c:	4659      	mov	r1, fp
 800640e:	f7fa fb61 	bl	8000ad4 <__addsf3>
 8006412:	4651      	mov	r1, sl
 8006414:	f7fa fb5e 	bl	8000ad4 <__addsf3>
 8006418:	f420 697f 	bic.w	r9, r0, #4080	; 0xff0
 800641c:	f029 090f 	bic.w	r9, r9, #15
 8006420:	4651      	mov	r1, sl
 8006422:	4648      	mov	r0, r9
 8006424:	f7fa fb54 	bl	8000ad0 <__aeabi_fsub>
 8006428:	4659      	mov	r1, fp
 800642a:	f7fa fb51 	bl	8000ad0 <__aeabi_fsub>
 800642e:	4641      	mov	r1, r8
 8006430:	e69c      	b.n	800616c <__ieee754_powf+0x1ec>
 8006432:	2200      	movs	r2, #0
 8006434:	e6f3      	b.n	800621e <__ieee754_powf+0x29e>
 8006436:	2301      	movs	r3, #1
 8006438:	e706      	b.n	8006248 <__ieee754_powf+0x2c8>
 800643a:	bf00      	nop
 800643c:	001cc471 	.word	0x001cc471
 8006440:	005db3d6 	.word	0x005db3d6
 8006444:	08006ab0 	.word	0x08006ab0
 8006448:	3e53f142 	.word	0x3e53f142
 800644c:	3e6c3255 	.word	0x3e6c3255
 8006450:	3e8ba305 	.word	0x3e8ba305
 8006454:	3eaaaaab 	.word	0x3eaaaaab
 8006458:	3edb6db7 	.word	0x3edb6db7
 800645c:	3f19999a 	.word	0x3f19999a
 8006460:	40400000 	.word	0x40400000
 8006464:	3f763800 	.word	0x3f763800
 8006468:	3f76384f 	.word	0x3f76384f
 800646c:	369dc3a0 	.word	0x369dc3a0
 8006470:	08006ac0 	.word	0x08006ac0
 8006474:	08006ab8 	.word	0x08006ab8
 8006478:	f040 80c2 	bne.w	8006600 <__ieee754_powf+0x680>
 800647c:	4968      	ldr	r1, [pc, #416]	; (8006620 <__ieee754_powf+0x6a0>)
 800647e:	4630      	mov	r0, r6
 8006480:	f7fa fb28 	bl	8000ad4 <__addsf3>
 8006484:	4639      	mov	r1, r7
 8006486:	4681      	mov	r9, r0
 8006488:	4650      	mov	r0, sl
 800648a:	f7fa fb21 	bl	8000ad0 <__aeabi_fsub>
 800648e:	4601      	mov	r1, r0
 8006490:	4648      	mov	r0, r9
 8006492:	f7fa fde3 	bl	800105c <__aeabi_fcmpgt>
 8006496:	2800      	cmp	r0, #0
 8006498:	f47f aea0 	bne.w	80061dc <__ieee754_powf+0x25c>
 800649c:	15e4      	asrs	r4, r4, #23
 800649e:	f1a4 037e 	sub.w	r3, r4, #126	; 0x7e
 80064a2:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
 80064a6:	411c      	asrs	r4, r3
 80064a8:	4444      	add	r4, r8
 80064aa:	f3c4 53c7 	ubfx	r3, r4, #23, #8
 80064ae:	495d      	ldr	r1, [pc, #372]	; (8006624 <__ieee754_powf+0x6a4>)
 80064b0:	3b7f      	subs	r3, #127	; 0x7f
 80064b2:	4119      	asrs	r1, r3
 80064b4:	4021      	ands	r1, r4
 80064b6:	f3c4 0416 	ubfx	r4, r4, #0, #23
 80064ba:	f1c3 0317 	rsb	r3, r3, #23
 80064be:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
 80064c2:	411c      	asrs	r4, r3
 80064c4:	f1b8 0f00 	cmp.w	r8, #0
 80064c8:	4638      	mov	r0, r7
 80064ca:	bfb8      	it	lt
 80064cc:	4264      	neglt	r4, r4
 80064ce:	f7fa faff 	bl	8000ad0 <__aeabi_fsub>
 80064d2:	4681      	mov	r9, r0
 80064d4:	4631      	mov	r1, r6
 80064d6:	4648      	mov	r0, r9
 80064d8:	f7fa fafc 	bl	8000ad4 <__addsf3>
 80064dc:	f420 677f 	bic.w	r7, r0, #4080	; 0xff0
 80064e0:	f027 070f 	bic.w	r7, r7, #15
 80064e4:	4638      	mov	r0, r7
 80064e6:	4950      	ldr	r1, [pc, #320]	; (8006628 <__ieee754_powf+0x6a8>)
 80064e8:	f7fa fbfc 	bl	8000ce4 <__aeabi_fmul>
 80064ec:	4649      	mov	r1, r9
 80064ee:	4680      	mov	r8, r0
 80064f0:	4638      	mov	r0, r7
 80064f2:	f7fa faed 	bl	8000ad0 <__aeabi_fsub>
 80064f6:	4601      	mov	r1, r0
 80064f8:	4630      	mov	r0, r6
 80064fa:	f7fa fae9 	bl	8000ad0 <__aeabi_fsub>
 80064fe:	494b      	ldr	r1, [pc, #300]	; (800662c <__ieee754_powf+0x6ac>)
 8006500:	f7fa fbf0 	bl	8000ce4 <__aeabi_fmul>
 8006504:	494a      	ldr	r1, [pc, #296]	; (8006630 <__ieee754_powf+0x6b0>)
 8006506:	4606      	mov	r6, r0
 8006508:	4638      	mov	r0, r7
 800650a:	f7fa fbeb 	bl	8000ce4 <__aeabi_fmul>
 800650e:	4601      	mov	r1, r0
 8006510:	4630      	mov	r0, r6
 8006512:	f7fa fadf 	bl	8000ad4 <__addsf3>
 8006516:	4607      	mov	r7, r0
 8006518:	4601      	mov	r1, r0
 800651a:	4640      	mov	r0, r8
 800651c:	f7fa fada 	bl	8000ad4 <__addsf3>
 8006520:	4641      	mov	r1, r8
 8006522:	4606      	mov	r6, r0
 8006524:	f7fa fad4 	bl	8000ad0 <__aeabi_fsub>
 8006528:	4601      	mov	r1, r0
 800652a:	4638      	mov	r0, r7
 800652c:	f7fa fad0 	bl	8000ad0 <__aeabi_fsub>
 8006530:	4631      	mov	r1, r6
 8006532:	4680      	mov	r8, r0
 8006534:	4630      	mov	r0, r6
 8006536:	f7fa fbd5 	bl	8000ce4 <__aeabi_fmul>
 800653a:	4607      	mov	r7, r0
 800653c:	493d      	ldr	r1, [pc, #244]	; (8006634 <__ieee754_powf+0x6b4>)
 800653e:	f7fa fbd1 	bl	8000ce4 <__aeabi_fmul>
 8006542:	493d      	ldr	r1, [pc, #244]	; (8006638 <__ieee754_powf+0x6b8>)
 8006544:	f7fa fac4 	bl	8000ad0 <__aeabi_fsub>
 8006548:	4639      	mov	r1, r7
 800654a:	f7fa fbcb 	bl	8000ce4 <__aeabi_fmul>
 800654e:	493b      	ldr	r1, [pc, #236]	; (800663c <__ieee754_powf+0x6bc>)
 8006550:	f7fa fac0 	bl	8000ad4 <__addsf3>
 8006554:	4639      	mov	r1, r7
 8006556:	f7fa fbc5 	bl	8000ce4 <__aeabi_fmul>
 800655a:	4939      	ldr	r1, [pc, #228]	; (8006640 <__ieee754_powf+0x6c0>)
 800655c:	f7fa fab8 	bl	8000ad0 <__aeabi_fsub>
 8006560:	4639      	mov	r1, r7
 8006562:	f7fa fbbf 	bl	8000ce4 <__aeabi_fmul>
 8006566:	4937      	ldr	r1, [pc, #220]	; (8006644 <__ieee754_powf+0x6c4>)
 8006568:	f7fa fab4 	bl	8000ad4 <__addsf3>
 800656c:	4639      	mov	r1, r7
 800656e:	f7fa fbb9 	bl	8000ce4 <__aeabi_fmul>
 8006572:	4601      	mov	r1, r0
 8006574:	4630      	mov	r0, r6
 8006576:	f7fa faab 	bl	8000ad0 <__aeabi_fsub>
 800657a:	4607      	mov	r7, r0
 800657c:	4601      	mov	r1, r0
 800657e:	4630      	mov	r0, r6
 8006580:	f7fa fbb0 	bl	8000ce4 <__aeabi_fmul>
 8006584:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006588:	4681      	mov	r9, r0
 800658a:	4638      	mov	r0, r7
 800658c:	f7fa faa0 	bl	8000ad0 <__aeabi_fsub>
 8006590:	4601      	mov	r1, r0
 8006592:	4648      	mov	r0, r9
 8006594:	f7fa fc5a 	bl	8000e4c <__aeabi_fdiv>
 8006598:	4641      	mov	r1, r8
 800659a:	4607      	mov	r7, r0
 800659c:	4630      	mov	r0, r6
 800659e:	f7fa fba1 	bl	8000ce4 <__aeabi_fmul>
 80065a2:	4641      	mov	r1, r8
 80065a4:	f7fa fa96 	bl	8000ad4 <__addsf3>
 80065a8:	4601      	mov	r1, r0
 80065aa:	4638      	mov	r0, r7
 80065ac:	f7fa fa90 	bl	8000ad0 <__aeabi_fsub>
 80065b0:	4631      	mov	r1, r6
 80065b2:	f7fa fa8d 	bl	8000ad0 <__aeabi_fsub>
 80065b6:	4601      	mov	r1, r0
 80065b8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80065bc:	f7fa fa88 	bl	8000ad0 <__aeabi_fsub>
 80065c0:	eb00 53c4 	add.w	r3, r0, r4, lsl #23
 80065c4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80065c8:	da20      	bge.n	800660c <__ieee754_powf+0x68c>
 80065ca:	4621      	mov	r1, r4
 80065cc:	f000 f8e6 	bl	800679c <scalbnf>
 80065d0:	4629      	mov	r1, r5
 80065d2:	e53f      	b.n	8006054 <__ieee754_powf+0xd4>
 80065d4:	4b1c      	ldr	r3, [pc, #112]	; (8006648 <__ieee754_powf+0x6c8>)
 80065d6:	429c      	cmp	r4, r3
 80065d8:	dd07      	ble.n	80065ea <__ieee754_powf+0x66a>
 80065da:	2100      	movs	r1, #0
 80065dc:	4628      	mov	r0, r5
 80065de:	f7fa fd1f 	bl	8001020 <__aeabi_fcmplt>
 80065e2:	3800      	subs	r0, #0
 80065e4:	bf18      	it	ne
 80065e6:	2001      	movne	r0, #1
 80065e8:	e581      	b.n	80060ee <__ieee754_powf+0x16e>
 80065ea:	d109      	bne.n	8006600 <__ieee754_powf+0x680>
 80065ec:	4639      	mov	r1, r7
 80065ee:	f7fa fa6f 	bl	8000ad0 <__aeabi_fsub>
 80065f2:	4631      	mov	r1, r6
 80065f4:	f7fa fd28 	bl	8001048 <__aeabi_fcmpge>
 80065f8:	2800      	cmp	r0, #0
 80065fa:	f43f af4f 	beq.w	800649c <__ieee754_powf+0x51c>
 80065fe:	e7ec      	b.n	80065da <__ieee754_powf+0x65a>
 8006600:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8006604:	f73f af4a 	bgt.w	800649c <__ieee754_powf+0x51c>
 8006608:	2400      	movs	r4, #0
 800660a:	e763      	b.n	80064d4 <__ieee754_powf+0x554>
 800660c:	4618      	mov	r0, r3
 800660e:	e7df      	b.n	80065d0 <__ieee754_powf+0x650>
 8006610:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8006614:	e50d      	b.n	8006032 <__ieee754_powf+0xb2>
 8006616:	2100      	movs	r1, #0
 8006618:	e50b      	b.n	8006032 <__ieee754_powf+0xb2>
 800661a:	2500      	movs	r5, #0
 800661c:	e4f1      	b.n	8006002 <__ieee754_powf+0x82>
 800661e:	bf00      	nop
 8006620:	3338aa3c 	.word	0x3338aa3c
 8006624:	ff800000 	.word	0xff800000
 8006628:	3f317200 	.word	0x3f317200
 800662c:	3f317218 	.word	0x3f317218
 8006630:	35bfbe8c 	.word	0x35bfbe8c
 8006634:	3331bb4c 	.word	0x3331bb4c
 8006638:	35ddea0e 	.word	0x35ddea0e
 800663c:	388ab355 	.word	0x388ab355
 8006640:	3b360b61 	.word	0x3b360b61
 8006644:	3e2aaaab 	.word	0x3e2aaaab
 8006648:	43160000 	.word	0x43160000
 800664c:	00000000 	.word	0x00000000

08006650 <scalbn>:
 8006650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006652:	4616      	mov	r6, r2
 8006654:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006658:	4604      	mov	r4, r0
 800665a:	460d      	mov	r5, r1
 800665c:	460b      	mov	r3, r1
 800665e:	b992      	cbnz	r2, 8006686 <scalbn+0x36>
 8006660:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006664:	4303      	orrs	r3, r0
 8006666:	d03c      	beq.n	80066e2 <scalbn+0x92>
 8006668:	4b31      	ldr	r3, [pc, #196]	; (8006730 <scalbn+0xe0>)
 800666a:	2200      	movs	r2, #0
 800666c:	f7f9 ff2c 	bl	80004c8 <__aeabi_dmul>
 8006670:	4b30      	ldr	r3, [pc, #192]	; (8006734 <scalbn+0xe4>)
 8006672:	4604      	mov	r4, r0
 8006674:	429e      	cmp	r6, r3
 8006676:	460d      	mov	r5, r1
 8006678:	da0f      	bge.n	800669a <scalbn+0x4a>
 800667a:	a329      	add	r3, pc, #164	; (adr r3, 8006720 <scalbn+0xd0>)
 800667c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006680:	f7f9 ff22 	bl	80004c8 <__aeabi_dmul>
 8006684:	e006      	b.n	8006694 <scalbn+0x44>
 8006686:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800668a:	42ba      	cmp	r2, r7
 800668c:	d109      	bne.n	80066a2 <scalbn+0x52>
 800668e:	4602      	mov	r2, r0
 8006690:	f7f9 fd64 	bl	800015c <__adddf3>
 8006694:	4604      	mov	r4, r0
 8006696:	460d      	mov	r5, r1
 8006698:	e023      	b.n	80066e2 <scalbn+0x92>
 800669a:	460b      	mov	r3, r1
 800669c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80066a0:	3a36      	subs	r2, #54	; 0x36
 80066a2:	f24c 3150 	movw	r1, #50000	; 0xc350
 80066a6:	428e      	cmp	r6, r1
 80066a8:	dd0e      	ble.n	80066c8 <scalbn+0x78>
 80066aa:	a31f      	add	r3, pc, #124	; (adr r3, 8006728 <scalbn+0xd8>)
 80066ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b0:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 80066b4:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 80066b8:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 80066bc:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 80066c0:	481d      	ldr	r0, [pc, #116]	; (8006738 <scalbn+0xe8>)
 80066c2:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 80066c6:	e7db      	b.n	8006680 <scalbn+0x30>
 80066c8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80066cc:	4432      	add	r2, r6
 80066ce:	428a      	cmp	r2, r1
 80066d0:	dceb      	bgt.n	80066aa <scalbn+0x5a>
 80066d2:	2a00      	cmp	r2, #0
 80066d4:	dd08      	ble.n	80066e8 <scalbn+0x98>
 80066d6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80066da:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80066de:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80066e2:	4620      	mov	r0, r4
 80066e4:	4629      	mov	r1, r5
 80066e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066e8:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80066ec:	da0c      	bge.n	8006708 <scalbn+0xb8>
 80066ee:	a30c      	add	r3, pc, #48	; (adr r3, 8006720 <scalbn+0xd0>)
 80066f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066f4:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 80066f8:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 80066fc:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8006700:	480e      	ldr	r0, [pc, #56]	; (800673c <scalbn+0xec>)
 8006702:	f041 011f 	orr.w	r1, r1, #31
 8006706:	e7bb      	b.n	8006680 <scalbn+0x30>
 8006708:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800670c:	3236      	adds	r2, #54	; 0x36
 800670e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006712:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006716:	4620      	mov	r0, r4
 8006718:	4629      	mov	r1, r5
 800671a:	2200      	movs	r2, #0
 800671c:	4b08      	ldr	r3, [pc, #32]	; (8006740 <scalbn+0xf0>)
 800671e:	e7af      	b.n	8006680 <scalbn+0x30>
 8006720:	c2f8f359 	.word	0xc2f8f359
 8006724:	01a56e1f 	.word	0x01a56e1f
 8006728:	8800759c 	.word	0x8800759c
 800672c:	7e37e43c 	.word	0x7e37e43c
 8006730:	43500000 	.word	0x43500000
 8006734:	ffff3cb0 	.word	0xffff3cb0
 8006738:	8800759c 	.word	0x8800759c
 800673c:	c2f8f359 	.word	0xc2f8f359
 8006740:	3c900000 	.word	0x3c900000

08006744 <with_errno>:
 8006744:	b570      	push	{r4, r5, r6, lr}
 8006746:	4604      	mov	r4, r0
 8006748:	460d      	mov	r5, r1
 800674a:	4616      	mov	r6, r2
 800674c:	f7fe faee 	bl	8004d2c <__errno>
 8006750:	4629      	mov	r1, r5
 8006752:	6006      	str	r6, [r0, #0]
 8006754:	4620      	mov	r0, r4
 8006756:	bd70      	pop	{r4, r5, r6, pc}

08006758 <xflow>:
 8006758:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800675a:	4615      	mov	r5, r2
 800675c:	461c      	mov	r4, r3
 800675e:	b180      	cbz	r0, 8006782 <xflow+0x2a>
 8006760:	4610      	mov	r0, r2
 8006762:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006766:	e9cd 0100 	strd	r0, r1, [sp]
 800676a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800676e:	4628      	mov	r0, r5
 8006770:	4621      	mov	r1, r4
 8006772:	f7f9 fea9 	bl	80004c8 <__aeabi_dmul>
 8006776:	2222      	movs	r2, #34	; 0x22
 8006778:	b003      	add	sp, #12
 800677a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800677e:	f7ff bfe1 	b.w	8006744 <with_errno>
 8006782:	4610      	mov	r0, r2
 8006784:	4619      	mov	r1, r3
 8006786:	e7ee      	b.n	8006766 <xflow+0xe>

08006788 <__math_uflow>:
 8006788:	2200      	movs	r2, #0
 800678a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800678e:	f7ff bfe3 	b.w	8006758 <xflow>

08006792 <__math_oflow>:
 8006792:	2200      	movs	r2, #0
 8006794:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8006798:	f7ff bfde 	b.w	8006758 <xflow>

0800679c <scalbnf>:
 800679c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80067a0:	b538      	push	{r3, r4, r5, lr}
 80067a2:	4603      	mov	r3, r0
 80067a4:	460d      	mov	r5, r1
 80067a6:	4604      	mov	r4, r0
 80067a8:	d02e      	beq.n	8006808 <scalbnf+0x6c>
 80067aa:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80067ae:	d304      	bcc.n	80067ba <scalbnf+0x1e>
 80067b0:	4601      	mov	r1, r0
 80067b2:	f7fa f98f 	bl	8000ad4 <__addsf3>
 80067b6:	4603      	mov	r3, r0
 80067b8:	e026      	b.n	8006808 <scalbnf+0x6c>
 80067ba:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 80067be:	d118      	bne.n	80067f2 <scalbnf+0x56>
 80067c0:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 80067c4:	f7fa fa8e 	bl	8000ce4 <__aeabi_fmul>
 80067c8:	4a17      	ldr	r2, [pc, #92]	; (8006828 <scalbnf+0x8c>)
 80067ca:	4603      	mov	r3, r0
 80067cc:	4295      	cmp	r5, r2
 80067ce:	db0c      	blt.n	80067ea <scalbnf+0x4e>
 80067d0:	4604      	mov	r4, r0
 80067d2:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 80067d6:	3a19      	subs	r2, #25
 80067d8:	f24c 3150 	movw	r1, #50000	; 0xc350
 80067dc:	428d      	cmp	r5, r1
 80067de:	dd0a      	ble.n	80067f6 <scalbnf+0x5a>
 80067e0:	4912      	ldr	r1, [pc, #72]	; (800682c <scalbnf+0x90>)
 80067e2:	4618      	mov	r0, r3
 80067e4:	f361 001e 	bfi	r0, r1, #0, #31
 80067e8:	e000      	b.n	80067ec <scalbnf+0x50>
 80067ea:	4911      	ldr	r1, [pc, #68]	; (8006830 <scalbnf+0x94>)
 80067ec:	f7fa fa7a 	bl	8000ce4 <__aeabi_fmul>
 80067f0:	e7e1      	b.n	80067b6 <scalbnf+0x1a>
 80067f2:	0dd2      	lsrs	r2, r2, #23
 80067f4:	e7f0      	b.n	80067d8 <scalbnf+0x3c>
 80067f6:	1951      	adds	r1, r2, r5
 80067f8:	29fe      	cmp	r1, #254	; 0xfe
 80067fa:	dcf1      	bgt.n	80067e0 <scalbnf+0x44>
 80067fc:	2900      	cmp	r1, #0
 80067fe:	dd05      	ble.n	800680c <scalbnf+0x70>
 8006800:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 8006804:	ea44 53c1 	orr.w	r3, r4, r1, lsl #23
 8006808:	4618      	mov	r0, r3
 800680a:	bd38      	pop	{r3, r4, r5, pc}
 800680c:	f111 0f16 	cmn.w	r1, #22
 8006810:	da01      	bge.n	8006816 <scalbnf+0x7a>
 8006812:	4907      	ldr	r1, [pc, #28]	; (8006830 <scalbnf+0x94>)
 8006814:	e7e5      	b.n	80067e2 <scalbnf+0x46>
 8006816:	f101 0019 	add.w	r0, r1, #25
 800681a:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 800681e:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 8006822:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
 8006826:	e7e1      	b.n	80067ec <scalbnf+0x50>
 8006828:	ffff3cb0 	.word	0xffff3cb0
 800682c:	7149f2ca 	.word	0x7149f2ca
 8006830:	0da24260 	.word	0x0da24260

08006834 <with_errnof>:
 8006834:	b538      	push	{r3, r4, r5, lr}
 8006836:	4604      	mov	r4, r0
 8006838:	460d      	mov	r5, r1
 800683a:	f7fe fa77 	bl	8004d2c <__errno>
 800683e:	6005      	str	r5, [r0, #0]
 8006840:	4620      	mov	r0, r4
 8006842:	bd38      	pop	{r3, r4, r5, pc}

08006844 <xflowf>:
 8006844:	b508      	push	{r3, lr}
 8006846:	b140      	cbz	r0, 800685a <xflowf+0x16>
 8006848:	f101 4000 	add.w	r0, r1, #2147483648	; 0x80000000
 800684c:	f7fa fa4a 	bl	8000ce4 <__aeabi_fmul>
 8006850:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006854:	2122      	movs	r1, #34	; 0x22
 8006856:	f7ff bfed 	b.w	8006834 <with_errnof>
 800685a:	4608      	mov	r0, r1
 800685c:	e7f6      	b.n	800684c <xflowf+0x8>

0800685e <__math_uflowf>:
 800685e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
 8006862:	f7ff bfef 	b.w	8006844 <xflowf>

08006866 <__math_oflowf>:
 8006866:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 800686a:	f7ff bfeb 	b.w	8006844 <xflowf>
	...

08006870 <__ieee754_sqrt>:
 8006870:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8006a14 <__ieee754_sqrt+0x1a4>
 8006874:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006878:	ea3c 0c01 	bics.w	ip, ip, r1
 800687c:	460b      	mov	r3, r1
 800687e:	4606      	mov	r6, r0
 8006880:	460d      	mov	r5, r1
 8006882:	460a      	mov	r2, r1
 8006884:	4604      	mov	r4, r0
 8006886:	d10e      	bne.n	80068a6 <__ieee754_sqrt+0x36>
 8006888:	4602      	mov	r2, r0
 800688a:	f7f9 fe1d 	bl	80004c8 <__aeabi_dmul>
 800688e:	4602      	mov	r2, r0
 8006890:	460b      	mov	r3, r1
 8006892:	4630      	mov	r0, r6
 8006894:	4629      	mov	r1, r5
 8006896:	f7f9 fc61 	bl	800015c <__adddf3>
 800689a:	4606      	mov	r6, r0
 800689c:	460d      	mov	r5, r1
 800689e:	4630      	mov	r0, r6
 80068a0:	4629      	mov	r1, r5
 80068a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068a6:	2900      	cmp	r1, #0
 80068a8:	dc0d      	bgt.n	80068c6 <__ieee754_sqrt+0x56>
 80068aa:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80068ae:	ea5c 0c00 	orrs.w	ip, ip, r0
 80068b2:	d0f4      	beq.n	800689e <__ieee754_sqrt+0x2e>
 80068b4:	b139      	cbz	r1, 80068c6 <__ieee754_sqrt+0x56>
 80068b6:	4602      	mov	r2, r0
 80068b8:	f7f9 fc4e 	bl	8000158 <__aeabi_dsub>
 80068bc:	4602      	mov	r2, r0
 80068be:	460b      	mov	r3, r1
 80068c0:	f7f9 ff2c 	bl	800071c <__aeabi_ddiv>
 80068c4:	e7e9      	b.n	800689a <__ieee754_sqrt+0x2a>
 80068c6:	1512      	asrs	r2, r2, #20
 80068c8:	f000 8089 	beq.w	80069de <__ieee754_sqrt+0x16e>
 80068cc:	2500      	movs	r5, #0
 80068ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80068d2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80068d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80068da:	07d2      	lsls	r2, r2, #31
 80068dc:	bf5c      	itt	pl
 80068de:	005b      	lslpl	r3, r3, #1
 80068e0:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 80068e4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80068e8:	bf58      	it	pl
 80068ea:	0064      	lslpl	r4, r4, #1
 80068ec:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 80068f0:	0062      	lsls	r2, r4, #1
 80068f2:	2016      	movs	r0, #22
 80068f4:	4629      	mov	r1, r5
 80068f6:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 80068fa:	1076      	asrs	r6, r6, #1
 80068fc:	190f      	adds	r7, r1, r4
 80068fe:	429f      	cmp	r7, r3
 8006900:	bfde      	ittt	le
 8006902:	1bdb      	suble	r3, r3, r7
 8006904:	1939      	addle	r1, r7, r4
 8006906:	192d      	addle	r5, r5, r4
 8006908:	005b      	lsls	r3, r3, #1
 800690a:	3801      	subs	r0, #1
 800690c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8006910:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8006914:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8006918:	d1f0      	bne.n	80068fc <__ieee754_sqrt+0x8c>
 800691a:	4604      	mov	r4, r0
 800691c:	2720      	movs	r7, #32
 800691e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8006922:	428b      	cmp	r3, r1
 8006924:	eb0c 0e00 	add.w	lr, ip, r0
 8006928:	dc02      	bgt.n	8006930 <__ieee754_sqrt+0xc0>
 800692a:	d113      	bne.n	8006954 <__ieee754_sqrt+0xe4>
 800692c:	4596      	cmp	lr, r2
 800692e:	d811      	bhi.n	8006954 <__ieee754_sqrt+0xe4>
 8006930:	f1be 0f00 	cmp.w	lr, #0
 8006934:	eb0e 000c 	add.w	r0, lr, ip
 8006938:	da56      	bge.n	80069e8 <__ieee754_sqrt+0x178>
 800693a:	2800      	cmp	r0, #0
 800693c:	db54      	blt.n	80069e8 <__ieee754_sqrt+0x178>
 800693e:	f101 0801 	add.w	r8, r1, #1
 8006942:	1a5b      	subs	r3, r3, r1
 8006944:	4641      	mov	r1, r8
 8006946:	4596      	cmp	lr, r2
 8006948:	bf88      	it	hi
 800694a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800694e:	eba2 020e 	sub.w	r2, r2, lr
 8006952:	4464      	add	r4, ip
 8006954:	005b      	lsls	r3, r3, #1
 8006956:	3f01      	subs	r7, #1
 8006958:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800695c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8006960:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8006964:	d1dd      	bne.n	8006922 <__ieee754_sqrt+0xb2>
 8006966:	4313      	orrs	r3, r2
 8006968:	d01b      	beq.n	80069a2 <__ieee754_sqrt+0x132>
 800696a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8006a18 <__ieee754_sqrt+0x1a8>
 800696e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8006a1c <__ieee754_sqrt+0x1ac>
 8006972:	e9da 0100 	ldrd	r0, r1, [sl]
 8006976:	e9db 2300 	ldrd	r2, r3, [fp]
 800697a:	f7f9 fbed 	bl	8000158 <__aeabi_dsub>
 800697e:	e9da 8900 	ldrd	r8, r9, [sl]
 8006982:	4602      	mov	r2, r0
 8006984:	460b      	mov	r3, r1
 8006986:	4640      	mov	r0, r8
 8006988:	4649      	mov	r1, r9
 800698a:	f7fa f819 	bl	80009c0 <__aeabi_dcmple>
 800698e:	b140      	cbz	r0, 80069a2 <__ieee754_sqrt+0x132>
 8006990:	e9da 0100 	ldrd	r0, r1, [sl]
 8006994:	e9db 2300 	ldrd	r2, r3, [fp]
 8006998:	f1b4 3fff 	cmp.w	r4, #4294967295
 800699c:	d126      	bne.n	80069ec <__ieee754_sqrt+0x17c>
 800699e:	463c      	mov	r4, r7
 80069a0:	3501      	adds	r5, #1
 80069a2:	106b      	asrs	r3, r5, #1
 80069a4:	0864      	lsrs	r4, r4, #1
 80069a6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80069aa:	07ea      	lsls	r2, r5, #31
 80069ac:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80069b0:	bf48      	it	mi
 80069b2:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 80069b6:	4620      	mov	r0, r4
 80069b8:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 80069bc:	e76d      	b.n	800689a <__ieee754_sqrt+0x2a>
 80069be:	0ae3      	lsrs	r3, r4, #11
 80069c0:	3915      	subs	r1, #21
 80069c2:	0564      	lsls	r4, r4, #21
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d0fa      	beq.n	80069be <__ieee754_sqrt+0x14e>
 80069c8:	02d8      	lsls	r0, r3, #11
 80069ca:	d50a      	bpl.n	80069e2 <__ieee754_sqrt+0x172>
 80069cc:	f1c2 0020 	rsb	r0, r2, #32
 80069d0:	fa24 f000 	lsr.w	r0, r4, r0
 80069d4:	1e55      	subs	r5, r2, #1
 80069d6:	4094      	lsls	r4, r2
 80069d8:	4303      	orrs	r3, r0
 80069da:	1b4a      	subs	r2, r1, r5
 80069dc:	e776      	b.n	80068cc <__ieee754_sqrt+0x5c>
 80069de:	4611      	mov	r1, r2
 80069e0:	e7f0      	b.n	80069c4 <__ieee754_sqrt+0x154>
 80069e2:	005b      	lsls	r3, r3, #1
 80069e4:	3201      	adds	r2, #1
 80069e6:	e7ef      	b.n	80069c8 <__ieee754_sqrt+0x158>
 80069e8:	4688      	mov	r8, r1
 80069ea:	e7aa      	b.n	8006942 <__ieee754_sqrt+0xd2>
 80069ec:	f7f9 fbb6 	bl	800015c <__adddf3>
 80069f0:	e9da 8900 	ldrd	r8, r9, [sl]
 80069f4:	4602      	mov	r2, r0
 80069f6:	460b      	mov	r3, r1
 80069f8:	4640      	mov	r0, r8
 80069fa:	4649      	mov	r1, r9
 80069fc:	f7f9 ffd6 	bl	80009ac <__aeabi_dcmplt>
 8006a00:	b120      	cbz	r0, 8006a0c <__ieee754_sqrt+0x19c>
 8006a02:	1ca1      	adds	r1, r4, #2
 8006a04:	bf08      	it	eq
 8006a06:	3501      	addeq	r5, #1
 8006a08:	3402      	adds	r4, #2
 8006a0a:	e7ca      	b.n	80069a2 <__ieee754_sqrt+0x132>
 8006a0c:	3401      	adds	r4, #1
 8006a0e:	f024 0401 	bic.w	r4, r4, #1
 8006a12:	e7c6      	b.n	80069a2 <__ieee754_sqrt+0x132>
 8006a14:	7ff00000 	.word	0x7ff00000
 8006a18:	20000078 	.word	0x20000078
 8006a1c:	20000080 	.word	0x20000080

08006a20 <_init>:
 8006a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a22:	bf00      	nop
 8006a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a26:	bc08      	pop	{r3}
 8006a28:	469e      	mov	lr, r3
 8006a2a:	4770      	bx	lr

08006a2c <_fini>:
 8006a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a2e:	bf00      	nop
 8006a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a32:	bc08      	pop	{r3}
 8006a34:	469e      	mov	lr, r3
 8006a36:	4770      	bx	lr


SCORPIONS1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ac0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003bcc  08003bcc  00013bcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bf0  08003bf0  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08003bf0  08003bf0  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003bf0  08003bf0  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bf0  08003bf0  00013bf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003bf4  08003bf4  00013bf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08003bf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000042c  2000001c  08003c14  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000448  08003c14  00020448  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a1e0  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e2b  00000000  00000000  0002a268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b58  00000000  00000000  0002c098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008b7  00000000  00000000  0002cbf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018074  00000000  00000000  0002d4a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cacf  00000000  00000000  0004551b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000887aa  00000000  00000000  00051fea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002f78  00000000  00000000  000da794  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  000dd70c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000001c 	.word	0x2000001c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003bb4 	.word	0x08003bb4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000020 	.word	0x20000020
 8000148:	08003bb4 	.word	0x08003bb4

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__gesf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295
 800060c:	e006      	b.n	800061c <__cmpsf2+0x4>
 800060e:	bf00      	nop

08000610 <__lesf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpsf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpsf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000624:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000628:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800062c:	bf18      	it	ne
 800062e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000632:	d011      	beq.n	8000658 <__cmpsf2+0x40>
 8000634:	b001      	add	sp, #4
 8000636:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063a:	bf18      	it	ne
 800063c:	ea90 0f01 	teqne	r0, r1
 8000640:	bf58      	it	pl
 8000642:	ebb2 0003 	subspl.w	r0, r2, r3
 8000646:	bf88      	it	hi
 8000648:	17c8      	asrhi	r0, r1, #31
 800064a:	bf38      	it	cc
 800064c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000650:	bf18      	it	ne
 8000652:	f040 0001 	orrne.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	d102      	bne.n	8000664 <__cmpsf2+0x4c>
 800065e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000662:	d105      	bne.n	8000670 <__cmpsf2+0x58>
 8000664:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000668:	d1e4      	bne.n	8000634 <__cmpsf2+0x1c>
 800066a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800066e:	d0e1      	beq.n	8000634 <__cmpsf2+0x1c>
 8000670:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_cfrcmple>:
 8000678:	4684      	mov	ip, r0
 800067a:	4608      	mov	r0, r1
 800067c:	4661      	mov	r1, ip
 800067e:	e7ff      	b.n	8000680 <__aeabi_cfcmpeq>

08000680 <__aeabi_cfcmpeq>:
 8000680:	b50f      	push	{r0, r1, r2, r3, lr}
 8000682:	f7ff ffc9 	bl	8000618 <__cmpsf2>
 8000686:	2800      	cmp	r0, #0
 8000688:	bf48      	it	mi
 800068a:	f110 0f00 	cmnmi.w	r0, #0
 800068e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000690 <__aeabi_fcmpeq>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff fff4 	bl	8000680 <__aeabi_cfcmpeq>
 8000698:	bf0c      	ite	eq
 800069a:	2001      	moveq	r0, #1
 800069c:	2000      	movne	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_fcmplt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffea 	bl	8000680 <__aeabi_cfcmpeq>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmple>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffe0 	bl	8000680 <__aeabi_cfcmpeq>
 80006c0:	bf94      	ite	ls
 80006c2:	2001      	movls	r0, #1
 80006c4:	2000      	movhi	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmpge>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffd2 	bl	8000678 <__aeabi_cfrcmple>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpgt>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffc8 	bl	8000678 <__aeabi_cfrcmple>
 80006e8:	bf34      	ite	cc
 80006ea:	2001      	movcc	r0, #1
 80006ec:	2000      	movcs	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2uiz>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	d20e      	bcs.n	8000716 <__aeabi_f2uiz+0x22>
 80006f8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80006fc:	d30b      	bcc.n	8000716 <__aeabi_f2uiz+0x22>
 80006fe:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000702:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000706:	d409      	bmi.n	800071c <__aeabi_f2uiz+0x28>
 8000708:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800070c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000710:	fa23 f002 	lsr.w	r0, r3, r2
 8000714:	4770      	bx	lr
 8000716:	f04f 0000 	mov.w	r0, #0
 800071a:	4770      	bx	lr
 800071c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000720:	d101      	bne.n	8000726 <__aeabi_f2uiz+0x32>
 8000722:	0242      	lsls	r2, r0, #9
 8000724:	d102      	bne.n	800072c <__aeabi_f2uiz+0x38>
 8000726:	f04f 30ff 	mov.w	r0, #4294967295
 800072a:	4770      	bx	lr
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop

08000734 <armInit>:

#include "arm.h"

arm arms[ARM_NUMBER];

void armInit(void) {
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < ARM_NUMBER; i ++) {
 800073a:	2300      	movs	r3, #0
 800073c:	71fb      	strb	r3, [r7, #7]
 800073e:	e02e      	b.n	800079e <armInit+0x6a>
		arms[i].gripperID = SERVO_UNDEFINED;
 8000740:	79fb      	ldrb	r3, [r7, #7]
 8000742:	4a1b      	ldr	r2, [pc, #108]	; (80007b0 <armInit+0x7c>)
 8000744:	011b      	lsls	r3, r3, #4
 8000746:	4413      	add	r3, r2
 8000748:	220c      	movs	r2, #12
 800074a:	701a      	strb	r2, [r3, #0]
		arms[i].wristID = SERVO_UNDEFINED;
 800074c:	79fb      	ldrb	r3, [r7, #7]
 800074e:	4a18      	ldr	r2, [pc, #96]	; (80007b0 <armInit+0x7c>)
 8000750:	011b      	lsls	r3, r3, #4
 8000752:	4413      	add	r3, r2
 8000754:	3301      	adds	r3, #1
 8000756:	220c      	movs	r2, #12
 8000758:	701a      	strb	r2, [r3, #0]
		arms[i].elbowID = SERVO_UNDEFINED;
 800075a:	79fb      	ldrb	r3, [r7, #7]
 800075c:	4a14      	ldr	r2, [pc, #80]	; (80007b0 <armInit+0x7c>)
 800075e:	011b      	lsls	r3, r3, #4
 8000760:	4413      	add	r3, r2
 8000762:	3302      	adds	r3, #2
 8000764:	220c      	movs	r2, #12
 8000766:	701a      	strb	r2, [r3, #0]
		arms[i].distance = 0;
 8000768:	79fb      	ldrb	r3, [r7, #7]
 800076a:	4a11      	ldr	r2, [pc, #68]	; (80007b0 <armInit+0x7c>)
 800076c:	011b      	lsls	r3, r3, #4
 800076e:	4413      	add	r3, r2
 8000770:	3304      	adds	r3, #4
 8000772:	f04f 0200 	mov.w	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
		arms[i].degree = 0;
 8000778:	79fb      	ldrb	r3, [r7, #7]
 800077a:	4a0d      	ldr	r2, [pc, #52]	; (80007b0 <armInit+0x7c>)
 800077c:	011b      	lsls	r3, r3, #4
 800077e:	4413      	add	r3, r2
 8000780:	3308      	adds	r3, #8
 8000782:	f04f 0200 	mov.w	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
		arms[i].location = 0;
 8000788:	79fb      	ldrb	r3, [r7, #7]
 800078a:	4a09      	ldr	r2, [pc, #36]	; (80007b0 <armInit+0x7c>)
 800078c:	011b      	lsls	r3, r3, #4
 800078e:	4413      	add	r3, r2
 8000790:	330c      	adds	r3, #12
 8000792:	f04f 0200 	mov.w	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < ARM_NUMBER; i ++) {
 8000798:	79fb      	ldrb	r3, [r7, #7]
 800079a:	3301      	adds	r3, #1
 800079c:	71fb      	strb	r3, [r7, #7]
 800079e:	79fb      	ldrb	r3, [r7, #7]
 80007a0:	2b03      	cmp	r3, #3
 80007a2:	d9cd      	bls.n	8000740 <armInit+0xc>
	}
}
 80007a4:	bf00      	nop
 80007a6:	bf00      	nop
 80007a8:	370c      	adds	r7, #12
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bc80      	pop	{r7}
 80007ae:	4770      	bx	lr
 80007b0:	20000038 	.word	0x20000038

080007b4 <armStart>:

uint8_t armStart(uint8_t gripperID, uint8_t wristID, uint8_t elbowID) {
 80007b4:	b480      	push	{r7}
 80007b6:	b085      	sub	sp, #20
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	4603      	mov	r3, r0
 80007bc:	71fb      	strb	r3, [r7, #7]
 80007be:	460b      	mov	r3, r1
 80007c0:	71bb      	strb	r3, [r7, #6]
 80007c2:	4613      	mov	r3, r2
 80007c4:	717b      	strb	r3, [r7, #5]
	for (uint8_t i = 0; i < ARM_NUMBER; i ++) {
 80007c6:	2300      	movs	r3, #0
 80007c8:	73fb      	strb	r3, [r7, #15]
 80007ca:	e045      	b.n	8000858 <armStart+0xa4>
		if (arms[i].gripperID != SERVO_UNDEFINED || arms[i].wristID != SERVO_UNDEFINED || arms[i].elbowID != SERVO_UNDEFINED) continue;
 80007cc:	7bfb      	ldrb	r3, [r7, #15]
 80007ce:	4a27      	ldr	r2, [pc, #156]	; (800086c <armStart+0xb8>)
 80007d0:	011b      	lsls	r3, r3, #4
 80007d2:	4413      	add	r3, r2
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	2b0c      	cmp	r3, #12
 80007d8:	d13a      	bne.n	8000850 <armStart+0x9c>
 80007da:	7bfb      	ldrb	r3, [r7, #15]
 80007dc:	4a23      	ldr	r2, [pc, #140]	; (800086c <armStart+0xb8>)
 80007de:	011b      	lsls	r3, r3, #4
 80007e0:	4413      	add	r3, r2
 80007e2:	3301      	adds	r3, #1
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	2b0c      	cmp	r3, #12
 80007e8:	d132      	bne.n	8000850 <armStart+0x9c>
 80007ea:	7bfb      	ldrb	r3, [r7, #15]
 80007ec:	4a1f      	ldr	r2, [pc, #124]	; (800086c <armStart+0xb8>)
 80007ee:	011b      	lsls	r3, r3, #4
 80007f0:	4413      	add	r3, r2
 80007f2:	3302      	adds	r3, #2
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	2b0c      	cmp	r3, #12
 80007f8:	d12a      	bne.n	8000850 <armStart+0x9c>
		arms[i].gripperID = gripperID;
 80007fa:	7bfb      	ldrb	r3, [r7, #15]
 80007fc:	4a1b      	ldr	r2, [pc, #108]	; (800086c <armStart+0xb8>)
 80007fe:	011b      	lsls	r3, r3, #4
 8000800:	4413      	add	r3, r2
 8000802:	79fa      	ldrb	r2, [r7, #7]
 8000804:	701a      	strb	r2, [r3, #0]
		arms[i].wristID = wristID;
 8000806:	7bfb      	ldrb	r3, [r7, #15]
 8000808:	4a18      	ldr	r2, [pc, #96]	; (800086c <armStart+0xb8>)
 800080a:	011b      	lsls	r3, r3, #4
 800080c:	4413      	add	r3, r2
 800080e:	3301      	adds	r3, #1
 8000810:	79ba      	ldrb	r2, [r7, #6]
 8000812:	701a      	strb	r2, [r3, #0]
		arms[i].elbowID = elbowID;
 8000814:	7bfb      	ldrb	r3, [r7, #15]
 8000816:	4a15      	ldr	r2, [pc, #84]	; (800086c <armStart+0xb8>)
 8000818:	011b      	lsls	r3, r3, #4
 800081a:	4413      	add	r3, r2
 800081c:	3302      	adds	r3, #2
 800081e:	797a      	ldrb	r2, [r7, #5]
 8000820:	701a      	strb	r2, [r3, #0]
		arms[i].distance = ARM_RELAX;
 8000822:	7bfb      	ldrb	r3, [r7, #15]
 8000824:	4a11      	ldr	r2, [pc, #68]	; (800086c <armStart+0xb8>)
 8000826:	011b      	lsls	r3, r3, #4
 8000828:	4413      	add	r3, r2
 800082a:	3304      	adds	r3, #4
 800082c:	4a10      	ldr	r2, [pc, #64]	; (8000870 <armStart+0xbc>)
 800082e:	601a      	str	r2, [r3, #0]
		arms[i].degree = ARM_NORTHWARD;
 8000830:	7bfb      	ldrb	r3, [r7, #15]
 8000832:	4a0e      	ldr	r2, [pc, #56]	; (800086c <armStart+0xb8>)
 8000834:	011b      	lsls	r3, r3, #4
 8000836:	4413      	add	r3, r2
 8000838:	3308      	adds	r3, #8
 800083a:	4a0e      	ldr	r2, [pc, #56]	; (8000874 <armStart+0xc0>)
 800083c:	601a      	str	r2, [r3, #0]
		arms[i].location = ARM_BACKWARD;
 800083e:	7bfb      	ldrb	r3, [r7, #15]
 8000840:	4a0a      	ldr	r2, [pc, #40]	; (800086c <armStart+0xb8>)
 8000842:	011b      	lsls	r3, r3, #4
 8000844:	4413      	add	r3, r2
 8000846:	330c      	adds	r3, #12
 8000848:	4a0b      	ldr	r2, [pc, #44]	; (8000878 <armStart+0xc4>)
 800084a:	601a      	str	r2, [r3, #0]
		return i;
 800084c:	7bfb      	ldrb	r3, [r7, #15]
 800084e:	e007      	b.n	8000860 <armStart+0xac>
		if (arms[i].gripperID != SERVO_UNDEFINED || arms[i].wristID != SERVO_UNDEFINED || arms[i].elbowID != SERVO_UNDEFINED) continue;
 8000850:	bf00      	nop
	for (uint8_t i = 0; i < ARM_NUMBER; i ++) {
 8000852:	7bfb      	ldrb	r3, [r7, #15]
 8000854:	3301      	adds	r3, #1
 8000856:	73fb      	strb	r3, [r7, #15]
 8000858:	7bfb      	ldrb	r3, [r7, #15]
 800085a:	2b03      	cmp	r3, #3
 800085c:	d9b6      	bls.n	80007cc <armStart+0x18>
	}
	return ARM_UNDEFINED;
 800085e:	2304      	movs	r3, #4
}
 8000860:	4618      	mov	r0, r3
 8000862:	3714      	adds	r7, #20
 8000864:	46bd      	mov	sp, r7
 8000866:	bc80      	pop	{r7}
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	20000038 	.word	0x20000038
 8000870:	42aa0000 	.word	0x42aa0000
 8000874:	42b40000 	.word	0x42b40000
 8000878:	40a00000 	.word	0x40a00000

0800087c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000880:	f001 fb02 	bl	8001e88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000884:	f000 f856 	bl	8000934 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000888:	f000 faaa 	bl	8000de0 <MX_GPIO_Init>
  MX_TIM1_Init();
 800088c:	f000 f892 	bl	80009b4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000890:	f000 f8e0 	bl	8000a54 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000894:	f000 f974 	bl	8000b80 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000898:	f000 fa0a 	bl	8000cb0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 800089c:	4820      	ldr	r0, [pc, #128]	; (8000920 <main+0xa4>)
 800089e:	f002 fa47 	bl	8002d30 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80008a2:	2100      	movs	r1, #0
 80008a4:	481f      	ldr	r0, [pc, #124]	; (8000924 <main+0xa8>)
 80008a6:	f002 faed 	bl	8002e84 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80008aa:	2104      	movs	r1, #4
 80008ac:	481d      	ldr	r0, [pc, #116]	; (8000924 <main+0xa8>)
 80008ae:	f002 fae9 	bl	8002e84 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80008b2:	2108      	movs	r1, #8
 80008b4:	481b      	ldr	r0, [pc, #108]	; (8000924 <main+0xa8>)
 80008b6:	f002 fae5 	bl	8002e84 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80008ba:	210c      	movs	r1, #12
 80008bc:	4819      	ldr	r0, [pc, #100]	; (8000924 <main+0xa8>)
 80008be:	f002 fae1 	bl	8002e84 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80008c2:	2100      	movs	r1, #0
 80008c4:	4818      	ldr	r0, [pc, #96]	; (8000928 <main+0xac>)
 80008c6:	f002 fadd 	bl	8002e84 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80008ca:	2104      	movs	r1, #4
 80008cc:	4816      	ldr	r0, [pc, #88]	; (8000928 <main+0xac>)
 80008ce:	f002 fad9 	bl	8002e84 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80008d2:	2108      	movs	r1, #8
 80008d4:	4814      	ldr	r0, [pc, #80]	; (8000928 <main+0xac>)
 80008d6:	f002 fad5 	bl	8002e84 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80008da:	210c      	movs	r1, #12
 80008dc:	4812      	ldr	r0, [pc, #72]	; (8000928 <main+0xac>)
 80008de:	f002 fad1 	bl	8002e84 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80008e2:	2100      	movs	r1, #0
 80008e4:	4811      	ldr	r0, [pc, #68]	; (800092c <main+0xb0>)
 80008e6:	f002 facd 	bl	8002e84 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80008ea:	2104      	movs	r1, #4
 80008ec:	480f      	ldr	r0, [pc, #60]	; (800092c <main+0xb0>)
 80008ee:	f002 fac9 	bl	8002e84 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80008f2:	2108      	movs	r1, #8
 80008f4:	480d      	ldr	r0, [pc, #52]	; (800092c <main+0xb0>)
 80008f6:	f002 fac5 	bl	8002e84 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80008fa:	210c      	movs	r1, #12
 80008fc:	480b      	ldr	r0, [pc, #44]	; (800092c <main+0xb0>)
 80008fe:	f002 fac1 	bl	8002e84 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  schedulerInit();
 8000902:	f000 fc0d 	bl	8001120 <schedulerInit>
  robotInit();
 8000906:	f000 fac1 	bl	8000e8c <robotInit>
//  schedulerAddTask(robotBoot, NULL, 1000, 0);
//  schedulerAddTask(robotMoveLeftNormal, NULL, 10000, 10000);
//  schedulerAddTask(robotMoveRightNormal, NULL, 20000, 0);
//  schedulerAddTask(robotMoveFrontDouble, NULL, 30000, 0);
  schedulerAddTask(robotTest, NULL, 1000, 1000);
 800090a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800090e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000912:	2100      	movs	r1, #0
 8000914:	4806      	ldr	r0, [pc, #24]	; (8000930 <main+0xb4>)
 8000916:	f000 fca1 	bl	800125c <schedulerAddTask>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  schedulerDispatch();
 800091a:	f000 fc81 	bl	8001220 <schedulerDispatch>
 800091e:	e7fc      	b.n	800091a <main+0x9e>
 8000920:	20000078 	.word	0x20000078
 8000924:	200000c0 	.word	0x200000c0
 8000928:	20000108 	.word	0x20000108
 800092c:	20000150 	.word	0x20000150
 8000930:	08001065 	.word	0x08001065

08000934 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b090      	sub	sp, #64	; 0x40
 8000938:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800093a:	f107 0318 	add.w	r3, r7, #24
 800093e:	2228      	movs	r2, #40	; 0x28
 8000940:	2100      	movs	r1, #0
 8000942:	4618      	mov	r0, r3
 8000944:	f003 f90a 	bl	8003b5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000948:	1d3b      	adds	r3, r7, #4
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]
 800094e:	605a      	str	r2, [r3, #4]
 8000950:	609a      	str	r2, [r3, #8]
 8000952:	60da      	str	r2, [r3, #12]
 8000954:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000956:	2302      	movs	r3, #2
 8000958:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800095a:	2301      	movs	r3, #1
 800095c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800095e:	2310      	movs	r3, #16
 8000960:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000962:	2302      	movs	r3, #2
 8000964:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000966:	2300      	movs	r3, #0
 8000968:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 800096a:	2300      	movs	r3, #0
 800096c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800096e:	f107 0318 	add.w	r3, r7, #24
 8000972:	4618      	mov	r0, r3
 8000974:	f001 fdae 	bl	80024d4 <HAL_RCC_OscConfig>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 800097e:	f000 fa7f 	bl	8000e80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000982:	230f      	movs	r3, #15
 8000984:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000986:	2302      	movs	r3, #2
 8000988:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800098a:	2300      	movs	r3, #0
 800098c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800098e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000992:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000994:	2300      	movs	r3, #0
 8000996:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000998:	1d3b      	adds	r3, r7, #4
 800099a:	2100      	movs	r1, #0
 800099c:	4618      	mov	r0, r3
 800099e:	f002 f81b 	bl	80029d8 <HAL_RCC_ClockConfig>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <SystemClock_Config+0x78>
  {
    Error_Handler();
 80009a8:	f000 fa6a 	bl	8000e80 <Error_Handler>
  }
}
 80009ac:	bf00      	nop
 80009ae:	3740      	adds	r7, #64	; 0x40
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b086      	sub	sp, #24
 80009b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ba:	f107 0308 	add.w	r3, r7, #8
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	605a      	str	r2, [r3, #4]
 80009c4:	609a      	str	r2, [r3, #8]
 80009c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009c8:	463b      	mov	r3, r7
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]
 80009ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009d0:	4b1e      	ldr	r3, [pc, #120]	; (8000a4c <MX_TIM1_Init+0x98>)
 80009d2:	4a1f      	ldr	r2, [pc, #124]	; (8000a50 <MX_TIM1_Init+0x9c>)
 80009d4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80009d6:	4b1d      	ldr	r3, [pc, #116]	; (8000a4c <MX_TIM1_Init+0x98>)
 80009d8:	2200      	movs	r2, #0
 80009da:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009dc:	4b1b      	ldr	r3, [pc, #108]	; (8000a4c <MX_TIM1_Init+0x98>)
 80009de:	2200      	movs	r2, #0
 80009e0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7999;
 80009e2:	4b1a      	ldr	r3, [pc, #104]	; (8000a4c <MX_TIM1_Init+0x98>)
 80009e4:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80009e8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ea:	4b18      	ldr	r3, [pc, #96]	; (8000a4c <MX_TIM1_Init+0x98>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009f0:	4b16      	ldr	r3, [pc, #88]	; (8000a4c <MX_TIM1_Init+0x98>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009f6:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <MX_TIM1_Init+0x98>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009fc:	4813      	ldr	r0, [pc, #76]	; (8000a4c <MX_TIM1_Init+0x98>)
 80009fe:	f002 f947 	bl	8002c90 <HAL_TIM_Base_Init>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000a08:	f000 fa3a 	bl	8000e80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a10:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a12:	f107 0308 	add.w	r3, r7, #8
 8000a16:	4619      	mov	r1, r3
 8000a18:	480c      	ldr	r0, [pc, #48]	; (8000a4c <MX_TIM1_Init+0x98>)
 8000a1a:	f002 fc9f 	bl	800335c <HAL_TIM_ConfigClockSource>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000a24:	f000 fa2c 	bl	8000e80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a30:	463b      	mov	r3, r7
 8000a32:	4619      	mov	r1, r3
 8000a34:	4805      	ldr	r0, [pc, #20]	; (8000a4c <MX_TIM1_Init+0x98>)
 8000a36:	f003 f821 	bl	8003a7c <HAL_TIMEx_MasterConfigSynchronization>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000a40:	f000 fa1e 	bl	8000e80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000a44:	bf00      	nop
 8000a46:	3718      	adds	r7, #24
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	20000078 	.word	0x20000078
 8000a50:	40012c00 	.word	0x40012c00

08000a54 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b08e      	sub	sp, #56	; 0x38
 8000a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
 8000a62:	605a      	str	r2, [r3, #4]
 8000a64:	609a      	str	r2, [r3, #8]
 8000a66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a68:	f107 0320 	add.w	r3, r7, #32
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a72:	1d3b      	adds	r3, r7, #4
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]
 8000a7c:	60da      	str	r2, [r3, #12]
 8000a7e:	611a      	str	r2, [r3, #16]
 8000a80:	615a      	str	r2, [r3, #20]
 8000a82:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a84:	4b3d      	ldr	r3, [pc, #244]	; (8000b7c <MX_TIM2_Init+0x128>)
 8000a86:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a8a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3;
 8000a8c:	4b3b      	ldr	r3, [pc, #236]	; (8000b7c <MX_TIM2_Init+0x128>)
 8000a8e:	2203      	movs	r2, #3
 8000a90:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a92:	4b3a      	ldr	r3, [pc, #232]	; (8000b7c <MX_TIM2_Init+0x128>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 39999;
 8000a98:	4b38      	ldr	r3, [pc, #224]	; (8000b7c <MX_TIM2_Init+0x128>)
 8000a9a:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8000a9e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aa0:	4b36      	ldr	r3, [pc, #216]	; (8000b7c <MX_TIM2_Init+0x128>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aa6:	4b35      	ldr	r3, [pc, #212]	; (8000b7c <MX_TIM2_Init+0x128>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000aac:	4833      	ldr	r0, [pc, #204]	; (8000b7c <MX_TIM2_Init+0x128>)
 8000aae:	f002 f8ef 	bl	8002c90 <HAL_TIM_Base_Init>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000ab8:	f000 f9e2 	bl	8000e80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000abc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ac0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ac2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	482c      	ldr	r0, [pc, #176]	; (8000b7c <MX_TIM2_Init+0x128>)
 8000aca:	f002 fc47 	bl	800335c <HAL_TIM_ConfigClockSource>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000ad4:	f000 f9d4 	bl	8000e80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ad8:	4828      	ldr	r0, [pc, #160]	; (8000b7c <MX_TIM2_Init+0x128>)
 8000ada:	f002 f97b 	bl	8002dd4 <HAL_TIM_PWM_Init>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000ae4:	f000 f9cc 	bl	8000e80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aec:	2300      	movs	r3, #0
 8000aee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000af0:	f107 0320 	add.w	r3, r7, #32
 8000af4:	4619      	mov	r1, r3
 8000af6:	4821      	ldr	r0, [pc, #132]	; (8000b7c <MX_TIM2_Init+0x128>)
 8000af8:	f002 ffc0 	bl	8003a7c <HAL_TIMEx_MasterConfigSynchronization>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000b02:	f000 f9bd 	bl	8000e80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b06:	2360      	movs	r3, #96	; 0x60
 8000b08:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b12:	2300      	movs	r3, #0
 8000b14:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b16:	1d3b      	adds	r3, r7, #4
 8000b18:	2200      	movs	r2, #0
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4817      	ldr	r0, [pc, #92]	; (8000b7c <MX_TIM2_Init+0x128>)
 8000b1e:	f002 fb5b 	bl	80031d8 <HAL_TIM_PWM_ConfigChannel>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000b28:	f000 f9aa 	bl	8000e80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b2c:	1d3b      	adds	r3, r7, #4
 8000b2e:	2204      	movs	r2, #4
 8000b30:	4619      	mov	r1, r3
 8000b32:	4812      	ldr	r0, [pc, #72]	; (8000b7c <MX_TIM2_Init+0x128>)
 8000b34:	f002 fb50 	bl	80031d8 <HAL_TIM_PWM_ConfigChannel>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000b3e:	f000 f99f 	bl	8000e80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b42:	1d3b      	adds	r3, r7, #4
 8000b44:	2208      	movs	r2, #8
 8000b46:	4619      	mov	r1, r3
 8000b48:	480c      	ldr	r0, [pc, #48]	; (8000b7c <MX_TIM2_Init+0x128>)
 8000b4a:	f002 fb45 	bl	80031d8 <HAL_TIM_PWM_ConfigChannel>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8000b54:	f000 f994 	bl	8000e80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b58:	1d3b      	adds	r3, r7, #4
 8000b5a:	220c      	movs	r2, #12
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4807      	ldr	r0, [pc, #28]	; (8000b7c <MX_TIM2_Init+0x128>)
 8000b60:	f002 fb3a 	bl	80031d8 <HAL_TIM_PWM_ConfigChannel>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 8000b6a:	f000 f989 	bl	8000e80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000b6e:	4803      	ldr	r0, [pc, #12]	; (8000b7c <MX_TIM2_Init+0x128>)
 8000b70:	f001 f864 	bl	8001c3c <HAL_TIM_MspPostInit>

}
 8000b74:	bf00      	nop
 8000b76:	3738      	adds	r7, #56	; 0x38
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	200000c0 	.word	0x200000c0

08000b80 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08e      	sub	sp, #56	; 0x38
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	601a      	str	r2, [r3, #0]
 8000b8e:	605a      	str	r2, [r3, #4]
 8000b90:	609a      	str	r2, [r3, #8]
 8000b92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b94:	f107 0320 	add.w	r3, r7, #32
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b9e:	1d3b      	adds	r3, r7, #4
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]
 8000bac:	615a      	str	r2, [r3, #20]
 8000bae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000bb0:	4b3d      	ldr	r3, [pc, #244]	; (8000ca8 <MX_TIM3_Init+0x128>)
 8000bb2:	4a3e      	ldr	r2, [pc, #248]	; (8000cac <MX_TIM3_Init+0x12c>)
 8000bb4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3;
 8000bb6:	4b3c      	ldr	r3, [pc, #240]	; (8000ca8 <MX_TIM3_Init+0x128>)
 8000bb8:	2203      	movs	r2, #3
 8000bba:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bbc:	4b3a      	ldr	r3, [pc, #232]	; (8000ca8 <MX_TIM3_Init+0x128>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 39999;
 8000bc2:	4b39      	ldr	r3, [pc, #228]	; (8000ca8 <MX_TIM3_Init+0x128>)
 8000bc4:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8000bc8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bca:	4b37      	ldr	r3, [pc, #220]	; (8000ca8 <MX_TIM3_Init+0x128>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bd0:	4b35      	ldr	r3, [pc, #212]	; (8000ca8 <MX_TIM3_Init+0x128>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000bd6:	4834      	ldr	r0, [pc, #208]	; (8000ca8 <MX_TIM3_Init+0x128>)
 8000bd8:	f002 f85a 	bl	8002c90 <HAL_TIM_Base_Init>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000be2:	f000 f94d 	bl	8000e80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000be6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bea:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000bec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	482d      	ldr	r0, [pc, #180]	; (8000ca8 <MX_TIM3_Init+0x128>)
 8000bf4:	f002 fbb2 	bl	800335c <HAL_TIM_ConfigClockSource>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000bfe:	f000 f93f 	bl	8000e80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c02:	4829      	ldr	r0, [pc, #164]	; (8000ca8 <MX_TIM3_Init+0x128>)
 8000c04:	f002 f8e6 	bl	8002dd4 <HAL_TIM_PWM_Init>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000c0e:	f000 f937 	bl	8000e80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c12:	2300      	movs	r3, #0
 8000c14:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c16:	2300      	movs	r3, #0
 8000c18:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c1a:	f107 0320 	add.w	r3, r7, #32
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4821      	ldr	r0, [pc, #132]	; (8000ca8 <MX_TIM3_Init+0x128>)
 8000c22:	f002 ff2b 	bl	8003a7c <HAL_TIMEx_MasterConfigSynchronization>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000c2c:	f000 f928 	bl	8000e80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c30:	2360      	movs	r3, #96	; 0x60
 8000c32:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000c34:	2300      	movs	r3, #0
 8000c36:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c40:	1d3b      	adds	r3, r7, #4
 8000c42:	2200      	movs	r2, #0
 8000c44:	4619      	mov	r1, r3
 8000c46:	4818      	ldr	r0, [pc, #96]	; (8000ca8 <MX_TIM3_Init+0x128>)
 8000c48:	f002 fac6 	bl	80031d8 <HAL_TIM_PWM_ConfigChannel>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000c52:	f000 f915 	bl	8000e80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c56:	1d3b      	adds	r3, r7, #4
 8000c58:	2204      	movs	r2, #4
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4812      	ldr	r0, [pc, #72]	; (8000ca8 <MX_TIM3_Init+0x128>)
 8000c5e:	f002 fabb 	bl	80031d8 <HAL_TIM_PWM_ConfigChannel>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000c68:	f000 f90a 	bl	8000e80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c6c:	1d3b      	adds	r3, r7, #4
 8000c6e:	2208      	movs	r2, #8
 8000c70:	4619      	mov	r1, r3
 8000c72:	480d      	ldr	r0, [pc, #52]	; (8000ca8 <MX_TIM3_Init+0x128>)
 8000c74:	f002 fab0 	bl	80031d8 <HAL_TIM_PWM_ConfigChannel>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8000c7e:	f000 f8ff 	bl	8000e80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000c82:	1d3b      	adds	r3, r7, #4
 8000c84:	220c      	movs	r2, #12
 8000c86:	4619      	mov	r1, r3
 8000c88:	4807      	ldr	r0, [pc, #28]	; (8000ca8 <MX_TIM3_Init+0x128>)
 8000c8a:	f002 faa5 	bl	80031d8 <HAL_TIM_PWM_ConfigChannel>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8000c94:	f000 f8f4 	bl	8000e80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000c98:	4803      	ldr	r0, [pc, #12]	; (8000ca8 <MX_TIM3_Init+0x128>)
 8000c9a:	f000 ffcf 	bl	8001c3c <HAL_TIM_MspPostInit>

}
 8000c9e:	bf00      	nop
 8000ca0:	3738      	adds	r7, #56	; 0x38
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	20000108 	.word	0x20000108
 8000cac:	40000400 	.word	0x40000400

08000cb0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b08e      	sub	sp, #56	; 0x38
 8000cb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cb6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]
 8000cbe:	605a      	str	r2, [r3, #4]
 8000cc0:	609a      	str	r2, [r3, #8]
 8000cc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cc4:	f107 0320 	add.w	r3, r7, #32
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cce:	1d3b      	adds	r3, r7, #4
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]
 8000cd8:	60da      	str	r2, [r3, #12]
 8000cda:	611a      	str	r2, [r3, #16]
 8000cdc:	615a      	str	r2, [r3, #20]
 8000cde:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000ce0:	4b3d      	ldr	r3, [pc, #244]	; (8000dd8 <MX_TIM4_Init+0x128>)
 8000ce2:	4a3e      	ldr	r2, [pc, #248]	; (8000ddc <MX_TIM4_Init+0x12c>)
 8000ce4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 3;
 8000ce6:	4b3c      	ldr	r3, [pc, #240]	; (8000dd8 <MX_TIM4_Init+0x128>)
 8000ce8:	2203      	movs	r2, #3
 8000cea:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cec:	4b3a      	ldr	r3, [pc, #232]	; (8000dd8 <MX_TIM4_Init+0x128>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 39999;
 8000cf2:	4b39      	ldr	r3, [pc, #228]	; (8000dd8 <MX_TIM4_Init+0x128>)
 8000cf4:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8000cf8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cfa:	4b37      	ldr	r3, [pc, #220]	; (8000dd8 <MX_TIM4_Init+0x128>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d00:	4b35      	ldr	r3, [pc, #212]	; (8000dd8 <MX_TIM4_Init+0x128>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000d06:	4834      	ldr	r0, [pc, #208]	; (8000dd8 <MX_TIM4_Init+0x128>)
 8000d08:	f001 ffc2 	bl	8002c90 <HAL_TIM_Base_Init>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000d12:	f000 f8b5 	bl	8000e80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d1a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000d1c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d20:	4619      	mov	r1, r3
 8000d22:	482d      	ldr	r0, [pc, #180]	; (8000dd8 <MX_TIM4_Init+0x128>)
 8000d24:	f002 fb1a 	bl	800335c <HAL_TIM_ConfigClockSource>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000d2e:	f000 f8a7 	bl	8000e80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000d32:	4829      	ldr	r0, [pc, #164]	; (8000dd8 <MX_TIM4_Init+0x128>)
 8000d34:	f002 f84e 	bl	8002dd4 <HAL_TIM_PWM_Init>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000d3e:	f000 f89f 	bl	8000e80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d42:	2300      	movs	r3, #0
 8000d44:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d46:	2300      	movs	r3, #0
 8000d48:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d4a:	f107 0320 	add.w	r3, r7, #32
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4821      	ldr	r0, [pc, #132]	; (8000dd8 <MX_TIM4_Init+0x128>)
 8000d52:	f002 fe93 	bl	8003a7c <HAL_TIMEx_MasterConfigSynchronization>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000d5c:	f000 f890 	bl	8000e80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d60:	2360      	movs	r3, #96	; 0x60
 8000d62:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d64:	2300      	movs	r3, #0
 8000d66:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d70:	1d3b      	adds	r3, r7, #4
 8000d72:	2200      	movs	r2, #0
 8000d74:	4619      	mov	r1, r3
 8000d76:	4818      	ldr	r0, [pc, #96]	; (8000dd8 <MX_TIM4_Init+0x128>)
 8000d78:	f002 fa2e 	bl	80031d8 <HAL_TIM_PWM_ConfigChannel>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000d82:	f000 f87d 	bl	8000e80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d86:	1d3b      	adds	r3, r7, #4
 8000d88:	2204      	movs	r2, #4
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4812      	ldr	r0, [pc, #72]	; (8000dd8 <MX_TIM4_Init+0x128>)
 8000d8e:	f002 fa23 	bl	80031d8 <HAL_TIM_PWM_ConfigChannel>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8000d98:	f000 f872 	bl	8000e80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d9c:	1d3b      	adds	r3, r7, #4
 8000d9e:	2208      	movs	r2, #8
 8000da0:	4619      	mov	r1, r3
 8000da2:	480d      	ldr	r0, [pc, #52]	; (8000dd8 <MX_TIM4_Init+0x128>)
 8000da4:	f002 fa18 	bl	80031d8 <HAL_TIM_PWM_ConfigChannel>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8000dae:	f000 f867 	bl	8000e80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000db2:	1d3b      	adds	r3, r7, #4
 8000db4:	220c      	movs	r2, #12
 8000db6:	4619      	mov	r1, r3
 8000db8:	4807      	ldr	r0, [pc, #28]	; (8000dd8 <MX_TIM4_Init+0x128>)
 8000dba:	f002 fa0d 	bl	80031d8 <HAL_TIM_PWM_ConfigChannel>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8000dc4:	f000 f85c 	bl	8000e80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000dc8:	4803      	ldr	r0, [pc, #12]	; (8000dd8 <MX_TIM4_Init+0x128>)
 8000dca:	f000 ff37 	bl	8001c3c <HAL_TIM_MspPostInit>

}
 8000dce:	bf00      	nop
 8000dd0:	3738      	adds	r7, #56	; 0x38
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	20000150 	.word	0x20000150
 8000ddc:	40000800 	.word	0x40000800

08000de0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de6:	f107 0308 	add.w	r3, r7, #8
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
 8000dee:	605a      	str	r2, [r3, #4]
 8000df0:	609a      	str	r2, [r3, #8]
 8000df2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df4:	4b17      	ldr	r3, [pc, #92]	; (8000e54 <MX_GPIO_Init+0x74>)
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	4a16      	ldr	r2, [pc, #88]	; (8000e54 <MX_GPIO_Init+0x74>)
 8000dfa:	f043 0304 	orr.w	r3, r3, #4
 8000dfe:	6193      	str	r3, [r2, #24]
 8000e00:	4b14      	ldr	r3, [pc, #80]	; (8000e54 <MX_GPIO_Init+0x74>)
 8000e02:	699b      	ldr	r3, [r3, #24]
 8000e04:	f003 0304 	and.w	r3, r3, #4
 8000e08:	607b      	str	r3, [r7, #4]
 8000e0a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e0c:	4b11      	ldr	r3, [pc, #68]	; (8000e54 <MX_GPIO_Init+0x74>)
 8000e0e:	699b      	ldr	r3, [r3, #24]
 8000e10:	4a10      	ldr	r2, [pc, #64]	; (8000e54 <MX_GPIO_Init+0x74>)
 8000e12:	f043 0308 	orr.w	r3, r3, #8
 8000e16:	6193      	str	r3, [r2, #24]
 8000e18:	4b0e      	ldr	r3, [pc, #56]	; (8000e54 <MX_GPIO_Init+0x74>)
 8000e1a:	699b      	ldr	r3, [r3, #24]
 8000e1c:	f003 0308 	and.w	r3, r3, #8
 8000e20:	603b      	str	r3, [r7, #0]
 8000e22:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SCHEDULER_LED_GPIO_Port, SCHEDULER_LED_Pin, GPIO_PIN_RESET);
 8000e24:	2200      	movs	r2, #0
 8000e26:	2120      	movs	r1, #32
 8000e28:	480b      	ldr	r0, [pc, #44]	; (8000e58 <MX_GPIO_Init+0x78>)
 8000e2a:	f001 fb21 	bl	8002470 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SCHEDULER_LED_Pin */
  GPIO_InitStruct.Pin = SCHEDULER_LED_Pin;
 8000e2e:	2320      	movs	r3, #32
 8000e30:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e32:	2301      	movs	r3, #1
 8000e34:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SCHEDULER_LED_GPIO_Port, &GPIO_InitStruct);
 8000e3e:	f107 0308 	add.w	r3, r7, #8
 8000e42:	4619      	mov	r1, r3
 8000e44:	4804      	ldr	r0, [pc, #16]	; (8000e58 <MX_GPIO_Init+0x78>)
 8000e46:	f001 f98f 	bl	8002168 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e4a:	bf00      	nop
 8000e4c:	3718      	adds	r7, #24
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40021000 	.word	0x40021000
 8000e58:	40010800 	.word	0x40010800

08000e5c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a04      	ldr	r2, [pc, #16]	; (8000e7c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d101      	bne.n	8000e72 <HAL_TIM_PeriodElapsedCallback+0x16>
		schedulerUpdate();
 8000e6e:	f000 f9b1 	bl	80011d4 <schedulerUpdate>
	}
}
 8000e72:	bf00      	nop
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40012c00 	.word	0x40012c00

08000e80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e84:	b672      	cpsid	i
}
 8000e86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e88:	e7fe      	b.n	8000e88 <Error_Handler+0x8>
	...

08000e8c <robotInit>:
	movingArm.armID = ARM_UNDEFINED;
	flippingArm.firstArmID = ARM_UNDEFINED;
	flippingArm.secondArmID = ARM_UNDEFINED;
}

void robotInit(void) {
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
	state = INIT;
 8000e90:	4b5e      	ldr	r3, [pc, #376]	; (800100c <robotInit+0x180>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	701a      	strb	r2, [r3, #0]
	movingArm.armID = ARM_UNDEFINED;
 8000e96:	4b5e      	ldr	r3, [pc, #376]	; (8001010 <robotInit+0x184>)
 8000e98:	2204      	movs	r2, #4
 8000e9a:	701a      	strb	r2, [r3, #0]
	flippingArm.firstArmID = ARM_UNDEFINED;
 8000e9c:	4b5d      	ldr	r3, [pc, #372]	; (8001014 <robotInit+0x188>)
 8000e9e:	2204      	movs	r2, #4
 8000ea0:	701a      	strb	r2, [r3, #0]
	flippingArm.secondArmID = ARM_UNDEFINED;
 8000ea2:	4b5c      	ldr	r3, [pc, #368]	; (8001014 <robotInit+0x188>)
 8000ea4:	2204      	movs	r2, #4
 8000ea6:	705a      	strb	r2, [r3, #1]

	servoInit();
 8000ea8:	f000 fcf0 	bl	800188c <servoInit>
	armInit();
 8000eac:	f7ff fc42 	bl	8000734 <armInit>

	leftGripper = servoStart(&htim2, TIM_CHANNEL_1, 0);
 8000eb0:	f04f 0200 	mov.w	r2, #0
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	4858      	ldr	r0, [pc, #352]	; (8001018 <robotInit+0x18c>)
 8000eb8:	f000 fd1a 	bl	80018f0 <servoStart>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	4b56      	ldr	r3, [pc, #344]	; (800101c <robotInit+0x190>)
 8000ec2:	701a      	strb	r2, [r3, #0]
	frontGripper = servoStart(&htim2, TIM_CHANNEL_2, 0);
 8000ec4:	f04f 0200 	mov.w	r2, #0
 8000ec8:	2104      	movs	r1, #4
 8000eca:	4853      	ldr	r0, [pc, #332]	; (8001018 <robotInit+0x18c>)
 8000ecc:	f000 fd10 	bl	80018f0 <servoStart>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	4b52      	ldr	r3, [pc, #328]	; (8001020 <robotInit+0x194>)
 8000ed6:	701a      	strb	r2, [r3, #0]
	rightGripper = servoStart(&htim2, TIM_CHANNEL_3, 0);
 8000ed8:	f04f 0200 	mov.w	r2, #0
 8000edc:	2108      	movs	r1, #8
 8000ede:	484e      	ldr	r0, [pc, #312]	; (8001018 <robotInit+0x18c>)
 8000ee0:	f000 fd06 	bl	80018f0 <servoStart>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	4b4e      	ldr	r3, [pc, #312]	; (8001024 <robotInit+0x198>)
 8000eea:	701a      	strb	r2, [r3, #0]
	backGripper = servoStart(&htim2, TIM_CHANNEL_4, 0);
 8000eec:	f04f 0200 	mov.w	r2, #0
 8000ef0:	210c      	movs	r1, #12
 8000ef2:	4849      	ldr	r0, [pc, #292]	; (8001018 <robotInit+0x18c>)
 8000ef4:	f000 fcfc 	bl	80018f0 <servoStart>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	461a      	mov	r2, r3
 8000efc:	4b4a      	ldr	r3, [pc, #296]	; (8001028 <robotInit+0x19c>)
 8000efe:	701a      	strb	r2, [r3, #0]

	leftWrist = servoStart(&htim3, TIM_CHANNEL_1, 0);
 8000f00:	f04f 0200 	mov.w	r2, #0
 8000f04:	2100      	movs	r1, #0
 8000f06:	4849      	ldr	r0, [pc, #292]	; (800102c <robotInit+0x1a0>)
 8000f08:	f000 fcf2 	bl	80018f0 <servoStart>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	461a      	mov	r2, r3
 8000f10:	4b47      	ldr	r3, [pc, #284]	; (8001030 <robotInit+0x1a4>)
 8000f12:	701a      	strb	r2, [r3, #0]
	frontWrist = servoStart(&htim3, TIM_CHANNEL_2, 0);
 8000f14:	f04f 0200 	mov.w	r2, #0
 8000f18:	2104      	movs	r1, #4
 8000f1a:	4844      	ldr	r0, [pc, #272]	; (800102c <robotInit+0x1a0>)
 8000f1c:	f000 fce8 	bl	80018f0 <servoStart>
 8000f20:	4603      	mov	r3, r0
 8000f22:	461a      	mov	r2, r3
 8000f24:	4b43      	ldr	r3, [pc, #268]	; (8001034 <robotInit+0x1a8>)
 8000f26:	701a      	strb	r2, [r3, #0]
	rightWrist = servoStart(&htim3, TIM_CHANNEL_3, 0);
 8000f28:	f04f 0200 	mov.w	r2, #0
 8000f2c:	2108      	movs	r1, #8
 8000f2e:	483f      	ldr	r0, [pc, #252]	; (800102c <robotInit+0x1a0>)
 8000f30:	f000 fcde 	bl	80018f0 <servoStart>
 8000f34:	4603      	mov	r3, r0
 8000f36:	461a      	mov	r2, r3
 8000f38:	4b3f      	ldr	r3, [pc, #252]	; (8001038 <robotInit+0x1ac>)
 8000f3a:	701a      	strb	r2, [r3, #0]
	backWrist = servoStart(&htim3, TIM_CHANNEL_4, 0);
 8000f3c:	f04f 0200 	mov.w	r2, #0
 8000f40:	210c      	movs	r1, #12
 8000f42:	483a      	ldr	r0, [pc, #232]	; (800102c <robotInit+0x1a0>)
 8000f44:	f000 fcd4 	bl	80018f0 <servoStart>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	4b3b      	ldr	r3, [pc, #236]	; (800103c <robotInit+0x1b0>)
 8000f4e:	701a      	strb	r2, [r3, #0]

	leftElbow = servoStart(&htim4, TIM_CHANNEL_1, 0);
 8000f50:	f04f 0200 	mov.w	r2, #0
 8000f54:	2100      	movs	r1, #0
 8000f56:	483a      	ldr	r0, [pc, #232]	; (8001040 <robotInit+0x1b4>)
 8000f58:	f000 fcca 	bl	80018f0 <servoStart>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	461a      	mov	r2, r3
 8000f60:	4b38      	ldr	r3, [pc, #224]	; (8001044 <robotInit+0x1b8>)
 8000f62:	701a      	strb	r2, [r3, #0]
	frontElbow = servoStart(&htim4, TIM_CHANNEL_2, 0);
 8000f64:	f04f 0200 	mov.w	r2, #0
 8000f68:	2104      	movs	r1, #4
 8000f6a:	4835      	ldr	r0, [pc, #212]	; (8001040 <robotInit+0x1b4>)
 8000f6c:	f000 fcc0 	bl	80018f0 <servoStart>
 8000f70:	4603      	mov	r3, r0
 8000f72:	461a      	mov	r2, r3
 8000f74:	4b34      	ldr	r3, [pc, #208]	; (8001048 <robotInit+0x1bc>)
 8000f76:	701a      	strb	r2, [r3, #0]
	rightElbow = servoStart(&htim4, TIM_CHANNEL_3, 0);
 8000f78:	f04f 0200 	mov.w	r2, #0
 8000f7c:	2108      	movs	r1, #8
 8000f7e:	4830      	ldr	r0, [pc, #192]	; (8001040 <robotInit+0x1b4>)
 8000f80:	f000 fcb6 	bl	80018f0 <servoStart>
 8000f84:	4603      	mov	r3, r0
 8000f86:	461a      	mov	r2, r3
 8000f88:	4b30      	ldr	r3, [pc, #192]	; (800104c <robotInit+0x1c0>)
 8000f8a:	701a      	strb	r2, [r3, #0]
	backElbow = servoStart(&htim4, TIM_CHANNEL_4, 0);
 8000f8c:	f04f 0200 	mov.w	r2, #0
 8000f90:	210c      	movs	r1, #12
 8000f92:	482b      	ldr	r0, [pc, #172]	; (8001040 <robotInit+0x1b4>)
 8000f94:	f000 fcac 	bl	80018f0 <servoStart>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	4b2c      	ldr	r3, [pc, #176]	; (8001050 <robotInit+0x1c4>)
 8000f9e:	701a      	strb	r2, [r3, #0]

	leftArm = armStart(leftGripper, leftWrist, leftElbow);
 8000fa0:	4b1e      	ldr	r3, [pc, #120]	; (800101c <robotInit+0x190>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	4a22      	ldr	r2, [pc, #136]	; (8001030 <robotInit+0x1a4>)
 8000fa6:	7811      	ldrb	r1, [r2, #0]
 8000fa8:	4a26      	ldr	r2, [pc, #152]	; (8001044 <robotInit+0x1b8>)
 8000faa:	7812      	ldrb	r2, [r2, #0]
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff fc01 	bl	80007b4 <armStart>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	4b27      	ldr	r3, [pc, #156]	; (8001054 <robotInit+0x1c8>)
 8000fb8:	701a      	strb	r2, [r3, #0]
	frontArm = armStart(frontGripper, frontWrist, frontElbow);
 8000fba:	4b19      	ldr	r3, [pc, #100]	; (8001020 <robotInit+0x194>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	4a1d      	ldr	r2, [pc, #116]	; (8001034 <robotInit+0x1a8>)
 8000fc0:	7811      	ldrb	r1, [r2, #0]
 8000fc2:	4a21      	ldr	r2, [pc, #132]	; (8001048 <robotInit+0x1bc>)
 8000fc4:	7812      	ldrb	r2, [r2, #0]
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff fbf4 	bl	80007b4 <armStart>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	461a      	mov	r2, r3
 8000fd0:	4b21      	ldr	r3, [pc, #132]	; (8001058 <robotInit+0x1cc>)
 8000fd2:	701a      	strb	r2, [r3, #0]
	rightArm = armStart(rightGripper, rightWrist, rightElbow);
 8000fd4:	4b13      	ldr	r3, [pc, #76]	; (8001024 <robotInit+0x198>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	4a17      	ldr	r2, [pc, #92]	; (8001038 <robotInit+0x1ac>)
 8000fda:	7811      	ldrb	r1, [r2, #0]
 8000fdc:	4a1b      	ldr	r2, [pc, #108]	; (800104c <robotInit+0x1c0>)
 8000fde:	7812      	ldrb	r2, [r2, #0]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff fbe7 	bl	80007b4 <armStart>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	461a      	mov	r2, r3
 8000fea:	4b1c      	ldr	r3, [pc, #112]	; (800105c <robotInit+0x1d0>)
 8000fec:	701a      	strb	r2, [r3, #0]
	backArm = armStart(backGripper, backWrist, backElbow);
 8000fee:	4b0e      	ldr	r3, [pc, #56]	; (8001028 <robotInit+0x19c>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	4a12      	ldr	r2, [pc, #72]	; (800103c <robotInit+0x1b0>)
 8000ff4:	7811      	ldrb	r1, [r2, #0]
 8000ff6:	4a16      	ldr	r2, [pc, #88]	; (8001050 <robotInit+0x1c4>)
 8000ff8:	7812      	ldrb	r2, [r2, #0]
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff fbda 	bl	80007b4 <armStart>
 8001000:	4603      	mov	r3, r0
 8001002:	461a      	mov	r2, r3
 8001004:	4b16      	ldr	r3, [pc, #88]	; (8001060 <robotInit+0x1d4>)
 8001006:	701a      	strb	r2, [r3, #0]
}
 8001008:	bf00      	nop
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20000198 	.word	0x20000198
 8001010:	2000019c 	.word	0x2000019c
 8001014:	200001a0 	.word	0x200001a0
 8001018:	200000c0 	.word	0x200000c0
 800101c:	20000000 	.word	0x20000000
 8001020:	20000001 	.word	0x20000001
 8001024:	20000002 	.word	0x20000002
 8001028:	20000003 	.word	0x20000003
 800102c:	20000108 	.word	0x20000108
 8001030:	20000004 	.word	0x20000004
 8001034:	20000005 	.word	0x20000005
 8001038:	20000006 	.word	0x20000006
 800103c:	20000007 	.word	0x20000007
 8001040:	20000150 	.word	0x20000150
 8001044:	20000008 	.word	0x20000008
 8001048:	20000009 	.word	0x20000009
 800104c:	2000000a 	.word	0x2000000a
 8001050:	2000000b 	.word	0x2000000b
 8001054:	2000000c 	.word	0x2000000c
 8001058:	2000000d 	.word	0x2000000d
 800105c:	2000000e 	.word	0x2000000e
 8001060:	2000000f 	.word	0x2000000f

08001064 <robotTest>:
	movingArm.armID = backArm;
	schedulerAddTask(robotMoveDouble, NULL, 1000, 0);
}

uint8_t i = 0;
void robotTest(void *) {
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
	uint8_t j = leftGripper;
 800106c:	4b20      	ldr	r3, [pc, #128]	; (80010f0 <robotTest+0x8c>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	73fb      	strb	r3, [r7, #15]
	if (i == 0) {
 8001072:	4b20      	ldr	r3, [pc, #128]	; (80010f4 <robotTest+0x90>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d10b      	bne.n	8001092 <robotTest+0x2e>
		servos[j].target = 0;
 800107a:	7bfb      	ldrb	r3, [r7, #15]
 800107c:	4a1e      	ldr	r2, [pc, #120]	; (80010f8 <robotTest+0x94>)
 800107e:	011b      	lsls	r3, r3, #4
 8001080:	4413      	add	r3, r2
 8001082:	330c      	adds	r3, #12
 8001084:	f04f 0200 	mov.w	r2, #0
 8001088:	601a      	str	r2, [r3, #0]
		i = 1;
 800108a:	4b1a      	ldr	r3, [pc, #104]	; (80010f4 <robotTest+0x90>)
 800108c:	2201      	movs	r2, #1
 800108e:	701a      	strb	r2, [r3, #0]
 8001090:	e021      	b.n	80010d6 <robotTest+0x72>
	}
	else if (i == 1) {
 8001092:	4b18      	ldr	r3, [pc, #96]	; (80010f4 <robotTest+0x90>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	2b01      	cmp	r3, #1
 8001098:	d10a      	bne.n	80010b0 <robotTest+0x4c>
		servos[j].target = 90;
 800109a:	7bfb      	ldrb	r3, [r7, #15]
 800109c:	4a16      	ldr	r2, [pc, #88]	; (80010f8 <robotTest+0x94>)
 800109e:	011b      	lsls	r3, r3, #4
 80010a0:	4413      	add	r3, r2
 80010a2:	330c      	adds	r3, #12
 80010a4:	4a15      	ldr	r2, [pc, #84]	; (80010fc <robotTest+0x98>)
 80010a6:	601a      	str	r2, [r3, #0]
		i = 2;
 80010a8:	4b12      	ldr	r3, [pc, #72]	; (80010f4 <robotTest+0x90>)
 80010aa:	2202      	movs	r2, #2
 80010ac:	701a      	strb	r2, [r3, #0]
 80010ae:	e012      	b.n	80010d6 <robotTest+0x72>
	}
	else if (i == 2) {
 80010b0:	4b10      	ldr	r3, [pc, #64]	; (80010f4 <robotTest+0x90>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	2b02      	cmp	r3, #2
 80010b6:	d10b      	bne.n	80010d0 <robotTest+0x6c>
		servos[j].target = 0;
 80010b8:	7bfb      	ldrb	r3, [r7, #15]
 80010ba:	4a0f      	ldr	r2, [pc, #60]	; (80010f8 <robotTest+0x94>)
 80010bc:	011b      	lsls	r3, r3, #4
 80010be:	4413      	add	r3, r2
 80010c0:	330c      	adds	r3, #12
 80010c2:	f04f 0200 	mov.w	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
		i = 0;
 80010c8:	4b0a      	ldr	r3, [pc, #40]	; (80010f4 <robotTest+0x90>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	701a      	strb	r2, [r3, #0]
 80010ce:	e002      	b.n	80010d6 <robotTest+0x72>
	}
	else {
		i = 0;
 80010d0:	4b08      	ldr	r3, [pc, #32]	; (80010f4 <robotTest+0x90>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	701a      	strb	r2, [r3, #0]
	}
	schedulerAddTask(servoRotate, &servos[j], 0, 0);
 80010d6:	7bfb      	ldrb	r3, [r7, #15]
 80010d8:	011b      	lsls	r3, r3, #4
 80010da:	4a07      	ldr	r2, [pc, #28]	; (80010f8 <robotTest+0x94>)
 80010dc:	1899      	adds	r1, r3, r2
 80010de:	2300      	movs	r3, #0
 80010e0:	2200      	movs	r2, #0
 80010e2:	4807      	ldr	r0, [pc, #28]	; (8001100 <robotTest+0x9c>)
 80010e4:	f000 f8ba 	bl	800125c <schedulerAddTask>
}
 80010e8:	bf00      	nop
 80010ea:	3710      	adds	r7, #16
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	20000000 	.word	0x20000000
 80010f4:	200001a2 	.word	0x200001a2
 80010f8:	20000384 	.word	0x20000384
 80010fc:	42b40000 	.word	0x42b40000
 8001100:	080019b1 	.word	0x080019b1

08001104 <schedulerCheck>:

#include "scheduler.h"

static schedulerTask tasks[SCHEDULER_NUMBER];

void schedulerCheck(void *arguments) {
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(SCHEDULER_LED_GPIO_Port, SCHEDULER_LED_Pin);
 800110c:	2120      	movs	r1, #32
 800110e:	4803      	ldr	r0, [pc, #12]	; (800111c <schedulerCheck+0x18>)
 8001110:	f001 f9c6 	bl	80024a0 <HAL_GPIO_TogglePin>
}
 8001114:	bf00      	nop
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	40010800 	.word	0x40010800

08001120 <schedulerInit>:

void schedulerInit(void) {
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < SCHEDULER_NUMBER; i ++) {
 8001126:	2300      	movs	r3, #0
 8001128:	71fb      	strb	r3, [r7, #7]
 800112a:	e041      	b.n	80011b0 <schedulerInit+0x90>
        tasks[i].function = 0;
 800112c:	79fa      	ldrb	r2, [r7, #7]
 800112e:	4927      	ldr	r1, [pc, #156]	; (80011cc <schedulerInit+0xac>)
 8001130:	4613      	mov	r3, r2
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	4413      	add	r3, r2
 8001136:	00db      	lsls	r3, r3, #3
 8001138:	440b      	add	r3, r1
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
        tasks[i].arguments = 0;
 800113e:	79fa      	ldrb	r2, [r7, #7]
 8001140:	4922      	ldr	r1, [pc, #136]	; (80011cc <schedulerInit+0xac>)
 8001142:	4613      	mov	r3, r2
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	4413      	add	r3, r2
 8001148:	00db      	lsls	r3, r3, #3
 800114a:	440b      	add	r3, r1
 800114c:	3304      	adds	r3, #4
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
        tasks[i].id = SCHEDULER_NUMBER - i;
 8001152:	79fa      	ldrb	r2, [r7, #7]
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	f1c3 0314 	rsb	r3, r3, #20
 800115a:	b2d8      	uxtb	r0, r3
 800115c:	491b      	ldr	r1, [pc, #108]	; (80011cc <schedulerInit+0xac>)
 800115e:	4613      	mov	r3, r2
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	4413      	add	r3, r2
 8001164:	00db      	lsls	r3, r3, #3
 8001166:	440b      	add	r3, r1
 8001168:	3308      	adds	r3, #8
 800116a:	4602      	mov	r2, r0
 800116c:	701a      	strb	r2, [r3, #0]
        tasks[i].delay = 0;
 800116e:	79fa      	ldrb	r2, [r7, #7]
 8001170:	4916      	ldr	r1, [pc, #88]	; (80011cc <schedulerInit+0xac>)
 8001172:	4613      	mov	r3, r2
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	4413      	add	r3, r2
 8001178:	00db      	lsls	r3, r3, #3
 800117a:	440b      	add	r3, r1
 800117c:	330c      	adds	r3, #12
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
        tasks[i].period = 0;
 8001182:	79fa      	ldrb	r2, [r7, #7]
 8001184:	4911      	ldr	r1, [pc, #68]	; (80011cc <schedulerInit+0xac>)
 8001186:	4613      	mov	r3, r2
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	4413      	add	r3, r2
 800118c:	00db      	lsls	r3, r3, #3
 800118e:	440b      	add	r3, r1
 8001190:	3310      	adds	r3, #16
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
        tasks[i].flag = 0;
 8001196:	79fa      	ldrb	r2, [r7, #7]
 8001198:	490c      	ldr	r1, [pc, #48]	; (80011cc <schedulerInit+0xac>)
 800119a:	4613      	mov	r3, r2
 800119c:	005b      	lsls	r3, r3, #1
 800119e:	4413      	add	r3, r2
 80011a0:	00db      	lsls	r3, r3, #3
 80011a2:	440b      	add	r3, r1
 80011a4:	3314      	adds	r3, #20
 80011a6:	2200      	movs	r2, #0
 80011a8:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < SCHEDULER_NUMBER; i ++) {
 80011aa:	79fb      	ldrb	r3, [r7, #7]
 80011ac:	3301      	adds	r3, #1
 80011ae:	71fb      	strb	r3, [r7, #7]
 80011b0:	79fb      	ldrb	r3, [r7, #7]
 80011b2:	2b13      	cmp	r3, #19
 80011b4:	d9ba      	bls.n	800112c <schedulerInit+0xc>
    }
    schedulerAddTask(schedulerCheck, NULL, 0, 1000);
 80011b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ba:	2200      	movs	r2, #0
 80011bc:	2100      	movs	r1, #0
 80011be:	4804      	ldr	r0, [pc, #16]	; (80011d0 <schedulerInit+0xb0>)
 80011c0:	f000 f84c 	bl	800125c <schedulerAddTask>
}
 80011c4:	bf00      	nop
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	200001a4 	.word	0x200001a4
 80011d0:	08001105 	.word	0x08001105

080011d4 <schedulerUpdate>:

void schedulerUpdate(void) {
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
    if (tasks[0].function == 0) return;
 80011d8:	4b10      	ldr	r3, [pc, #64]	; (800121c <schedulerUpdate+0x48>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d018      	beq.n	8001212 <schedulerUpdate+0x3e>
	if (tasks[0].delay > 0) {
 80011e0:	4b0e      	ldr	r3, [pc, #56]	; (800121c <schedulerUpdate+0x48>)
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d00c      	beq.n	8001202 <schedulerUpdate+0x2e>
		if (tasks[0].delay > SCHEDULER_TICK) {
 80011e8:	4b0c      	ldr	r3, [pc, #48]	; (800121c <schedulerUpdate+0x48>)
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d905      	bls.n	80011fc <schedulerUpdate+0x28>
			tasks[0].delay -= SCHEDULER_TICK;
 80011f0:	4b0a      	ldr	r3, [pc, #40]	; (800121c <schedulerUpdate+0x48>)
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	3b01      	subs	r3, #1
 80011f6:	4a09      	ldr	r2, [pc, #36]	; (800121c <schedulerUpdate+0x48>)
 80011f8:	60d3      	str	r3, [r2, #12]
 80011fa:	e002      	b.n	8001202 <schedulerUpdate+0x2e>
		}
		else {
			tasks[0].delay = 0;
 80011fc:	4b07      	ldr	r3, [pc, #28]	; (800121c <schedulerUpdate+0x48>)
 80011fe:	2200      	movs	r2, #0
 8001200:	60da      	str	r2, [r3, #12]
		}
	}
	if (tasks[0].delay == 0) {
 8001202:	4b06      	ldr	r3, [pc, #24]	; (800121c <schedulerUpdate+0x48>)
 8001204:	68db      	ldr	r3, [r3, #12]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d104      	bne.n	8001214 <schedulerUpdate+0x40>
		tasks[0].flag = 1;
 800120a:	4b04      	ldr	r3, [pc, #16]	; (800121c <schedulerUpdate+0x48>)
 800120c:	2201      	movs	r2, #1
 800120e:	751a      	strb	r2, [r3, #20]
 8001210:	e000      	b.n	8001214 <schedulerUpdate+0x40>
    if (tasks[0].function == 0) return;
 8001212:	bf00      	nop
	}
}
 8001214:	46bd      	mov	sp, r7
 8001216:	bc80      	pop	{r7}
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	200001a4 	.word	0x200001a4

08001220 <schedulerDispatch>:

void schedulerDispatch(void) {
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
    if (tasks[0].flag == 0) return;
 8001224:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <schedulerDispatch+0x38>)
 8001226:	7d1b      	ldrb	r3, [r3, #20]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d012      	beq.n	8001252 <schedulerDispatch+0x32>
    (*tasks[0].function)(tasks[0].arguments);
 800122c:	4b0a      	ldr	r3, [pc, #40]	; (8001258 <schedulerDispatch+0x38>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a09      	ldr	r2, [pc, #36]	; (8001258 <schedulerDispatch+0x38>)
 8001232:	6852      	ldr	r2, [r2, #4]
 8001234:	4610      	mov	r0, r2
 8001236:	4798      	blx	r3
    if (tasks[0].period > 0) {
 8001238:	4b07      	ldr	r3, [pc, #28]	; (8001258 <schedulerDispatch+0x38>)
 800123a:	691b      	ldr	r3, [r3, #16]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d002      	beq.n	8001246 <schedulerDispatch+0x26>
    	schedulerRefreshTask();
 8001240:	f000 f9bc 	bl	80015bc <schedulerRefreshTask>
 8001244:	e006      	b.n	8001254 <schedulerDispatch+0x34>
    }
    else {
    	schedulerDeleteTask(tasks[0].id);
 8001246:	4b04      	ldr	r3, [pc, #16]	; (8001258 <schedulerDispatch+0x38>)
 8001248:	7a1b      	ldrb	r3, [r3, #8]
 800124a:	4618      	mov	r0, r3
 800124c:	f000 f91a 	bl	8001484 <schedulerDeleteTask>
 8001250:	e000      	b.n	8001254 <schedulerDispatch+0x34>
    if (tasks[0].flag == 0) return;
 8001252:	bf00      	nop
    }
}
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	200001a4 	.word	0x200001a4

0800125c <schedulerAddTask>:

uint8_t schedulerAddTask(void (*function)(void*), void *arguments, uint32_t delay, uint32_t period) {
 800125c:	b4b0      	push	{r4, r5, r7}
 800125e:	b089      	sub	sp, #36	; 0x24
 8001260:	af00      	add	r7, sp, #0
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	60b9      	str	r1, [r7, #8]
 8001266:	607a      	str	r2, [r7, #4]
 8001268:	603b      	str	r3, [r7, #0]
    if (tasks[SCHEDULER_NUMBER - 1].function != 0) return 0;
 800126a:	4b85      	ldr	r3, [pc, #532]	; (8001480 <schedulerAddTask+0x224>)
 800126c:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <schedulerAddTask+0x1c>
 8001274:	2300      	movs	r3, #0
 8001276:	e0fd      	b.n	8001474 <schedulerAddTask+0x218>
    uint8_t currentID = tasks[SCHEDULER_NUMBER - 1].id;
 8001278:	4b81      	ldr	r3, [pc, #516]	; (8001480 <schedulerAddTask+0x224>)
 800127a:	f893 31d0 	ldrb.w	r3, [r3, #464]	; 0x1d0
 800127e:	767b      	strb	r3, [r7, #25]
    uint32_t currentDelay = 0;
 8001280:	2300      	movs	r3, #0
 8001282:	61fb      	str	r3, [r7, #28]
    for (uint8_t i = 0; i < SCHEDULER_NUMBER; i ++) {
 8001284:	2300      	movs	r3, #0
 8001286:	76fb      	strb	r3, [r7, #27]
 8001288:	e0ef      	b.n	800146a <schedulerAddTask+0x20e>
        currentDelay += tasks[i].delay;
 800128a:	7efa      	ldrb	r2, [r7, #27]
 800128c:	497c      	ldr	r1, [pc, #496]	; (8001480 <schedulerAddTask+0x224>)
 800128e:	4613      	mov	r3, r2
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	4413      	add	r3, r2
 8001294:	00db      	lsls	r3, r3, #3
 8001296:	440b      	add	r3, r1
 8001298:	330c      	adds	r3, #12
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	69fa      	ldr	r2, [r7, #28]
 800129e:	4413      	add	r3, r2
 80012a0:	61fb      	str	r3, [r7, #28]
        if (currentDelay > delay || tasks[i].function == 0) {
 80012a2:	69fa      	ldr	r2, [r7, #28]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	429a      	cmp	r2, r3
 80012a8:	d80a      	bhi.n	80012c0 <schedulerAddTask+0x64>
 80012aa:	7efa      	ldrb	r2, [r7, #27]
 80012ac:	4974      	ldr	r1, [pc, #464]	; (8001480 <schedulerAddTask+0x224>)
 80012ae:	4613      	mov	r3, r2
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	4413      	add	r3, r2
 80012b4:	00db      	lsls	r3, r3, #3
 80012b6:	440b      	add	r3, r1
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	f040 80d2 	bne.w	8001464 <schedulerAddTask+0x208>
            for (uint8_t j = SCHEDULER_NUMBER - 1; j > i; j --) {
 80012c0:	2313      	movs	r3, #19
 80012c2:	76bb      	strb	r3, [r7, #26]
 80012c4:	e019      	b.n	80012fa <schedulerAddTask+0x9e>
                tasks[j] = tasks[j - 1];
 80012c6:	7ebb      	ldrb	r3, [r7, #26]
 80012c8:	1e5a      	subs	r2, r3, #1
 80012ca:	7eb9      	ldrb	r1, [r7, #26]
 80012cc:	486c      	ldr	r0, [pc, #432]	; (8001480 <schedulerAddTask+0x224>)
 80012ce:	460b      	mov	r3, r1
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	440b      	add	r3, r1
 80012d4:	00db      	lsls	r3, r3, #3
 80012d6:	4418      	add	r0, r3
 80012d8:	4969      	ldr	r1, [pc, #420]	; (8001480 <schedulerAddTask+0x224>)
 80012da:	4613      	mov	r3, r2
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	4413      	add	r3, r2
 80012e0:	00db      	lsls	r3, r3, #3
 80012e2:	440b      	add	r3, r1
 80012e4:	4604      	mov	r4, r0
 80012e6:	461d      	mov	r5, r3
 80012e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012ec:	e895 0003 	ldmia.w	r5, {r0, r1}
 80012f0:	e884 0003 	stmia.w	r4, {r0, r1}
            for (uint8_t j = SCHEDULER_NUMBER - 1; j > i; j --) {
 80012f4:	7ebb      	ldrb	r3, [r7, #26]
 80012f6:	3b01      	subs	r3, #1
 80012f8:	76bb      	strb	r3, [r7, #26]
 80012fa:	7eba      	ldrb	r2, [r7, #26]
 80012fc:	7efb      	ldrb	r3, [r7, #27]
 80012fe:	429a      	cmp	r2, r3
 8001300:	d8e1      	bhi.n	80012c6 <schedulerAddTask+0x6a>
            }
            tasks[i].function = function;
 8001302:	7efa      	ldrb	r2, [r7, #27]
 8001304:	495e      	ldr	r1, [pc, #376]	; (8001480 <schedulerAddTask+0x224>)
 8001306:	4613      	mov	r3, r2
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	4413      	add	r3, r2
 800130c:	00db      	lsls	r3, r3, #3
 800130e:	440b      	add	r3, r1
 8001310:	68fa      	ldr	r2, [r7, #12]
 8001312:	601a      	str	r2, [r3, #0]
            tasks[i].arguments = arguments;
 8001314:	7efa      	ldrb	r2, [r7, #27]
 8001316:	495a      	ldr	r1, [pc, #360]	; (8001480 <schedulerAddTask+0x224>)
 8001318:	4613      	mov	r3, r2
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	4413      	add	r3, r2
 800131e:	00db      	lsls	r3, r3, #3
 8001320:	440b      	add	r3, r1
 8001322:	3304      	adds	r3, #4
 8001324:	68ba      	ldr	r2, [r7, #8]
 8001326:	601a      	str	r2, [r3, #0]
            tasks[i].id = currentID;
 8001328:	7efa      	ldrb	r2, [r7, #27]
 800132a:	4955      	ldr	r1, [pc, #340]	; (8001480 <schedulerAddTask+0x224>)
 800132c:	4613      	mov	r3, r2
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	4413      	add	r3, r2
 8001332:	00db      	lsls	r3, r3, #3
 8001334:	440b      	add	r3, r1
 8001336:	3308      	adds	r3, #8
 8001338:	7e7a      	ldrb	r2, [r7, #25]
 800133a:	701a      	strb	r2, [r3, #0]
            tasks[i].period = period;
 800133c:	7efa      	ldrb	r2, [r7, #27]
 800133e:	4950      	ldr	r1, [pc, #320]	; (8001480 <schedulerAddTask+0x224>)
 8001340:	4613      	mov	r3, r2
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	4413      	add	r3, r2
 8001346:	00db      	lsls	r3, r3, #3
 8001348:	440b      	add	r3, r1
 800134a:	3310      	adds	r3, #16
 800134c:	683a      	ldr	r2, [r7, #0]
 800134e:	601a      	str	r2, [r3, #0]
            tasks[i].flag = 0;
 8001350:	7efa      	ldrb	r2, [r7, #27]
 8001352:	494b      	ldr	r1, [pc, #300]	; (8001480 <schedulerAddTask+0x224>)
 8001354:	4613      	mov	r3, r2
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	4413      	add	r3, r2
 800135a:	00db      	lsls	r3, r3, #3
 800135c:	440b      	add	r3, r1
 800135e:	3314      	adds	r3, #20
 8001360:	2200      	movs	r2, #0
 8001362:	701a      	strb	r2, [r3, #0]
            if (currentDelay > delay) {
 8001364:	69fa      	ldr	r2, [r7, #28]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	429a      	cmp	r2, r3
 800136a:	d950      	bls.n	800140e <schedulerAddTask+0x1b2>
                int newDelay = currentDelay - delay;
 800136c:	69fa      	ldr	r2, [r7, #28]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	617b      	str	r3, [r7, #20]
                tasks[i].delay = tasks[i + 1].delay - newDelay;
 8001374:	7efb      	ldrb	r3, [r7, #27]
 8001376:	1c5a      	adds	r2, r3, #1
 8001378:	4941      	ldr	r1, [pc, #260]	; (8001480 <schedulerAddTask+0x224>)
 800137a:	4613      	mov	r3, r2
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	4413      	add	r3, r2
 8001380:	00db      	lsls	r3, r3, #3
 8001382:	440b      	add	r3, r1
 8001384:	330c      	adds	r3, #12
 8001386:	6819      	ldr	r1, [r3, #0]
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	7efa      	ldrb	r2, [r7, #27]
 800138c:	1ac9      	subs	r1, r1, r3
 800138e:	483c      	ldr	r0, [pc, #240]	; (8001480 <schedulerAddTask+0x224>)
 8001390:	4613      	mov	r3, r2
 8001392:	005b      	lsls	r3, r3, #1
 8001394:	4413      	add	r3, r2
 8001396:	00db      	lsls	r3, r3, #3
 8001398:	4403      	add	r3, r0
 800139a:	330c      	adds	r3, #12
 800139c:	6019      	str	r1, [r3, #0]
                if (tasks[i].delay == 0) {
 800139e:	7efa      	ldrb	r2, [r7, #27]
 80013a0:	4937      	ldr	r1, [pc, #220]	; (8001480 <schedulerAddTask+0x224>)
 80013a2:	4613      	mov	r3, r2
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	4413      	add	r3, r2
 80013a8:	00db      	lsls	r3, r3, #3
 80013aa:	440b      	add	r3, r1
 80013ac:	330c      	adds	r3, #12
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d109      	bne.n	80013c8 <schedulerAddTask+0x16c>
                    tasks[i].flag = 1;
 80013b4:	7efa      	ldrb	r2, [r7, #27]
 80013b6:	4932      	ldr	r1, [pc, #200]	; (8001480 <schedulerAddTask+0x224>)
 80013b8:	4613      	mov	r3, r2
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	4413      	add	r3, r2
 80013be:	00db      	lsls	r3, r3, #3
 80013c0:	440b      	add	r3, r1
 80013c2:	3314      	adds	r3, #20
 80013c4:	2201      	movs	r2, #1
 80013c6:	701a      	strb	r2, [r3, #0]
                }
                tasks[i + 1].delay = newDelay;
 80013c8:	7efb      	ldrb	r3, [r7, #27]
 80013ca:	1c5a      	adds	r2, r3, #1
 80013cc:	6979      	ldr	r1, [r7, #20]
 80013ce:	482c      	ldr	r0, [pc, #176]	; (8001480 <schedulerAddTask+0x224>)
 80013d0:	4613      	mov	r3, r2
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	4413      	add	r3, r2
 80013d6:	00db      	lsls	r3, r3, #3
 80013d8:	4403      	add	r3, r0
 80013da:	330c      	adds	r3, #12
 80013dc:	6019      	str	r1, [r3, #0]
                if (tasks[i + 1].delay == 0) {
 80013de:	7efb      	ldrb	r3, [r7, #27]
 80013e0:	1c5a      	adds	r2, r3, #1
 80013e2:	4927      	ldr	r1, [pc, #156]	; (8001480 <schedulerAddTask+0x224>)
 80013e4:	4613      	mov	r3, r2
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	4413      	add	r3, r2
 80013ea:	00db      	lsls	r3, r3, #3
 80013ec:	440b      	add	r3, r1
 80013ee:	330c      	adds	r3, #12
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d12c      	bne.n	8001450 <schedulerAddTask+0x1f4>
                    tasks[i + 1].flag = 1;
 80013f6:	7efb      	ldrb	r3, [r7, #27]
 80013f8:	1c5a      	adds	r2, r3, #1
 80013fa:	4921      	ldr	r1, [pc, #132]	; (8001480 <schedulerAddTask+0x224>)
 80013fc:	4613      	mov	r3, r2
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	4413      	add	r3, r2
 8001402:	00db      	lsls	r3, r3, #3
 8001404:	440b      	add	r3, r1
 8001406:	3314      	adds	r3, #20
 8001408:	2201      	movs	r2, #1
 800140a:	701a      	strb	r2, [r3, #0]
 800140c:	e020      	b.n	8001450 <schedulerAddTask+0x1f4>
                }
            }
            else {
                tasks[i].delay = delay - currentDelay;
 800140e:	7efa      	ldrb	r2, [r7, #27]
 8001410:	6879      	ldr	r1, [r7, #4]
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	1ac9      	subs	r1, r1, r3
 8001416:	481a      	ldr	r0, [pc, #104]	; (8001480 <schedulerAddTask+0x224>)
 8001418:	4613      	mov	r3, r2
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	4413      	add	r3, r2
 800141e:	00db      	lsls	r3, r3, #3
 8001420:	4403      	add	r3, r0
 8001422:	330c      	adds	r3, #12
 8001424:	6019      	str	r1, [r3, #0]
                if (tasks[i].delay == 0) {
 8001426:	7efa      	ldrb	r2, [r7, #27]
 8001428:	4915      	ldr	r1, [pc, #84]	; (8001480 <schedulerAddTask+0x224>)
 800142a:	4613      	mov	r3, r2
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	4413      	add	r3, r2
 8001430:	00db      	lsls	r3, r3, #3
 8001432:	440b      	add	r3, r1
 8001434:	330c      	adds	r3, #12
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d109      	bne.n	8001450 <schedulerAddTask+0x1f4>
                    tasks[i].flag = 1;
 800143c:	7efa      	ldrb	r2, [r7, #27]
 800143e:	4910      	ldr	r1, [pc, #64]	; (8001480 <schedulerAddTask+0x224>)
 8001440:	4613      	mov	r3, r2
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	4413      	add	r3, r2
 8001446:	00db      	lsls	r3, r3, #3
 8001448:	440b      	add	r3, r1
 800144a:	3314      	adds	r3, #20
 800144c:	2201      	movs	r2, #1
 800144e:	701a      	strb	r2, [r3, #0]
                }
            }
            return tasks[i].id;
 8001450:	7efa      	ldrb	r2, [r7, #27]
 8001452:	490b      	ldr	r1, [pc, #44]	; (8001480 <schedulerAddTask+0x224>)
 8001454:	4613      	mov	r3, r2
 8001456:	005b      	lsls	r3, r3, #1
 8001458:	4413      	add	r3, r2
 800145a:	00db      	lsls	r3, r3, #3
 800145c:	440b      	add	r3, r1
 800145e:	3308      	adds	r3, #8
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	e007      	b.n	8001474 <schedulerAddTask+0x218>
    for (uint8_t i = 0; i < SCHEDULER_NUMBER; i ++) {
 8001464:	7efb      	ldrb	r3, [r7, #27]
 8001466:	3301      	adds	r3, #1
 8001468:	76fb      	strb	r3, [r7, #27]
 800146a:	7efb      	ldrb	r3, [r7, #27]
 800146c:	2b13      	cmp	r3, #19
 800146e:	f67f af0c 	bls.w	800128a <schedulerAddTask+0x2e>
        }
    }
    return 0;
 8001472:	2300      	movs	r3, #0
}
 8001474:	4618      	mov	r0, r3
 8001476:	3724      	adds	r7, #36	; 0x24
 8001478:	46bd      	mov	sp, r7
 800147a:	bcb0      	pop	{r4, r5, r7}
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	200001a4 	.word	0x200001a4

08001484 <schedulerDeleteTask>:

unsigned char schedulerDeleteTask(uint8_t id) {
 8001484:	b4b0      	push	{r4, r5, r7}
 8001486:	b085      	sub	sp, #20
 8001488:	af00      	add	r7, sp, #0
 800148a:	4603      	mov	r3, r0
 800148c:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < SCHEDULER_NUMBER; i ++) {
 800148e:	2300      	movs	r3, #0
 8001490:	73fb      	strb	r3, [r7, #15]
 8001492:	e087      	b.n	80015a4 <schedulerDeleteTask+0x120>
    	if (tasks[i].function == 0) return 0;
 8001494:	7bfa      	ldrb	r2, [r7, #15]
 8001496:	4948      	ldr	r1, [pc, #288]	; (80015b8 <schedulerDeleteTask+0x134>)
 8001498:	4613      	mov	r3, r2
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	4413      	add	r3, r2
 800149e:	00db      	lsls	r3, r3, #3
 80014a0:	440b      	add	r3, r1
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d101      	bne.n	80014ac <schedulerDeleteTask+0x28>
 80014a8:	2300      	movs	r3, #0
 80014aa:	e080      	b.n	80015ae <schedulerDeleteTask+0x12a>
        if (tasks[i].id == id) {
 80014ac:	7bfa      	ldrb	r2, [r7, #15]
 80014ae:	4942      	ldr	r1, [pc, #264]	; (80015b8 <schedulerDeleteTask+0x134>)
 80014b0:	4613      	mov	r3, r2
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	4413      	add	r3, r2
 80014b6:	00db      	lsls	r3, r3, #3
 80014b8:	440b      	add	r3, r1
 80014ba:	3308      	adds	r3, #8
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	79fa      	ldrb	r2, [r7, #7]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d16c      	bne.n	800159e <schedulerDeleteTask+0x11a>
            uint8_t currentID = tasks[i].id;
 80014c4:	7bfa      	ldrb	r2, [r7, #15]
 80014c6:	493c      	ldr	r1, [pc, #240]	; (80015b8 <schedulerDeleteTask+0x134>)
 80014c8:	4613      	mov	r3, r2
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	4413      	add	r3, r2
 80014ce:	00db      	lsls	r3, r3, #3
 80014d0:	440b      	add	r3, r1
 80014d2:	3308      	adds	r3, #8
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	737b      	strb	r3, [r7, #13]
            if (tasks[i + 1].function != 0) {
 80014d8:	7bfb      	ldrb	r3, [r7, #15]
 80014da:	1c5a      	adds	r2, r3, #1
 80014dc:	4936      	ldr	r1, [pc, #216]	; (80015b8 <schedulerDeleteTask+0x134>)
 80014de:	4613      	mov	r3, r2
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	4413      	add	r3, r2
 80014e4:	00db      	lsls	r3, r3, #3
 80014e6:	440b      	add	r3, r1
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d01d      	beq.n	800152a <schedulerDeleteTask+0xa6>
                tasks[i + 1].delay += tasks[i].delay;
 80014ee:	7bfb      	ldrb	r3, [r7, #15]
 80014f0:	1c5a      	adds	r2, r3, #1
 80014f2:	4931      	ldr	r1, [pc, #196]	; (80015b8 <schedulerDeleteTask+0x134>)
 80014f4:	4613      	mov	r3, r2
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	4413      	add	r3, r2
 80014fa:	00db      	lsls	r3, r3, #3
 80014fc:	440b      	add	r3, r1
 80014fe:	330c      	adds	r3, #12
 8001500:	6819      	ldr	r1, [r3, #0]
 8001502:	7bfa      	ldrb	r2, [r7, #15]
 8001504:	482c      	ldr	r0, [pc, #176]	; (80015b8 <schedulerDeleteTask+0x134>)
 8001506:	4613      	mov	r3, r2
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	4413      	add	r3, r2
 800150c:	00db      	lsls	r3, r3, #3
 800150e:	4403      	add	r3, r0
 8001510:	330c      	adds	r3, #12
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	7bfa      	ldrb	r2, [r7, #15]
 8001516:	3201      	adds	r2, #1
 8001518:	4419      	add	r1, r3
 800151a:	4827      	ldr	r0, [pc, #156]	; (80015b8 <schedulerDeleteTask+0x134>)
 800151c:	4613      	mov	r3, r2
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	4413      	add	r3, r2
 8001522:	00db      	lsls	r3, r3, #3
 8001524:	4403      	add	r3, r0
 8001526:	330c      	adds	r3, #12
 8001528:	6019      	str	r1, [r3, #0]
            }
            for (uint8_t j = i; j < SCHEDULER_NUMBER - 1; j ++) {
 800152a:	7bfb      	ldrb	r3, [r7, #15]
 800152c:	73bb      	strb	r3, [r7, #14]
 800152e:	e019      	b.n	8001564 <schedulerDeleteTask+0xe0>
                tasks[j] = tasks[j + 1];
 8001530:	7bbb      	ldrb	r3, [r7, #14]
 8001532:	1c5a      	adds	r2, r3, #1
 8001534:	7bb9      	ldrb	r1, [r7, #14]
 8001536:	4820      	ldr	r0, [pc, #128]	; (80015b8 <schedulerDeleteTask+0x134>)
 8001538:	460b      	mov	r3, r1
 800153a:	005b      	lsls	r3, r3, #1
 800153c:	440b      	add	r3, r1
 800153e:	00db      	lsls	r3, r3, #3
 8001540:	4418      	add	r0, r3
 8001542:	491d      	ldr	r1, [pc, #116]	; (80015b8 <schedulerDeleteTask+0x134>)
 8001544:	4613      	mov	r3, r2
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	4413      	add	r3, r2
 800154a:	00db      	lsls	r3, r3, #3
 800154c:	440b      	add	r3, r1
 800154e:	4604      	mov	r4, r0
 8001550:	461d      	mov	r5, r3
 8001552:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001554:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001556:	e895 0003 	ldmia.w	r5, {r0, r1}
 800155a:	e884 0003 	stmia.w	r4, {r0, r1}
            for (uint8_t j = i; j < SCHEDULER_NUMBER - 1; j ++) {
 800155e:	7bbb      	ldrb	r3, [r7, #14]
 8001560:	3301      	adds	r3, #1
 8001562:	73bb      	strb	r3, [r7, #14]
 8001564:	7bbb      	ldrb	r3, [r7, #14]
 8001566:	2b12      	cmp	r3, #18
 8001568:	d9e2      	bls.n	8001530 <schedulerDeleteTask+0xac>
            }
            tasks[SCHEDULER_NUMBER - 1].function = 0;
 800156a:	4b13      	ldr	r3, [pc, #76]	; (80015b8 <schedulerDeleteTask+0x134>)
 800156c:	2200      	movs	r2, #0
 800156e:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
            tasks[SCHEDULER_NUMBER - 1].arguments = 0;
 8001572:	4b11      	ldr	r3, [pc, #68]	; (80015b8 <schedulerDeleteTask+0x134>)
 8001574:	2200      	movs	r2, #0
 8001576:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
            tasks[SCHEDULER_NUMBER - 1].id = currentID;
 800157a:	4a0f      	ldr	r2, [pc, #60]	; (80015b8 <schedulerDeleteTask+0x134>)
 800157c:	7b7b      	ldrb	r3, [r7, #13]
 800157e:	f882 31d0 	strb.w	r3, [r2, #464]	; 0x1d0
            tasks[SCHEDULER_NUMBER - 1].delay = 0;
 8001582:	4b0d      	ldr	r3, [pc, #52]	; (80015b8 <schedulerDeleteTask+0x134>)
 8001584:	2200      	movs	r2, #0
 8001586:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
            tasks[SCHEDULER_NUMBER - 1].period = 0;
 800158a:	4b0b      	ldr	r3, [pc, #44]	; (80015b8 <schedulerDeleteTask+0x134>)
 800158c:	2200      	movs	r2, #0
 800158e:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
            tasks[SCHEDULER_NUMBER - 1].flag = 0;
 8001592:	4b09      	ldr	r3, [pc, #36]	; (80015b8 <schedulerDeleteTask+0x134>)
 8001594:	2200      	movs	r2, #0
 8001596:	f883 21dc 	strb.w	r2, [r3, #476]	; 0x1dc
            return 1;
 800159a:	2301      	movs	r3, #1
 800159c:	e007      	b.n	80015ae <schedulerDeleteTask+0x12a>
    for (uint8_t i = 0; i < SCHEDULER_NUMBER; i ++) {
 800159e:	7bfb      	ldrb	r3, [r7, #15]
 80015a0:	3301      	adds	r3, #1
 80015a2:	73fb      	strb	r3, [r7, #15]
 80015a4:	7bfb      	ldrb	r3, [r7, #15]
 80015a6:	2b13      	cmp	r3, #19
 80015a8:	f67f af74 	bls.w	8001494 <schedulerDeleteTask+0x10>
        }
    }
    return 0;
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3714      	adds	r7, #20
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bcb0      	pop	{r4, r5, r7}
 80015b6:	4770      	bx	lr
 80015b8:	200001a4 	.word	0x200001a4

080015bc <schedulerRefreshTask>:

unsigned char schedulerRefreshTask(void) {
 80015bc:	b4b0      	push	{r4, r5, r7}
 80015be:	b08b      	sub	sp, #44	; 0x2c
 80015c0:	af00      	add	r7, sp, #0
    if (tasks[0].function == 0) return 0;
 80015c2:	4bb1      	ldr	r3, [pc, #708]	; (8001888 <schedulerRefreshTask+0x2cc>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d101      	bne.n	80015ce <schedulerRefreshTask+0x12>
 80015ca:	2300      	movs	r3, #0
 80015cc:	e157      	b.n	800187e <schedulerRefreshTask+0x2c2>
    schedulerTask currentTask = tasks[0];
 80015ce:	4bae      	ldr	r3, [pc, #696]	; (8001888 <schedulerRefreshTask+0x2cc>)
 80015d0:	1d3c      	adds	r4, r7, #4
 80015d2:	461d      	mov	r5, r3
 80015d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015d8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80015dc:	e884 0003 	stmia.w	r4, {r0, r1}
    uint32_t currentDelay = 0;
 80015e0:	2300      	movs	r3, #0
 80015e2:	627b      	str	r3, [r7, #36]	; 0x24
    for (uint8_t i = 0; i < SCHEDULER_NUMBER; i ++) {
 80015e4:	2300      	movs	r3, #0
 80015e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80015ea:	e142      	b.n	8001872 <schedulerRefreshTask+0x2b6>
        if (i + 1 == SCHEDULER_NUMBER || tasks[i + 1].function == NULL) {
 80015ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80015f0:	2b13      	cmp	r3, #19
 80015f2:	d00b      	beq.n	800160c <schedulerRefreshTask+0x50>
 80015f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80015f8:	1c5a      	adds	r2, r3, #1
 80015fa:	49a3      	ldr	r1, [pc, #652]	; (8001888 <schedulerRefreshTask+0x2cc>)
 80015fc:	4613      	mov	r3, r2
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	4413      	add	r3, r2
 8001602:	00db      	lsls	r3, r3, #3
 8001604:	440b      	add	r3, r1
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d15c      	bne.n	80016c6 <schedulerRefreshTask+0x10a>
            tasks[i].function = currentTask.function;
 800160c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001610:	6879      	ldr	r1, [r7, #4]
 8001612:	489d      	ldr	r0, [pc, #628]	; (8001888 <schedulerRefreshTask+0x2cc>)
 8001614:	4613      	mov	r3, r2
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	4413      	add	r3, r2
 800161a:	00db      	lsls	r3, r3, #3
 800161c:	4403      	add	r3, r0
 800161e:	6019      	str	r1, [r3, #0]
            tasks[i].arguments = currentTask.arguments;
 8001620:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001624:	68b9      	ldr	r1, [r7, #8]
 8001626:	4898      	ldr	r0, [pc, #608]	; (8001888 <schedulerRefreshTask+0x2cc>)
 8001628:	4613      	mov	r3, r2
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	4413      	add	r3, r2
 800162e:	00db      	lsls	r3, r3, #3
 8001630:	4403      	add	r3, r0
 8001632:	3304      	adds	r3, #4
 8001634:	6019      	str	r1, [r3, #0]
            tasks[i].id = currentTask.id;
 8001636:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800163a:	7b38      	ldrb	r0, [r7, #12]
 800163c:	4992      	ldr	r1, [pc, #584]	; (8001888 <schedulerRefreshTask+0x2cc>)
 800163e:	4613      	mov	r3, r2
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	4413      	add	r3, r2
 8001644:	00db      	lsls	r3, r3, #3
 8001646:	440b      	add	r3, r1
 8001648:	3308      	adds	r3, #8
 800164a:	4602      	mov	r2, r0
 800164c:	701a      	strb	r2, [r3, #0]
            tasks[i].period = currentTask.period;
 800164e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001652:	6979      	ldr	r1, [r7, #20]
 8001654:	488c      	ldr	r0, [pc, #560]	; (8001888 <schedulerRefreshTask+0x2cc>)
 8001656:	4613      	mov	r3, r2
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	4413      	add	r3, r2
 800165c:	00db      	lsls	r3, r3, #3
 800165e:	4403      	add	r3, r0
 8001660:	3310      	adds	r3, #16
 8001662:	6019      	str	r1, [r3, #0]
            tasks[i].flag = 0;
 8001664:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001668:	4987      	ldr	r1, [pc, #540]	; (8001888 <schedulerRefreshTask+0x2cc>)
 800166a:	4613      	mov	r3, r2
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	4413      	add	r3, r2
 8001670:	00db      	lsls	r3, r3, #3
 8001672:	440b      	add	r3, r1
 8001674:	3314      	adds	r3, #20
 8001676:	2200      	movs	r2, #0
 8001678:	701a      	strb	r2, [r3, #0]
            tasks[i].delay = currentTask.period - currentDelay;
 800167a:	6979      	ldr	r1, [r7, #20]
 800167c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001682:	1ac9      	subs	r1, r1, r3
 8001684:	4880      	ldr	r0, [pc, #512]	; (8001888 <schedulerRefreshTask+0x2cc>)
 8001686:	4613      	mov	r3, r2
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	4413      	add	r3, r2
 800168c:	00db      	lsls	r3, r3, #3
 800168e:	4403      	add	r3, r0
 8001690:	330c      	adds	r3, #12
 8001692:	6019      	str	r1, [r3, #0]
            if (tasks[i].delay == 0) {
 8001694:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001698:	497b      	ldr	r1, [pc, #492]	; (8001888 <schedulerRefreshTask+0x2cc>)
 800169a:	4613      	mov	r3, r2
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	4413      	add	r3, r2
 80016a0:	00db      	lsls	r3, r3, #3
 80016a2:	440b      	add	r3, r1
 80016a4:	330c      	adds	r3, #12
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d10a      	bne.n	80016c2 <schedulerRefreshTask+0x106>
                tasks[i].flag = 1;
 80016ac:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80016b0:	4975      	ldr	r1, [pc, #468]	; (8001888 <schedulerRefreshTask+0x2cc>)
 80016b2:	4613      	mov	r3, r2
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	4413      	add	r3, r2
 80016b8:	00db      	lsls	r3, r3, #3
 80016ba:	440b      	add	r3, r1
 80016bc:	3314      	adds	r3, #20
 80016be:	2201      	movs	r2, #1
 80016c0:	701a      	strb	r2, [r3, #0]
            }
            return 1;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e0db      	b.n	800187e <schedulerRefreshTask+0x2c2>
        }
        currentDelay += tasks[i + 1].delay;
 80016c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80016ca:	1c5a      	adds	r2, r3, #1
 80016cc:	496e      	ldr	r1, [pc, #440]	; (8001888 <schedulerRefreshTask+0x2cc>)
 80016ce:	4613      	mov	r3, r2
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	4413      	add	r3, r2
 80016d4:	00db      	lsls	r3, r3, #3
 80016d6:	440b      	add	r3, r1
 80016d8:	330c      	adds	r3, #12
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016de:	4413      	add	r3, r2
 80016e0:	627b      	str	r3, [r7, #36]	; 0x24
        if (currentDelay > currentTask.period) {
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016e6:	429a      	cmp	r2, r3
 80016e8:	f240 80a5 	bls.w	8001836 <schedulerRefreshTask+0x27a>
            tasks[i].function = currentTask.function;
 80016ec:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80016f0:	6879      	ldr	r1, [r7, #4]
 80016f2:	4865      	ldr	r0, [pc, #404]	; (8001888 <schedulerRefreshTask+0x2cc>)
 80016f4:	4613      	mov	r3, r2
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	4413      	add	r3, r2
 80016fa:	00db      	lsls	r3, r3, #3
 80016fc:	4403      	add	r3, r0
 80016fe:	6019      	str	r1, [r3, #0]
            tasks[i].arguments = currentTask.arguments;
 8001700:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001704:	68b9      	ldr	r1, [r7, #8]
 8001706:	4860      	ldr	r0, [pc, #384]	; (8001888 <schedulerRefreshTask+0x2cc>)
 8001708:	4613      	mov	r3, r2
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	4413      	add	r3, r2
 800170e:	00db      	lsls	r3, r3, #3
 8001710:	4403      	add	r3, r0
 8001712:	3304      	adds	r3, #4
 8001714:	6019      	str	r1, [r3, #0]
            tasks[i].id = currentTask.id;
 8001716:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800171a:	7b38      	ldrb	r0, [r7, #12]
 800171c:	495a      	ldr	r1, [pc, #360]	; (8001888 <schedulerRefreshTask+0x2cc>)
 800171e:	4613      	mov	r3, r2
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	4413      	add	r3, r2
 8001724:	00db      	lsls	r3, r3, #3
 8001726:	440b      	add	r3, r1
 8001728:	3308      	adds	r3, #8
 800172a:	4602      	mov	r2, r0
 800172c:	701a      	strb	r2, [r3, #0]
            tasks[i].period = currentTask.period;
 800172e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001732:	6979      	ldr	r1, [r7, #20]
 8001734:	4854      	ldr	r0, [pc, #336]	; (8001888 <schedulerRefreshTask+0x2cc>)
 8001736:	4613      	mov	r3, r2
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	4413      	add	r3, r2
 800173c:	00db      	lsls	r3, r3, #3
 800173e:	4403      	add	r3, r0
 8001740:	3310      	adds	r3, #16
 8001742:	6019      	str	r1, [r3, #0]
            tasks[i].flag = 0;
 8001744:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001748:	494f      	ldr	r1, [pc, #316]	; (8001888 <schedulerRefreshTask+0x2cc>)
 800174a:	4613      	mov	r3, r2
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	4413      	add	r3, r2
 8001750:	00db      	lsls	r3, r3, #3
 8001752:	440b      	add	r3, r1
 8001754:	3314      	adds	r3, #20
 8001756:	2200      	movs	r2, #0
 8001758:	701a      	strb	r2, [r3, #0]
            int newDelay = currentDelay - currentTask.period;
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	61fb      	str	r3, [r7, #28]
            tasks[i].delay = tasks[i + 1].delay - newDelay;
 8001762:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001766:	1c5a      	adds	r2, r3, #1
 8001768:	4947      	ldr	r1, [pc, #284]	; (8001888 <schedulerRefreshTask+0x2cc>)
 800176a:	4613      	mov	r3, r2
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	4413      	add	r3, r2
 8001770:	00db      	lsls	r3, r3, #3
 8001772:	440b      	add	r3, r1
 8001774:	330c      	adds	r3, #12
 8001776:	6819      	ldr	r1, [r3, #0]
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800177e:	1ac9      	subs	r1, r1, r3
 8001780:	4841      	ldr	r0, [pc, #260]	; (8001888 <schedulerRefreshTask+0x2cc>)
 8001782:	4613      	mov	r3, r2
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	4413      	add	r3, r2
 8001788:	00db      	lsls	r3, r3, #3
 800178a:	4403      	add	r3, r0
 800178c:	330c      	adds	r3, #12
 800178e:	6019      	str	r1, [r3, #0]
            if (tasks[i].delay == 0) {
 8001790:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001794:	493c      	ldr	r1, [pc, #240]	; (8001888 <schedulerRefreshTask+0x2cc>)
 8001796:	4613      	mov	r3, r2
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	4413      	add	r3, r2
 800179c:	00db      	lsls	r3, r3, #3
 800179e:	440b      	add	r3, r1
 80017a0:	330c      	adds	r3, #12
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d10a      	bne.n	80017be <schedulerRefreshTask+0x202>
                tasks[i].flag = 1;
 80017a8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80017ac:	4936      	ldr	r1, [pc, #216]	; (8001888 <schedulerRefreshTask+0x2cc>)
 80017ae:	4613      	mov	r3, r2
 80017b0:	005b      	lsls	r3, r3, #1
 80017b2:	4413      	add	r3, r2
 80017b4:	00db      	lsls	r3, r3, #3
 80017b6:	440b      	add	r3, r1
 80017b8:	3314      	adds	r3, #20
 80017ba:	2201      	movs	r2, #1
 80017bc:	701a      	strb	r2, [r3, #0]
            }
            tasks[i + 1].delay -= tasks[i].delay;
 80017be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80017c2:	1c5a      	adds	r2, r3, #1
 80017c4:	4930      	ldr	r1, [pc, #192]	; (8001888 <schedulerRefreshTask+0x2cc>)
 80017c6:	4613      	mov	r3, r2
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	4413      	add	r3, r2
 80017cc:	00db      	lsls	r3, r3, #3
 80017ce:	440b      	add	r3, r1
 80017d0:	330c      	adds	r3, #12
 80017d2:	6819      	ldr	r1, [r3, #0]
 80017d4:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80017d8:	482b      	ldr	r0, [pc, #172]	; (8001888 <schedulerRefreshTask+0x2cc>)
 80017da:	4613      	mov	r3, r2
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	4413      	add	r3, r2
 80017e0:	00db      	lsls	r3, r3, #3
 80017e2:	4403      	add	r3, r0
 80017e4:	330c      	adds	r3, #12
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80017ec:	3201      	adds	r2, #1
 80017ee:	1ac9      	subs	r1, r1, r3
 80017f0:	4825      	ldr	r0, [pc, #148]	; (8001888 <schedulerRefreshTask+0x2cc>)
 80017f2:	4613      	mov	r3, r2
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	4413      	add	r3, r2
 80017f8:	00db      	lsls	r3, r3, #3
 80017fa:	4403      	add	r3, r0
 80017fc:	330c      	adds	r3, #12
 80017fe:	6019      	str	r1, [r3, #0]
            if (tasks[i + 1].delay == 0) {
 8001800:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001804:	1c5a      	adds	r2, r3, #1
 8001806:	4920      	ldr	r1, [pc, #128]	; (8001888 <schedulerRefreshTask+0x2cc>)
 8001808:	4613      	mov	r3, r2
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	4413      	add	r3, r2
 800180e:	00db      	lsls	r3, r3, #3
 8001810:	440b      	add	r3, r1
 8001812:	330c      	adds	r3, #12
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d10b      	bne.n	8001832 <schedulerRefreshTask+0x276>
                tasks[i + 1].flag = 1;
 800181a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800181e:	1c5a      	adds	r2, r3, #1
 8001820:	4919      	ldr	r1, [pc, #100]	; (8001888 <schedulerRefreshTask+0x2cc>)
 8001822:	4613      	mov	r3, r2
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	4413      	add	r3, r2
 8001828:	00db      	lsls	r3, r3, #3
 800182a:	440b      	add	r3, r1
 800182c:	3314      	adds	r3, #20
 800182e:	2201      	movs	r2, #1
 8001830:	701a      	strb	r2, [r3, #0]
            }
            return 1;
 8001832:	2301      	movs	r3, #1
 8001834:	e023      	b.n	800187e <schedulerRefreshTask+0x2c2>
        }
        else {
            tasks[i] = tasks[i + 1];
 8001836:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800183a:	1c5a      	adds	r2, r3, #1
 800183c:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 8001840:	4811      	ldr	r0, [pc, #68]	; (8001888 <schedulerRefreshTask+0x2cc>)
 8001842:	460b      	mov	r3, r1
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	440b      	add	r3, r1
 8001848:	00db      	lsls	r3, r3, #3
 800184a:	4418      	add	r0, r3
 800184c:	490e      	ldr	r1, [pc, #56]	; (8001888 <schedulerRefreshTask+0x2cc>)
 800184e:	4613      	mov	r3, r2
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	4413      	add	r3, r2
 8001854:	00db      	lsls	r3, r3, #3
 8001856:	440b      	add	r3, r1
 8001858:	4604      	mov	r4, r0
 800185a:	461d      	mov	r5, r3
 800185c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800185e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001860:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001864:	e884 0003 	stmia.w	r4, {r0, r1}
    for (uint8_t i = 0; i < SCHEDULER_NUMBER; i ++) {
 8001868:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800186c:	3301      	adds	r3, #1
 800186e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001872:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001876:	2b13      	cmp	r3, #19
 8001878:	f67f aeb8 	bls.w	80015ec <schedulerRefreshTask+0x30>
        }
    }
    return 0;
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	372c      	adds	r7, #44	; 0x2c
 8001882:	46bd      	mov	sp, r7
 8001884:	bcb0      	pop	{r4, r5, r7}
 8001886:	4770      	bx	lr
 8001888:	200001a4 	.word	0x200001a4

0800188c <servoInit>:
#include "servo.h"
#include "scheduler.h"

servo servos[SERVO_NUMBER];

void servoInit(void) {
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < SERVO_NUMBER; i ++) {
 8001892:	2300      	movs	r3, #0
 8001894:	71fb      	strb	r3, [r7, #7]
 8001896:	e01f      	b.n	80018d8 <servoInit+0x4c>
		servos[i].timer = NULL;
 8001898:	79fb      	ldrb	r3, [r7, #7]
 800189a:	4a14      	ldr	r2, [pc, #80]	; (80018ec <servoInit+0x60>)
 800189c:	011b      	lsls	r3, r3, #4
 800189e:	4413      	add	r3, r2
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]
		servos[i].channel = 0;
 80018a4:	79fb      	ldrb	r3, [r7, #7]
 80018a6:	4a11      	ldr	r2, [pc, #68]	; (80018ec <servoInit+0x60>)
 80018a8:	011b      	lsls	r3, r3, #4
 80018aa:	4413      	add	r3, r2
 80018ac:	3304      	adds	r3, #4
 80018ae:	2200      	movs	r2, #0
 80018b0:	601a      	str	r2, [r3, #0]
		servos[i].offset = 0;
 80018b2:	79fb      	ldrb	r3, [r7, #7]
 80018b4:	4a0d      	ldr	r2, [pc, #52]	; (80018ec <servoInit+0x60>)
 80018b6:	011b      	lsls	r3, r3, #4
 80018b8:	4413      	add	r3, r2
 80018ba:	3308      	adds	r3, #8
 80018bc:	f04f 0200 	mov.w	r2, #0
 80018c0:	601a      	str	r2, [r3, #0]
		servos[i].target = 0;
 80018c2:	79fb      	ldrb	r3, [r7, #7]
 80018c4:	4a09      	ldr	r2, [pc, #36]	; (80018ec <servoInit+0x60>)
 80018c6:	011b      	lsls	r3, r3, #4
 80018c8:	4413      	add	r3, r2
 80018ca:	330c      	adds	r3, #12
 80018cc:	f04f 0200 	mov.w	r2, #0
 80018d0:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < SERVO_NUMBER; i ++) {
 80018d2:	79fb      	ldrb	r3, [r7, #7]
 80018d4:	3301      	adds	r3, #1
 80018d6:	71fb      	strb	r3, [r7, #7]
 80018d8:	79fb      	ldrb	r3, [r7, #7]
 80018da:	2b0b      	cmp	r3, #11
 80018dc:	d9dc      	bls.n	8001898 <servoInit+0xc>
	}
}
 80018de:	bf00      	nop
 80018e0:	bf00      	nop
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bc80      	pop	{r7}
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	20000384 	.word	0x20000384

080018f0 <servoStart>:

uint8_t servoStart(TIM_HandleTypeDef *timer, uint32_t channel, float offset) {
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b086      	sub	sp, #24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	60f8      	str	r0, [r7, #12]
 80018f8:	60b9      	str	r1, [r7, #8]
 80018fa:	607a      	str	r2, [r7, #4]
	for (uint8_t i = 0; i < SERVO_NUMBER; i ++) {
 80018fc:	2300      	movs	r3, #0
 80018fe:	75fb      	strb	r3, [r7, #23]
 8001900:	e045      	b.n	800198e <servoStart+0x9e>
		if (servos[i].timer != NULL) continue;
 8001902:	7dfb      	ldrb	r3, [r7, #23]
 8001904:	4a26      	ldr	r2, [pc, #152]	; (80019a0 <servoStart+0xb0>)
 8001906:	011b      	lsls	r3, r3, #4
 8001908:	4413      	add	r3, r2
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d13a      	bne.n	8001986 <servoStart+0x96>
		servos[i].timer = timer;
 8001910:	7dfb      	ldrb	r3, [r7, #23]
 8001912:	4a23      	ldr	r2, [pc, #140]	; (80019a0 <servoStart+0xb0>)
 8001914:	011b      	lsls	r3, r3, #4
 8001916:	4413      	add	r3, r2
 8001918:	68fa      	ldr	r2, [r7, #12]
 800191a:	601a      	str	r2, [r3, #0]
		servos[i].channel = channel;
 800191c:	7dfb      	ldrb	r3, [r7, #23]
 800191e:	4a20      	ldr	r2, [pc, #128]	; (80019a0 <servoStart+0xb0>)
 8001920:	011b      	lsls	r3, r3, #4
 8001922:	4413      	add	r3, r2
 8001924:	3304      	adds	r3, #4
 8001926:	68ba      	ldr	r2, [r7, #8]
 8001928:	601a      	str	r2, [r3, #0]
		if (offset < -SERVO_OFFSET) servos[i].offset = -SERVO_OFFSET;
 800192a:	491e      	ldr	r1, [pc, #120]	; (80019a4 <servoStart+0xb4>)
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f7fe feb9 	bl	80006a4 <__aeabi_fcmplt>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d007      	beq.n	8001948 <servoStart+0x58>
 8001938:	7dfb      	ldrb	r3, [r7, #23]
 800193a:	4a19      	ldr	r2, [pc, #100]	; (80019a0 <servoStart+0xb0>)
 800193c:	011b      	lsls	r3, r3, #4
 800193e:	4413      	add	r3, r2
 8001940:	3308      	adds	r3, #8
 8001942:	4a18      	ldr	r2, [pc, #96]	; (80019a4 <servoStart+0xb4>)
 8001944:	601a      	str	r2, [r3, #0]
 8001946:	e015      	b.n	8001974 <servoStart+0x84>
		else if (offset > SERVO_OFFSET) servos[i].offset = SERVO_OFFSET;
 8001948:	4917      	ldr	r1, [pc, #92]	; (80019a8 <servoStart+0xb8>)
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f7fe fec8 	bl	80006e0 <__aeabi_fcmpgt>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d007      	beq.n	8001966 <servoStart+0x76>
 8001956:	7dfb      	ldrb	r3, [r7, #23]
 8001958:	4a11      	ldr	r2, [pc, #68]	; (80019a0 <servoStart+0xb0>)
 800195a:	011b      	lsls	r3, r3, #4
 800195c:	4413      	add	r3, r2
 800195e:	3308      	adds	r3, #8
 8001960:	4a11      	ldr	r2, [pc, #68]	; (80019a8 <servoStart+0xb8>)
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	e006      	b.n	8001974 <servoStart+0x84>
		else servos[i].offset = offset;
 8001966:	7dfb      	ldrb	r3, [r7, #23]
 8001968:	4a0d      	ldr	r2, [pc, #52]	; (80019a0 <servoStart+0xb0>)
 800196a:	011b      	lsls	r3, r3, #4
 800196c:	4413      	add	r3, r2
 800196e:	3308      	adds	r3, #8
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	601a      	str	r2, [r3, #0]
		servos[i].target = 90;
 8001974:	7dfb      	ldrb	r3, [r7, #23]
 8001976:	4a0a      	ldr	r2, [pc, #40]	; (80019a0 <servoStart+0xb0>)
 8001978:	011b      	lsls	r3, r3, #4
 800197a:	4413      	add	r3, r2
 800197c:	330c      	adds	r3, #12
 800197e:	4a0b      	ldr	r2, [pc, #44]	; (80019ac <servoStart+0xbc>)
 8001980:	601a      	str	r2, [r3, #0]
		return i;
 8001982:	7dfb      	ldrb	r3, [r7, #23]
 8001984:	e007      	b.n	8001996 <servoStart+0xa6>
		if (servos[i].timer != NULL) continue;
 8001986:	bf00      	nop
	for (uint8_t i = 0; i < SERVO_NUMBER; i ++) {
 8001988:	7dfb      	ldrb	r3, [r7, #23]
 800198a:	3301      	adds	r3, #1
 800198c:	75fb      	strb	r3, [r7, #23]
 800198e:	7dfb      	ldrb	r3, [r7, #23]
 8001990:	2b0b      	cmp	r3, #11
 8001992:	d9b6      	bls.n	8001902 <servoStart+0x12>
	}
	return SERVO_UNDEFINED;
 8001994:	230c      	movs	r3, #12
}
 8001996:	4618      	mov	r0, r3
 8001998:	3718      	adds	r7, #24
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	20000384 	.word	0x20000384
 80019a4:	c1580000 	.word	0xc1580000
 80019a8:	41580000 	.word	0x41580000
 80019ac:	42b40000 	.word	0x42b40000

080019b0 <servoRotate>:
		if (servos[i].timer == NULL) continue;
		servoRotate(&servos[i]);
	}
}

void servoRotate(void *servoPointer) {
 80019b0:	b590      	push	{r4, r7, lr}
 80019b2:	b085      	sub	sp, #20
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
	servo *newServoPointer = (servo *)servoPointer;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	60fb      	str	r3, [r7, #12]
	if (newServoPointer->timer == NULL) return;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d06d      	beq.n	8001aa0 <servoRotate+0xf0>
	if (newServoPointer->target < 0) newServoPointer->target = 0;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	f04f 0100 	mov.w	r1, #0
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7fe fe69 	bl	80006a4 <__aeabi_fcmplt>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d004      	beq.n	80019e2 <servoRotate+0x32>
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f04f 0200 	mov.w	r2, #0
 80019de:	60da      	str	r2, [r3, #12]
 80019e0:	e00b      	b.n	80019fa <servoRotate+0x4a>
	else if (newServoPointer->target > 180) newServoPointer->target = 180;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	68db      	ldr	r3, [r3, #12]
 80019e6:	4930      	ldr	r1, [pc, #192]	; (8001aa8 <servoRotate+0xf8>)
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7fe fe79 	bl	80006e0 <__aeabi_fcmpgt>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d002      	beq.n	80019fa <servoRotate+0x4a>
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	4a2c      	ldr	r2, [pc, #176]	; (8001aa8 <servoRotate+0xf8>)
 80019f8:	60da      	str	r2, [r3, #12]
	uint32_t newValue = (newServoPointer->timer->Instance->ARR + 1) / SERVO_PERIOD * (SERVO_MINIMUM + (SERVO_MAXIMUM - SERVO_MINIMUM) * (newServoPointer->target + newServoPointer->offset) / 180);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a02:	3301      	adds	r3, #1
 8001a04:	4a29      	ldr	r2, [pc, #164]	; (8001aac <servoRotate+0xfc>)
 8001a06:	fba2 2303 	umull	r2, r3, r2, r3
 8001a0a:	0b9b      	lsrs	r3, r3, #14
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7fe fc53 	bl	80002b8 <__aeabi_ui2f>
 8001a12:	4604      	mov	r4, r0
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	68da      	ldr	r2, [r3, #12]
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4610      	mov	r0, r2
 8001a20:	f7fe fb9a 	bl	8000158 <__addsf3>
 8001a24:	4603      	mov	r3, r0
 8001a26:	4922      	ldr	r1, [pc, #136]	; (8001ab0 <servoRotate+0x100>)
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7fe fc9d 	bl	8000368 <__aeabi_fmul>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	491d      	ldr	r1, [pc, #116]	; (8001aa8 <servoRotate+0xf8>)
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7fe fd4c 	bl	80004d0 <__aeabi_fdiv>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	491e      	ldr	r1, [pc, #120]	; (8001ab4 <servoRotate+0x104>)
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7fe fb8b 	bl	8000158 <__addsf3>
 8001a42:	4603      	mov	r3, r0
 8001a44:	4619      	mov	r1, r3
 8001a46:	4620      	mov	r0, r4
 8001a48:	f7fe fc8e 	bl	8000368 <__aeabi_fmul>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7fe fe50 	bl	80006f4 <__aeabi_f2uiz>
 8001a54:	4603      	mov	r3, r0
 8001a56:	60bb      	str	r3, [r7, #8]
//	newValue = newServoPointer->timer->Instance->ARR - newValue;
	__HAL_TIM_SET_COMPARE(newServoPointer->timer, newServoPointer->channel, newValue);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d105      	bne.n	8001a6c <servoRotate+0xbc>
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	68ba      	ldr	r2, [r7, #8]
 8001a68:	635a      	str	r2, [r3, #52]	; 0x34
 8001a6a:	e01a      	b.n	8001aa2 <servoRotate+0xf2>
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	2b04      	cmp	r3, #4
 8001a72:	d105      	bne.n	8001a80 <servoRotate+0xd0>
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	6393      	str	r3, [r2, #56]	; 0x38
 8001a7e:	e010      	b.n	8001aa2 <servoRotate+0xf2>
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	2b08      	cmp	r3, #8
 8001a86:	d105      	bne.n	8001a94 <servoRotate+0xe4>
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001a92:	e006      	b.n	8001aa2 <servoRotate+0xf2>
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a9e:	e000      	b.n	8001aa2 <servoRotate+0xf2>
	if (newServoPointer->timer == NULL) return;
 8001aa0:	bf00      	nop
}
 8001aa2:	3714      	adds	r7, #20
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd90      	pop	{r4, r7, pc}
 8001aa8:	43340000 	.word	0x43340000
 8001aac:	d1b71759 	.word	0xd1b71759
 8001ab0:	44fa0000 	.word	0x44fa0000
 8001ab4:	43fa0000 	.word	0x43fa0000

08001ab8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b085      	sub	sp, #20
 8001abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001abe:	4b15      	ldr	r3, [pc, #84]	; (8001b14 <HAL_MspInit+0x5c>)
 8001ac0:	699b      	ldr	r3, [r3, #24]
 8001ac2:	4a14      	ldr	r2, [pc, #80]	; (8001b14 <HAL_MspInit+0x5c>)
 8001ac4:	f043 0301 	orr.w	r3, r3, #1
 8001ac8:	6193      	str	r3, [r2, #24]
 8001aca:	4b12      	ldr	r3, [pc, #72]	; (8001b14 <HAL_MspInit+0x5c>)
 8001acc:	699b      	ldr	r3, [r3, #24]
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	60bb      	str	r3, [r7, #8]
 8001ad4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ad6:	4b0f      	ldr	r3, [pc, #60]	; (8001b14 <HAL_MspInit+0x5c>)
 8001ad8:	69db      	ldr	r3, [r3, #28]
 8001ada:	4a0e      	ldr	r2, [pc, #56]	; (8001b14 <HAL_MspInit+0x5c>)
 8001adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ae0:	61d3      	str	r3, [r2, #28]
 8001ae2:	4b0c      	ldr	r3, [pc, #48]	; (8001b14 <HAL_MspInit+0x5c>)
 8001ae4:	69db      	ldr	r3, [r3, #28]
 8001ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aea:	607b      	str	r3, [r7, #4]
 8001aec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001aee:	4b0a      	ldr	r3, [pc, #40]	; (8001b18 <HAL_MspInit+0x60>)
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	60fb      	str	r3, [r7, #12]
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001afa:	60fb      	str	r3, [r7, #12]
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	4a04      	ldr	r2, [pc, #16]	; (8001b18 <HAL_MspInit+0x60>)
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b0a:	bf00      	nop
 8001b0c:	3714      	adds	r7, #20
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bc80      	pop	{r7}
 8001b12:	4770      	bx	lr
 8001b14:	40021000 	.word	0x40021000
 8001b18:	40010000 	.word	0x40010000

08001b1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b086      	sub	sp, #24
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a40      	ldr	r2, [pc, #256]	; (8001c2c <HAL_TIM_Base_MspInit+0x110>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d12c      	bne.n	8001b88 <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b2e:	4b40      	ldr	r3, [pc, #256]	; (8001c30 <HAL_TIM_Base_MspInit+0x114>)
 8001b30:	699b      	ldr	r3, [r3, #24]
 8001b32:	4a3f      	ldr	r2, [pc, #252]	; (8001c30 <HAL_TIM_Base_MspInit+0x114>)
 8001b34:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b38:	6193      	str	r3, [r2, #24]
 8001b3a:	4b3d      	ldr	r3, [pc, #244]	; (8001c30 <HAL_TIM_Base_MspInit+0x114>)
 8001b3c:	699b      	ldr	r3, [r3, #24]
 8001b3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b42:	617b      	str	r3, [r7, #20]
 8001b44:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8001b46:	2200      	movs	r2, #0
 8001b48:	2100      	movs	r1, #0
 8001b4a:	2018      	movs	r0, #24
 8001b4c:	f000 fad5 	bl	80020fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8001b50:	2018      	movs	r0, #24
 8001b52:	f000 faee 	bl	8002132 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001b56:	2200      	movs	r2, #0
 8001b58:	2100      	movs	r1, #0
 8001b5a:	2019      	movs	r0, #25
 8001b5c:	f000 facd 	bl	80020fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001b60:	2019      	movs	r0, #25
 8001b62:	f000 fae6 	bl	8002132 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8001b66:	2200      	movs	r2, #0
 8001b68:	2100      	movs	r1, #0
 8001b6a:	201a      	movs	r0, #26
 8001b6c:	f000 fac5 	bl	80020fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8001b70:	201a      	movs	r0, #26
 8001b72:	f000 fade 	bl	8002132 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001b76:	2200      	movs	r2, #0
 8001b78:	2100      	movs	r1, #0
 8001b7a:	201b      	movs	r0, #27
 8001b7c:	f000 fabd 	bl	80020fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001b80:	201b      	movs	r0, #27
 8001b82:	f000 fad6 	bl	8002132 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001b86:	e04c      	b.n	8001c22 <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM2)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b90:	d114      	bne.n	8001bbc <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b92:	4b27      	ldr	r3, [pc, #156]	; (8001c30 <HAL_TIM_Base_MspInit+0x114>)
 8001b94:	69db      	ldr	r3, [r3, #28]
 8001b96:	4a26      	ldr	r2, [pc, #152]	; (8001c30 <HAL_TIM_Base_MspInit+0x114>)
 8001b98:	f043 0301 	orr.w	r3, r3, #1
 8001b9c:	61d3      	str	r3, [r2, #28]
 8001b9e:	4b24      	ldr	r3, [pc, #144]	; (8001c30 <HAL_TIM_Base_MspInit+0x114>)
 8001ba0:	69db      	ldr	r3, [r3, #28]
 8001ba2:	f003 0301 	and.w	r3, r3, #1
 8001ba6:	613b      	str	r3, [r7, #16]
 8001ba8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001baa:	2200      	movs	r2, #0
 8001bac:	2100      	movs	r1, #0
 8001bae:	201c      	movs	r0, #28
 8001bb0:	f000 faa3 	bl	80020fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001bb4:	201c      	movs	r0, #28
 8001bb6:	f000 fabc 	bl	8002132 <HAL_NVIC_EnableIRQ>
}
 8001bba:	e032      	b.n	8001c22 <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM3)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a1c      	ldr	r2, [pc, #112]	; (8001c34 <HAL_TIM_Base_MspInit+0x118>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d114      	bne.n	8001bf0 <HAL_TIM_Base_MspInit+0xd4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001bc6:	4b1a      	ldr	r3, [pc, #104]	; (8001c30 <HAL_TIM_Base_MspInit+0x114>)
 8001bc8:	69db      	ldr	r3, [r3, #28]
 8001bca:	4a19      	ldr	r2, [pc, #100]	; (8001c30 <HAL_TIM_Base_MspInit+0x114>)
 8001bcc:	f043 0302 	orr.w	r3, r3, #2
 8001bd0:	61d3      	str	r3, [r2, #28]
 8001bd2:	4b17      	ldr	r3, [pc, #92]	; (8001c30 <HAL_TIM_Base_MspInit+0x114>)
 8001bd4:	69db      	ldr	r3, [r3, #28]
 8001bd6:	f003 0302 	and.w	r3, r3, #2
 8001bda:	60fb      	str	r3, [r7, #12]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001bde:	2200      	movs	r2, #0
 8001be0:	2100      	movs	r1, #0
 8001be2:	201d      	movs	r0, #29
 8001be4:	f000 fa89 	bl	80020fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001be8:	201d      	movs	r0, #29
 8001bea:	f000 faa2 	bl	8002132 <HAL_NVIC_EnableIRQ>
}
 8001bee:	e018      	b.n	8001c22 <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM4)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a10      	ldr	r2, [pc, #64]	; (8001c38 <HAL_TIM_Base_MspInit+0x11c>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d113      	bne.n	8001c22 <HAL_TIM_Base_MspInit+0x106>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001bfa:	4b0d      	ldr	r3, [pc, #52]	; (8001c30 <HAL_TIM_Base_MspInit+0x114>)
 8001bfc:	69db      	ldr	r3, [r3, #28]
 8001bfe:	4a0c      	ldr	r2, [pc, #48]	; (8001c30 <HAL_TIM_Base_MspInit+0x114>)
 8001c00:	f043 0304 	orr.w	r3, r3, #4
 8001c04:	61d3      	str	r3, [r2, #28]
 8001c06:	4b0a      	ldr	r3, [pc, #40]	; (8001c30 <HAL_TIM_Base_MspInit+0x114>)
 8001c08:	69db      	ldr	r3, [r3, #28]
 8001c0a:	f003 0304 	and.w	r3, r3, #4
 8001c0e:	60bb      	str	r3, [r7, #8]
 8001c10:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001c12:	2200      	movs	r2, #0
 8001c14:	2100      	movs	r1, #0
 8001c16:	201e      	movs	r0, #30
 8001c18:	f000 fa6f 	bl	80020fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001c1c:	201e      	movs	r0, #30
 8001c1e:	f000 fa88 	bl	8002132 <HAL_NVIC_EnableIRQ>
}
 8001c22:	bf00      	nop
 8001c24:	3718      	adds	r7, #24
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	40012c00 	.word	0x40012c00
 8001c30:	40021000 	.word	0x40021000
 8001c34:	40000400 	.word	0x40000400
 8001c38:	40000800 	.word	0x40000800

08001c3c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b08a      	sub	sp, #40	; 0x28
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c44:	f107 0318 	add.w	r3, r7, #24
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	605a      	str	r2, [r3, #4]
 8001c4e:	609a      	str	r2, [r3, #8]
 8001c50:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c5a:	d118      	bne.n	8001c8e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c5c:	4b38      	ldr	r3, [pc, #224]	; (8001d40 <HAL_TIM_MspPostInit+0x104>)
 8001c5e:	699b      	ldr	r3, [r3, #24]
 8001c60:	4a37      	ldr	r2, [pc, #220]	; (8001d40 <HAL_TIM_MspPostInit+0x104>)
 8001c62:	f043 0304 	orr.w	r3, r3, #4
 8001c66:	6193      	str	r3, [r2, #24]
 8001c68:	4b35      	ldr	r3, [pc, #212]	; (8001d40 <HAL_TIM_MspPostInit+0x104>)
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	f003 0304 	and.w	r3, r3, #4
 8001c70:	617b      	str	r3, [r7, #20]
 8001c72:	697b      	ldr	r3, [r7, #20]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001c74:	230f      	movs	r3, #15
 8001c76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c78:	2302      	movs	r3, #2
 8001c7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c80:	f107 0318 	add.w	r3, r7, #24
 8001c84:	4619      	mov	r1, r3
 8001c86:	482f      	ldr	r0, [pc, #188]	; (8001d44 <HAL_TIM_MspPostInit+0x108>)
 8001c88:	f000 fa6e 	bl	8002168 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001c8c:	e053      	b.n	8001d36 <HAL_TIM_MspPostInit+0xfa>
  else if(htim->Instance==TIM3)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a2d      	ldr	r2, [pc, #180]	; (8001d48 <HAL_TIM_MspPostInit+0x10c>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d130      	bne.n	8001cfa <HAL_TIM_MspPostInit+0xbe>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c98:	4b29      	ldr	r3, [pc, #164]	; (8001d40 <HAL_TIM_MspPostInit+0x104>)
 8001c9a:	699b      	ldr	r3, [r3, #24]
 8001c9c:	4a28      	ldr	r2, [pc, #160]	; (8001d40 <HAL_TIM_MspPostInit+0x104>)
 8001c9e:	f043 0304 	orr.w	r3, r3, #4
 8001ca2:	6193      	str	r3, [r2, #24]
 8001ca4:	4b26      	ldr	r3, [pc, #152]	; (8001d40 <HAL_TIM_MspPostInit+0x104>)
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	f003 0304 	and.w	r3, r3, #4
 8001cac:	613b      	str	r3, [r7, #16]
 8001cae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cb0:	4b23      	ldr	r3, [pc, #140]	; (8001d40 <HAL_TIM_MspPostInit+0x104>)
 8001cb2:	699b      	ldr	r3, [r3, #24]
 8001cb4:	4a22      	ldr	r2, [pc, #136]	; (8001d40 <HAL_TIM_MspPostInit+0x104>)
 8001cb6:	f043 0308 	orr.w	r3, r3, #8
 8001cba:	6193      	str	r3, [r2, #24]
 8001cbc:	4b20      	ldr	r3, [pc, #128]	; (8001d40 <HAL_TIM_MspPostInit+0x104>)
 8001cbe:	699b      	ldr	r3, [r3, #24]
 8001cc0:	f003 0308 	and.w	r3, r3, #8
 8001cc4:	60fb      	str	r3, [r7, #12]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001cc8:	23c0      	movs	r3, #192	; 0xc0
 8001cca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ccc:	2302      	movs	r3, #2
 8001cce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd4:	f107 0318 	add.w	r3, r7, #24
 8001cd8:	4619      	mov	r1, r3
 8001cda:	481a      	ldr	r0, [pc, #104]	; (8001d44 <HAL_TIM_MspPostInit+0x108>)
 8001cdc:	f000 fa44 	bl	8002168 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce8:	2302      	movs	r3, #2
 8001cea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cec:	f107 0318 	add.w	r3, r7, #24
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	4816      	ldr	r0, [pc, #88]	; (8001d4c <HAL_TIM_MspPostInit+0x110>)
 8001cf4:	f000 fa38 	bl	8002168 <HAL_GPIO_Init>
}
 8001cf8:	e01d      	b.n	8001d36 <HAL_TIM_MspPostInit+0xfa>
  else if(htim->Instance==TIM4)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a14      	ldr	r2, [pc, #80]	; (8001d50 <HAL_TIM_MspPostInit+0x114>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d118      	bne.n	8001d36 <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d04:	4b0e      	ldr	r3, [pc, #56]	; (8001d40 <HAL_TIM_MspPostInit+0x104>)
 8001d06:	699b      	ldr	r3, [r3, #24]
 8001d08:	4a0d      	ldr	r2, [pc, #52]	; (8001d40 <HAL_TIM_MspPostInit+0x104>)
 8001d0a:	f043 0308 	orr.w	r3, r3, #8
 8001d0e:	6193      	str	r3, [r2, #24]
 8001d10:	4b0b      	ldr	r3, [pc, #44]	; (8001d40 <HAL_TIM_MspPostInit+0x104>)
 8001d12:	699b      	ldr	r3, [r3, #24]
 8001d14:	f003 0308 	and.w	r3, r3, #8
 8001d18:	60bb      	str	r3, [r7, #8]
 8001d1a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001d1c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001d20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d22:	2302      	movs	r3, #2
 8001d24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d26:	2302      	movs	r3, #2
 8001d28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d2a:	f107 0318 	add.w	r3, r7, #24
 8001d2e:	4619      	mov	r1, r3
 8001d30:	4806      	ldr	r0, [pc, #24]	; (8001d4c <HAL_TIM_MspPostInit+0x110>)
 8001d32:	f000 fa19 	bl	8002168 <HAL_GPIO_Init>
}
 8001d36:	bf00      	nop
 8001d38:	3728      	adds	r7, #40	; 0x28
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	40021000 	.word	0x40021000
 8001d44:	40010800 	.word	0x40010800
 8001d48:	40000400 	.word	0x40000400
 8001d4c:	40010c00 	.word	0x40010c00
 8001d50:	40000800 	.word	0x40000800

08001d54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d58:	e7fe      	b.n	8001d58 <NMI_Handler+0x4>

08001d5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d5e:	e7fe      	b.n	8001d5e <HardFault_Handler+0x4>

08001d60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d64:	e7fe      	b.n	8001d64 <MemManage_Handler+0x4>

08001d66 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d66:	b480      	push	{r7}
 8001d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d6a:	e7fe      	b.n	8001d6a <BusFault_Handler+0x4>

08001d6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d70:	e7fe      	b.n	8001d70 <UsageFault_Handler+0x4>

08001d72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d72:	b480      	push	{r7}
 8001d74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d76:	bf00      	nop
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bc80      	pop	{r7}
 8001d7c:	4770      	bx	lr

08001d7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d82:	bf00      	nop
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bc80      	pop	{r7}
 8001d88:	4770      	bx	lr

08001d8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d8e:	bf00      	nop
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bc80      	pop	{r7}
 8001d94:	4770      	bx	lr

08001d96 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d9a:	f000 f8bb 	bl	8001f14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d9e:	bf00      	nop
 8001da0:	bd80      	pop	{r7, pc}
	...

08001da4 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001da8:	4802      	ldr	r0, [pc, #8]	; (8001db4 <TIM1_BRK_IRQHandler+0x10>)
 8001daa:	f001 f90d 	bl	8002fc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8001dae:	bf00      	nop
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	20000078 	.word	0x20000078

08001db8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001dbc:	4802      	ldr	r0, [pc, #8]	; (8001dc8 <TIM1_UP_IRQHandler+0x10>)
 8001dbe:	f001 f903 	bl	8002fc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001dc2:	bf00      	nop
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	20000078 	.word	0x20000078

08001dcc <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001dd0:	4802      	ldr	r0, [pc, #8]	; (8001ddc <TIM1_TRG_COM_IRQHandler+0x10>)
 8001dd2:	f001 f8f9 	bl	8002fc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8001dd6:	bf00      	nop
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	20000078 	.word	0x20000078

08001de0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001de4:	4802      	ldr	r0, [pc, #8]	; (8001df0 <TIM1_CC_IRQHandler+0x10>)
 8001de6:	f001 f8ef 	bl	8002fc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001dea:	bf00      	nop
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	20000078 	.word	0x20000078

08001df4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001df8:	4802      	ldr	r0, [pc, #8]	; (8001e04 <TIM2_IRQHandler+0x10>)
 8001dfa:	f001 f8e5 	bl	8002fc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001dfe:	bf00      	nop
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	200000c0 	.word	0x200000c0

08001e08 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001e0c:	4802      	ldr	r0, [pc, #8]	; (8001e18 <TIM3_IRQHandler+0x10>)
 8001e0e:	f001 f8db 	bl	8002fc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001e12:	bf00      	nop
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	20000108 	.word	0x20000108

08001e1c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001e20:	4802      	ldr	r0, [pc, #8]	; (8001e2c <TIM4_IRQHandler+0x10>)
 8001e22:	f001 f8d1 	bl	8002fc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001e26:	bf00      	nop
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	20000150 	.word	0x20000150

08001e30 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e34:	bf00      	nop
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bc80      	pop	{r7}
 8001e3a:	4770      	bx	lr

08001e3c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e3c:	f7ff fff8 	bl	8001e30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e40:	480b      	ldr	r0, [pc, #44]	; (8001e70 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001e42:	490c      	ldr	r1, [pc, #48]	; (8001e74 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001e44:	4a0c      	ldr	r2, [pc, #48]	; (8001e78 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001e46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e48:	e002      	b.n	8001e50 <LoopCopyDataInit>

08001e4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e4e:	3304      	adds	r3, #4

08001e50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e54:	d3f9      	bcc.n	8001e4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e56:	4a09      	ldr	r2, [pc, #36]	; (8001e7c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001e58:	4c09      	ldr	r4, [pc, #36]	; (8001e80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e5c:	e001      	b.n	8001e62 <LoopFillZerobss>

08001e5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e60:	3204      	adds	r2, #4

08001e62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e64:	d3fb      	bcc.n	8001e5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e66:	f001 fe81 	bl	8003b6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e6a:	f7fe fd07 	bl	800087c <main>
  bx lr
 8001e6e:	4770      	bx	lr
  ldr r0, =_sdata
 8001e70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e74:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8001e78:	08003bf8 	.word	0x08003bf8
  ldr r2, =_sbss
 8001e7c:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8001e80:	20000448 	.word	0x20000448

08001e84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e84:	e7fe      	b.n	8001e84 <ADC1_2_IRQHandler>
	...

08001e88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e8c:	4b08      	ldr	r3, [pc, #32]	; (8001eb0 <HAL_Init+0x28>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a07      	ldr	r2, [pc, #28]	; (8001eb0 <HAL_Init+0x28>)
 8001e92:	f043 0310 	orr.w	r3, r3, #16
 8001e96:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e98:	2003      	movs	r0, #3
 8001e9a:	f000 f923 	bl	80020e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e9e:	200f      	movs	r0, #15
 8001ea0:	f000 f808 	bl	8001eb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ea4:	f7ff fe08 	bl	8001ab8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	40022000 	.word	0x40022000

08001eb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ebc:	4b12      	ldr	r3, [pc, #72]	; (8001f08 <HAL_InitTick+0x54>)
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	4b12      	ldr	r3, [pc, #72]	; (8001f0c <HAL_InitTick+0x58>)
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eca:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f000 f93b 	bl	800214e <HAL_SYSTICK_Config>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e00e      	b.n	8001f00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2b0f      	cmp	r3, #15
 8001ee6:	d80a      	bhi.n	8001efe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ee8:	2200      	movs	r2, #0
 8001eea:	6879      	ldr	r1, [r7, #4]
 8001eec:	f04f 30ff 	mov.w	r0, #4294967295
 8001ef0:	f000 f903 	bl	80020fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ef4:	4a06      	ldr	r2, [pc, #24]	; (8001f10 <HAL_InitTick+0x5c>)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001efa:	2300      	movs	r3, #0
 8001efc:	e000      	b.n	8001f00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3708      	adds	r7, #8
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	20000010 	.word	0x20000010
 8001f0c:	20000018 	.word	0x20000018
 8001f10:	20000014 	.word	0x20000014

08001f14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f18:	4b05      	ldr	r3, [pc, #20]	; (8001f30 <HAL_IncTick+0x1c>)
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	4b05      	ldr	r3, [pc, #20]	; (8001f34 <HAL_IncTick+0x20>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4413      	add	r3, r2
 8001f24:	4a03      	ldr	r2, [pc, #12]	; (8001f34 <HAL_IncTick+0x20>)
 8001f26:	6013      	str	r3, [r2, #0]
}
 8001f28:	bf00      	nop
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bc80      	pop	{r7}
 8001f2e:	4770      	bx	lr
 8001f30:	20000018 	.word	0x20000018
 8001f34:	20000444 	.word	0x20000444

08001f38 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f3c:	4b02      	ldr	r3, [pc, #8]	; (8001f48 <HAL_GetTick+0x10>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bc80      	pop	{r7}
 8001f46:	4770      	bx	lr
 8001f48:	20000444 	.word	0x20000444

08001f4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b085      	sub	sp, #20
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f003 0307 	and.w	r3, r3, #7
 8001f5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f5c:	4b0c      	ldr	r3, [pc, #48]	; (8001f90 <__NVIC_SetPriorityGrouping+0x44>)
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f62:	68ba      	ldr	r2, [r7, #8]
 8001f64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f68:	4013      	ands	r3, r2
 8001f6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f7e:	4a04      	ldr	r2, [pc, #16]	; (8001f90 <__NVIC_SetPriorityGrouping+0x44>)
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	60d3      	str	r3, [r2, #12]
}
 8001f84:	bf00      	nop
 8001f86:	3714      	adds	r7, #20
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bc80      	pop	{r7}
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	e000ed00 	.word	0xe000ed00

08001f94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f98:	4b04      	ldr	r3, [pc, #16]	; (8001fac <__NVIC_GetPriorityGrouping+0x18>)
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	0a1b      	lsrs	r3, r3, #8
 8001f9e:	f003 0307 	and.w	r3, r3, #7
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bc80      	pop	{r7}
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	e000ed00 	.word	0xe000ed00

08001fb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	db0b      	blt.n	8001fda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fc2:	79fb      	ldrb	r3, [r7, #7]
 8001fc4:	f003 021f 	and.w	r2, r3, #31
 8001fc8:	4906      	ldr	r1, [pc, #24]	; (8001fe4 <__NVIC_EnableIRQ+0x34>)
 8001fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fce:	095b      	lsrs	r3, r3, #5
 8001fd0:	2001      	movs	r0, #1
 8001fd2:	fa00 f202 	lsl.w	r2, r0, r2
 8001fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fda:	bf00      	nop
 8001fdc:	370c      	adds	r7, #12
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bc80      	pop	{r7}
 8001fe2:	4770      	bx	lr
 8001fe4:	e000e100 	.word	0xe000e100

08001fe8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	4603      	mov	r3, r0
 8001ff0:	6039      	str	r1, [r7, #0]
 8001ff2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ff4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	db0a      	blt.n	8002012 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	b2da      	uxtb	r2, r3
 8002000:	490c      	ldr	r1, [pc, #48]	; (8002034 <__NVIC_SetPriority+0x4c>)
 8002002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002006:	0112      	lsls	r2, r2, #4
 8002008:	b2d2      	uxtb	r2, r2
 800200a:	440b      	add	r3, r1
 800200c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002010:	e00a      	b.n	8002028 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	b2da      	uxtb	r2, r3
 8002016:	4908      	ldr	r1, [pc, #32]	; (8002038 <__NVIC_SetPriority+0x50>)
 8002018:	79fb      	ldrb	r3, [r7, #7]
 800201a:	f003 030f 	and.w	r3, r3, #15
 800201e:	3b04      	subs	r3, #4
 8002020:	0112      	lsls	r2, r2, #4
 8002022:	b2d2      	uxtb	r2, r2
 8002024:	440b      	add	r3, r1
 8002026:	761a      	strb	r2, [r3, #24]
}
 8002028:	bf00      	nop
 800202a:	370c      	adds	r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	bc80      	pop	{r7}
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	e000e100 	.word	0xe000e100
 8002038:	e000ed00 	.word	0xe000ed00

0800203c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800203c:	b480      	push	{r7}
 800203e:	b089      	sub	sp, #36	; 0x24
 8002040:	af00      	add	r7, sp, #0
 8002042:	60f8      	str	r0, [r7, #12]
 8002044:	60b9      	str	r1, [r7, #8]
 8002046:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f003 0307 	and.w	r3, r3, #7
 800204e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	f1c3 0307 	rsb	r3, r3, #7
 8002056:	2b04      	cmp	r3, #4
 8002058:	bf28      	it	cs
 800205a:	2304      	movcs	r3, #4
 800205c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	3304      	adds	r3, #4
 8002062:	2b06      	cmp	r3, #6
 8002064:	d902      	bls.n	800206c <NVIC_EncodePriority+0x30>
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	3b03      	subs	r3, #3
 800206a:	e000      	b.n	800206e <NVIC_EncodePriority+0x32>
 800206c:	2300      	movs	r3, #0
 800206e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002070:	f04f 32ff 	mov.w	r2, #4294967295
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	fa02 f303 	lsl.w	r3, r2, r3
 800207a:	43da      	mvns	r2, r3
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	401a      	ands	r2, r3
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002084:	f04f 31ff 	mov.w	r1, #4294967295
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	fa01 f303 	lsl.w	r3, r1, r3
 800208e:	43d9      	mvns	r1, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002094:	4313      	orrs	r3, r2
         );
}
 8002096:	4618      	mov	r0, r3
 8002098:	3724      	adds	r7, #36	; 0x24
 800209a:	46bd      	mov	sp, r7
 800209c:	bc80      	pop	{r7}
 800209e:	4770      	bx	lr

080020a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	3b01      	subs	r3, #1
 80020ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020b0:	d301      	bcc.n	80020b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020b2:	2301      	movs	r3, #1
 80020b4:	e00f      	b.n	80020d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020b6:	4a0a      	ldr	r2, [pc, #40]	; (80020e0 <SysTick_Config+0x40>)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	3b01      	subs	r3, #1
 80020bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020be:	210f      	movs	r1, #15
 80020c0:	f04f 30ff 	mov.w	r0, #4294967295
 80020c4:	f7ff ff90 	bl	8001fe8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020c8:	4b05      	ldr	r3, [pc, #20]	; (80020e0 <SysTick_Config+0x40>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020ce:	4b04      	ldr	r3, [pc, #16]	; (80020e0 <SysTick_Config+0x40>)
 80020d0:	2207      	movs	r2, #7
 80020d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	e000e010 	.word	0xe000e010

080020e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f7ff ff2d 	bl	8001f4c <__NVIC_SetPriorityGrouping>
}
 80020f2:	bf00      	nop
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b086      	sub	sp, #24
 80020fe:	af00      	add	r7, sp, #0
 8002100:	4603      	mov	r3, r0
 8002102:	60b9      	str	r1, [r7, #8]
 8002104:	607a      	str	r2, [r7, #4]
 8002106:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002108:	2300      	movs	r3, #0
 800210a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800210c:	f7ff ff42 	bl	8001f94 <__NVIC_GetPriorityGrouping>
 8002110:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	68b9      	ldr	r1, [r7, #8]
 8002116:	6978      	ldr	r0, [r7, #20]
 8002118:	f7ff ff90 	bl	800203c <NVIC_EncodePriority>
 800211c:	4602      	mov	r2, r0
 800211e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002122:	4611      	mov	r1, r2
 8002124:	4618      	mov	r0, r3
 8002126:	f7ff ff5f 	bl	8001fe8 <__NVIC_SetPriority>
}
 800212a:	bf00      	nop
 800212c:	3718      	adds	r7, #24
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002132:	b580      	push	{r7, lr}
 8002134:	b082      	sub	sp, #8
 8002136:	af00      	add	r7, sp, #0
 8002138:	4603      	mov	r3, r0
 800213a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800213c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002140:	4618      	mov	r0, r3
 8002142:	f7ff ff35 	bl	8001fb0 <__NVIC_EnableIRQ>
}
 8002146:	bf00      	nop
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}

0800214e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800214e:	b580      	push	{r7, lr}
 8002150:	b082      	sub	sp, #8
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f7ff ffa2 	bl	80020a0 <SysTick_Config>
 800215c:	4603      	mov	r3, r0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
	...

08002168 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002168:	b480      	push	{r7}
 800216a:	b08b      	sub	sp, #44	; 0x2c
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002172:	2300      	movs	r3, #0
 8002174:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002176:	2300      	movs	r3, #0
 8002178:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800217a:	e169      	b.n	8002450 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800217c:	2201      	movs	r2, #1
 800217e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002180:	fa02 f303 	lsl.w	r3, r2, r3
 8002184:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	69fa      	ldr	r2, [r7, #28]
 800218c:	4013      	ands	r3, r2
 800218e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	429a      	cmp	r2, r3
 8002196:	f040 8158 	bne.w	800244a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	4a9a      	ldr	r2, [pc, #616]	; (8002408 <HAL_GPIO_Init+0x2a0>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d05e      	beq.n	8002262 <HAL_GPIO_Init+0xfa>
 80021a4:	4a98      	ldr	r2, [pc, #608]	; (8002408 <HAL_GPIO_Init+0x2a0>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d875      	bhi.n	8002296 <HAL_GPIO_Init+0x12e>
 80021aa:	4a98      	ldr	r2, [pc, #608]	; (800240c <HAL_GPIO_Init+0x2a4>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d058      	beq.n	8002262 <HAL_GPIO_Init+0xfa>
 80021b0:	4a96      	ldr	r2, [pc, #600]	; (800240c <HAL_GPIO_Init+0x2a4>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d86f      	bhi.n	8002296 <HAL_GPIO_Init+0x12e>
 80021b6:	4a96      	ldr	r2, [pc, #600]	; (8002410 <HAL_GPIO_Init+0x2a8>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d052      	beq.n	8002262 <HAL_GPIO_Init+0xfa>
 80021bc:	4a94      	ldr	r2, [pc, #592]	; (8002410 <HAL_GPIO_Init+0x2a8>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d869      	bhi.n	8002296 <HAL_GPIO_Init+0x12e>
 80021c2:	4a94      	ldr	r2, [pc, #592]	; (8002414 <HAL_GPIO_Init+0x2ac>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d04c      	beq.n	8002262 <HAL_GPIO_Init+0xfa>
 80021c8:	4a92      	ldr	r2, [pc, #584]	; (8002414 <HAL_GPIO_Init+0x2ac>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d863      	bhi.n	8002296 <HAL_GPIO_Init+0x12e>
 80021ce:	4a92      	ldr	r2, [pc, #584]	; (8002418 <HAL_GPIO_Init+0x2b0>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d046      	beq.n	8002262 <HAL_GPIO_Init+0xfa>
 80021d4:	4a90      	ldr	r2, [pc, #576]	; (8002418 <HAL_GPIO_Init+0x2b0>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d85d      	bhi.n	8002296 <HAL_GPIO_Init+0x12e>
 80021da:	2b12      	cmp	r3, #18
 80021dc:	d82a      	bhi.n	8002234 <HAL_GPIO_Init+0xcc>
 80021de:	2b12      	cmp	r3, #18
 80021e0:	d859      	bhi.n	8002296 <HAL_GPIO_Init+0x12e>
 80021e2:	a201      	add	r2, pc, #4	; (adr r2, 80021e8 <HAL_GPIO_Init+0x80>)
 80021e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021e8:	08002263 	.word	0x08002263
 80021ec:	0800223d 	.word	0x0800223d
 80021f0:	0800224f 	.word	0x0800224f
 80021f4:	08002291 	.word	0x08002291
 80021f8:	08002297 	.word	0x08002297
 80021fc:	08002297 	.word	0x08002297
 8002200:	08002297 	.word	0x08002297
 8002204:	08002297 	.word	0x08002297
 8002208:	08002297 	.word	0x08002297
 800220c:	08002297 	.word	0x08002297
 8002210:	08002297 	.word	0x08002297
 8002214:	08002297 	.word	0x08002297
 8002218:	08002297 	.word	0x08002297
 800221c:	08002297 	.word	0x08002297
 8002220:	08002297 	.word	0x08002297
 8002224:	08002297 	.word	0x08002297
 8002228:	08002297 	.word	0x08002297
 800222c:	08002245 	.word	0x08002245
 8002230:	08002259 	.word	0x08002259
 8002234:	4a79      	ldr	r2, [pc, #484]	; (800241c <HAL_GPIO_Init+0x2b4>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d013      	beq.n	8002262 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800223a:	e02c      	b.n	8002296 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	623b      	str	r3, [r7, #32]
          break;
 8002242:	e029      	b.n	8002298 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	3304      	adds	r3, #4
 800224a:	623b      	str	r3, [r7, #32]
          break;
 800224c:	e024      	b.n	8002298 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	3308      	adds	r3, #8
 8002254:	623b      	str	r3, [r7, #32]
          break;
 8002256:	e01f      	b.n	8002298 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	330c      	adds	r3, #12
 800225e:	623b      	str	r3, [r7, #32]
          break;
 8002260:	e01a      	b.n	8002298 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d102      	bne.n	8002270 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800226a:	2304      	movs	r3, #4
 800226c:	623b      	str	r3, [r7, #32]
          break;
 800226e:	e013      	b.n	8002298 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	2b01      	cmp	r3, #1
 8002276:	d105      	bne.n	8002284 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002278:	2308      	movs	r3, #8
 800227a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	69fa      	ldr	r2, [r7, #28]
 8002280:	611a      	str	r2, [r3, #16]
          break;
 8002282:	e009      	b.n	8002298 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002284:	2308      	movs	r3, #8
 8002286:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	69fa      	ldr	r2, [r7, #28]
 800228c:	615a      	str	r2, [r3, #20]
          break;
 800228e:	e003      	b.n	8002298 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002290:	2300      	movs	r3, #0
 8002292:	623b      	str	r3, [r7, #32]
          break;
 8002294:	e000      	b.n	8002298 <HAL_GPIO_Init+0x130>
          break;
 8002296:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	2bff      	cmp	r3, #255	; 0xff
 800229c:	d801      	bhi.n	80022a2 <HAL_GPIO_Init+0x13a>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	e001      	b.n	80022a6 <HAL_GPIO_Init+0x13e>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	3304      	adds	r3, #4
 80022a6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	2bff      	cmp	r3, #255	; 0xff
 80022ac:	d802      	bhi.n	80022b4 <HAL_GPIO_Init+0x14c>
 80022ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	e002      	b.n	80022ba <HAL_GPIO_Init+0x152>
 80022b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b6:	3b08      	subs	r3, #8
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	210f      	movs	r1, #15
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	fa01 f303 	lsl.w	r3, r1, r3
 80022c8:	43db      	mvns	r3, r3
 80022ca:	401a      	ands	r2, r3
 80022cc:	6a39      	ldr	r1, [r7, #32]
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	fa01 f303 	lsl.w	r3, r1, r3
 80022d4:	431a      	orrs	r2, r3
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	f000 80b1 	beq.w	800244a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80022e8:	4b4d      	ldr	r3, [pc, #308]	; (8002420 <HAL_GPIO_Init+0x2b8>)
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	4a4c      	ldr	r2, [pc, #304]	; (8002420 <HAL_GPIO_Init+0x2b8>)
 80022ee:	f043 0301 	orr.w	r3, r3, #1
 80022f2:	6193      	str	r3, [r2, #24]
 80022f4:	4b4a      	ldr	r3, [pc, #296]	; (8002420 <HAL_GPIO_Init+0x2b8>)
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	f003 0301 	and.w	r3, r3, #1
 80022fc:	60bb      	str	r3, [r7, #8]
 80022fe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002300:	4a48      	ldr	r2, [pc, #288]	; (8002424 <HAL_GPIO_Init+0x2bc>)
 8002302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002304:	089b      	lsrs	r3, r3, #2
 8002306:	3302      	adds	r3, #2
 8002308:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800230c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800230e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002310:	f003 0303 	and.w	r3, r3, #3
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	220f      	movs	r2, #15
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	43db      	mvns	r3, r3
 800231e:	68fa      	ldr	r2, [r7, #12]
 8002320:	4013      	ands	r3, r2
 8002322:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	4a40      	ldr	r2, [pc, #256]	; (8002428 <HAL_GPIO_Init+0x2c0>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d013      	beq.n	8002354 <HAL_GPIO_Init+0x1ec>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	4a3f      	ldr	r2, [pc, #252]	; (800242c <HAL_GPIO_Init+0x2c4>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d00d      	beq.n	8002350 <HAL_GPIO_Init+0x1e8>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	4a3e      	ldr	r2, [pc, #248]	; (8002430 <HAL_GPIO_Init+0x2c8>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d007      	beq.n	800234c <HAL_GPIO_Init+0x1e4>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	4a3d      	ldr	r2, [pc, #244]	; (8002434 <HAL_GPIO_Init+0x2cc>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d101      	bne.n	8002348 <HAL_GPIO_Init+0x1e0>
 8002344:	2303      	movs	r3, #3
 8002346:	e006      	b.n	8002356 <HAL_GPIO_Init+0x1ee>
 8002348:	2304      	movs	r3, #4
 800234a:	e004      	b.n	8002356 <HAL_GPIO_Init+0x1ee>
 800234c:	2302      	movs	r3, #2
 800234e:	e002      	b.n	8002356 <HAL_GPIO_Init+0x1ee>
 8002350:	2301      	movs	r3, #1
 8002352:	e000      	b.n	8002356 <HAL_GPIO_Init+0x1ee>
 8002354:	2300      	movs	r3, #0
 8002356:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002358:	f002 0203 	and.w	r2, r2, #3
 800235c:	0092      	lsls	r2, r2, #2
 800235e:	4093      	lsls	r3, r2
 8002360:	68fa      	ldr	r2, [r7, #12]
 8002362:	4313      	orrs	r3, r2
 8002364:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002366:	492f      	ldr	r1, [pc, #188]	; (8002424 <HAL_GPIO_Init+0x2bc>)
 8002368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236a:	089b      	lsrs	r3, r3, #2
 800236c:	3302      	adds	r3, #2
 800236e:	68fa      	ldr	r2, [r7, #12]
 8002370:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d006      	beq.n	800238e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002380:	4b2d      	ldr	r3, [pc, #180]	; (8002438 <HAL_GPIO_Init+0x2d0>)
 8002382:	689a      	ldr	r2, [r3, #8]
 8002384:	492c      	ldr	r1, [pc, #176]	; (8002438 <HAL_GPIO_Init+0x2d0>)
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	4313      	orrs	r3, r2
 800238a:	608b      	str	r3, [r1, #8]
 800238c:	e006      	b.n	800239c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800238e:	4b2a      	ldr	r3, [pc, #168]	; (8002438 <HAL_GPIO_Init+0x2d0>)
 8002390:	689a      	ldr	r2, [r3, #8]
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	43db      	mvns	r3, r3
 8002396:	4928      	ldr	r1, [pc, #160]	; (8002438 <HAL_GPIO_Init+0x2d0>)
 8002398:	4013      	ands	r3, r2
 800239a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d006      	beq.n	80023b6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80023a8:	4b23      	ldr	r3, [pc, #140]	; (8002438 <HAL_GPIO_Init+0x2d0>)
 80023aa:	68da      	ldr	r2, [r3, #12]
 80023ac:	4922      	ldr	r1, [pc, #136]	; (8002438 <HAL_GPIO_Init+0x2d0>)
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	60cb      	str	r3, [r1, #12]
 80023b4:	e006      	b.n	80023c4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80023b6:	4b20      	ldr	r3, [pc, #128]	; (8002438 <HAL_GPIO_Init+0x2d0>)
 80023b8:	68da      	ldr	r2, [r3, #12]
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	43db      	mvns	r3, r3
 80023be:	491e      	ldr	r1, [pc, #120]	; (8002438 <HAL_GPIO_Init+0x2d0>)
 80023c0:	4013      	ands	r3, r2
 80023c2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d006      	beq.n	80023de <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80023d0:	4b19      	ldr	r3, [pc, #100]	; (8002438 <HAL_GPIO_Init+0x2d0>)
 80023d2:	685a      	ldr	r2, [r3, #4]
 80023d4:	4918      	ldr	r1, [pc, #96]	; (8002438 <HAL_GPIO_Init+0x2d0>)
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	4313      	orrs	r3, r2
 80023da:	604b      	str	r3, [r1, #4]
 80023dc:	e006      	b.n	80023ec <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80023de:	4b16      	ldr	r3, [pc, #88]	; (8002438 <HAL_GPIO_Init+0x2d0>)
 80023e0:	685a      	ldr	r2, [r3, #4]
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	43db      	mvns	r3, r3
 80023e6:	4914      	ldr	r1, [pc, #80]	; (8002438 <HAL_GPIO_Init+0x2d0>)
 80023e8:	4013      	ands	r3, r2
 80023ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d021      	beq.n	800243c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80023f8:	4b0f      	ldr	r3, [pc, #60]	; (8002438 <HAL_GPIO_Init+0x2d0>)
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	490e      	ldr	r1, [pc, #56]	; (8002438 <HAL_GPIO_Init+0x2d0>)
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	4313      	orrs	r3, r2
 8002402:	600b      	str	r3, [r1, #0]
 8002404:	e021      	b.n	800244a <HAL_GPIO_Init+0x2e2>
 8002406:	bf00      	nop
 8002408:	10320000 	.word	0x10320000
 800240c:	10310000 	.word	0x10310000
 8002410:	10220000 	.word	0x10220000
 8002414:	10210000 	.word	0x10210000
 8002418:	10120000 	.word	0x10120000
 800241c:	10110000 	.word	0x10110000
 8002420:	40021000 	.word	0x40021000
 8002424:	40010000 	.word	0x40010000
 8002428:	40010800 	.word	0x40010800
 800242c:	40010c00 	.word	0x40010c00
 8002430:	40011000 	.word	0x40011000
 8002434:	40011400 	.word	0x40011400
 8002438:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800243c:	4b0b      	ldr	r3, [pc, #44]	; (800246c <HAL_GPIO_Init+0x304>)
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	43db      	mvns	r3, r3
 8002444:	4909      	ldr	r1, [pc, #36]	; (800246c <HAL_GPIO_Init+0x304>)
 8002446:	4013      	ands	r3, r2
 8002448:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800244a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244c:	3301      	adds	r3, #1
 800244e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002456:	fa22 f303 	lsr.w	r3, r2, r3
 800245a:	2b00      	cmp	r3, #0
 800245c:	f47f ae8e 	bne.w	800217c <HAL_GPIO_Init+0x14>
  }
}
 8002460:	bf00      	nop
 8002462:	bf00      	nop
 8002464:	372c      	adds	r7, #44	; 0x2c
 8002466:	46bd      	mov	sp, r7
 8002468:	bc80      	pop	{r7}
 800246a:	4770      	bx	lr
 800246c:	40010400 	.word	0x40010400

08002470 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	460b      	mov	r3, r1
 800247a:	807b      	strh	r3, [r7, #2]
 800247c:	4613      	mov	r3, r2
 800247e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002480:	787b      	ldrb	r3, [r7, #1]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d003      	beq.n	800248e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002486:	887a      	ldrh	r2, [r7, #2]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800248c:	e003      	b.n	8002496 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800248e:	887b      	ldrh	r3, [r7, #2]
 8002490:	041a      	lsls	r2, r3, #16
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	611a      	str	r2, [r3, #16]
}
 8002496:	bf00      	nop
 8002498:	370c      	adds	r7, #12
 800249a:	46bd      	mov	sp, r7
 800249c:	bc80      	pop	{r7}
 800249e:	4770      	bx	lr

080024a0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b085      	sub	sp, #20
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	460b      	mov	r3, r1
 80024aa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80024b2:	887a      	ldrh	r2, [r7, #2]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	4013      	ands	r3, r2
 80024b8:	041a      	lsls	r2, r3, #16
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	43d9      	mvns	r1, r3
 80024be:	887b      	ldrh	r3, [r7, #2]
 80024c0:	400b      	ands	r3, r1
 80024c2:	431a      	orrs	r2, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	611a      	str	r2, [r3, #16]
}
 80024c8:	bf00      	nop
 80024ca:	3714      	adds	r7, #20
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bc80      	pop	{r7}
 80024d0:	4770      	bx	lr
	...

080024d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b086      	sub	sp, #24
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d101      	bne.n	80024e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e272      	b.n	80029cc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0301 	and.w	r3, r3, #1
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	f000 8087 	beq.w	8002602 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024f4:	4b92      	ldr	r3, [pc, #584]	; (8002740 <HAL_RCC_OscConfig+0x26c>)
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f003 030c 	and.w	r3, r3, #12
 80024fc:	2b04      	cmp	r3, #4
 80024fe:	d00c      	beq.n	800251a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002500:	4b8f      	ldr	r3, [pc, #572]	; (8002740 <HAL_RCC_OscConfig+0x26c>)
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f003 030c 	and.w	r3, r3, #12
 8002508:	2b08      	cmp	r3, #8
 800250a:	d112      	bne.n	8002532 <HAL_RCC_OscConfig+0x5e>
 800250c:	4b8c      	ldr	r3, [pc, #560]	; (8002740 <HAL_RCC_OscConfig+0x26c>)
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002514:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002518:	d10b      	bne.n	8002532 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800251a:	4b89      	ldr	r3, [pc, #548]	; (8002740 <HAL_RCC_OscConfig+0x26c>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d06c      	beq.n	8002600 <HAL_RCC_OscConfig+0x12c>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d168      	bne.n	8002600 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e24c      	b.n	80029cc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800253a:	d106      	bne.n	800254a <HAL_RCC_OscConfig+0x76>
 800253c:	4b80      	ldr	r3, [pc, #512]	; (8002740 <HAL_RCC_OscConfig+0x26c>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a7f      	ldr	r2, [pc, #508]	; (8002740 <HAL_RCC_OscConfig+0x26c>)
 8002542:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002546:	6013      	str	r3, [r2, #0]
 8002548:	e02e      	b.n	80025a8 <HAL_RCC_OscConfig+0xd4>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d10c      	bne.n	800256c <HAL_RCC_OscConfig+0x98>
 8002552:	4b7b      	ldr	r3, [pc, #492]	; (8002740 <HAL_RCC_OscConfig+0x26c>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a7a      	ldr	r2, [pc, #488]	; (8002740 <HAL_RCC_OscConfig+0x26c>)
 8002558:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800255c:	6013      	str	r3, [r2, #0]
 800255e:	4b78      	ldr	r3, [pc, #480]	; (8002740 <HAL_RCC_OscConfig+0x26c>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a77      	ldr	r2, [pc, #476]	; (8002740 <HAL_RCC_OscConfig+0x26c>)
 8002564:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002568:	6013      	str	r3, [r2, #0]
 800256a:	e01d      	b.n	80025a8 <HAL_RCC_OscConfig+0xd4>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002574:	d10c      	bne.n	8002590 <HAL_RCC_OscConfig+0xbc>
 8002576:	4b72      	ldr	r3, [pc, #456]	; (8002740 <HAL_RCC_OscConfig+0x26c>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a71      	ldr	r2, [pc, #452]	; (8002740 <HAL_RCC_OscConfig+0x26c>)
 800257c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002580:	6013      	str	r3, [r2, #0]
 8002582:	4b6f      	ldr	r3, [pc, #444]	; (8002740 <HAL_RCC_OscConfig+0x26c>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a6e      	ldr	r2, [pc, #440]	; (8002740 <HAL_RCC_OscConfig+0x26c>)
 8002588:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800258c:	6013      	str	r3, [r2, #0]
 800258e:	e00b      	b.n	80025a8 <HAL_RCC_OscConfig+0xd4>
 8002590:	4b6b      	ldr	r3, [pc, #428]	; (8002740 <HAL_RCC_OscConfig+0x26c>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a6a      	ldr	r2, [pc, #424]	; (8002740 <HAL_RCC_OscConfig+0x26c>)
 8002596:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800259a:	6013      	str	r3, [r2, #0]
 800259c:	4b68      	ldr	r3, [pc, #416]	; (8002740 <HAL_RCC_OscConfig+0x26c>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a67      	ldr	r2, [pc, #412]	; (8002740 <HAL_RCC_OscConfig+0x26c>)
 80025a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025a6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d013      	beq.n	80025d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b0:	f7ff fcc2 	bl	8001f38 <HAL_GetTick>
 80025b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025b6:	e008      	b.n	80025ca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025b8:	f7ff fcbe 	bl	8001f38 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b64      	cmp	r3, #100	; 0x64
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e200      	b.n	80029cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ca:	4b5d      	ldr	r3, [pc, #372]	; (8002740 <HAL_RCC_OscConfig+0x26c>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d0f0      	beq.n	80025b8 <HAL_RCC_OscConfig+0xe4>
 80025d6:	e014      	b.n	8002602 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d8:	f7ff fcae 	bl	8001f38 <HAL_GetTick>
 80025dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025de:	e008      	b.n	80025f2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025e0:	f7ff fcaa 	bl	8001f38 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b64      	cmp	r3, #100	; 0x64
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e1ec      	b.n	80029cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025f2:	4b53      	ldr	r3, [pc, #332]	; (8002740 <HAL_RCC_OscConfig+0x26c>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d1f0      	bne.n	80025e0 <HAL_RCC_OscConfig+0x10c>
 80025fe:	e000      	b.n	8002602 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002600:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	2b00      	cmp	r3, #0
 800260c:	d063      	beq.n	80026d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800260e:	4b4c      	ldr	r3, [pc, #304]	; (8002740 <HAL_RCC_OscConfig+0x26c>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f003 030c 	and.w	r3, r3, #12
 8002616:	2b00      	cmp	r3, #0
 8002618:	d00b      	beq.n	8002632 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800261a:	4b49      	ldr	r3, [pc, #292]	; (8002740 <HAL_RCC_OscConfig+0x26c>)
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f003 030c 	and.w	r3, r3, #12
 8002622:	2b08      	cmp	r3, #8
 8002624:	d11c      	bne.n	8002660 <HAL_RCC_OscConfig+0x18c>
 8002626:	4b46      	ldr	r3, [pc, #280]	; (8002740 <HAL_RCC_OscConfig+0x26c>)
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d116      	bne.n	8002660 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002632:	4b43      	ldr	r3, [pc, #268]	; (8002740 <HAL_RCC_OscConfig+0x26c>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	2b00      	cmp	r3, #0
 800263c:	d005      	beq.n	800264a <HAL_RCC_OscConfig+0x176>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	691b      	ldr	r3, [r3, #16]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d001      	beq.n	800264a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e1c0      	b.n	80029cc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800264a:	4b3d      	ldr	r3, [pc, #244]	; (8002740 <HAL_RCC_OscConfig+0x26c>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	695b      	ldr	r3, [r3, #20]
 8002656:	00db      	lsls	r3, r3, #3
 8002658:	4939      	ldr	r1, [pc, #228]	; (8002740 <HAL_RCC_OscConfig+0x26c>)
 800265a:	4313      	orrs	r3, r2
 800265c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800265e:	e03a      	b.n	80026d6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	691b      	ldr	r3, [r3, #16]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d020      	beq.n	80026aa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002668:	4b36      	ldr	r3, [pc, #216]	; (8002744 <HAL_RCC_OscConfig+0x270>)
 800266a:	2201      	movs	r2, #1
 800266c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800266e:	f7ff fc63 	bl	8001f38 <HAL_GetTick>
 8002672:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002674:	e008      	b.n	8002688 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002676:	f7ff fc5f 	bl	8001f38 <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	2b02      	cmp	r3, #2
 8002682:	d901      	bls.n	8002688 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e1a1      	b.n	80029cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002688:	4b2d      	ldr	r3, [pc, #180]	; (8002740 <HAL_RCC_OscConfig+0x26c>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0302 	and.w	r3, r3, #2
 8002690:	2b00      	cmp	r3, #0
 8002692:	d0f0      	beq.n	8002676 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002694:	4b2a      	ldr	r3, [pc, #168]	; (8002740 <HAL_RCC_OscConfig+0x26c>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	695b      	ldr	r3, [r3, #20]
 80026a0:	00db      	lsls	r3, r3, #3
 80026a2:	4927      	ldr	r1, [pc, #156]	; (8002740 <HAL_RCC_OscConfig+0x26c>)
 80026a4:	4313      	orrs	r3, r2
 80026a6:	600b      	str	r3, [r1, #0]
 80026a8:	e015      	b.n	80026d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026aa:	4b26      	ldr	r3, [pc, #152]	; (8002744 <HAL_RCC_OscConfig+0x270>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b0:	f7ff fc42 	bl	8001f38 <HAL_GetTick>
 80026b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026b6:	e008      	b.n	80026ca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026b8:	f7ff fc3e 	bl	8001f38 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e180      	b.n	80029cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026ca:	4b1d      	ldr	r3, [pc, #116]	; (8002740 <HAL_RCC_OscConfig+0x26c>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d1f0      	bne.n	80026b8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0308 	and.w	r3, r3, #8
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d03a      	beq.n	8002758 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	699b      	ldr	r3, [r3, #24]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d019      	beq.n	800271e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026ea:	4b17      	ldr	r3, [pc, #92]	; (8002748 <HAL_RCC_OscConfig+0x274>)
 80026ec:	2201      	movs	r2, #1
 80026ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026f0:	f7ff fc22 	bl	8001f38 <HAL_GetTick>
 80026f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026f6:	e008      	b.n	800270a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026f8:	f7ff fc1e 	bl	8001f38 <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	2b02      	cmp	r3, #2
 8002704:	d901      	bls.n	800270a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e160      	b.n	80029cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800270a:	4b0d      	ldr	r3, [pc, #52]	; (8002740 <HAL_RCC_OscConfig+0x26c>)
 800270c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	2b00      	cmp	r3, #0
 8002714:	d0f0      	beq.n	80026f8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002716:	2001      	movs	r0, #1
 8002718:	f000 fa9c 	bl	8002c54 <RCC_Delay>
 800271c:	e01c      	b.n	8002758 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800271e:	4b0a      	ldr	r3, [pc, #40]	; (8002748 <HAL_RCC_OscConfig+0x274>)
 8002720:	2200      	movs	r2, #0
 8002722:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002724:	f7ff fc08 	bl	8001f38 <HAL_GetTick>
 8002728:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800272a:	e00f      	b.n	800274c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800272c:	f7ff fc04 	bl	8001f38 <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	2b02      	cmp	r3, #2
 8002738:	d908      	bls.n	800274c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e146      	b.n	80029cc <HAL_RCC_OscConfig+0x4f8>
 800273e:	bf00      	nop
 8002740:	40021000 	.word	0x40021000
 8002744:	42420000 	.word	0x42420000
 8002748:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800274c:	4b92      	ldr	r3, [pc, #584]	; (8002998 <HAL_RCC_OscConfig+0x4c4>)
 800274e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002750:	f003 0302 	and.w	r3, r3, #2
 8002754:	2b00      	cmp	r3, #0
 8002756:	d1e9      	bne.n	800272c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0304 	and.w	r3, r3, #4
 8002760:	2b00      	cmp	r3, #0
 8002762:	f000 80a6 	beq.w	80028b2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002766:	2300      	movs	r3, #0
 8002768:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800276a:	4b8b      	ldr	r3, [pc, #556]	; (8002998 <HAL_RCC_OscConfig+0x4c4>)
 800276c:	69db      	ldr	r3, [r3, #28]
 800276e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d10d      	bne.n	8002792 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002776:	4b88      	ldr	r3, [pc, #544]	; (8002998 <HAL_RCC_OscConfig+0x4c4>)
 8002778:	69db      	ldr	r3, [r3, #28]
 800277a:	4a87      	ldr	r2, [pc, #540]	; (8002998 <HAL_RCC_OscConfig+0x4c4>)
 800277c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002780:	61d3      	str	r3, [r2, #28]
 8002782:	4b85      	ldr	r3, [pc, #532]	; (8002998 <HAL_RCC_OscConfig+0x4c4>)
 8002784:	69db      	ldr	r3, [r3, #28]
 8002786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800278a:	60bb      	str	r3, [r7, #8]
 800278c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800278e:	2301      	movs	r3, #1
 8002790:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002792:	4b82      	ldr	r3, [pc, #520]	; (800299c <HAL_RCC_OscConfig+0x4c8>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800279a:	2b00      	cmp	r3, #0
 800279c:	d118      	bne.n	80027d0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800279e:	4b7f      	ldr	r3, [pc, #508]	; (800299c <HAL_RCC_OscConfig+0x4c8>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a7e      	ldr	r2, [pc, #504]	; (800299c <HAL_RCC_OscConfig+0x4c8>)
 80027a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027aa:	f7ff fbc5 	bl	8001f38 <HAL_GetTick>
 80027ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027b0:	e008      	b.n	80027c4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027b2:	f7ff fbc1 	bl	8001f38 <HAL_GetTick>
 80027b6:	4602      	mov	r2, r0
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	2b64      	cmp	r3, #100	; 0x64
 80027be:	d901      	bls.n	80027c4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80027c0:	2303      	movs	r3, #3
 80027c2:	e103      	b.n	80029cc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027c4:	4b75      	ldr	r3, [pc, #468]	; (800299c <HAL_RCC_OscConfig+0x4c8>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d0f0      	beq.n	80027b2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d106      	bne.n	80027e6 <HAL_RCC_OscConfig+0x312>
 80027d8:	4b6f      	ldr	r3, [pc, #444]	; (8002998 <HAL_RCC_OscConfig+0x4c4>)
 80027da:	6a1b      	ldr	r3, [r3, #32]
 80027dc:	4a6e      	ldr	r2, [pc, #440]	; (8002998 <HAL_RCC_OscConfig+0x4c4>)
 80027de:	f043 0301 	orr.w	r3, r3, #1
 80027e2:	6213      	str	r3, [r2, #32]
 80027e4:	e02d      	b.n	8002842 <HAL_RCC_OscConfig+0x36e>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d10c      	bne.n	8002808 <HAL_RCC_OscConfig+0x334>
 80027ee:	4b6a      	ldr	r3, [pc, #424]	; (8002998 <HAL_RCC_OscConfig+0x4c4>)
 80027f0:	6a1b      	ldr	r3, [r3, #32]
 80027f2:	4a69      	ldr	r2, [pc, #420]	; (8002998 <HAL_RCC_OscConfig+0x4c4>)
 80027f4:	f023 0301 	bic.w	r3, r3, #1
 80027f8:	6213      	str	r3, [r2, #32]
 80027fa:	4b67      	ldr	r3, [pc, #412]	; (8002998 <HAL_RCC_OscConfig+0x4c4>)
 80027fc:	6a1b      	ldr	r3, [r3, #32]
 80027fe:	4a66      	ldr	r2, [pc, #408]	; (8002998 <HAL_RCC_OscConfig+0x4c4>)
 8002800:	f023 0304 	bic.w	r3, r3, #4
 8002804:	6213      	str	r3, [r2, #32]
 8002806:	e01c      	b.n	8002842 <HAL_RCC_OscConfig+0x36e>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	2b05      	cmp	r3, #5
 800280e:	d10c      	bne.n	800282a <HAL_RCC_OscConfig+0x356>
 8002810:	4b61      	ldr	r3, [pc, #388]	; (8002998 <HAL_RCC_OscConfig+0x4c4>)
 8002812:	6a1b      	ldr	r3, [r3, #32]
 8002814:	4a60      	ldr	r2, [pc, #384]	; (8002998 <HAL_RCC_OscConfig+0x4c4>)
 8002816:	f043 0304 	orr.w	r3, r3, #4
 800281a:	6213      	str	r3, [r2, #32]
 800281c:	4b5e      	ldr	r3, [pc, #376]	; (8002998 <HAL_RCC_OscConfig+0x4c4>)
 800281e:	6a1b      	ldr	r3, [r3, #32]
 8002820:	4a5d      	ldr	r2, [pc, #372]	; (8002998 <HAL_RCC_OscConfig+0x4c4>)
 8002822:	f043 0301 	orr.w	r3, r3, #1
 8002826:	6213      	str	r3, [r2, #32]
 8002828:	e00b      	b.n	8002842 <HAL_RCC_OscConfig+0x36e>
 800282a:	4b5b      	ldr	r3, [pc, #364]	; (8002998 <HAL_RCC_OscConfig+0x4c4>)
 800282c:	6a1b      	ldr	r3, [r3, #32]
 800282e:	4a5a      	ldr	r2, [pc, #360]	; (8002998 <HAL_RCC_OscConfig+0x4c4>)
 8002830:	f023 0301 	bic.w	r3, r3, #1
 8002834:	6213      	str	r3, [r2, #32]
 8002836:	4b58      	ldr	r3, [pc, #352]	; (8002998 <HAL_RCC_OscConfig+0x4c4>)
 8002838:	6a1b      	ldr	r3, [r3, #32]
 800283a:	4a57      	ldr	r2, [pc, #348]	; (8002998 <HAL_RCC_OscConfig+0x4c4>)
 800283c:	f023 0304 	bic.w	r3, r3, #4
 8002840:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d015      	beq.n	8002876 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800284a:	f7ff fb75 	bl	8001f38 <HAL_GetTick>
 800284e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002850:	e00a      	b.n	8002868 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002852:	f7ff fb71 	bl	8001f38 <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002860:	4293      	cmp	r3, r2
 8002862:	d901      	bls.n	8002868 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e0b1      	b.n	80029cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002868:	4b4b      	ldr	r3, [pc, #300]	; (8002998 <HAL_RCC_OscConfig+0x4c4>)
 800286a:	6a1b      	ldr	r3, [r3, #32]
 800286c:	f003 0302 	and.w	r3, r3, #2
 8002870:	2b00      	cmp	r3, #0
 8002872:	d0ee      	beq.n	8002852 <HAL_RCC_OscConfig+0x37e>
 8002874:	e014      	b.n	80028a0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002876:	f7ff fb5f 	bl	8001f38 <HAL_GetTick>
 800287a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800287c:	e00a      	b.n	8002894 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800287e:	f7ff fb5b 	bl	8001f38 <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	f241 3288 	movw	r2, #5000	; 0x1388
 800288c:	4293      	cmp	r3, r2
 800288e:	d901      	bls.n	8002894 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e09b      	b.n	80029cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002894:	4b40      	ldr	r3, [pc, #256]	; (8002998 <HAL_RCC_OscConfig+0x4c4>)
 8002896:	6a1b      	ldr	r3, [r3, #32]
 8002898:	f003 0302 	and.w	r3, r3, #2
 800289c:	2b00      	cmp	r3, #0
 800289e:	d1ee      	bne.n	800287e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80028a0:	7dfb      	ldrb	r3, [r7, #23]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d105      	bne.n	80028b2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028a6:	4b3c      	ldr	r3, [pc, #240]	; (8002998 <HAL_RCC_OscConfig+0x4c4>)
 80028a8:	69db      	ldr	r3, [r3, #28]
 80028aa:	4a3b      	ldr	r2, [pc, #236]	; (8002998 <HAL_RCC_OscConfig+0x4c4>)
 80028ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028b0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	69db      	ldr	r3, [r3, #28]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	f000 8087 	beq.w	80029ca <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028bc:	4b36      	ldr	r3, [pc, #216]	; (8002998 <HAL_RCC_OscConfig+0x4c4>)
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f003 030c 	and.w	r3, r3, #12
 80028c4:	2b08      	cmp	r3, #8
 80028c6:	d061      	beq.n	800298c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	69db      	ldr	r3, [r3, #28]
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d146      	bne.n	800295e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028d0:	4b33      	ldr	r3, [pc, #204]	; (80029a0 <HAL_RCC_OscConfig+0x4cc>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d6:	f7ff fb2f 	bl	8001f38 <HAL_GetTick>
 80028da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028dc:	e008      	b.n	80028f0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028de:	f7ff fb2b 	bl	8001f38 <HAL_GetTick>
 80028e2:	4602      	mov	r2, r0
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d901      	bls.n	80028f0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	e06d      	b.n	80029cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028f0:	4b29      	ldr	r3, [pc, #164]	; (8002998 <HAL_RCC_OscConfig+0x4c4>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d1f0      	bne.n	80028de <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6a1b      	ldr	r3, [r3, #32]
 8002900:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002904:	d108      	bne.n	8002918 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002906:	4b24      	ldr	r3, [pc, #144]	; (8002998 <HAL_RCC_OscConfig+0x4c4>)
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	4921      	ldr	r1, [pc, #132]	; (8002998 <HAL_RCC_OscConfig+0x4c4>)
 8002914:	4313      	orrs	r3, r2
 8002916:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002918:	4b1f      	ldr	r3, [pc, #124]	; (8002998 <HAL_RCC_OscConfig+0x4c4>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6a19      	ldr	r1, [r3, #32]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002928:	430b      	orrs	r3, r1
 800292a:	491b      	ldr	r1, [pc, #108]	; (8002998 <HAL_RCC_OscConfig+0x4c4>)
 800292c:	4313      	orrs	r3, r2
 800292e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002930:	4b1b      	ldr	r3, [pc, #108]	; (80029a0 <HAL_RCC_OscConfig+0x4cc>)
 8002932:	2201      	movs	r2, #1
 8002934:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002936:	f7ff faff 	bl	8001f38 <HAL_GetTick>
 800293a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800293c:	e008      	b.n	8002950 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800293e:	f7ff fafb 	bl	8001f38 <HAL_GetTick>
 8002942:	4602      	mov	r2, r0
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	2b02      	cmp	r3, #2
 800294a:	d901      	bls.n	8002950 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800294c:	2303      	movs	r3, #3
 800294e:	e03d      	b.n	80029cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002950:	4b11      	ldr	r3, [pc, #68]	; (8002998 <HAL_RCC_OscConfig+0x4c4>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d0f0      	beq.n	800293e <HAL_RCC_OscConfig+0x46a>
 800295c:	e035      	b.n	80029ca <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800295e:	4b10      	ldr	r3, [pc, #64]	; (80029a0 <HAL_RCC_OscConfig+0x4cc>)
 8002960:	2200      	movs	r2, #0
 8002962:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002964:	f7ff fae8 	bl	8001f38 <HAL_GetTick>
 8002968:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800296a:	e008      	b.n	800297e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800296c:	f7ff fae4 	bl	8001f38 <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	2b02      	cmp	r3, #2
 8002978:	d901      	bls.n	800297e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e026      	b.n	80029cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800297e:	4b06      	ldr	r3, [pc, #24]	; (8002998 <HAL_RCC_OscConfig+0x4c4>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d1f0      	bne.n	800296c <HAL_RCC_OscConfig+0x498>
 800298a:	e01e      	b.n	80029ca <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	69db      	ldr	r3, [r3, #28]
 8002990:	2b01      	cmp	r3, #1
 8002992:	d107      	bne.n	80029a4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e019      	b.n	80029cc <HAL_RCC_OscConfig+0x4f8>
 8002998:	40021000 	.word	0x40021000
 800299c:	40007000 	.word	0x40007000
 80029a0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80029a4:	4b0b      	ldr	r3, [pc, #44]	; (80029d4 <HAL_RCC_OscConfig+0x500>)
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6a1b      	ldr	r3, [r3, #32]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d106      	bne.n	80029c6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d001      	beq.n	80029ca <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e000      	b.n	80029cc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80029ca:	2300      	movs	r3, #0
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3718      	adds	r7, #24
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	40021000 	.word	0x40021000

080029d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d101      	bne.n	80029ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e0d0      	b.n	8002b8e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029ec:	4b6a      	ldr	r3, [pc, #424]	; (8002b98 <HAL_RCC_ClockConfig+0x1c0>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0307 	and.w	r3, r3, #7
 80029f4:	683a      	ldr	r2, [r7, #0]
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d910      	bls.n	8002a1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029fa:	4b67      	ldr	r3, [pc, #412]	; (8002b98 <HAL_RCC_ClockConfig+0x1c0>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f023 0207 	bic.w	r2, r3, #7
 8002a02:	4965      	ldr	r1, [pc, #404]	; (8002b98 <HAL_RCC_ClockConfig+0x1c0>)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a0a:	4b63      	ldr	r3, [pc, #396]	; (8002b98 <HAL_RCC_ClockConfig+0x1c0>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0307 	and.w	r3, r3, #7
 8002a12:	683a      	ldr	r2, [r7, #0]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d001      	beq.n	8002a1c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e0b8      	b.n	8002b8e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d020      	beq.n	8002a6a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0304 	and.w	r3, r3, #4
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d005      	beq.n	8002a40 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a34:	4b59      	ldr	r3, [pc, #356]	; (8002b9c <HAL_RCC_ClockConfig+0x1c4>)
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	4a58      	ldr	r2, [pc, #352]	; (8002b9c <HAL_RCC_ClockConfig+0x1c4>)
 8002a3a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002a3e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0308 	and.w	r3, r3, #8
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d005      	beq.n	8002a58 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a4c:	4b53      	ldr	r3, [pc, #332]	; (8002b9c <HAL_RCC_ClockConfig+0x1c4>)
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	4a52      	ldr	r2, [pc, #328]	; (8002b9c <HAL_RCC_ClockConfig+0x1c4>)
 8002a52:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002a56:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a58:	4b50      	ldr	r3, [pc, #320]	; (8002b9c <HAL_RCC_ClockConfig+0x1c4>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	494d      	ldr	r1, [pc, #308]	; (8002b9c <HAL_RCC_ClockConfig+0x1c4>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0301 	and.w	r3, r3, #1
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d040      	beq.n	8002af8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d107      	bne.n	8002a8e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a7e:	4b47      	ldr	r3, [pc, #284]	; (8002b9c <HAL_RCC_ClockConfig+0x1c4>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d115      	bne.n	8002ab6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e07f      	b.n	8002b8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d107      	bne.n	8002aa6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a96:	4b41      	ldr	r3, [pc, #260]	; (8002b9c <HAL_RCC_ClockConfig+0x1c4>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d109      	bne.n	8002ab6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e073      	b.n	8002b8e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aa6:	4b3d      	ldr	r3, [pc, #244]	; (8002b9c <HAL_RCC_ClockConfig+0x1c4>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d101      	bne.n	8002ab6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e06b      	b.n	8002b8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ab6:	4b39      	ldr	r3, [pc, #228]	; (8002b9c <HAL_RCC_ClockConfig+0x1c4>)
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f023 0203 	bic.w	r2, r3, #3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	4936      	ldr	r1, [pc, #216]	; (8002b9c <HAL_RCC_ClockConfig+0x1c4>)
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ac8:	f7ff fa36 	bl	8001f38 <HAL_GetTick>
 8002acc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ace:	e00a      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ad0:	f7ff fa32 	bl	8001f38 <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e053      	b.n	8002b8e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ae6:	4b2d      	ldr	r3, [pc, #180]	; (8002b9c <HAL_RCC_ClockConfig+0x1c4>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f003 020c 	and.w	r2, r3, #12
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d1eb      	bne.n	8002ad0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002af8:	4b27      	ldr	r3, [pc, #156]	; (8002b98 <HAL_RCC_ClockConfig+0x1c0>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0307 	and.w	r3, r3, #7
 8002b00:	683a      	ldr	r2, [r7, #0]
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d210      	bcs.n	8002b28 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b06:	4b24      	ldr	r3, [pc, #144]	; (8002b98 <HAL_RCC_ClockConfig+0x1c0>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f023 0207 	bic.w	r2, r3, #7
 8002b0e:	4922      	ldr	r1, [pc, #136]	; (8002b98 <HAL_RCC_ClockConfig+0x1c0>)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b16:	4b20      	ldr	r3, [pc, #128]	; (8002b98 <HAL_RCC_ClockConfig+0x1c0>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0307 	and.w	r3, r3, #7
 8002b1e:	683a      	ldr	r2, [r7, #0]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d001      	beq.n	8002b28 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e032      	b.n	8002b8e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0304 	and.w	r3, r3, #4
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d008      	beq.n	8002b46 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b34:	4b19      	ldr	r3, [pc, #100]	; (8002b9c <HAL_RCC_ClockConfig+0x1c4>)
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	4916      	ldr	r1, [pc, #88]	; (8002b9c <HAL_RCC_ClockConfig+0x1c4>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0308 	and.w	r3, r3, #8
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d009      	beq.n	8002b66 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b52:	4b12      	ldr	r3, [pc, #72]	; (8002b9c <HAL_RCC_ClockConfig+0x1c4>)
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	00db      	lsls	r3, r3, #3
 8002b60:	490e      	ldr	r1, [pc, #56]	; (8002b9c <HAL_RCC_ClockConfig+0x1c4>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b66:	f000 f821 	bl	8002bac <HAL_RCC_GetSysClockFreq>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	4b0b      	ldr	r3, [pc, #44]	; (8002b9c <HAL_RCC_ClockConfig+0x1c4>)
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	091b      	lsrs	r3, r3, #4
 8002b72:	f003 030f 	and.w	r3, r3, #15
 8002b76:	490a      	ldr	r1, [pc, #40]	; (8002ba0 <HAL_RCC_ClockConfig+0x1c8>)
 8002b78:	5ccb      	ldrb	r3, [r1, r3]
 8002b7a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b7e:	4a09      	ldr	r2, [pc, #36]	; (8002ba4 <HAL_RCC_ClockConfig+0x1cc>)
 8002b80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b82:	4b09      	ldr	r3, [pc, #36]	; (8002ba8 <HAL_RCC_ClockConfig+0x1d0>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7ff f994 	bl	8001eb4 <HAL_InitTick>

  return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3710      	adds	r7, #16
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	40022000 	.word	0x40022000
 8002b9c:	40021000 	.word	0x40021000
 8002ba0:	08003bcc 	.word	0x08003bcc
 8002ba4:	20000010 	.word	0x20000010
 8002ba8:	20000014 	.word	0x20000014

08002bac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b087      	sub	sp, #28
 8002bb0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	60fb      	str	r3, [r7, #12]
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	60bb      	str	r3, [r7, #8]
 8002bba:	2300      	movs	r3, #0
 8002bbc:	617b      	str	r3, [r7, #20]
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002bc6:	4b1e      	ldr	r3, [pc, #120]	; (8002c40 <HAL_RCC_GetSysClockFreq+0x94>)
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f003 030c 	and.w	r3, r3, #12
 8002bd2:	2b04      	cmp	r3, #4
 8002bd4:	d002      	beq.n	8002bdc <HAL_RCC_GetSysClockFreq+0x30>
 8002bd6:	2b08      	cmp	r3, #8
 8002bd8:	d003      	beq.n	8002be2 <HAL_RCC_GetSysClockFreq+0x36>
 8002bda:	e027      	b.n	8002c2c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002bdc:	4b19      	ldr	r3, [pc, #100]	; (8002c44 <HAL_RCC_GetSysClockFreq+0x98>)
 8002bde:	613b      	str	r3, [r7, #16]
      break;
 8002be0:	e027      	b.n	8002c32 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	0c9b      	lsrs	r3, r3, #18
 8002be6:	f003 030f 	and.w	r3, r3, #15
 8002bea:	4a17      	ldr	r2, [pc, #92]	; (8002c48 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002bec:	5cd3      	ldrb	r3, [r2, r3]
 8002bee:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d010      	beq.n	8002c1c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002bfa:	4b11      	ldr	r3, [pc, #68]	; (8002c40 <HAL_RCC_GetSysClockFreq+0x94>)
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	0c5b      	lsrs	r3, r3, #17
 8002c00:	f003 0301 	and.w	r3, r3, #1
 8002c04:	4a11      	ldr	r2, [pc, #68]	; (8002c4c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002c06:	5cd3      	ldrb	r3, [r2, r3]
 8002c08:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a0d      	ldr	r2, [pc, #52]	; (8002c44 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c0e:	fb03 f202 	mul.w	r2, r3, r2
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c18:	617b      	str	r3, [r7, #20]
 8002c1a:	e004      	b.n	8002c26 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	4a0c      	ldr	r2, [pc, #48]	; (8002c50 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002c20:	fb02 f303 	mul.w	r3, r2, r3
 8002c24:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	613b      	str	r3, [r7, #16]
      break;
 8002c2a:	e002      	b.n	8002c32 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c2c:	4b05      	ldr	r3, [pc, #20]	; (8002c44 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c2e:	613b      	str	r3, [r7, #16]
      break;
 8002c30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c32:	693b      	ldr	r3, [r7, #16]
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	371c      	adds	r7, #28
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bc80      	pop	{r7}
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	40021000 	.word	0x40021000
 8002c44:	007a1200 	.word	0x007a1200
 8002c48:	08003bdc 	.word	0x08003bdc
 8002c4c:	08003bec 	.word	0x08003bec
 8002c50:	003d0900 	.word	0x003d0900

08002c54 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b085      	sub	sp, #20
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c5c:	4b0a      	ldr	r3, [pc, #40]	; (8002c88 <RCC_Delay+0x34>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a0a      	ldr	r2, [pc, #40]	; (8002c8c <RCC_Delay+0x38>)
 8002c62:	fba2 2303 	umull	r2, r3, r2, r3
 8002c66:	0a5b      	lsrs	r3, r3, #9
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	fb02 f303 	mul.w	r3, r2, r3
 8002c6e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c70:	bf00      	nop
  }
  while (Delay --);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	1e5a      	subs	r2, r3, #1
 8002c76:	60fa      	str	r2, [r7, #12]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d1f9      	bne.n	8002c70 <RCC_Delay+0x1c>
}
 8002c7c:	bf00      	nop
 8002c7e:	bf00      	nop
 8002c80:	3714      	adds	r7, #20
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bc80      	pop	{r7}
 8002c86:	4770      	bx	lr
 8002c88:	20000010 	.word	0x20000010
 8002c8c:	10624dd3 	.word	0x10624dd3

08002c90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d101      	bne.n	8002ca2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e041      	b.n	8002d26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d106      	bne.n	8002cbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f7fe ff30 	bl	8001b1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2202      	movs	r2, #2
 8002cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	3304      	adds	r3, #4
 8002ccc:	4619      	mov	r1, r3
 8002cce:	4610      	mov	r0, r2
 8002cd0:	f000 fc30 	bl	8003534 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3708      	adds	r7, #8
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
	...

08002d30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d001      	beq.n	8002d48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e03a      	b.n	8002dbe <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2202      	movs	r2, #2
 8002d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	68da      	ldr	r2, [r3, #12]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f042 0201 	orr.w	r2, r2, #1
 8002d5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a18      	ldr	r2, [pc, #96]	; (8002dc8 <HAL_TIM_Base_Start_IT+0x98>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d00e      	beq.n	8002d88 <HAL_TIM_Base_Start_IT+0x58>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d72:	d009      	beq.n	8002d88 <HAL_TIM_Base_Start_IT+0x58>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a14      	ldr	r2, [pc, #80]	; (8002dcc <HAL_TIM_Base_Start_IT+0x9c>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d004      	beq.n	8002d88 <HAL_TIM_Base_Start_IT+0x58>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a13      	ldr	r2, [pc, #76]	; (8002dd0 <HAL_TIM_Base_Start_IT+0xa0>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d111      	bne.n	8002dac <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f003 0307 	and.w	r3, r3, #7
 8002d92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2b06      	cmp	r3, #6
 8002d98:	d010      	beq.n	8002dbc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f042 0201 	orr.w	r2, r2, #1
 8002da8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002daa:	e007      	b.n	8002dbc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f042 0201 	orr.w	r2, r2, #1
 8002dba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3714      	adds	r7, #20
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bc80      	pop	{r7}
 8002dc6:	4770      	bx	lr
 8002dc8:	40012c00 	.word	0x40012c00
 8002dcc:	40000400 	.word	0x40000400
 8002dd0:	40000800 	.word	0x40000800

08002dd4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d101      	bne.n	8002de6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e041      	b.n	8002e6a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d106      	bne.n	8002e00 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f000 f839 	bl	8002e72 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2202      	movs	r2, #2
 8002e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	3304      	adds	r3, #4
 8002e10:	4619      	mov	r1, r3
 8002e12:	4610      	mov	r0, r2
 8002e14:	f000 fb8e 	bl	8003534 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3708      	adds	r7, #8
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002e72:	b480      	push	{r7}
 8002e74:	b083      	sub	sp, #12
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002e7a:	bf00      	nop
 8002e7c:	370c      	adds	r7, #12
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bc80      	pop	{r7}
 8002e82:	4770      	bx	lr

08002e84 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d109      	bne.n	8002ea8 <HAL_TIM_PWM_Start+0x24>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	bf14      	ite	ne
 8002ea0:	2301      	movne	r3, #1
 8002ea2:	2300      	moveq	r3, #0
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	e022      	b.n	8002eee <HAL_TIM_PWM_Start+0x6a>
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	2b04      	cmp	r3, #4
 8002eac:	d109      	bne.n	8002ec2 <HAL_TIM_PWM_Start+0x3e>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	bf14      	ite	ne
 8002eba:	2301      	movne	r3, #1
 8002ebc:	2300      	moveq	r3, #0
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	e015      	b.n	8002eee <HAL_TIM_PWM_Start+0x6a>
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	2b08      	cmp	r3, #8
 8002ec6:	d109      	bne.n	8002edc <HAL_TIM_PWM_Start+0x58>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	bf14      	ite	ne
 8002ed4:	2301      	movne	r3, #1
 8002ed6:	2300      	moveq	r3, #0
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	e008      	b.n	8002eee <HAL_TIM_PWM_Start+0x6a>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	bf14      	ite	ne
 8002ee8:	2301      	movne	r3, #1
 8002eea:	2300      	moveq	r3, #0
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d001      	beq.n	8002ef6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e05e      	b.n	8002fb4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d104      	bne.n	8002f06 <HAL_TIM_PWM_Start+0x82>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2202      	movs	r2, #2
 8002f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f04:	e013      	b.n	8002f2e <HAL_TIM_PWM_Start+0xaa>
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	2b04      	cmp	r3, #4
 8002f0a:	d104      	bne.n	8002f16 <HAL_TIM_PWM_Start+0x92>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2202      	movs	r2, #2
 8002f10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f14:	e00b      	b.n	8002f2e <HAL_TIM_PWM_Start+0xaa>
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	2b08      	cmp	r3, #8
 8002f1a:	d104      	bne.n	8002f26 <HAL_TIM_PWM_Start+0xa2>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2202      	movs	r2, #2
 8002f20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f24:	e003      	b.n	8002f2e <HAL_TIM_PWM_Start+0xaa>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2202      	movs	r2, #2
 8002f2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	2201      	movs	r2, #1
 8002f34:	6839      	ldr	r1, [r7, #0]
 8002f36:	4618      	mov	r0, r3
 8002f38:	f000 fd7c 	bl	8003a34 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a1e      	ldr	r2, [pc, #120]	; (8002fbc <HAL_TIM_PWM_Start+0x138>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d107      	bne.n	8002f56 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f54:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a18      	ldr	r2, [pc, #96]	; (8002fbc <HAL_TIM_PWM_Start+0x138>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d00e      	beq.n	8002f7e <HAL_TIM_PWM_Start+0xfa>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f68:	d009      	beq.n	8002f7e <HAL_TIM_PWM_Start+0xfa>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a14      	ldr	r2, [pc, #80]	; (8002fc0 <HAL_TIM_PWM_Start+0x13c>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d004      	beq.n	8002f7e <HAL_TIM_PWM_Start+0xfa>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a12      	ldr	r2, [pc, #72]	; (8002fc4 <HAL_TIM_PWM_Start+0x140>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d111      	bne.n	8002fa2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	f003 0307 	and.w	r3, r3, #7
 8002f88:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2b06      	cmp	r3, #6
 8002f8e:	d010      	beq.n	8002fb2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f042 0201 	orr.w	r2, r2, #1
 8002f9e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fa0:	e007      	b.n	8002fb2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f042 0201 	orr.w	r2, r2, #1
 8002fb0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002fb2:	2300      	movs	r3, #0
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3710      	adds	r7, #16
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	40012c00 	.word	0x40012c00
 8002fc0:	40000400 	.word	0x40000400
 8002fc4:	40000800 	.word	0x40000800

08002fc8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	f003 0302 	and.w	r3, r3, #2
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d122      	bne.n	8003024 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	f003 0302 	and.w	r3, r3, #2
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d11b      	bne.n	8003024 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f06f 0202 	mvn.w	r2, #2
 8002ff4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	699b      	ldr	r3, [r3, #24]
 8003002:	f003 0303 	and.w	r3, r3, #3
 8003006:	2b00      	cmp	r3, #0
 8003008:	d003      	beq.n	8003012 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 fa76 	bl	80034fc <HAL_TIM_IC_CaptureCallback>
 8003010:	e005      	b.n	800301e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 fa69 	bl	80034ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f000 fa78 	bl	800350e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	f003 0304 	and.w	r3, r3, #4
 800302e:	2b04      	cmp	r3, #4
 8003030:	d122      	bne.n	8003078 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	f003 0304 	and.w	r3, r3, #4
 800303c:	2b04      	cmp	r3, #4
 800303e:	d11b      	bne.n	8003078 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f06f 0204 	mvn.w	r2, #4
 8003048:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2202      	movs	r2, #2
 800304e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	699b      	ldr	r3, [r3, #24]
 8003056:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800305a:	2b00      	cmp	r3, #0
 800305c:	d003      	beq.n	8003066 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 fa4c 	bl	80034fc <HAL_TIM_IC_CaptureCallback>
 8003064:	e005      	b.n	8003072 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 fa3f 	bl	80034ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f000 fa4e 	bl	800350e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	f003 0308 	and.w	r3, r3, #8
 8003082:	2b08      	cmp	r3, #8
 8003084:	d122      	bne.n	80030cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	f003 0308 	and.w	r3, r3, #8
 8003090:	2b08      	cmp	r3, #8
 8003092:	d11b      	bne.n	80030cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f06f 0208 	mvn.w	r2, #8
 800309c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2204      	movs	r2, #4
 80030a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	69db      	ldr	r3, [r3, #28]
 80030aa:	f003 0303 	and.w	r3, r3, #3
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d003      	beq.n	80030ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f000 fa22 	bl	80034fc <HAL_TIM_IC_CaptureCallback>
 80030b8:	e005      	b.n	80030c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f000 fa15 	bl	80034ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f000 fa24 	bl	800350e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	691b      	ldr	r3, [r3, #16]
 80030d2:	f003 0310 	and.w	r3, r3, #16
 80030d6:	2b10      	cmp	r3, #16
 80030d8:	d122      	bne.n	8003120 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	f003 0310 	and.w	r3, r3, #16
 80030e4:	2b10      	cmp	r3, #16
 80030e6:	d11b      	bne.n	8003120 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f06f 0210 	mvn.w	r2, #16
 80030f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2208      	movs	r2, #8
 80030f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	69db      	ldr	r3, [r3, #28]
 80030fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003102:	2b00      	cmp	r3, #0
 8003104:	d003      	beq.n	800310e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f000 f9f8 	bl	80034fc <HAL_TIM_IC_CaptureCallback>
 800310c:	e005      	b.n	800311a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 f9eb 	bl	80034ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f000 f9fa 	bl	800350e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	f003 0301 	and.w	r3, r3, #1
 800312a:	2b01      	cmp	r3, #1
 800312c:	d10e      	bne.n	800314c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	f003 0301 	and.w	r3, r3, #1
 8003138:	2b01      	cmp	r3, #1
 800313a:	d107      	bne.n	800314c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f06f 0201 	mvn.w	r2, #1
 8003144:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f7fd fe88 	bl	8000e5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003156:	2b80      	cmp	r3, #128	; 0x80
 8003158:	d10e      	bne.n	8003178 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003164:	2b80      	cmp	r3, #128	; 0x80
 8003166:	d107      	bne.n	8003178 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003170:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f000 fce9 	bl	8003b4a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003182:	2b40      	cmp	r3, #64	; 0x40
 8003184:	d10e      	bne.n	80031a4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003190:	2b40      	cmp	r3, #64	; 0x40
 8003192:	d107      	bne.n	80031a4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800319c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f000 f9be 	bl	8003520 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	f003 0320 	and.w	r3, r3, #32
 80031ae:	2b20      	cmp	r3, #32
 80031b0:	d10e      	bne.n	80031d0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	f003 0320 	and.w	r3, r3, #32
 80031bc:	2b20      	cmp	r3, #32
 80031be:	d107      	bne.n	80031d0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f06f 0220 	mvn.w	r2, #32
 80031c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f000 fcb4 	bl	8003b38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031d0:	bf00      	nop
 80031d2:	3708      	adds	r7, #8
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b086      	sub	sp, #24
 80031dc:	af00      	add	r7, sp, #0
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	60b9      	str	r1, [r7, #8]
 80031e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031e4:	2300      	movs	r3, #0
 80031e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d101      	bne.n	80031f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80031f2:	2302      	movs	r3, #2
 80031f4:	e0ae      	b.n	8003354 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2201      	movs	r2, #1
 80031fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2b0c      	cmp	r3, #12
 8003202:	f200 809f 	bhi.w	8003344 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003206:	a201      	add	r2, pc, #4	; (adr r2, 800320c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800320c:	08003241 	.word	0x08003241
 8003210:	08003345 	.word	0x08003345
 8003214:	08003345 	.word	0x08003345
 8003218:	08003345 	.word	0x08003345
 800321c:	08003281 	.word	0x08003281
 8003220:	08003345 	.word	0x08003345
 8003224:	08003345 	.word	0x08003345
 8003228:	08003345 	.word	0x08003345
 800322c:	080032c3 	.word	0x080032c3
 8003230:	08003345 	.word	0x08003345
 8003234:	08003345 	.word	0x08003345
 8003238:	08003345 	.word	0x08003345
 800323c:	08003303 	.word	0x08003303
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	68b9      	ldr	r1, [r7, #8]
 8003246:	4618      	mov	r0, r3
 8003248:	f000 f9d6 	bl	80035f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	699a      	ldr	r2, [r3, #24]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f042 0208 	orr.w	r2, r2, #8
 800325a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	699a      	ldr	r2, [r3, #24]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f022 0204 	bic.w	r2, r2, #4
 800326a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	6999      	ldr	r1, [r3, #24]
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	691a      	ldr	r2, [r3, #16]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	430a      	orrs	r2, r1
 800327c:	619a      	str	r2, [r3, #24]
      break;
 800327e:	e064      	b.n	800334a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	68b9      	ldr	r1, [r7, #8]
 8003286:	4618      	mov	r0, r3
 8003288:	f000 fa1c 	bl	80036c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	699a      	ldr	r2, [r3, #24]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800329a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	699a      	ldr	r2, [r3, #24]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	6999      	ldr	r1, [r3, #24]
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	021a      	lsls	r2, r3, #8
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	430a      	orrs	r2, r1
 80032be:	619a      	str	r2, [r3, #24]
      break;
 80032c0:	e043      	b.n	800334a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68b9      	ldr	r1, [r7, #8]
 80032c8:	4618      	mov	r0, r3
 80032ca:	f000 fa65 	bl	8003798 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	69da      	ldr	r2, [r3, #28]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f042 0208 	orr.w	r2, r2, #8
 80032dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	69da      	ldr	r2, [r3, #28]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f022 0204 	bic.w	r2, r2, #4
 80032ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	69d9      	ldr	r1, [r3, #28]
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	691a      	ldr	r2, [r3, #16]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	430a      	orrs	r2, r1
 80032fe:	61da      	str	r2, [r3, #28]
      break;
 8003300:	e023      	b.n	800334a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	68b9      	ldr	r1, [r7, #8]
 8003308:	4618      	mov	r0, r3
 800330a:	f000 faaf 	bl	800386c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	69da      	ldr	r2, [r3, #28]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800331c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	69da      	ldr	r2, [r3, #28]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800332c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	69d9      	ldr	r1, [r3, #28]
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	691b      	ldr	r3, [r3, #16]
 8003338:	021a      	lsls	r2, r3, #8
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	430a      	orrs	r2, r1
 8003340:	61da      	str	r2, [r3, #28]
      break;
 8003342:	e002      	b.n	800334a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	75fb      	strb	r3, [r7, #23]
      break;
 8003348:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003352:	7dfb      	ldrb	r3, [r7, #23]
}
 8003354:	4618      	mov	r0, r3
 8003356:	3718      	adds	r7, #24
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}

0800335c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003366:	2300      	movs	r3, #0
 8003368:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003370:	2b01      	cmp	r3, #1
 8003372:	d101      	bne.n	8003378 <HAL_TIM_ConfigClockSource+0x1c>
 8003374:	2302      	movs	r3, #2
 8003376:	e0b4      	b.n	80034e2 <HAL_TIM_ConfigClockSource+0x186>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2202      	movs	r2, #2
 8003384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003396:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800339e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68ba      	ldr	r2, [r7, #8]
 80033a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033b0:	d03e      	beq.n	8003430 <HAL_TIM_ConfigClockSource+0xd4>
 80033b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033b6:	f200 8087 	bhi.w	80034c8 <HAL_TIM_ConfigClockSource+0x16c>
 80033ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033be:	f000 8086 	beq.w	80034ce <HAL_TIM_ConfigClockSource+0x172>
 80033c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033c6:	d87f      	bhi.n	80034c8 <HAL_TIM_ConfigClockSource+0x16c>
 80033c8:	2b70      	cmp	r3, #112	; 0x70
 80033ca:	d01a      	beq.n	8003402 <HAL_TIM_ConfigClockSource+0xa6>
 80033cc:	2b70      	cmp	r3, #112	; 0x70
 80033ce:	d87b      	bhi.n	80034c8 <HAL_TIM_ConfigClockSource+0x16c>
 80033d0:	2b60      	cmp	r3, #96	; 0x60
 80033d2:	d050      	beq.n	8003476 <HAL_TIM_ConfigClockSource+0x11a>
 80033d4:	2b60      	cmp	r3, #96	; 0x60
 80033d6:	d877      	bhi.n	80034c8 <HAL_TIM_ConfigClockSource+0x16c>
 80033d8:	2b50      	cmp	r3, #80	; 0x50
 80033da:	d03c      	beq.n	8003456 <HAL_TIM_ConfigClockSource+0xfa>
 80033dc:	2b50      	cmp	r3, #80	; 0x50
 80033de:	d873      	bhi.n	80034c8 <HAL_TIM_ConfigClockSource+0x16c>
 80033e0:	2b40      	cmp	r3, #64	; 0x40
 80033e2:	d058      	beq.n	8003496 <HAL_TIM_ConfigClockSource+0x13a>
 80033e4:	2b40      	cmp	r3, #64	; 0x40
 80033e6:	d86f      	bhi.n	80034c8 <HAL_TIM_ConfigClockSource+0x16c>
 80033e8:	2b30      	cmp	r3, #48	; 0x30
 80033ea:	d064      	beq.n	80034b6 <HAL_TIM_ConfigClockSource+0x15a>
 80033ec:	2b30      	cmp	r3, #48	; 0x30
 80033ee:	d86b      	bhi.n	80034c8 <HAL_TIM_ConfigClockSource+0x16c>
 80033f0:	2b20      	cmp	r3, #32
 80033f2:	d060      	beq.n	80034b6 <HAL_TIM_ConfigClockSource+0x15a>
 80033f4:	2b20      	cmp	r3, #32
 80033f6:	d867      	bhi.n	80034c8 <HAL_TIM_ConfigClockSource+0x16c>
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d05c      	beq.n	80034b6 <HAL_TIM_ConfigClockSource+0x15a>
 80033fc:	2b10      	cmp	r3, #16
 80033fe:	d05a      	beq.n	80034b6 <HAL_TIM_ConfigClockSource+0x15a>
 8003400:	e062      	b.n	80034c8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003412:	f000 faf0 	bl	80039f6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003424:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	68ba      	ldr	r2, [r7, #8]
 800342c:	609a      	str	r2, [r3, #8]
      break;
 800342e:	e04f      	b.n	80034d0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003440:	f000 fad9 	bl	80039f6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	689a      	ldr	r2, [r3, #8]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003452:	609a      	str	r2, [r3, #8]
      break;
 8003454:	e03c      	b.n	80034d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003462:	461a      	mov	r2, r3
 8003464:	f000 fa50 	bl	8003908 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2150      	movs	r1, #80	; 0x50
 800346e:	4618      	mov	r0, r3
 8003470:	f000 faa7 	bl	80039c2 <TIM_ITRx_SetConfig>
      break;
 8003474:	e02c      	b.n	80034d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003482:	461a      	mov	r2, r3
 8003484:	f000 fa6e 	bl	8003964 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2160      	movs	r1, #96	; 0x60
 800348e:	4618      	mov	r0, r3
 8003490:	f000 fa97 	bl	80039c2 <TIM_ITRx_SetConfig>
      break;
 8003494:	e01c      	b.n	80034d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034a2:	461a      	mov	r2, r3
 80034a4:	f000 fa30 	bl	8003908 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2140      	movs	r1, #64	; 0x40
 80034ae:	4618      	mov	r0, r3
 80034b0:	f000 fa87 	bl	80039c2 <TIM_ITRx_SetConfig>
      break;
 80034b4:	e00c      	b.n	80034d0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4619      	mov	r1, r3
 80034c0:	4610      	mov	r0, r2
 80034c2:	f000 fa7e 	bl	80039c2 <TIM_ITRx_SetConfig>
      break;
 80034c6:	e003      	b.n	80034d0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	73fb      	strb	r3, [r7, #15]
      break;
 80034cc:	e000      	b.n	80034d0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80034ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80034e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3710      	adds	r7, #16
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}

080034ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034ea:	b480      	push	{r7}
 80034ec:	b083      	sub	sp, #12
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80034f2:	bf00      	nop
 80034f4:	370c      	adds	r7, #12
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bc80      	pop	{r7}
 80034fa:	4770      	bx	lr

080034fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003504:	bf00      	nop
 8003506:	370c      	adds	r7, #12
 8003508:	46bd      	mov	sp, r7
 800350a:	bc80      	pop	{r7}
 800350c:	4770      	bx	lr

0800350e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800350e:	b480      	push	{r7}
 8003510:	b083      	sub	sp, #12
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003516:	bf00      	nop
 8003518:	370c      	adds	r7, #12
 800351a:	46bd      	mov	sp, r7
 800351c:	bc80      	pop	{r7}
 800351e:	4770      	bx	lr

08003520 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003528:	bf00      	nop
 800352a:	370c      	adds	r7, #12
 800352c:	46bd      	mov	sp, r7
 800352e:	bc80      	pop	{r7}
 8003530:	4770      	bx	lr
	...

08003534 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003534:	b480      	push	{r7}
 8003536:	b085      	sub	sp, #20
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4a29      	ldr	r2, [pc, #164]	; (80035ec <TIM_Base_SetConfig+0xb8>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d00b      	beq.n	8003564 <TIM_Base_SetConfig+0x30>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003552:	d007      	beq.n	8003564 <TIM_Base_SetConfig+0x30>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	4a26      	ldr	r2, [pc, #152]	; (80035f0 <TIM_Base_SetConfig+0xbc>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d003      	beq.n	8003564 <TIM_Base_SetConfig+0x30>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	4a25      	ldr	r2, [pc, #148]	; (80035f4 <TIM_Base_SetConfig+0xc0>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d108      	bne.n	8003576 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800356a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	68fa      	ldr	r2, [r7, #12]
 8003572:	4313      	orrs	r3, r2
 8003574:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a1c      	ldr	r2, [pc, #112]	; (80035ec <TIM_Base_SetConfig+0xb8>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d00b      	beq.n	8003596 <TIM_Base_SetConfig+0x62>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003584:	d007      	beq.n	8003596 <TIM_Base_SetConfig+0x62>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a19      	ldr	r2, [pc, #100]	; (80035f0 <TIM_Base_SetConfig+0xbc>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d003      	beq.n	8003596 <TIM_Base_SetConfig+0x62>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a18      	ldr	r2, [pc, #96]	; (80035f4 <TIM_Base_SetConfig+0xc0>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d108      	bne.n	80035a8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800359c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	68fa      	ldr	r2, [r7, #12]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	68fa      	ldr	r2, [r7, #12]
 80035ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	689a      	ldr	r2, [r3, #8]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4a07      	ldr	r2, [pc, #28]	; (80035ec <TIM_Base_SetConfig+0xb8>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d103      	bne.n	80035dc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	691a      	ldr	r2, [r3, #16]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	615a      	str	r2, [r3, #20]
}
 80035e2:	bf00      	nop
 80035e4:	3714      	adds	r7, #20
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bc80      	pop	{r7}
 80035ea:	4770      	bx	lr
 80035ec:	40012c00 	.word	0x40012c00
 80035f0:	40000400 	.word	0x40000400
 80035f4:	40000800 	.word	0x40000800

080035f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b087      	sub	sp, #28
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a1b      	ldr	r3, [r3, #32]
 8003606:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a1b      	ldr	r3, [r3, #32]
 800360c:	f023 0201 	bic.w	r2, r3, #1
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003626:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f023 0303 	bic.w	r3, r3, #3
 800362e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	68fa      	ldr	r2, [r7, #12]
 8003636:	4313      	orrs	r3, r2
 8003638:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	f023 0302 	bic.w	r3, r3, #2
 8003640:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	697a      	ldr	r2, [r7, #20]
 8003648:	4313      	orrs	r3, r2
 800364a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	4a1c      	ldr	r2, [pc, #112]	; (80036c0 <TIM_OC1_SetConfig+0xc8>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d10c      	bne.n	800366e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	f023 0308 	bic.w	r3, r3, #8
 800365a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	697a      	ldr	r2, [r7, #20]
 8003662:	4313      	orrs	r3, r2
 8003664:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	f023 0304 	bic.w	r3, r3, #4
 800366c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a13      	ldr	r2, [pc, #76]	; (80036c0 <TIM_OC1_SetConfig+0xc8>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d111      	bne.n	800369a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800367c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003684:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	695b      	ldr	r3, [r3, #20]
 800368a:	693a      	ldr	r2, [r7, #16]
 800368c:	4313      	orrs	r3, r2
 800368e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	699b      	ldr	r3, [r3, #24]
 8003694:	693a      	ldr	r2, [r7, #16]
 8003696:	4313      	orrs	r3, r2
 8003698:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	693a      	ldr	r2, [r7, #16]
 800369e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	68fa      	ldr	r2, [r7, #12]
 80036a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	685a      	ldr	r2, [r3, #4]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	697a      	ldr	r2, [r7, #20]
 80036b2:	621a      	str	r2, [r3, #32]
}
 80036b4:	bf00      	nop
 80036b6:	371c      	adds	r7, #28
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bc80      	pop	{r7}
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop
 80036c0:	40012c00 	.word	0x40012c00

080036c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b087      	sub	sp, #28
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a1b      	ldr	r3, [r3, #32]
 80036d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a1b      	ldr	r3, [r3, #32]
 80036d8:	f023 0210 	bic.w	r2, r3, #16
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	699b      	ldr	r3, [r3, #24]
 80036ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	021b      	lsls	r3, r3, #8
 8003702:	68fa      	ldr	r2, [r7, #12]
 8003704:	4313      	orrs	r3, r2
 8003706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	f023 0320 	bic.w	r3, r3, #32
 800370e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	011b      	lsls	r3, r3, #4
 8003716:	697a      	ldr	r2, [r7, #20]
 8003718:	4313      	orrs	r3, r2
 800371a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	4a1d      	ldr	r2, [pc, #116]	; (8003794 <TIM_OC2_SetConfig+0xd0>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d10d      	bne.n	8003740 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800372a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	011b      	lsls	r3, r3, #4
 8003732:	697a      	ldr	r2, [r7, #20]
 8003734:	4313      	orrs	r3, r2
 8003736:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800373e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	4a14      	ldr	r2, [pc, #80]	; (8003794 <TIM_OC2_SetConfig+0xd0>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d113      	bne.n	8003770 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800374e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003756:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	695b      	ldr	r3, [r3, #20]
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	693a      	ldr	r2, [r7, #16]
 8003760:	4313      	orrs	r3, r2
 8003762:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	699b      	ldr	r3, [r3, #24]
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	693a      	ldr	r2, [r7, #16]
 800376c:	4313      	orrs	r3, r2
 800376e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	693a      	ldr	r2, [r7, #16]
 8003774:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	68fa      	ldr	r2, [r7, #12]
 800377a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	685a      	ldr	r2, [r3, #4]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	697a      	ldr	r2, [r7, #20]
 8003788:	621a      	str	r2, [r3, #32]
}
 800378a:	bf00      	nop
 800378c:	371c      	adds	r7, #28
 800378e:	46bd      	mov	sp, r7
 8003790:	bc80      	pop	{r7}
 8003792:	4770      	bx	lr
 8003794:	40012c00 	.word	0x40012c00

08003798 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003798:	b480      	push	{r7}
 800379a:	b087      	sub	sp, #28
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a1b      	ldr	r3, [r3, #32]
 80037a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6a1b      	ldr	r3, [r3, #32]
 80037ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	69db      	ldr	r3, [r3, #28]
 80037be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f023 0303 	bic.w	r3, r3, #3
 80037ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	68fa      	ldr	r2, [r7, #12]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80037e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	021b      	lsls	r3, r3, #8
 80037e8:	697a      	ldr	r2, [r7, #20]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a1d      	ldr	r2, [pc, #116]	; (8003868 <TIM_OC3_SetConfig+0xd0>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d10d      	bne.n	8003812 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80037fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	021b      	lsls	r3, r3, #8
 8003804:	697a      	ldr	r2, [r7, #20]
 8003806:	4313      	orrs	r3, r2
 8003808:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003810:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a14      	ldr	r2, [pc, #80]	; (8003868 <TIM_OC3_SetConfig+0xd0>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d113      	bne.n	8003842 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003820:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003828:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	695b      	ldr	r3, [r3, #20]
 800382e:	011b      	lsls	r3, r3, #4
 8003830:	693a      	ldr	r2, [r7, #16]
 8003832:	4313      	orrs	r3, r2
 8003834:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	699b      	ldr	r3, [r3, #24]
 800383a:	011b      	lsls	r3, r3, #4
 800383c:	693a      	ldr	r2, [r7, #16]
 800383e:	4313      	orrs	r3, r2
 8003840:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	693a      	ldr	r2, [r7, #16]
 8003846:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	68fa      	ldr	r2, [r7, #12]
 800384c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	685a      	ldr	r2, [r3, #4]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	697a      	ldr	r2, [r7, #20]
 800385a:	621a      	str	r2, [r3, #32]
}
 800385c:	bf00      	nop
 800385e:	371c      	adds	r7, #28
 8003860:	46bd      	mov	sp, r7
 8003862:	bc80      	pop	{r7}
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop
 8003868:	40012c00 	.word	0x40012c00

0800386c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800386c:	b480      	push	{r7}
 800386e:	b087      	sub	sp, #28
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a1b      	ldr	r3, [r3, #32]
 800387a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a1b      	ldr	r3, [r3, #32]
 8003880:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	69db      	ldr	r3, [r3, #28]
 8003892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800389a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	021b      	lsls	r3, r3, #8
 80038aa:	68fa      	ldr	r2, [r7, #12]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80038b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	031b      	lsls	r3, r3, #12
 80038be:	693a      	ldr	r2, [r7, #16]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4a0f      	ldr	r2, [pc, #60]	; (8003904 <TIM_OC4_SetConfig+0x98>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d109      	bne.n	80038e0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80038d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	695b      	ldr	r3, [r3, #20]
 80038d8:	019b      	lsls	r3, r3, #6
 80038da:	697a      	ldr	r2, [r7, #20]
 80038dc:	4313      	orrs	r3, r2
 80038de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	697a      	ldr	r2, [r7, #20]
 80038e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	68fa      	ldr	r2, [r7, #12]
 80038ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	685a      	ldr	r2, [r3, #4]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	693a      	ldr	r2, [r7, #16]
 80038f8:	621a      	str	r2, [r3, #32]
}
 80038fa:	bf00      	nop
 80038fc:	371c      	adds	r7, #28
 80038fe:	46bd      	mov	sp, r7
 8003900:	bc80      	pop	{r7}
 8003902:	4770      	bx	lr
 8003904:	40012c00 	.word	0x40012c00

08003908 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003908:	b480      	push	{r7}
 800390a:	b087      	sub	sp, #28
 800390c:	af00      	add	r7, sp, #0
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6a1b      	ldr	r3, [r3, #32]
 8003918:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6a1b      	ldr	r3, [r3, #32]
 800391e:	f023 0201 	bic.w	r2, r3, #1
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	699b      	ldr	r3, [r3, #24]
 800392a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003932:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	011b      	lsls	r3, r3, #4
 8003938:	693a      	ldr	r2, [r7, #16]
 800393a:	4313      	orrs	r3, r2
 800393c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	f023 030a 	bic.w	r3, r3, #10
 8003944:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003946:	697a      	ldr	r2, [r7, #20]
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	4313      	orrs	r3, r2
 800394c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	693a      	ldr	r2, [r7, #16]
 8003952:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	697a      	ldr	r2, [r7, #20]
 8003958:	621a      	str	r2, [r3, #32]
}
 800395a:	bf00      	nop
 800395c:	371c      	adds	r7, #28
 800395e:	46bd      	mov	sp, r7
 8003960:	bc80      	pop	{r7}
 8003962:	4770      	bx	lr

08003964 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003964:	b480      	push	{r7}
 8003966:	b087      	sub	sp, #28
 8003968:	af00      	add	r7, sp, #0
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6a1b      	ldr	r3, [r3, #32]
 8003974:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6a1b      	ldr	r3, [r3, #32]
 800397a:	f023 0210 	bic.w	r2, r3, #16
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	699b      	ldr	r3, [r3, #24]
 8003986:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800398e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	031b      	lsls	r3, r3, #12
 8003994:	693a      	ldr	r2, [r7, #16]
 8003996:	4313      	orrs	r3, r2
 8003998:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80039a0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	011b      	lsls	r3, r3, #4
 80039a6:	697a      	ldr	r2, [r7, #20]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	693a      	ldr	r2, [r7, #16]
 80039b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	697a      	ldr	r2, [r7, #20]
 80039b6:	621a      	str	r2, [r3, #32]
}
 80039b8:	bf00      	nop
 80039ba:	371c      	adds	r7, #28
 80039bc:	46bd      	mov	sp, r7
 80039be:	bc80      	pop	{r7}
 80039c0:	4770      	bx	lr

080039c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80039c2:	b480      	push	{r7}
 80039c4:	b085      	sub	sp, #20
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	6078      	str	r0, [r7, #4]
 80039ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80039da:	683a      	ldr	r2, [r7, #0]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	4313      	orrs	r3, r2
 80039e0:	f043 0307 	orr.w	r3, r3, #7
 80039e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	68fa      	ldr	r2, [r7, #12]
 80039ea:	609a      	str	r2, [r3, #8]
}
 80039ec:	bf00      	nop
 80039ee:	3714      	adds	r7, #20
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bc80      	pop	{r7}
 80039f4:	4770      	bx	lr

080039f6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80039f6:	b480      	push	{r7}
 80039f8:	b087      	sub	sp, #28
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	60f8      	str	r0, [r7, #12]
 80039fe:	60b9      	str	r1, [r7, #8]
 8003a00:	607a      	str	r2, [r7, #4]
 8003a02:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a10:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	021a      	lsls	r2, r3, #8
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	431a      	orrs	r2, r3
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	697a      	ldr	r2, [r7, #20]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	697a      	ldr	r2, [r7, #20]
 8003a28:	609a      	str	r2, [r3, #8]
}
 8003a2a:	bf00      	nop
 8003a2c:	371c      	adds	r7, #28
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bc80      	pop	{r7}
 8003a32:	4770      	bx	lr

08003a34 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b087      	sub	sp, #28
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	f003 031f 	and.w	r3, r3, #31
 8003a46:	2201      	movs	r2, #1
 8003a48:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6a1a      	ldr	r2, [r3, #32]
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	43db      	mvns	r3, r3
 8003a56:	401a      	ands	r2, r3
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6a1a      	ldr	r2, [r3, #32]
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	f003 031f 	and.w	r3, r3, #31
 8003a66:	6879      	ldr	r1, [r7, #4]
 8003a68:	fa01 f303 	lsl.w	r3, r1, r3
 8003a6c:	431a      	orrs	r2, r3
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	621a      	str	r2, [r3, #32]
}
 8003a72:	bf00      	nop
 8003a74:	371c      	adds	r7, #28
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bc80      	pop	{r7}
 8003a7a:	4770      	bx	lr

08003a7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b085      	sub	sp, #20
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d101      	bne.n	8003a94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a90:	2302      	movs	r3, #2
 8003a92:	e046      	b.n	8003b22 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2202      	movs	r2, #2
 8003aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68fa      	ldr	r2, [r7, #12]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68fa      	ldr	r2, [r7, #12]
 8003acc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a16      	ldr	r2, [pc, #88]	; (8003b2c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d00e      	beq.n	8003af6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ae0:	d009      	beq.n	8003af6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a12      	ldr	r2, [pc, #72]	; (8003b30 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d004      	beq.n	8003af6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a10      	ldr	r2, [pc, #64]	; (8003b34 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d10c      	bne.n	8003b10 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003afc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	68ba      	ldr	r2, [r7, #8]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	68ba      	ldr	r2, [r7, #8]
 8003b0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3714      	adds	r7, #20
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bc80      	pop	{r7}
 8003b2a:	4770      	bx	lr
 8003b2c:	40012c00 	.word	0x40012c00
 8003b30:	40000400 	.word	0x40000400
 8003b34:	40000800 	.word	0x40000800

08003b38 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b40:	bf00      	nop
 8003b42:	370c      	adds	r7, #12
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bc80      	pop	{r7}
 8003b48:	4770      	bx	lr

08003b4a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b4a:	b480      	push	{r7}
 8003b4c:	b083      	sub	sp, #12
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b52:	bf00      	nop
 8003b54:	370c      	adds	r7, #12
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bc80      	pop	{r7}
 8003b5a:	4770      	bx	lr

08003b5c <memset>:
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	4402      	add	r2, r0
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d100      	bne.n	8003b66 <memset+0xa>
 8003b64:	4770      	bx	lr
 8003b66:	f803 1b01 	strb.w	r1, [r3], #1
 8003b6a:	e7f9      	b.n	8003b60 <memset+0x4>

08003b6c <__libc_init_array>:
 8003b6c:	b570      	push	{r4, r5, r6, lr}
 8003b6e:	2600      	movs	r6, #0
 8003b70:	4d0c      	ldr	r5, [pc, #48]	; (8003ba4 <__libc_init_array+0x38>)
 8003b72:	4c0d      	ldr	r4, [pc, #52]	; (8003ba8 <__libc_init_array+0x3c>)
 8003b74:	1b64      	subs	r4, r4, r5
 8003b76:	10a4      	asrs	r4, r4, #2
 8003b78:	42a6      	cmp	r6, r4
 8003b7a:	d109      	bne.n	8003b90 <__libc_init_array+0x24>
 8003b7c:	f000 f81a 	bl	8003bb4 <_init>
 8003b80:	2600      	movs	r6, #0
 8003b82:	4d0a      	ldr	r5, [pc, #40]	; (8003bac <__libc_init_array+0x40>)
 8003b84:	4c0a      	ldr	r4, [pc, #40]	; (8003bb0 <__libc_init_array+0x44>)
 8003b86:	1b64      	subs	r4, r4, r5
 8003b88:	10a4      	asrs	r4, r4, #2
 8003b8a:	42a6      	cmp	r6, r4
 8003b8c:	d105      	bne.n	8003b9a <__libc_init_array+0x2e>
 8003b8e:	bd70      	pop	{r4, r5, r6, pc}
 8003b90:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b94:	4798      	blx	r3
 8003b96:	3601      	adds	r6, #1
 8003b98:	e7ee      	b.n	8003b78 <__libc_init_array+0xc>
 8003b9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b9e:	4798      	blx	r3
 8003ba0:	3601      	adds	r6, #1
 8003ba2:	e7f2      	b.n	8003b8a <__libc_init_array+0x1e>
 8003ba4:	08003bf0 	.word	0x08003bf0
 8003ba8:	08003bf0 	.word	0x08003bf0
 8003bac:	08003bf0 	.word	0x08003bf0
 8003bb0:	08003bf4 	.word	0x08003bf4

08003bb4 <_init>:
 8003bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bb6:	bf00      	nop
 8003bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bba:	bc08      	pop	{r3}
 8003bbc:	469e      	mov	lr, r3
 8003bbe:	4770      	bx	lr

08003bc0 <_fini>:
 8003bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bc2:	bf00      	nop
 8003bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bc6:	bc08      	pop	{r3}
 8003bc8:	469e      	mov	lr, r3
 8003bca:	4770      	bx	lr
